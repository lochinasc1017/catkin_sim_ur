/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2020-06-07 10:38:39.600565
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49;
x0=IKsin(j[0]);
x1=IKcos(j[2]);
x2=IKsin(j[1]);
x3=IKcos(j[1]);
x4=IKsin(j[2]);
x5=IKsin(j[3]);
x6=IKcos(j[3]);
x7=IKcos(j[0]);
x8=IKsin(j[4]);
x9=IKcos(j[4]);
x10=IKcos(j[5]);
x11=IKsin(j[5]);
x12=((0.39225)*x7);
x13=((0.09465)*x7);
x14=((1.0)*x0);
x15=((0.09465)*x0);
x16=((0.0823)*x5);
x17=((1.0)*x7);
x18=((0.39225)*x0);
x19=((1.0)*x6);
x20=((1.0)*x5);
x21=((0.0823)*x6);
x22=((0.0823)*x9);
x23=((1.0)*x9);
x24=((0.425)*x3);
x25=(x1*x3);
x26=((-1.0)*x6);
x27=(x2*x4);
x28=(x3*x4);
x29=((-1.0)*x5);
x30=(x1*x2);
x31=(x17*x8);
x32=(x14*x8);
x33=(x14*x27);
x34=(x17*x25);
x35=(x30+x28);
x36=((((-1.0)*x27))+(((1.0)*x25)));
x37=((((-1.0)*x33))+((x0*x25)));
x38=((((-1.0)*x34))+((x27*x7)));
x39=(x14*(((((-1.0)*x30))+(((-1.0)*x28)))));
x40=(x17*((x30+x28)));
x41=(x37*x6);
x42=((((-1.0)*x20*x36))+(((-1.0)*x19*x35)));
x43=(((x26*x36))+((x29*(((((-1.0)*x30))+(((-1.0)*x28)))))));
x44=(x41+((x39*x5)));
x45=(((x40*x5))+((x38*x6)));
x46=(x45*x9);
x47=(x44*x9);
x48=(((x20*(((((-1.0)*x34))+((x17*x27))))))+(((-1.0)*x19*x40)));
x49=(((x26*x39))+((x29*(((((-1.0)*x14*x25))+x33)))));
eerot[0]=((((-1.0)*x17*x9))+((x8*(((((-1.0)*x20*x39))+(((-1.0)*x19*x37)))))));
eerot[1]=(((x11*x49))+((x10*((x31+(((-1.0)*x23*x44)))))));
eerot[2]=(((x10*x49))+((x11*(((((-1.0)*x31))+x47)))));
eetrans[0]=(((x6*((((x15*x30))+((x15*x28))))))+((x18*x27))+(((-1.0)*x0*x24))+(((-0.10915)*x7))+(((-1.0)*x18*x25))+((x5*(((((-1.0)*x15*x27))+((x15*x25))))))+(((-1.0)*x22*x7))+((x8*(((((-1.0)*x16*x39))+(((-1.0)*x21*x37)))))));
eerot[3]=(((x8*(((((-1.0)*x20*x40))+(((-1.0)*x19*x38))))))+(((-1.0)*x14*x9)));
eerot[4]=(((x11*x48))+((x10*((x32+(((-1.0)*x23*x45)))))));
eerot[5]=(((x11*(((((-1.0)*x32))+x46))))+((x10*x48)));
IkReal x50=((1.0)*x13);
eetrans[1]=((((-1.0)*x0*x22))+(((-1.0)*x12*x27))+(((-0.10915)*x0))+((x5*(((((-1.0)*x25*x50))+((x13*x27))))))+((x12*x25))+((x6*(((((-1.0)*x30*x50))+(((-1.0)*x28*x50))))))+((x24*x7))+((x8*(((((-1.0)*x16*x40))+(((-1.0)*x21*x38)))))));
eerot[6]=(x42*x8);
eerot[7]=(((x11*x43))+((x10*x42*x9)));
eerot[8]=(((x10*x43))+((x11*x9*((((x35*x6))+((x36*x5)))))));
eetrans[2]=((0.08916)+(((-0.39225)*x30))+((x6*(((((-0.09465)*x25))+(((0.09465)*x27))))))+(((-0.425)*x2))+((x8*(((((-1.0)*x16*x36))+(((-1.0)*x21*x35))))))+(((-0.39225)*x28))+((x5*(((((0.09465)*x28))+(((0.09465)*x30)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.0)*r01);
new_r01=((-1.0)*r02);
new_r02=r00;
new_px=(px+(((-0.0823)*r00)));
new_r10=((-1.0)*r11);
new_r11=((-1.0)*r12);
new_r12=r10;
new_py=((((-0.0823)*r10))+py);
new_r20=((-1.0)*r21);
new_r21=((-1.0)*r22);
new_r22=r20;
new_pz=((-0.08916)+pz+(((-0.0823)*r20)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x51=((1.0)*px);
IkReal x52=((1.0)*pz);
IkReal x53=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x53))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x52)));
rxp0_2=((((-1.0)*r10*x51))+((py*r00)));
rxp1_0=((((-1.0)*r21*x53))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x52)));
rxp1_2=((((-1.0)*r11*x51))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x53)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x52)));
rxp2_2=((((-1.0)*r12*x51))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x54=((0.1893)*npx);
IkReal x55=((0.1893)*npy);
IkReal x56=((0.09465)*r22);
IkReal x57=((0.09465)*r21);
IkReal x58=((-0.09465)*r20);
IkReal x59=((-1.0)*r20);
IkReal x60=((-1.0)*rxp0_2);
IkReal x61=((-0.09465)*r21);
IkReal x62=((-1.0)*r21);
IkReal x63=((-1.0)*rxp1_2);
IkReal x64=((-1.0)*npx);
IkReal x65=((-1.0)*r22);
IkReal x66=((-1.0)*npz);
matrixinvcoeffs[0]=x58;
matrixinvcoeffs[1]=x54;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=npx;
matrixinvcoeffs[10]=x59;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=x60;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x58;
matrixinvcoeffs[19]=x54;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=npx;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=0;
matrixinvcoeffs[27]=x59;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=x60;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x61;
matrixinvcoeffs[33]=x55;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=npy;
matrixinvcoeffs[42]=x62;
matrixinvcoeffs[43]=0;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=x63;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x61;
matrixinvcoeffs[51]=x55;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=npy;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=0;
matrixinvcoeffs[59]=x62;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=x63;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=npz;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=x65;
matrixinvcoeffs[76]=x56;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=((-1.0)*rxp2_2);
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=x66;
matrixinvcoeffs[90]=r22;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x56;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=rxp2_2;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=r21;
matrixinvcoeffs[101]=npy;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=x63;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x61;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=r21;
matrixinvcoeffs[119]=npy;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=x63;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x57;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=x59;
matrixinvcoeffs[133]=x64;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=rxp0_2;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=((0.09465)*r20);
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=x59;
matrixinvcoeffs[151]=x64;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=rxp0_2;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x58;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=x65;
matrixinvcoeffs[165]=x66;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=rxp2_2;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x56;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=x65;
matrixinvcoeffs[183]=x66;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=rxp2_2;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=((-0.09465)*r22);
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=npy;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=0;
matrixinvcoeffs[203]=x62;
matrixinvcoeffs[204]=x57;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x63;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=((-1.0)*npy);
matrixinvcoeffs[218]=r21;
matrixinvcoeffs[219]=0;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x57;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=rxp1_2;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=x64;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=0;
matrixinvcoeffs[235]=r20;
matrixinvcoeffs[236]=x58;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=rxp0_2;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=npx;
matrixinvcoeffs[250]=x59;
matrixinvcoeffs[251]=0;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x58;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=x60;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_8=matrixinvcoeffs[132], gclwh4_11=matrixinvcoeffs[180], gclwh4_14=matrixinvcoeffs[228], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_9=matrixinvcoeffs[149], gclwh5_10=matrixinvcoeffs[165], gclwh5_15=matrixinvcoeffs[245], gclwh6_2=matrixinvcoeffs[38], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_11=matrixinvcoeffs[182], gclwh6_12=matrixinvcoeffs[198], gclwh7_0=matrixinvcoeffs[7], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_10=matrixinvcoeffs[167], gclwh7_13=matrixinvcoeffs[215], gclwh8_2=matrixinvcoeffs[40], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_11=matrixinvcoeffs[184], gclwh8_12=matrixinvcoeffs[200], gclwh9_0=matrixinvcoeffs[9], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_10=matrixinvcoeffs[169], gclwh9_13=matrixinvcoeffs[217], gclwh10_2=matrixinvcoeffs[42], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_11=matrixinvcoeffs[186], gclwh10_12=matrixinvcoeffs[202], gclwh11_0=matrixinvcoeffs[11], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_10=matrixinvcoeffs[171], gclwh11_13=matrixinvcoeffs[219], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_8=matrixinvcoeffs[140], gclwh12_11=matrixinvcoeffs[188], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_9=matrixinvcoeffs[157], gclwh13_10=matrixinvcoeffs[173], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_8=matrixinvcoeffs[142], gclwh14_11=matrixinvcoeffs[190], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_9=matrixinvcoeffs[159], gclwh15_10=matrixinvcoeffs[175], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x67=pz*pz;
IkReal x68=pp*pp;
IkReal x69=((0.1893)*pz);
IkReal x70=((1.7)*pz);
IkReal x71=(gclwh15_9*npx);
IkReal x72=(gclwh6_11*r21);
IkReal x73=(pp*r22);
IkReal x74=((0.00702803935125)*r21);
IkReal x75=(gclwh5_9*npz);
IkReal x76=(gclwh8_11*r20);
IkReal x77=(npy*pz);
IkReal x78=((3.60823078949063e-5)*r22);
IkReal x79=(gclwh14_3*rxp0_2);
IkReal x80=((0.000977833645875)*r20);
IkReal x81=(npz*pz);
IkReal x82=((0.000977833645875)*r21);
IkReal x83=(gclwh10_12*r22);
IkReal x84=(gclwh10_2*rxp2_2);
IkReal x85=((0.00076243651125)*rxp1_2);
IkReal x86=((0.00600991575645741)*r20);
IkReal x87=((0.154705425)*rxp1_2);
IkReal x88=((0.017917245)*r21);
IkReal x89=(gclwh6_11*rxp1_2);
IkReal x90=((0.3786)*rxp1_2);
IkReal x91=(gclwh7_0*rxp1_2);
IkReal x92=((0.7572)*rxp1_2);
IkReal x93=((0.154705425)*rxp2_2);
IkReal x94=((2.0)*gclwh11_10);
IkReal x95=(gclwh12_8*r21);
IkReal x96=((0.81725)*pp);
IkReal x97=(pp*pz);
IkReal x98=(gclwh14_2*r20);
IkReal x99=(pp*r21);
IkReal x100=((2.0)*gclwh4_11);
IkReal x101=(gclwh8_12*r20);
IkReal x102=(npx*pz);
IkReal x103=(gclwh14_8*rxp0_2);
IkReal x104=((0.1893)*rxp2_2);
IkReal x105=(gclwh5_9*rxp2_2);
IkReal x106=((0.020662095)*rxp1_2);
IkReal x107=((0.007321434238125)*r21);
IkReal x108=((1.6345)*pz);
IkReal x109=((0.0089586225)*pz);
IkReal x110=(gclwh13_0*r21);
IkReal x111=(gclwh5_9*r22);
IkReal x112=(gclwh11_10*r22);
IkReal x113=(gclwh11_13*r22);
IkReal x114=((1.0)*r21);
IkReal x115=((0.3786)*rxp0_2);
IkReal x116=(gclwh14_14*rxp0_2);
IkReal x117=(pp*r20);
IkReal x118=((0.00195566729175)*r22);
IkReal x119=(gclwh15_10*rxp0_2);
IkReal x120=(gclwh14_8*r20);
IkReal x121=(gclwh12_8*rxp1_2);
IkReal x122=((2.0)*gclwh9_10);
IkReal x123=((2.0)*gclwh15_10);
IkReal x124=(gclwh5_15*rxp2_2);
IkReal x125=((2.0)*gclwh13_10);
IkReal x126=((0.00702803935125)*r20);
IkReal x127=(gclwh13_9*r21);
IkReal x128=(gclwh5_0*r22);
IkReal x129=((0.01464286847625)*r20);
IkReal x130=(gclwh15_1*r20);
IkReal x131=((0.000977833645875)*r22);
IkReal x132=((0.0089586225)*r20);
IkReal x133=((2.0)*gclwh10_11);
IkReal x134=(gclwh5_10*r22);
IkReal x135=((2.0)*pp);
IkReal x136=(gclwh15_9*r20);
IkReal x137=(gclwh1_3*r20);
IkReal x138=((0.00195566729175)*r20);
IkReal x139=(gclwh4_3*rxp2_2);
IkReal x140=((0.2183)*gclwh13_15);
IkReal x141=((2.0)*gclwh7_10);
IkReal x142=(gclwh15_0*r20);
IkReal x143=(gclwh9_0*r20);
IkReal x144=(gclwh15_15*rxp0_2);
IkReal x145=(gclwh2_1*r21);
IkReal x146=((4.0)*gclwh11_10);
IkReal x147=((0.30941085)*rxp0_2);
IkReal x148=(gclwh9_0*rxp0_2);
IkReal x149=(gclwh5_10*rxp2_2);
IkReal x150=((0.2183)*gclwh12_14);
IkReal x151=((0.2183)*gclwh14_14);
IkReal x152=(gclwh4_2*rxp2_2);
IkReal x153=((0.03275)*pp);
IkReal x154=((0.006199575)*rxp1_2);
IkReal x155=(gclwh12_2*rxp1_2);
IkReal x156=(gclwh5_0*rxp2_2);
IkReal x157=((3.60823078949063e-5)*r21);
IkReal x158=(gclwh14_11*rxp0_2);
IkReal x159=((0.020662095)*rxp0_2);
IkReal x160=(gclwh14_8*npx);
IkReal x161=((4.0)*gclwh9_10);
IkReal x162=((0.00195566729175)*r21);
IkReal x163=(gclwh8_12*rxp0_2);
IkReal x164=((0.01464286847625)*r21);
IkReal x165=((0.3786)*rxp2_2);
IkReal x166=((0.01464286847625)*r22);
IkReal x167=(gclwh7_13*r21);
IkReal x168=((4.0)*gclwh7_10);
IkReal x169=(gclwh13_0*rxp1_2);
IkReal x170=((0.1893)*rxp1_2);
IkReal x171=(gclwh6_2*r21);
IkReal x172=(gclwh5_1*rxp2_2);
IkReal x173=(gclwh8_2*rxp0_2);
IkReal x174=(gclwh9_10*r20);
IkReal x175=((4.0)*pp);
IkReal x176=(gclwh15_1*rxp0_2);
IkReal x177=(gclwh9_13*r20);
IkReal x178=((0.0089586225)*r21);
IkReal x179=(gclwh0_0*r20);
IkReal x180=(gclwh10_11*r22);
IkReal x181=((2.0)*gclwh12_11);
IkReal x182=((0.0655)*pz);
IkReal x183=((0.006199575)*rxp2_2);
IkReal x184=(gclwh12_14*rxp1_2);
IkReal x185=(gclwh15_0*rxp0_2);
IkReal x186=((2.0)*npx);
IkReal x187=(gclwh9_13*rxp0_2);
IkReal x188=((1.0)*pp);
IkReal x189=((4.0)*gclwh10_11);
IkReal x190=(gclwh15_9*rxp0_2);
IkReal x191=((3.60823078949063e-5)*r20);
IkReal x192=((0.00702803935125)*r22);
IkReal x193=(gclwh8_2*r20);
IkReal x194=((0.2183)*gclwh5_15);
IkReal x195=(gclwh10_2*r22);
IkReal x196=(gclwh5_1*r22);
IkReal x197=(gclwh13_9*rxp1_2);
IkReal x198=((2.0)*gclwh5_10);
IkReal x199=((0.020662095)*rxp2_2);
IkReal x200=(gclwh4_8*r22);
IkReal x201=((0.017917245)*r20);
IkReal x202=(gclwh7_0*r21);
IkReal x203=((0.00600991575645741)*r21);
IkReal x204=(gclwh11_0*r22);
IkReal x205=(gclwh6_12*r21);
IkReal x206=((0.2183)*gclwh15_15);
IkReal x207=(gclwh11_0*rxp2_2);
IkReal x208=((0.2183)*gclwh4_14);
IkReal x209=(gclwh4_14*rxp2_2);
IkReal x210=(gclwh6_2*rxp1_2);
IkReal x211=((0.1893)*rxp0_2);
IkReal x212=(gclwh4_8*rxp2_2);
IkReal x213=((0.12699240901125)*rxp1_2);
IkReal x214=(gclwh14_2*rxp0_2);
IkReal x215=(gclwh4_3*r22);
IkReal x216=((0.1893)*pp);
IkReal x217=(gclwh13_15*rxp1_2);
IkReal x218=(gclwh1_2*r20);
IkReal x219=((2.0)*gclwh14_11);
IkReal x220=(gclwh4_11*r22);
IkReal x221=((0.020662095)*x116);
IkReal x222=(gclwh6_5*x82);
IkReal x223=(gclwh8_5*x80);
IkReal x224=(gclwh12_14*x106);
IkReal x225=(gclwh10_5*x131);
IkReal x226=(gclwh4_14*x199);
IkReal x227=((0.0089586225)*x72);
IkReal x228=(gclwh12_11*x170);
IkReal x229=((0.017917245)*x121);
IkReal x230=((0.017917245)*x212);
IkReal x231=(gclwh4_11*x104);
IkReal x232=((0.0089586225)*x76);
IkReal x233=((0.1893)*x158);
IkReal x234=((0.0089586225)*x180);
IkReal x235=((0.017917245)*x103);
IkReal x236=((0.017917245)*x105);
IkReal x237=((0.0089586225)*x112);
IkReal x238=((0.1893)*x119);
IkReal x239=((0.017917245)*x197);
IkReal x240=(gclwh9_10*x132);
IkReal x241=((0.017917245)*x190);
IkReal x242=(gclwh13_10*x170);
IkReal x243=(gclwh7_10*x178);
IkReal x244=(gclwh5_10*x104);
IkReal x245=((0.020662095)*x144);
IkReal x246=(gclwh7_7*x82);
IkReal x247=(gclwh9_7*x80);
IkReal x248=(gclwh13_15*x106);
IkReal x249=((0.020662095)*x124);
IkReal x250=(gclwh11_7*x131);
IkReal x251=(gclwh10_5*x199);
IkReal x252=(gclwh8_5*x159);
IkReal x253=(gclwh14_14*x80);
IkReal x254=(gclwh6_5*x106);
IkReal x255=(gclwh4_14*x131);
IkReal x256=(gclwh12_14*x82);
IkReal x257=(gclwh8_11*x211);
IkReal x258=((0.000847933619625)*x95);
IkReal x259=(gclwh12_11*x178);
IkReal x260=(gclwh10_11*x104);
IkReal x261=((0.0089586225)*x220);
IkReal x262=((0.000847933619625)*x200);
IkReal x263=((0.1893)*x89);
IkReal x264=(gclwh14_11*x132);
IkReal x265=((0.000847933619625)*x120);
IkReal x266=(gclwh9_10*x211);
IkReal x267=(gclwh13_10*x178);
IkReal x268=(gclwh11_10*x104);
IkReal x269=((0.000847933619625)*x136);
IkReal x270=((0.0089586225)*x134);
IkReal x271=((0.000847933619625)*x111);
IkReal x272=(gclwh7_10*x170);
IkReal x273=((0.000847933619625)*x127);
IkReal x274=(gclwh15_10*x132);
IkReal x275=(gclwh5_15*x131);
IkReal x276=(gclwh7_7*x106);
IkReal x277=(gclwh13_15*x82);
IkReal x278=(gclwh15_15*x80);
IkReal x279=(gclwh9_7*x159);
IkReal x280=(gclwh11_7*x199);
IkReal x281=((0.017917245)*x180);
IkReal x282=(gclwh14_11*x115);
IkReal x283=((0.017917245)*x76);
IkReal x284=((0.04132419)*x116);
IkReal x285=((0.04132419)*x184);
IkReal x286=((0.04132419)*x209);
IkReal x287=(gclwh4_11*x165);
IkReal x288=((0.017917245)*x72);
IkReal x289=(gclwh12_11*x90);
IkReal x290=((0.04132419)*x124);
IkReal x291=((0.04132419)*x217);
IkReal x292=((0.04132419)*x144);
IkReal x293=((0.017917245)*x174);
IkReal x294=(gclwh15_10*x115);
IkReal x295=((0.017917245)*x112);
IkReal x296=(gclwh7_10*x88);
IkReal x297=((0.3786)*x149);
IkReal x298=(gclwh13_10*x90);
IkReal x299=((0.3786)*x89);
IkReal x300=(gclwh14_11*x201);
IkReal x301=(gclwh14_14*x138);
IkReal x302=(gclwh4_14*x118);
IkReal x303=(gclwh12_14*x162);
IkReal x304=(gclwh14_8*x117);
IkReal x305=((2.0)*x67);
IkReal x306=((1.0)*x68);
IkReal x307=(r21*x68);
IkReal x308=((0.2183)*gclwh10_5*x81);
IkReal x309=((0.2183)*gclwh8_5*x102);
IkReal x310=((0.10915)*gclwh6_5*x99);
IkReal x311=((0.2183)*gclwh6_5*x77);
IkReal x312=((0.10915)*gclwh8_5*x117);
IkReal x313=((0.10915)*gclwh10_5*x73);
IkReal x314=(gclwh12_3*pp*x170);
IkReal x315=(x133*x81);
IkReal x316=(x109*x193);
IkReal x317=((2.0)*gclwh8_11*x102);
IkReal x318=(gclwh10_2*pz*x73);
IkReal x319=(x214*x69);
IkReal x320=(x193*x97);
IkReal x321=(gclwh4_3*pp*x104);
IkReal x322=(x109*x195);
IkReal x323=(x155*x69);
IkReal x324=((2.0)*gclwh6_11*x77);
IkReal x325=(x152*x69);
IkReal x326=(x216*x79);
IkReal x327=(x109*x171);
IkReal x328=(gclwh13_1*pp*x170);
IkReal x329=(x109*x204);
IkReal x330=(x109*x143);
IkReal x331=(gclwh5_1*pp*x104);
IkReal x332=(x185*x69);
IkReal x333=(gclwh11_0*pz*x73);
IkReal x334=(x141*x77);
IkReal x335=(x143*x97);
IkReal x336=(x81*x94);
IkReal x337=(x176*x216);
IkReal x338=(x102*x122);
IkReal x339=(x109*x202);
IkReal x340=(x169*x69);
IkReal x341=(x156*x69);
IkReal x342=((0.10915)*gclwh7_7*x99);
IkReal x343=((0.2183)*gclwh9_7*x102);
IkReal x344=((0.2183)*gclwh11_7*x81);
IkReal x345=((0.10915)*gclwh9_7*x117);
IkReal x346=((0.2183)*gclwh7_7*x77);
IkReal x347=((0.10915)*gclwh11_7*x73);
IkReal x348=((0.10915)*gclwh14_14*x117);
IkReal x349=(x208*x81);
IkReal x350=(x150*x77);
IkReal x351=((0.10915)*gclwh12_14*x99);
IkReal x352=(x102*x151);
IkReal x353=((0.10915)*gclwh4_14*x73);
IkReal x354=((0.09465)*gclwh4_8*x73);
IkReal x355=(x97*x98);
IkReal x356=(gclwh12_3*x307);
IkReal x357=(x210*x69);
IkReal x358=(gclwh3_3*x307);
IkReal x359=(x137*x68);
IkReal x360=(gclwh3_2*r21*x109);
IkReal x361=(x102*x219);
IkReal x362=(x160*x69);
IkReal x363=(x109*x98);
IkReal x364=((0.09465)*pp*x95);
IkReal x365=(x215*x68);
IkReal x366=(x109*x218);
IkReal x367=(x173*x69);
IkReal x368=(x100*x81);
IkReal x369=(gclwh4_2*r22*x109);
IkReal x370=(gclwh4_8*npz*x69);
IkReal x371=(gclwh12_2*r21*x109);
IkReal x372=(x69*x84);
IkReal x373=((0.09465)*x304);
IkReal x374=(x181*x77);
IkReal x375=(gclwh12_8*npy*x69);
IkReal x376=(x130*x68);
IkReal x377=(x69*x75);
IkReal x378=(gclwh5_0*pz*x73);
IkReal x379=(gclwh13_9*npy*x69);
IkReal x380=(x109*x128);
IkReal x381=(x110*x97);
IkReal x382=((0.09465)*gclwh15_9*x117);
IkReal x383=(x102*x123);
IkReal x384=(x109*x110);
IkReal x385=(x145*x68);
IkReal x386=(gclwh2_0*r21*x109);
IkReal x387=(x148*x69);
IkReal x388=(x207*x69);
IkReal x389=(gclwh0_1*r20*x68);
IkReal x390=(x109*x179);
IkReal x391=((0.09465)*gclwh5_9*x73);
IkReal x392=(x69*x91);
IkReal x393=((0.09465)*gclwh13_9*x99);
IkReal x394=(x109*x142);
IkReal x395=(x69*x71);
IkReal x396=(x198*x81);
IkReal x397=(x125*x77);
IkReal x398=((0.10915)*gclwh13_15*x99);
IkReal x399=((0.10915)*gclwh5_15*x73);
IkReal x400=(x102*x206);
IkReal x401=((0.10915)*gclwh15_15*x117);
IkReal x402=(x194*x81);
IkReal x403=(x140*x77);
IkReal x404=(x135*x76);
IkReal x405=(x133*x73);
IkReal x406=((4.0)*gclwh6_11*x77);
IkReal x407=((4.0)*gclwh8_11*x102);
IkReal x408=(x135*x72);
IkReal x409=(x189*x81);
IkReal x410=(x73*x94);
IkReal x411=(x168*x77);
IkReal x412=(x117*x122);
IkReal x413=(x141*x99);
IkReal x414=(x102*x161);
IkReal x415=(x146*x81);
IkReal x416=(x117*x219);
IkReal x417=((4.0)*gclwh12_11*x77);
IkReal x418=((4.0)*gclwh4_11*x81);
IkReal x419=(x117*x151);
IkReal x420=((0.4366)*gclwh12_14*x77);
IkReal x421=((0.4366)*gclwh4_14*x81);
IkReal x422=(x150*x99);
IkReal x423=((0.4366)*gclwh14_14*x102);
IkReal x424=(x208*x73);
IkReal x425=(gclwh6_2*npy*x305);
IkReal x426=(gclwh6_2*x114*x97);
IkReal x427=(gclwh10_2*npz*x305);
IkReal x428=(gclwh8_2*x186*x67);
IkReal x429=(gclwh7_0*npy*x305);
IkReal x430=(gclwh9_0*x186*x67);
IkReal x431=(gclwh11_0*npz*x305);
IkReal x432=(gclwh7_0*x114*x97);
IkReal x433=(gclwh12_2*npy*x305);
IkReal x434=(gclwh3_2*npy*x305);
IkReal x435=(gclwh1_2*x186*x67);
IkReal x436=(gclwh14_3*x186*x97);
IkReal x437=(gclwh4_2*npz*x305);
IkReal x438=(gclwh4_3*x135*x81);
IkReal x439=(gclwh12_2*x114*x97);
IkReal x440=((1.0)*x218*x97);
IkReal x441=(gclwh3_3*x135*x77);
IkReal x442=((1.0)*gclwh4_2*pz*x73);
IkReal x443=(gclwh1_3*x186*x97);
IkReal x444=(gclwh3_2*x114*x97);
IkReal x445=(gclwh12_3*x135*x77);
IkReal x446=(gclwh14_2*x186*x67);
IkReal x447=(gclwh14_3*r20*x306);
IkReal x448=(gclwh0_0*x186*x67);
IkReal x449=(gclwh2_0*npy*x305);
IkReal x450=(gclwh5_1*x135*x81);
IkReal x451=(gclwh13_1*x135*x77);
IkReal x452=(gclwh15_0*x186*x67);
IkReal x453=(gclwh2_1*x135*x77);
IkReal x454=(gclwh0_1*x186*x97);
IkReal x455=(gclwh5_0*npz*x305);
IkReal x456=(gclwh13_0*npy*x305);
IkReal x457=((1.0)*x179*x97);
IkReal x458=((1.0)*x142*x97);
IkReal x459=(gclwh2_0*x114*x97);
IkReal x460=(gclwh13_1*x114*x68);
IkReal x461=(x196*x306);
IkReal x462=(gclwh15_1*x186*x97);
IkReal x463=(x286+x285);
IkReal x464=(x290+x291);
IkReal x465=(x251+x252);
IkReal x466=(x224+x226);
IkReal x467=(x249+x248);
IkReal x468=(x279+x280);
IkReal x469=(x324+x232+x233+x234);
IkReal x470=(x334+x238+x237+x240);
IkReal x471=(x397+x396+x274+x272);
IkReal x472=(x374+x368+x264+x263);
IkReal x473=(x301+x419+x421+x420);
IkReal x474=(x308+x309+x310+x222);
IkReal x475=(x350+x348+x349+x253);
IkReal x476=(x278+x401+x403+x402);
IkReal x477=(x342+x343+x344+x246);
IkReal x478=(x383+x267+x266+x268+x270);
IkReal x479=(x361+x259+x257+x261+x260);
IkReal x480=(x315+x317+x228+x227+x231);
IkReal x481=(x338+x336+x243+x242+x244);
IkReal x482=(x351+x353+x352+x255+x256);
IkReal x483=(x399+x398+x277+x275+x400);
IkReal x484=(x346+x347+x345+x250+x247);
IkReal x485=(x302+x303+x424+x423+x422);
IkReal x486=(x300+x299+x416+x417+x418);
IkReal x487=(x311+x313+x312+x223+x225);
IkReal x488=(x289+x288+x287+x407+x409+x408);
IkReal x489=(x298+x296+x297+x413+x414+x415);
IkReal x490=(x293+x294+x295+x412+x410+x411);
IkReal x491=(x283+x282+x281+x405+x404+x406);
IkReal x492=(((x100*x73))+(((4.0)*gclwh14_11*x102))+(((0.017917245)*x220))+((x181*x99))+((gclwh12_11*x88))+((gclwh10_11*x165))+((gclwh8_11*x115)));
IkReal x493=(x325+x326+x327+x323+x235+x428+x427+x426);
IkReal x494=(x339+x337+x340+x341+x241+x430+x431+x432);
IkReal x495=(x320+x321+x322+x319+x318+x314+x316+x229+x230+x425);
IkReal x496=(x333+x332+x331+x330+x335+x328+x329+x239+x236+x429);
IkReal x497=(x395+x394+x391+x393+x392+x273+x271+x458+x459+x456+x457+x454+x455+x453+x462+x461+x460);
IkReal x498=(x355+x354+x357+x356+x359+x358+x360+x362+x363+x364+x365+x366+x258+x262+x433+x434+x435+x436+x437+x69);
IkReal x499=(x375+x373+x372+x371+x370+x369+x367+x265+x438+x439+x445+x444+x447+x446+x441+x440+x443+x442);
IkReal x500=(x386+x387+x384+x385+x382+x380+x381+x388+x389+x379+x378+x377+x376+x390+x269+x449+x448+x452+x450+x451+x69);
op[0]=((((-0.81725)*gclwh10_12*x73))+(((1.6345)*gclwh8_12*x102))+(((-1.0)*x487))+((gclwh6_12*x107))+(((-1.6345)*gclwh6_12*x77))+(((-0.007321434238125)*x83))+(((-1.0)*gclwh4_8*x93))+((x205*x96))+x466+x474+(((-0.007321434238125)*x101))+(((-1.0)*x101*x96))+(((0.154705425)*x103))+(((1.6345)*gclwh10_12*x81))+(((-1.0)*gclwh12_8*x87))+(((-1.0)*x221)));
op[1]=((((-1.0)*x493))+(((-1.0)*x480))+((gclwh10_11*x73))+(((-0.12699240901125)*x139))+(((-1.0)*gclwh12_3*x213))+x495+x469+(((-1.0)*x188*x72))+((pp*x76))+(((0.12699240901125)*x79)));
op[2]=((-0.17125635)+(((-1.0)*x488))+x491);
op[3]=((((-1.569)*gclwh8_2*x102))+((gclwh8_2*x126))+(((-0.160905)*x103))+(((0.7845)*gclwh8_2*x117))+(((-1.0)*gclwh6_2*x74))+((gclwh10_2*x192))+(((-0.7845)*gclwh6_2*x99))+(((-0.14850585)*x152))+(((-0.14850585)*x155))+(((-1.0)*x463))+(((0.14850585)*x214))+(((0.160905)*x121))+x284+(((-1.569)*gclwh10_2*x81))+(((0.7845)*gclwh10_2*x73))+(((0.160905)*x212))+(((1.569)*gclwh6_2*x77)));
op[4]=((((-0.0655)*gclwh6_12*x77))+(((0.0655)*gclwh8_12*x102))+(((-1.0)*x487))+(((0.0655)*gclwh10_12*x81))+(((0.03275)*gclwh6_12*x99))+(((-1.0)*x466))+(((-0.000293394886875)*x101))+x221+((gclwh4_8*x183))+(((-0.000293394886875)*x83))+x474+(((-0.006199575)*x103))+(((0.006199575)*x121))+(((-0.03275)*gclwh10_12*x73))+(((0.000293394886875)*x205))+(((-1.0)*x101*x153)));
op[5]=((((-1.0)*gclwh10_11*x73))+(((-1.0)*x493))+(((-1.0)*x469))+x480+x495+(((-1.0)*gclwh12_3*x85))+(((-1.0)*x188*x76))+(((-0.00076243651125)*x139))+(((0.00076243651125)*x79))+((pp*x72)));
op[6]=((((0.12699240901125)*x176))+(((-1.0)*x494))+(((-1.0)*gclwh9_10*x117))+((gclwh7_10*x99))+(((-1.0)*x470))+(((-1.0)*gclwh11_10*x73))+x481+x496+(((-1.0)*gclwh13_1*x213))+(((-0.12699240901125)*x172)));
op[7]=(((gclwh7_13*x107))+(((-0.81725)*gclwh11_13*x73))+(((0.154705425)*x190))+(((-1.0)*gclwh13_9*x87))+(((1.6345)*gclwh9_13*x102))+(((-1.0)*x484))+(((-1.0)*x177*x96))+((x167*x96))+x467+x477+(((-1.0)*gclwh5_9*x93))+(((-0.007321434238125)*x113))+(((-1.0)*x245))+(((-0.007321434238125)*x177))+(((-1.6345)*gclwh7_13*x77))+(((1.6345)*gclwh11_13*x81)));
op[8]=(((gclwh11_0*x192))+(((-0.160905)*x197))+(((-1.0)*gclwh7_0*x74))+(((-0.160905)*x105))+(((0.14850585)*x185))+(((0.160905)*x190))+(((1.569)*gclwh7_0*x77))+(((-1.0)*x292))+(((-0.14850585)*x156))+(((-0.14850585)*x169))+((gclwh9_0*x126))+x464+(((-1.569)*gclwh9_0*x102))+(((-0.7845)*gclwh7_0*x99))+(((0.7845)*gclwh11_0*x73))+(((-1.569)*gclwh11_0*x81))+(((0.7845)*gclwh9_0*x117)));
op[9]=((-0.17125635)+(((-1.0)*x489))+x490);
op[10]=((((-1.0)*x494))+((gclwh11_10*x73))+(((-1.0)*x481))+(((-1.0)*gclwh7_10*x99))+x496+x470+(((0.00076243651125)*x176))+((gclwh9_10*x117))+(((-0.00076243651125)*x172))+(((-1.0)*gclwh13_1*x85)));
op[11]=((((0.000293394886875)*x167))+(((-0.03275)*gclwh9_13*x117))+(((0.03275)*gclwh7_13*x99))+(((-1.0)*x484))+(((-0.006199575)*x190))+(((-0.0655)*gclwh7_13*x77))+(((0.0655)*gclwh11_13*x81))+(((-0.03275)*gclwh11_13*x73))+(((-1.0)*x467))+((gclwh13_9*x154))+x245+(((-0.000293394886875)*x113))+x477+(((-0.000293394886875)*x177))+(((0.006199575)*x105))+(((0.0655)*gclwh9_13*x102)));
op[12]=((((-1.0)*x95*x96))+(((1.6345)*gclwh12_8*x77))+(((-0.007321434238125)*x200))+(((0.154705425)*x163))+(((-1.6345)*gclwh14_8*x102))+(((-0.007321434238125)*x95))+(((-1.0)*x475))+(((-0.81725)*gclwh4_8*x73))+((gclwh10_12*x93))+x482+x465+(((0.007321434238125)*x120))+((x120*x96))+(((1.6345)*gclwh4_8*x81))+(((-1.0)*x254))+(((-1.0)*gclwh6_12*x87)));
op[13]=((-0.679811285)+((gclwh3_3*x203))+(((1.341705325)*gclwh12_3*x77))+(((-1.0)*x499))+(((1.341705325)*gclwh4_3*x81))+(((-1.0)*gclwh12_3*x203))+(((-0.66189404)*gclwh12_3*x99))+(((-1.0)*x479))+(((-0.66189404)*gclwh4_3*x73))+(((-1.341705325)*gclwh14_3*x102))+(((-0.679811285)*gclwh1_3*x117))+(((-0.679811285)*gclwh3_3*x99))+(((1.341705325)*gclwh3_3*x77))+x498+x472+((gclwh1_3*x86))+((gclwh14_3*x86))+((gclwh14_11*x117))+(((-1.0)*gclwh12_11*x99))+(((1.341705325)*gclwh1_3*x102))+(((-0.00600991575645741)*x215))+(((-1.0)*gclwh4_11*x73))+(((0.66189404)*gclwh14_3*x117)));
op[14]=((-0.07735732)+(((-1.0)*x492))+x486);
op[15]=((((-0.7845)*gclwh4_2*x73))+((x160*x70))+(((-0.85)*x304))+(((-0.007614829125)*x120))+(((0.85)*gclwh4_8*x73))+(((-1.0)*gclwh4_2*x192))+(((1.569)*gclwh3_2*x77))+(((0.7845)*pp*x98))+(((-1.0)*x485))+(((-0.14850585)*x84))+(((1.569)*gclwh4_2*x81))+((gclwh3_2*x74))+(((-0.7845)*gclwh12_2*x99))+(((-1.0)*gclwh4_8*npz*x70))+(((1.569)*gclwh12_2*x77))+(((0.00702803935125)*x98))+(((0.85)*pp*x95))+(((0.14850585)*x210))+(((-0.14850585)*x173))+(((0.007614829125)*x95))+x473+(((-0.7845)*gclwh1_2*x117))+(((-0.7845)*gclwh3_2*x99))+(((-1.0)*gclwh12_2*x74))+((gclwh1_2*x126))+(((-1.0)*gclwh12_8*npy*x70))+(((1.569)*gclwh1_2*x102))+(((-1.569)*gclwh14_2*x102))+(((0.007614829125)*x200)));
op[16]=((((-1.0)*gclwh6_12*x154))+(((-0.0655)*gclwh4_8*x81))+(((-1.0)*x482))+(((0.03275)*gclwh4_8*x73))+(((-0.0655)*gclwh12_8*x77))+(((-0.000293394886875)*x120))+(((0.0655)*gclwh14_8*x102))+(((-0.03275)*x304))+((x153*x95))+(((0.006199575)*x163))+((gclwh10_12*x183))+(((0.000293394886875)*x95))+x465+x475+(((0.000293394886875)*x200))+(((-1.0)*x254)));
op[17]=((0.012986285)+(((0.008055325)*gclwh1_3*x102))+(((-0.00493096)*gclwh14_3*x117))+(((-1.0)*gclwh14_11*x117))+(((0.008055325)*gclwh3_3*x77))+(((-1.0)*x499))+(((-0.008055325)*gclwh14_3*x102))+(((-1.0)*x472))+(((-0.012986285)*gclwh3_3*x99))+(((0.008055325)*gclwh12_3*x77))+x498+x479+((gclwh3_3*x157))+(((0.00493096)*gclwh12_3*x99))+(((0.00493096)*gclwh4_3*x73))+(((3.60823078949063e-5)*x137))+(((-1.0)*gclwh4_3*x78))+((gclwh14_3*x191))+(((-0.012986285)*gclwh1_3*x117))+((gclwh12_11*x99))+((gclwh4_11*x73))+(((0.008055325)*gclwh4_3*x81))+(((-1.0)*gclwh12_3*x157)));
op[18]=((0.679811285)+((gclwh13_1*x203))+(((-1.0)*x497))+(((0.00600991575645741)*x196))+(((-1.341705325)*gclwh5_1*x81))+(((-0.66189404)*gclwh15_1*x117))+(((0.00600991575645741)*x145))+(((-1.0)*gclwh15_1*x86))+(((-0.679811285)*gclwh0_1*x117))+(((-1.0)*x478))+(((-1.341705325)*gclwh13_1*x77))+(((-1.0)*gclwh5_10*x73))+(((1.341705325)*gclwh15_1*x102))+(((-1.0)*gclwh13_10*x99))+((gclwh0_1*x86))+((gclwh15_10*x117))+x471+(((1.341705325)*gclwh0_1*x102))+(((0.66189404)*gclwh13_1*x99))+x500+(((1.341705325)*gclwh2_1*x77))+(((-0.679811285)*gclwh2_1*x99))+(((0.66189404)*gclwh5_1*x73)));
op[19]=((((-1.0)*x483))+(((-1.0)*x108*x75))+(((-1.0)*x468))+(((-0.154705425)*x187))+x276+(((-1.0)*gclwh11_13*x93))+((x108*x71))+x476+(((-0.007321434238125)*x136))+((x127*x96))+(((-1.6345)*gclwh13_9*x77))+((gclwh7_13*x87))+(((0.007321434238125)*x111))+((gclwh13_9*x107))+(((0.81725)*gclwh5_9*x73))+(((-1.0)*x136*x96)));
op[20]=((((-0.7845)*gclwh15_0*x117))+((gclwh15_15*x138))+(((-0.85)*gclwh15_9*x117))+((gclwh0_0*x126))+(((-0.14850585)*x91))+(((-0.007614829125)*x136))+(((0.007614829125)*x111))+(((-0.7845)*gclwh2_0*x99))+(((-1.0)*x70*x75))+(((-1.0)*x194*x73))+(((0.4366)*gclwh13_15*x77))+(((0.007614829125)*x127))+(((1.569)*gclwh0_0*x102))+(((1.569)*gclwh15_0*x102))+(((-1.0)*x140*x99))+(((-1.0)*gclwh13_9*npy*x70))+(((0.14850585)*x148))+(((-0.7845)*gclwh0_0*x117))+((gclwh2_0*x74))+(((-1.0)*gclwh15_0*x126))+((gclwh13_0*x74))+(((-1.0)*gclwh13_15*x162))+(((1.569)*gclwh2_0*x77))+(((0.85)*gclwh5_9*x73))+(((-1.0)*gclwh5_15*x118))+(((-1.569)*gclwh5_0*x81))+((x70*x71))+(((0.4366)*gclwh5_15*x81))+(((0.85)*gclwh13_9*x99))+(((0.7845)*gclwh5_0*x73))+(((0.00702803935125)*x128))+(((0.14850585)*x207))+((x117*x206))+(((0.7845)*gclwh13_0*x99))+(((-1.569)*gclwh13_0*x77))+(((-0.4366)*gclwh15_15*x102)));
op[21]=((-0.07735732)+(((-4.0)*gclwh5_10*x81))+(((-1.0)*gclwh7_10*x90))+((x198*x73))+((gclwh11_10*x165))+((x125*x99))+(((-4.0)*gclwh13_10*x77))+(((-1.0)*x117*x123))+(((-1.0)*gclwh15_10*x201))+(((0.017917245)*x134))+(((4.0)*gclwh15_10*x102))+((gclwh9_10*x115))+((gclwh13_10*x88)));
op[22]=((-0.012986285)+((gclwh5_1*x78))+(((0.008055325)*gclwh15_1*x102))+(((0.008055325)*gclwh2_1*x77))+(((3.60823078949063e-5)*x145))+(((-0.008055325)*gclwh5_1*x81))+(((-1.0)*x497))+(((-1.0)*gclwh15_10*x117))+(((0.008055325)*gclwh0_1*x102))+(((-0.00493096)*gclwh5_1*x73))+(((-0.012986285)*gclwh2_1*x99))+(((-1.0)*x471))+((gclwh5_10*x73))+(((-0.012986285)*gclwh0_1*x117))+x478+(((0.00493096)*gclwh15_1*x117))+x500+((gclwh0_1*x191))+(((-0.00493096)*gclwh13_1*x99))+(((-3.60823078949063e-5)*x130))+((gclwh13_10*x99))+(((-0.008055325)*gclwh13_1*x77))+((gclwh13_1*x157)));
op[23]=((((0.0655)*gclwh13_9*x77))+((x182*x75))+(((-0.006199575)*x187))+(((0.03275)*gclwh15_9*x117))+(((-0.03275)*gclwh13_9*x99))+(((-0.000293394886875)*x127))+((gclwh7_13*x154))+(((-1.0)*x476))+(((0.000293394886875)*x136))+(((-1.0)*x468))+(((-1.0)*x182*x71))+x276+(((-0.000293394886875)*x111))+x483+(((-0.03275)*gclwh5_9*x73))+(((-1.0)*gclwh11_13*x183)));
op[24]=((-0.35681135)+(((-1.0)*x488))+x491);
op[25]=(((gclwh8_2*x129))+(((-3.269)*gclwh10_2*x81))+(((-3.269)*gclwh8_2*x102))+((gclwh10_2*x166))+(((-1.0)*gclwh6_2*x164))+(((-1.0)*x463))+(((3.269)*gclwh6_2*x77))+(((-0.30941085)*x155))+(((-0.30941085)*x152))+x284+((gclwh14_2*x147))+(((-1.6345)*gclwh6_2*x99))+(((1.6345)*gclwh8_2*x117))+(((1.6345)*gclwh10_2*x73)));
op[26]=((((0.08264838)*x116))+(((1.569)*gclwh10_12*x73))+(((1.569)*pp*x101))+(((0.0140560787025)*x101))+(((-3.138)*gclwh8_12*x102))+(((-3.138)*gclwh10_12*x81))+(((-0.0140560787025)*x205))+(((-1.569)*gclwh6_12*x99))+(((0.0140560787025)*x83))+(((-0.08264838)*x184))+(((-0.08264838)*x209))+(((3.138)*gclwh6_12*x77)));
op[27]=((((-1.0)*x175*x76))+(((-0.03583449)*x76))+(((0.7572)*gclwh4_11*rxp2_2))+((x175*x72))+(((-0.03583449)*x180))+(((0.03583449)*x72))+(((-0.7572)*x158))+(((8.0)*gclwh10_11*x81))+(((-1.0)*x189*x73))+(((-8.0)*gclwh6_11*x77))+((gclwh12_11*x92))+(((8.0)*gclwh8_11*x102)));
op[28]=((-0.01429865)+(((-1.0)*x491))+x488);
op[29]=((((0.00058678977375)*x195))+(((0.00058678977375)*x193))+(((0.0655)*gclwh8_2*x117))+(((0.01239915)*x214))+(((-0.131)*gclwh8_2*x102))+x463+(((-0.131)*gclwh10_2*x81))+(((-0.0655)*gclwh6_2*x99))+(((-1.0)*x284))+(((0.131)*gclwh6_2*x77))+(((-0.00058678977375)*x171))+(((-0.01239915)*x152))+(((-0.01239915)*x155))+(((0.0655)*gclwh10_2*x73)));
op[30]=((((-3.269)*gclwh9_0*x102))+(((-1.6345)*gclwh7_0*x99))+(((1.6345)*gclwh11_0*x73))+(((-1.0)*x292))+(((-0.30941085)*x169))+(((3.269)*gclwh7_0*x77))+(((-1.0)*gclwh7_0*x164))+(((-0.30941085)*x156))+(((1.6345)*gclwh9_0*x117))+((gclwh9_0*x129))+x464+((gclwh15_0*x147))+(((-3.269)*gclwh11_0*x81))+((gclwh11_0*x166)));
op[31]=((-0.35681135)+(((-1.0)*x489))+x490);
op[32]=(((x146*x73))+(((0.03583449)*x174))+(((-1.0)*gclwh13_10*x92))+((x117*x161))+(((-8.0)*gclwh9_10*x102))+(((-0.03583449)*gclwh7_10*r21))+(((0.03583449)*x112))+(((8.0)*gclwh7_10*x77))+(((-0.7572)*x149))+(((-8.0)*gclwh11_10*x81))+(((-1.0)*x168*x99))+(((0.7572)*x119)));
op[33]=((((-0.0140560787025)*x167))+(((1.569)*gclwh9_13*x117))+(((0.0140560787025)*x113))+(((-0.08264838)*x217))+(((-3.138)*gclwh9_13*x102))+(((0.08264838)*x144))+(((3.138)*gclwh7_13*x77))+(((1.569)*gclwh11_13*x73))+(((0.0140560787025)*x177))+(((-3.138)*gclwh11_13*x81))+(((-1.569)*gclwh7_13*x99))+(((-0.08264838)*x124)));
op[34]=((((-0.0655)*gclwh7_0*x99))+(((-0.131)*gclwh9_0*x102))+(((0.00058678977375)*x143))+(((0.131)*gclwh7_0*x77))+(((-1.0)*x464))+x292+(((0.0655)*gclwh9_0*x117))+(((-0.00058678977375)*x202))+(((0.00058678977375)*x204))+(((0.0655)*gclwh11_0*x73))+(((-0.01239915)*x169))+(((-0.01239915)*x156))+(((0.01239915)*x185))+(((-0.131)*gclwh11_0*x81)));
op[35]=((-0.01429865)+(((-1.0)*x490))+x489);
op[36]=((1.31196768)+(((-1.0)*x492))+x486);
op[37]=((((-1.6345)*gclwh3_2*x99))+(((-1.0)*gclwh12_2*x164))+(((3.269)*gclwh12_2*x77))+(((-3.269)*gclwh14_2*x102))+(((-1.0)*x485))+(((-1.0)*gclwh4_2*x166))+(((-1.6345)*gclwh1_2*x117))+(((0.01464286847625)*x98))+(((3.269)*gclwh1_2*x102))+(((0.30941085)*x210))+x473+(((-1.6345)*gclwh12_2*x99))+(((-1.6345)*gclwh4_2*x73))+(((3.269)*gclwh3_2*x77))+(((-0.30941085)*x84))+((gclwh1_2*x129))+((gclwh3_2*x164))+(((-1.0)*gclwh8_2*x147))+(((3.269)*gclwh4_2*x81))+(((1.6345)*pp*x98)));
IkReal x501=pz*pz;
IkReal x502=pp*pp;
IkReal x503=((0.1893)*pz);
IkReal x504=((1.7)*pz);
IkReal x505=(gclwh15_9*npx);
IkReal x506=(pp*r21);
IkReal x507=(pp*r22);
IkReal x508=((0.00702803935125)*r21);
IkReal x509=(gclwh5_9*npz);
IkReal x510=(pp*r20);
IkReal x511=(npy*pz);
IkReal x512=((4.0)*gclwh12_11);
IkReal x513=((3.60823078949063e-5)*r22);
IkReal x514=(gclwh14_3*rxp0_2);
IkReal x515=((0.000977833645875)*r20);
IkReal x516=(npz*pz);
IkReal x517=((0.000977833645875)*r21);
IkReal x518=(gclwh10_2*rxp2_2);
IkReal x519=((0.00076243651125)*rxp1_2);
IkReal x520=((0.00600991575645741)*r20);
IkReal x521=((0.154705425)*rxp1_2);
IkReal x522=((0.4366)*gclwh5_15);
IkReal x523=(gclwh6_11*rxp1_2);
IkReal x524=(gclwh7_0*rxp1_2);
IkReal x525=((0.154705425)*rxp2_2);
IkReal x526=((2.0)*gclwh11_10);
IkReal x527=((0.2970117)*rxp1_2);
IkReal x528=((0.017917245)*r21);
IkReal x529=(gclwh14_2*pz);
IkReal x530=(gclwh12_8*r21);
IkReal x531=(gclwh14_2*rxp0_2);
IkReal x532=((2.0)*gclwh4_11);
IkReal x533=((0.007321434238125)*r20);
IkReal x534=(npx*pz);
IkReal x535=((0.4366)*gclwh15_15);
IkReal x536=(gclwh10_11*rxp2_2);
IkReal x537=(gclwh5_9*rxp2_2);
IkReal x538=((0.020662095)*rxp1_2);
IkReal x539=((0.007321434238125)*r21);
IkReal x540=(gclwh0_0*r20);
IkReal x541=((0.0089586225)*r21);
IkReal x542=(gclwh13_0*pz);
IkReal x543=((1.6345)*pz);
IkReal x544=((0.007321434238125)*r22);
IkReal x545=((1.0)*pz);
IkReal x546=(gclwh14_14*rxp0_2);
IkReal x547=(gclwh4_14*r22);
IkReal x548=((0.1893)*rxp0_2);
IkReal x549=((0.00058678977375)*r22);
IkReal x550=(gclwh12_8*rxp1_2);
IkReal x551=((2.0)*gclwh9_10);
IkReal x552=((0.1893)*rxp2_2);
IkReal x553=((2.0)*gclwh15_10);
IkReal x554=((4.0)*gclwh14_11);
IkReal x555=(gclwh5_15*rxp2_2);
IkReal x556=((0.020662095)*rxp0_2);
IkReal x557=((2.0)*gclwh13_10);
IkReal x558=((0.3786)*rxp1_2);
IkReal x559=(gclwh9_0*r20);
IkReal x560=(gclwh13_9*r21);
IkReal x561=(gclwh15_1*r20);
IkReal x562=((0.000977833645875)*r22);
IkReal x563=((0.006199575)*rxp0_2);
IkReal x564=(gclwh6_2*rxp1_2);
IkReal x565=((0.0089586225)*r20);
IkReal x566=((2.0)*gclwh10_11);
IkReal x567=((2.0)*pp);
IkReal x568=((0.00058678977375)*r21);
IkReal x569=(gclwh1_3*r20);
IkReal x570=(gclwh14_14*r20);
IkReal x571=(gclwh9_0*rxp0_2);
IkReal x572=(gclwh4_3*rxp2_2);
IkReal x573=(gclwh5_0*r22);
IkReal x574=((0.03583449)*r20);
IkReal x575=((0.00058678977375)*r20);
IkReal x576=((0.2183)*gclwh13_15);
IkReal x577=((2.0)*gclwh7_10);
IkReal x578=(gclwh2_1*r21);
IkReal x579=((4.0)*gclwh15_10);
IkReal x580=((0.0089586225)*pz);
IkReal x581=((0.2183)*gclwh12_14);
IkReal x582=((0.2183)*gclwh14_14);
IkReal x583=(gclwh11_0*rxp2_2);
IkReal x584=(gclwh8_2*rxp0_2);
IkReal x585=((0.3786)*rxp2_2);
IkReal x586=(gclwh12_2*rxp1_2);
IkReal x587=(gclwh5_0*rxp2_2);
IkReal x588=((3.60823078949063e-5)*r21);
IkReal x589=(gclwh15_9*r20);
IkReal x590=((0.3786)*rxp0_2);
IkReal x591=((0.006199575)*rxp1_2);
IkReal x592=(gclwh14_8*npx);
IkReal x593=(gclwh13_15*r21);
IkReal x594=((0.017917245)*r20);
IkReal x595=(gclwh5_15*r22);
IkReal x596=((0.000293394886875)*r21);
IkReal x597=(gclwh13_0*rxp1_2);
IkReal x598=(gclwh7_10*rxp1_2);
IkReal x599=((0.000293394886875)*r22);
IkReal x600=(gclwh5_1*rxp2_2);
IkReal x601=((0.154705425)*rxp0_2);
IkReal x602=((0.4366)*gclwh13_15);
IkReal x603=((0.0089586225)*r22);
IkReal x604=((0.2970117)*rxp2_2);
IkReal x605=(gclwh5_9*r22);
IkReal x606=((0.7572)*rxp0_2);
IkReal x607=((4.0)*gclwh4_11);
IkReal x608=(gclwh15_1*rxp0_2);
IkReal x609=((0.000293394886875)*r20);
IkReal x610=((2.0)*gclwh6_11);
IkReal x611=((0.4366)*gclwh12_14);
IkReal x612=((0.017917245)*r22);
IkReal x613=(gclwh15_0*r20);
IkReal x614=(gclwh15_15*r20);
IkReal x615=((2.0)*gclwh12_11);
IkReal x616=(gclwh14_8*rxp0_2);
IkReal x617=((0.0655)*pz);
IkReal x618=((0.006199575)*rxp2_2);
IkReal x619=((0.04132419)*rxp1_2);
IkReal x620=((0.4366)*gclwh4_14);
IkReal x621=(gclwh15_0*rxp0_2);
IkReal x622=(gclwh14_8*r20);
IkReal x623=((0.03583449)*r22);
IkReal x624=((2.0)*gclwh8_11);
IkReal x625=((4.0)*gclwh13_10);
IkReal x626=(gclwh15_9*rxp0_2);
IkReal x627=((3.60823078949063e-5)*r20);
IkReal x628=((0.00702803935125)*r22);
IkReal x629=((0.2183)*gclwh5_15);
IkReal x630=(gclwh5_1*r22);
IkReal x631=((4.0)*gclwh5_10);
IkReal x632=(gclwh13_9*rxp1_2);
IkReal x633=((2.0)*gclwh5_10);
IkReal x634=((0.4366)*gclwh14_14);
IkReal x635=((0.020662095)*rxp2_2);
IkReal x636=(gclwh4_8*r22);
IkReal x637=(gclwh4_2*rxp2_2);
IkReal x638=((0.00600991575645741)*r21);
IkReal x639=((0.2183)*gclwh15_15);
IkReal x640=((0.2183)*gclwh4_14);
IkReal x641=((0.00702803935125)*r20);
IkReal x642=(gclwh12_14*r21);
IkReal x643=(gclwh4_8*rxp2_2);
IkReal x644=((0.2970117)*rxp0_2);
IkReal x645=(gclwh8_2*pz);
IkReal x646=(gclwh13_1*rxp1_2);
IkReal x647=((0.1893)*pp);
IkReal x648=(gclwh12_3*rxp1_2);
IkReal x649=((0.01464286847625)*r21);
IkReal x650=((0.1893)*rxp1_2);
IkReal x651=(gclwh4_3*r22);
IkReal x652=((2.0)*gclwh14_11);
IkReal x653=((0.03583449)*r21);
IkReal x654=((0.00195566729175)*x593);
IkReal x655=((0.00195566729175)*x595);
IkReal x656=((0.00195566729175)*x614);
IkReal x657=(gclwh15_10*x594);
IkReal x658=(gclwh7_10*x558);
IkReal x659=(gclwh5_10*x612);
IkReal x660=(gclwh9_10*x590);
IkReal x661=(gclwh13_10*x528);
IkReal x662=(gclwh11_10*x585);
IkReal x663=(gclwh12_14*x538);
IkReal x664=(gclwh6_5*x517);
IkReal x665=(gclwh4_14*x635);
IkReal x666=(gclwh8_5*x515);
IkReal x667=((0.020662095)*x546);
IkReal x668=(gclwh10_5*x562);
IkReal x669=((0.017917245)*x550);
IkReal x670=(gclwh8_11*x565);
IkReal x671=(gclwh14_11*x548);
IkReal x672=((0.017917245)*x643);
IkReal x673=(gclwh10_11*x603);
IkReal x674=(gclwh6_11*x541);
IkReal x675=(gclwh12_11*x650);
IkReal x676=(gclwh4_11*x552);
IkReal x677=((0.017917245)*x616);
IkReal x678=((0.017917245)*x537);
IkReal x679=(gclwh13_10*x650);
IkReal x680=(gclwh7_10*x541);
IkReal x681=(gclwh5_10*x552);
IkReal x682=((0.017917245)*x632);
IkReal x683=((0.017917245)*x626);
IkReal x684=(gclwh11_10*x603);
IkReal x685=(gclwh15_10*x548);
IkReal x686=(gclwh9_10*x565);
IkReal x687=(gclwh13_15*x538);
IkReal x688=((0.020662095)*x555);
IkReal x689=(gclwh7_7*x517);
IkReal x690=(gclwh9_7*x515);
IkReal x691=(gclwh15_15*x556);
IkReal x692=(gclwh11_7*x562);
IkReal x693=(gclwh12_11*x528);
IkReal x694=((0.3786)*x536);
IkReal x695=(gclwh4_11*x612);
IkReal x696=(gclwh8_11*x590);
IkReal x697=((0.00195566729175)*x547);
IkReal x698=((0.00195566729175)*x642);
IkReal x699=((0.00195566729175)*x570);
IkReal x700=((0.000977833645875)*x547);
IkReal x701=(gclwh10_5*x635);
IkReal x702=(gclwh12_14*x517);
IkReal x703=(gclwh8_5*x556);
IkReal x704=(gclwh6_5*x538);
IkReal x705=(gclwh14_14*x515);
IkReal x706=((0.000847933619625)*x530);
IkReal x707=((0.1893)*x523);
IkReal x708=(gclwh14_11*x565);
IkReal x709=((0.000847933619625)*x636);
IkReal x710=(gclwh8_11*x548);
IkReal x711=(gclwh12_11*x541);
IkReal x712=((0.1893)*x536);
IkReal x713=(gclwh4_11*x603);
IkReal x714=((0.000847933619625)*x622);
IkReal x715=((0.1893)*x598);
IkReal x716=(gclwh15_10*x565);
IkReal x717=((0.000847933619625)*x589);
IkReal x718=((0.000847933619625)*x605);
IkReal x719=(gclwh9_10*x548);
IkReal x720=(gclwh13_10*x541);
IkReal x721=((0.000847933619625)*x560);
IkReal x722=(gclwh11_10*x552);
IkReal x723=(gclwh5_10*x603);
IkReal x724=(gclwh15_15*x515);
IkReal x725=(gclwh7_7*x538);
IkReal x726=(gclwh5_15*x562);
IkReal x727=(gclwh9_7*x556);
IkReal x728=(gclwh11_7*x635);
IkReal x729=(gclwh13_15*x517);
IkReal x730=((2.0)*x501);
IkReal x731=(r21*x502);
IkReal x732=((1.0)*x502);
IkReal x733=(x506*x576);
IkReal x734=(x534*x535);
IkReal x735=(x507*x629);
IkReal x736=(x511*x602);
IkReal x737=(x510*x639);
IkReal x738=(x516*x522);
IkReal x739=(x510*x553);
IkReal x740=(x516*x631);
IkReal x741=(x511*x625);
IkReal x742=(x506*x557);
IkReal x743=(x534*x579);
IkReal x744=(x507*x633);
IkReal x745=((0.2183)*gclwh10_5*x516);
IkReal x746=((0.2183)*gclwh8_5*x534);
IkReal x747=((0.10915)*gclwh6_5*x506);
IkReal x748=((0.2183)*gclwh6_5*x511);
IkReal x749=((0.10915)*gclwh8_5*x510);
IkReal x750=((0.10915)*gclwh10_5*x507);
IkReal x751=(x647*x648);
IkReal x752=(x511*x610);
IkReal x753=(x565*x645);
IkReal x754=(gclwh10_2*pz*x507);
IkReal x755=(x503*x531);
IkReal x756=(x510*x645);
IkReal x757=(gclwh4_3*pp*x552);
IkReal x758=(gclwh10_2*r22*x580);
IkReal x759=(x503*x586);
IkReal x760=(x516*x566);
IkReal x761=(x503*x637);
IkReal x762=(x514*x647);
IkReal x763=(x534*x624);
IkReal x764=(gclwh6_2*pz*x541);
IkReal x765=(x646*x647);
IkReal x766=(x516*x526);
IkReal x767=(x534*x551);
IkReal x768=(gclwh11_0*r22*x580);
IkReal x769=(x559*x580);
IkReal x770=(gclwh5_1*pp*x552);
IkReal x771=(x503*x621);
IkReal x772=(gclwh11_0*pz*x507);
IkReal x773=(gclwh9_0*pz*x510);
IkReal x774=(gclwh15_1*pp*x548);
IkReal x775=(gclwh7_0*pz*x541);
IkReal x776=(x503*x597);
IkReal x777=(x503*x587);
IkReal x778=(x511*x577);
IkReal x779=((0.10915)*gclwh7_7*x506);
IkReal x780=((0.2183)*gclwh9_7*x534);
IkReal x781=((0.2183)*gclwh11_7*x516);
IkReal x782=((0.10915)*gclwh9_7*x510);
IkReal x783=((0.2183)*gclwh7_7*x511);
IkReal x784=((0.10915)*gclwh11_7*x507);
IkReal x785=(x507*x532);
IkReal x786=(x506*x615);
IkReal x787=(x534*x554);
IkReal x788=(x506*x581);
IkReal x789=(x534*x634);
IkReal x790=(x507*x640);
IkReal x791=(x510*x582);
IkReal x792=(x511*x611);
IkReal x793=(x516*x620);
IkReal x794=((0.10915)*gclwh12_14*x506);
IkReal x795=(x534*x582);
IkReal x796=((0.10915)*gclwh4_14*x507);
IkReal x797=((0.10915)*gclwh14_14*x510);
IkReal x798=(x516*x640);
IkReal x799=(x511*x581);
IkReal x800=((0.09465)*gclwh4_8*x507);
IkReal x801=(x510*x529);
IkReal x802=(gclwh12_3*x731);
IkReal x803=(x516*x532);
IkReal x804=(x503*x564);
IkReal x805=(gclwh3_3*x731);
IkReal x806=(x502*x569);
IkReal x807=(gclwh3_2*pz*x541);
IkReal x808=(x503*x592);
IkReal x809=(x529*x565);
IkReal x810=((0.09465)*gclwh12_8*x506);
IkReal x811=(x502*x651);
IkReal x812=(gclwh1_2*pz*x565);
IkReal x813=(x511*x615);
IkReal x814=(x503*x584);
IkReal x815=(gclwh4_2*r22*x580);
IkReal x816=(gclwh4_8*npz*x503);
IkReal x817=(gclwh12_2*pz*x541);
IkReal x818=(x503*x518);
IkReal x819=(x534*x652);
IkReal x820=((0.09465)*gclwh14_8*x510);
IkReal x821=(gclwh12_8*npy*x503);
IkReal x822=(x502*x561);
IkReal x823=(x503*x509);
IkReal x824=(gclwh5_0*pz*x507);
IkReal x825=(gclwh13_9*npy*x503);
IkReal x826=(x573*x580);
IkReal x827=(x506*x542);
IkReal x828=((0.09465)*gclwh15_9*x510);
IkReal x829=(x541*x542);
IkReal x830=(x502*x578);
IkReal x831=(x516*x633);
IkReal x832=(gclwh2_0*pz*x541);
IkReal x833=(x503*x571);
IkReal x834=(x511*x557);
IkReal x835=(x503*x583);
IkReal x836=(gclwh0_1*r20*x502);
IkReal x837=(x540*x580);
IkReal x838=((0.09465)*gclwh5_9*x507);
IkReal x839=(x503*x524);
IkReal x840=((0.09465)*gclwh13_9*x506);
IkReal x841=(gclwh15_0*pz*x565);
IkReal x842=(x503*x505);
IkReal x843=(x534*x553);
IkReal x844=((0.10915)*gclwh15_15*x510);
IkReal x845=(x516*x629);
IkReal x846=(x511*x576);
IkReal x847=((0.10915)*gclwh13_15*x506);
IkReal x848=((0.10915)*gclwh5_15*x507);
IkReal x849=(x534*x639);
IkReal x850=(gclwh6_2*npy*x730);
IkReal x851=(gclwh6_2*x506*x545);
IkReal x852=(gclwh10_2*npz*x730);
IkReal x853=(gclwh8_2*npx*x730);
IkReal x854=(gclwh7_0*npy*x730);
IkReal x855=(gclwh9_0*npx*x730);
IkReal x856=(gclwh11_0*npz*x730);
IkReal x857=(gclwh7_0*x506*x545);
IkReal x858=(gclwh12_2*npy*x730);
IkReal x859=(gclwh3_2*npy*x730);
IkReal x860=(gclwh1_2*npx*x730);
IkReal x861=(gclwh14_3*x534*x567);
IkReal x862=(gclwh4_2*npz*x730);
IkReal x863=(gclwh4_3*x516*x567);
IkReal x864=(gclwh12_2*x506*x545);
IkReal x865=(gclwh1_2*x510*x545);
IkReal x866=(gclwh3_3*x511*x567);
IkReal x867=(gclwh4_2*x507*x545);
IkReal x868=(gclwh1_3*x534*x567);
IkReal x869=(gclwh3_2*x506*x545);
IkReal x870=(gclwh12_3*x511*x567);
IkReal x871=(gclwh14_2*npx*x730);
IkReal x872=(gclwh14_3*r20*x732);
IkReal x873=(gclwh0_0*npx*x730);
IkReal x874=(gclwh2_0*npy*x730);
IkReal x875=(gclwh5_1*x516*x567);
IkReal x876=(gclwh13_1*x511*x567);
IkReal x877=(gclwh15_0*npx*x730);
IkReal x878=(gclwh2_1*x511*x567);
IkReal x879=(gclwh0_1*x534*x567);
IkReal x880=(gclwh5_0*npz*x730);
IkReal x881=(gclwh13_0*npy*x730);
IkReal x882=(gclwh0_0*x510*x545);
IkReal x883=(gclwh15_0*x510*x545);
IkReal x884=(gclwh2_0*x506*x545);
IkReal x885=((1.0)*gclwh13_1*x731);
IkReal x886=(x630*x732);
IkReal x887=(gclwh15_1*x534*x567);
IkReal x888=(x663+x665);
IkReal x889=(x703+x701);
IkReal x890=(x688+x687);
IkReal x891=(x727+x728);
IkReal x892=(x686+x685+x684+x778);
IkReal x893=(x673+x670+x671+x752);
IkReal x894=(x708+x707+x813+x803);
IkReal x895=(x715+x716+x834+x831);
IkReal x896=(x656+x737+x736+x738);
IkReal x897=(x664+x746+x747+x745);
IkReal x898=(x705+x797+x799+x798);
IkReal x899=(x699+x791+x793+x792);
IkReal x900=(x689+x779+x780+x781);
IkReal x901=(x724+x845+x844+x846);
IkReal x902=(x719+x720+x722+x723+x843);
IkReal x903=(x711+x710+x713+x712+x819);
IkReal x904=(x679+x681+x680+x766+x767);
IkReal x905=(x676+x674+x675+x760+x763);
IkReal x906=(((x511*x512))+((x516*x607))+((gclwh14_11*x594))+((x510*x652))+(((0.3786)*x523)));
IkReal x907=(x697+x698+x790+x788+x789);
IkReal x908=(x657+x658+x739+x740+x741);
IkReal x909=(x702+x700+x795+x794+x796);
IkReal x910=(x726+x729+x847+x849+x848);
IkReal x911=(x668+x666+x750+x748+x749);
IkReal x912=(x654+x655+x735+x734+x733);
IkReal x913=(x690+x692+x782+x783+x784);
IkReal x914=(x659+x661+x660+x662+x744+x742+x743);
IkReal x915=(x694+x695+x696+x693+x786+x787+x785);
IkReal x916=(x683+x777+x776+x775+x774+x856+x857+x855);
IkReal x917=(x677+x759+x764+x761+x762+x852+x853+x851);
IkReal x918=(x678+x682+x773+x772+x771+x770+x768+x769+x765+x854);
IkReal x919=(x669+x672+x755+x754+x757+x756+x751+x753+x758+x850);
IkReal x920=(x718+x721+x878+x879+x885+x884+x887+x886+x881+x880+x883+x882+x838+x839+x841+x840+x842);
IkReal x921=(x503+x709+x706+x858+x859+x862+x861+x860+x812+x810+x811+x809+x808+x805+x804+x807+x806+x801+x800+x802);
IkReal x922=(x714+x869+x868+x867+x866+x865+x864+x863+x870+x871+x872+x818+x816+x817+x814+x815+x821+x820);
IkReal x923=(x503+x717+x873+x874+x875+x876+x877+x829+x828+x823+x822+x827+x826+x825+x824+x835+x836+x837+x830+x832+x833);
op[38]=((((-1.0)*x506*x611))+(((0.8732)*gclwh4_14*x516))+(((-1.0)*gclwh8_12*x644))+((x510*x634))+(((0.0039113345835)*x570))+(((-1.0)*gclwh10_12*x604))+(((-0.0039113345835)*x547))+(((-0.8732)*gclwh14_14*x534))+(((-1.0)*x507*x620))+(((-0.0039113345835)*x642))+((gclwh6_12*x527))+(((0.8732)*gclwh12_14*x511)));
op[39]=((-0.05940486)+(((8.0)*gclwh14_11*x534))+((gclwh8_11*x606))+(((-8.0)*gclwh12_11*x511))+(((-8.0)*gclwh4_11*x516))+(((0.7572)*x536))+((gclwh4_11*x623))+(((-1.0)*x510*x554))+((x507*x607))+(((-0.7572)*x523))+((gclwh12_11*x653))+((x506*x512))+(((-1.0)*gclwh14_11*x574)));
op[40]=((0.02168232)+(((-1.0)*x906))+x915);
op[41]=((((0.131)*gclwh12_2*x511))+((gclwh3_2*x568))+(((0.0655)*gclwh14_2*x510))+(((-0.131)*npx*x529))+(((-1.0)*gclwh12_2*x568))+((gclwh1_2*x575))+((gclwh14_2*x575))+(((-0.01239915)*x584))+(((-1.0)*x899))+(((0.131)*gclwh3_2*x511))+(((0.131)*gclwh4_2*x516))+(((-0.0655)*gclwh12_2*x506))+(((-0.0655)*gclwh1_2*x510))+(((0.131)*gclwh1_2*x534))+(((-0.0655)*gclwh4_2*x507))+x907+(((-0.0655)*gclwh3_2*x506))+(((-0.01239915)*x518))+(((0.01239915)*x564))+(((-1.0)*gclwh4_2*x549)));
op[42]=((((3.269)*gclwh15_0*x534))+(((-0.30941085)*x524))+(((-1.6345)*gclwh0_0*x510))+(((3.269)*gclwh0_0*x534))+(((0.30941085)*x583))+(((1.6345)*gclwh13_0*x506))+(((-1.0)*x912))+(((0.30941085)*x571))+(((3.269)*gclwh2_0*x511))+((gclwh13_0*x649))+(((0.01464286847625)*x573))+(((-0.01464286847625)*x613))+((gclwh2_0*x649))+(((-3.269)*gclwh13_0*x511))+(((-1.6345)*gclwh15_0*x510))+x896+(((0.01464286847625)*x540))+(((-1.6345)*gclwh2_0*x506))+(((-3.269)*gclwh5_0*x516))+(((1.6345)*gclwh5_0*x507)));
op[43]=((1.31196768)+(((-1.0)*x908))+x914);
op[44]=((0.05940486)+(((-8.0)*gclwh13_10*x511))+(((0.7572)*gclwh11_10*rxp2_2))+(((-1.0)*x510*x579))+((x506*x625))+((x507*x631))+((gclwh13_10*x653))+(((-0.7572)*x598))+(((8.0)*gclwh15_10*x534))+((gclwh9_10*x606))+(((-8.0)*gclwh5_10*x516))+((gclwh5_10*x623))+(((-1.0)*gclwh15_10*x574)));
op[45]=(((gclwh11_13*x604))+((gclwh9_13*x644))+(((-0.8732)*gclwh13_15*x511))+(((0.8732)*gclwh15_15*x534))+(((-1.0)*gclwh7_13*x527))+(((0.0039113345835)*x595))+(((0.0039113345835)*x593))+(((-0.0039113345835)*x614))+((x507*x522))+((x506*x602))+(((-1.0)*x510*x535))+(((-0.8732)*gclwh5_15*x516)));
op[46]=((((0.131)*gclwh15_0*x534))+(((-1.0)*gclwh15_0*x575))+(((0.00058678977375)*x540))+(((-0.131)*gclwh5_0*x516))+(((0.131)*gclwh0_0*x534))+(((-0.01239915)*x524))+((gclwh5_0*x549))+(((-1.0)*x896))+(((-0.0655)*gclwh0_0*x510))+(((0.01239915)*x571))+(((0.01239915)*x583))+((gclwh13_0*x568))+((gclwh2_0*x568))+(((-0.131)*gclwh13_0*x511))+(((-0.0655)*gclwh15_0*x510))+(((0.131)*gclwh2_0*x511))+(((-0.0655)*gclwh2_0*x506))+(((0.0655)*gclwh13_0*x506))+x912+(((0.0655)*gclwh5_0*x507)));
op[47]=((0.02168232)+(((-1.0)*x914))+x908);
op[48]=((((-1.0)*gclwh4_8*x525))+((gclwh10_12*x544))+(((1.6345)*gclwh6_12*x511))+((gclwh14_8*x601))+((gclwh8_12*x533))+(((-1.6345)*gclwh10_12*x516))+(((-1.0)*gclwh12_8*x521))+(((-1.0)*x911))+(((-1.0)*x888))+(((0.81725)*gclwh10_12*x507))+x667+(((-1.6345)*gclwh8_12*x534))+(((-1.0)*gclwh6_12*x539))+x897+(((-0.81725)*gclwh6_12*x506))+(((0.81725)*gclwh8_12*x510)));
op[49]=((((-1.0)*gclwh8_11*x510))+(((0.12699240901125)*x514))+(((-1.0)*gclwh10_11*x507))+(((-1.0)*x893))+(((-1.0)*x917))+(((-0.12699240901125)*x648))+((gclwh6_11*x506))+(((-0.12699240901125)*x572))+x919+x905);
op[50]=((0.17125635)+(((4.0)*gclwh10_11*x516))+((gclwh12_11*x558))+((gclwh6_11*x528))+(((4.0)*gclwh8_11*x534))+(((-1.0)*gclwh8_11*x594))+(((-1.0)*gclwh10_11*x612))+((x506*x610))+(((-1.0)*x507*x566))+(((-1.0)*x510*x624))+(((-1.0)*gclwh14_11*x590))+((gclwh4_11*x585))+(((-4.0)*gclwh6_11*x511)));
op[51]=((((0.14850585)*x586))+(((-0.160905)*x616))+(((-0.14850585)*x531))+(((-0.7845)*gclwh8_2*x510))+((gclwh6_2*x508))+(((0.7845)*gclwh6_2*x506))+(((-1.0)*gclwh10_2*x628))+(((-1.569)*gclwh6_2*x511))+(((0.04132419)*gclwh4_14*rxp2_2))+(((-1.0)*gclwh8_2*x641))+(((0.160905)*x643))+(((0.160905)*x550))+((gclwh12_14*x619))+(((0.14850585)*x637))+(((1.569)*gclwh10_2*x516))+(((1.569)*gclwh8_2*x534))+(((-0.04132419)*x546))+(((-0.7845)*gclwh10_2*x507)));
op[52]=((((-0.0655)*gclwh10_12*x516))+(((-1.0)*gclwh14_8*x563))+(((-0.0655)*gclwh8_12*x534))+(((0.03275)*gclwh8_12*x510))+(((-0.03275)*gclwh6_12*x506))+((gclwh4_8*x618))+(((-1.0)*x911))+(((0.006199575)*x550))+((gclwh10_12*x599))+(((-1.0)*gclwh6_12*x596))+(((0.0655)*gclwh6_12*x511))+(((-1.0)*x667))+(((0.03275)*gclwh10_12*x507))+x888+x897+((gclwh8_12*x609)));
op[53]=((((-1.0)*gclwh6_11*x506))+(((-1.0)*x905))+(((-1.0)*x917))+((gclwh8_11*x510))+((gclwh10_11*x507))+(((-0.00076243651125)*x572))+x893+x919+(((0.00076243651125)*x514))+(((-1.0)*gclwh12_3*x519)));
op[54]=(((gclwh11_10*x507))+(((-1.0)*x904))+(((-1.0)*x916))+(((-0.12699240901125)*x600))+(((-1.0)*gclwh7_10*x506))+(((-0.12699240901125)*x646))+(((0.12699240901125)*x608))+((gclwh9_10*x510))+x892+x918);
op[55]=((((-1.6345)*gclwh9_13*x534))+((gclwh15_9*x601))+(((0.81725)*gclwh11_13*x507))+(((-1.0)*gclwh5_9*x525))+(((-1.0)*x890))+(((-1.0)*x913))+(((-1.0)*gclwh7_13*x539))+(((-1.6345)*gclwh11_13*x516))+(((-0.81725)*gclwh7_13*x506))+x691+(((-1.0)*gclwh13_9*x521))+((gclwh11_13*x544))+x900+(((0.81725)*gclwh9_13*x510))+(((1.6345)*gclwh7_13*x511))+((gclwh9_13*x533)));
op[56]=((((-1.0)*gclwh13_15*x619))+(((-0.7845)*gclwh11_0*x507))+(((0.14850585)*x587))+(((-0.04132419)*x555))+(((-0.00702803935125)*x559))+(((-1.0)*gclwh11_0*x628))+((gclwh7_0*x508))+(((0.160905)*x626))+(((1.569)*gclwh9_0*x534))+(((-0.160905)*x632))+(((0.04132419)*gclwh15_15*rxp0_2))+(((-1.569)*gclwh7_0*x511))+(((0.7845)*gclwh7_0*x506))+(((0.14850585)*x597))+(((-0.160905)*x537))+(((-0.14850585)*x621))+(((1.569)*gclwh11_0*x516))+(((-0.7845)*gclwh9_0*x510)));
op[57]=((0.17125635)+((x506*x577))+(((-1.0)*gclwh15_10*x590))+((gclwh5_10*x585))+((gclwh13_10*x558))+(((-1.0)*x507*x526))+(((-1.0)*gclwh11_10*x612))+(((-4.0)*gclwh7_10*x511))+(((4.0)*gclwh11_10*x516))+((gclwh7_10*x528))+(((-1.0)*x510*x551))+(((4.0)*gclwh9_10*x534))+(((-1.0)*gclwh9_10*x594)));
op[58]=((((-1.0)*gclwh9_10*x510))+(((-1.0)*gclwh11_10*x507))+(((-0.00076243651125)*x600))+((gclwh7_10*x506))+(((-1.0)*x892))+(((-1.0)*x916))+(((-1.0)*gclwh13_1*x519))+(((0.00076243651125)*x608))+x918+x904);
op[59]=((((-0.0655)*gclwh9_13*x534))+(((0.0655)*gclwh7_13*x511))+((gclwh13_9*x591))+(((-0.03275)*gclwh7_13*x506))+(((-1.0)*x913))+(((-0.0655)*gclwh11_13*x516))+(((0.006199575)*x537))+(((-1.0)*gclwh7_13*x596))+(((-1.0)*x691))+(((0.03275)*gclwh9_13*x510))+x890+((gclwh9_13*x609))+((gclwh11_13*x599))+x900+(((-1.0)*gclwh15_9*x563))+(((0.03275)*gclwh11_13*x507)));
op[60]=((((-1.0)*gclwh4_8*x544))+(((0.81725)*gclwh14_8*x510))+(((-1.0)*x909))+(((-0.81725)*gclwh4_8*x507))+(((-0.007321434238125)*x530))+(((1.6345)*gclwh12_8*x511))+(((-1.0)*x704))+(((-0.81725)*gclwh12_8*x506))+((gclwh14_8*x533))+(((1.6345)*gclwh4_8*x516))+x889+x898+(((-1.0)*gclwh10_12*x525))+(((-1.0)*gclwh8_12*x601))+((gclwh6_12*x521))+(((-1.6345)*gclwh14_8*x534)));
op[61]=((0.679811285)+(((-1.0)*x922))+(((0.66189404)*gclwh14_3*x510))+((gclwh3_3*x638))+((gclwh1_3*x520))+(((-0.66189404)*gclwh12_3*x506))+(((1.341705325)*gclwh3_3*x511))+(((-0.00600991575645741)*x651))+(((-0.679811285)*gclwh1_3*x510))+(((-1.0)*x894))+((gclwh14_3*x520))+(((-0.66189404)*gclwh4_3*x507))+(((1.341705325)*gclwh12_3*x511))+((gclwh12_11*x506))+(((1.341705325)*gclwh1_3*x534))+(((-0.679811285)*gclwh3_3*x506))+(((-1.0)*gclwh12_3*x638))+(((1.341705325)*gclwh4_3*x516))+(((-1.341705325)*gclwh14_3*x534))+x921+x903+(((-1.0)*gclwh14_11*x510))+((gclwh4_11*x507)));
op[62]=((0.07735732)+(((-1.0)*x906))+x915);
op[63]=((((-0.14850585)*x564))+(((-1.569)*gclwh1_2*x534))+(((0.7845)*gclwh12_2*x506))+(((0.14850585)*x584))+(((0.85)*gclwh4_8*x507))+(((-1.569)*gclwh4_2*x516))+(((-1.0)*gclwh12_8*npy*x504))+(((-0.7845)*gclwh14_2*x510))+(((-1.0)*gclwh4_8*npz*x504))+(((0.7845)*gclwh1_2*x510))+(((0.14850585)*x518))+((x504*x592))+(((-1.0)*x899))+(((0.7845)*gclwh3_2*x506))+((gclwh12_2*x508))+(((-0.85)*gclwh14_8*x510))+(((-1.569)*gclwh3_2*x511))+(((-1.0)*gclwh14_2*x641))+(((0.85)*gclwh12_8*x506))+(((1.569)*npx*x529))+(((0.007614829125)*x530))+(((-1.0)*gclwh1_2*x641))+(((-1.569)*gclwh12_2*x511))+(((0.7845)*gclwh4_2*x507))+x907+(((0.007614829125)*x636))+(((-0.007614829125)*x622))+(((-1.0)*gclwh3_2*x508))+((gclwh4_2*x628)));
op[64]=(((gclwh6_12*x591))+(((-1.0)*gclwh14_8*x609))+(((-0.0655)*gclwh4_8*x516))+(((0.0655)*gclwh14_8*x534))+(((0.000293394886875)*x530))+(((-0.03275)*gclwh14_8*x510))+(((-1.0)*x898))+(((0.03275)*gclwh12_8*x506))+((gclwh4_8*x599))+(((-1.0)*x704))+x889+(((-0.0655)*gclwh12_8*x511))+(((-1.0)*gclwh10_12*x618))+x909+(((0.03275)*gclwh4_8*x507))+(((-1.0)*gclwh8_12*x563)));
op[65]=((-0.012986285)+(((-1.0)*x922))+(((3.60823078949063e-5)*x569))+(((-1.0)*gclwh12_11*x506))+(((0.00493096)*gclwh12_3*x506))+(((0.008055325)*gclwh12_3*x511))+(((-0.00493096)*gclwh14_3*x510))+(((-0.012986285)*gclwh1_3*x510))+(((-1.0)*x903))+((gclwh3_3*x588))+(((-1.0)*gclwh4_3*x513))+(((-1.0)*gclwh12_3*x588))+(((0.008055325)*gclwh3_3*x511))+(((-1.0)*gclwh4_11*x507))+(((-0.008055325)*gclwh14_3*x534))+(((0.008055325)*gclwh1_3*x534))+(((0.00493096)*gclwh4_3*x507))+((gclwh14_11*x510))+x894+(((0.008055325)*gclwh4_3*x516))+(((-0.012986285)*gclwh3_3*x506))+x921+((gclwh14_3*x627)));
op[66]=((-0.679811285)+(((-1.0)*x920))+(((-0.66189404)*gclwh15_1*x510))+((gclwh13_1*x638))+(((-1.341705325)*gclwh13_1*x511))+(((-0.679811285)*gclwh0_1*x510))+(((1.341705325)*gclwh15_1*x534))+(((1.341705325)*gclwh0_1*x534))+(((1.341705325)*gclwh2_1*x511))+(((-1.0)*gclwh15_1*x520))+(((-1.0)*x895))+(((0.00600991575645741)*x578))+((gclwh5_10*x507))+(((-0.679811285)*gclwh2_1*x506))+(((0.66189404)*gclwh13_1*x506))+(((-1.341705325)*gclwh5_1*x516))+((gclwh13_10*x506))+x923+x902+(((0.66189404)*gclwh5_1*x507))+((gclwh0_1*x520))+(((0.00600991575645741)*x630))+(((-1.0)*gclwh15_10*x510)));
op[67]=(((x505*x543))+(((-1.6345)*gclwh13_9*x511))+(((-0.81725)*gclwh15_9*x510))+(((0.81725)*gclwh13_9*x506))+(((-1.0)*x901))+(((-1.0)*x891))+(((-1.0)*gclwh7_13*x521))+((gclwh13_9*x539))+(((0.81725)*gclwh5_9*x507))+(((-1.0)*gclwh15_9*x533))+((gclwh11_13*x525))+(((-1.0)*x509*x543))+x725+((gclwh9_13*x601))+((gclwh5_9*x544))+x910);
op[68]=((((-1.0)*gclwh13_0*x508))+(((0.85)*gclwh13_9*x506))+(((-0.00702803935125)*x540))+(((0.007614829125)*x560))+(((-0.00702803935125)*x573))+(((0.7845)*gclwh15_0*x510))+(((-1.569)*gclwh0_0*x534))+(((1.569)*gclwh13_0*x511))+(((0.7845)*gclwh2_0*x506))+(((-1.0)*x896))+(((0.7845)*gclwh0_0*x510))+(((-0.7845)*gclwh5_0*x507))+(((1.569)*gclwh5_0*x516))+(((-1.0)*gclwh13_9*npy*x504))+(((0.007614829125)*x605))+(((0.00702803935125)*x613))+(((-1.569)*gclwh2_0*x511))+(((-0.14850585)*x571))+(((-0.85)*gclwh15_9*x510))+(((0.85)*gclwh5_9*x507))+(((0.14850585)*x524))+(((-1.569)*gclwh15_0*x534))+(((-0.7845)*gclwh13_0*x506))+(((-1.0)*x504*x509))+(((-0.007614829125)*x589))+(((-1.0)*gclwh2_0*x508))+(((-0.14850585)*x583))+((x504*x505))+x912);
op[69]=((0.07735732)+(((-1.0)*x914))+x908);
op[70]=((0.012986285)+(((-0.012986285)*gclwh0_1*x510))+(((-1.0)*x920))+((gclwh0_1*x627))+(((0.008055325)*gclwh2_1*x511))+(((-3.60823078949063e-5)*x561))+((gclwh13_1*x588))+(((-1.0)*gclwh5_10*x507))+(((0.008055325)*gclwh0_1*x534))+(((-1.0)*x902))+(((-0.008055325)*gclwh13_1*x511))+(((-0.00493096)*gclwh13_1*x506))+(((3.60823078949063e-5)*x578))+((gclwh15_10*x510))+(((0.008055325)*gclwh15_1*x534))+(((-0.008055325)*gclwh5_1*x516))+(((-0.00493096)*gclwh5_1*x507))+x895+(((0.00493096)*gclwh15_1*x510))+(((-1.0)*gclwh13_10*x506))+((gclwh5_1*x513))+(((-0.012986285)*gclwh2_1*x506))+x923);
op[71]=((((-1.0)*x505*x617))+(((0.03275)*gclwh15_9*x510))+((gclwh11_13*x618))+(((-1.0)*x891))+(((-1.0)*x910))+(((-0.000293394886875)*x560))+(((-0.03275)*gclwh13_9*x506))+((gclwh9_13*x563))+(((-1.0)*gclwh5_9*x599))+(((-1.0)*gclwh7_13*x591))+(((0.000293394886875)*x589))+(((0.0655)*gclwh13_9*x511))+x725+((x509*x617))+x901+(((-0.03275)*gclwh5_9*x507)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x924=htj1*htj1;
CheckValue<IkReal> x925=IKPowWithIntegerCheck(((1.0)+x924),-1);
if(!x925.valid){
continue;
}
cj1array[numsolutions]=((x925.value)*(((1.0)+(((-1.0)*x924)))));
CheckValue<IkReal> x926=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x926.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x926.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x927=htj2*htj2;
CheckValue<IkReal> x928=IKPowWithIntegerCheck(((1.0)+x927),-1);
if(!x928.valid){
continue;
}
cj2array[numsolutions]=((x928.value)*(((1.0)+(((-1.0)*x927)))));
CheckValue<IkReal> x929=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x929.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x929.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x930=htj3*htj3;
CheckValue<IkReal> x931=IKPowWithIntegerCheck(((1.0)+x930),-1);
if(!x931.valid){
continue;
}
cj3array[numsolutions]=((x931.value)*(((1.0)+(((-1.0)*x930)))));
CheckValue<IkReal> x932=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x932.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x932.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[2];
j5eval[0]=((r20*r20)+(r21*r21));
j5eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x933=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x933);
rxp1_0=(pz*r11);
rxp1_1=(r01*x933);
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x934=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x934);
rxp1_0=(pz*r11);
rxp1_1=(r01*x934);
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x935=IKPowWithIntegerCheck(r22,-1);
if(!x935.valid){
continue;
}
CheckValue<IkReal> x936=IKPowWithIntegerCheck(sj3,-1);
if(!x936.valid){
continue;
}
sj4array[0]=((x935.value)*(x936.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x937=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x937);
rxp1_0=(pz*r11);
rxp1_1=(r01*x937);
IkReal x938=(cj1*cj2);
IkReal x939=((4.0)*cj3);
IkReal x940=(r02*sj4);
IkReal x941=((4.0)*sj3);
IkReal x942=(sj1*sj2);
IkReal x943=((12.0)*cj4);
IkReal x944=((8.0)*r01);
IkReal x945=(cj3*cj4);
IkReal x946=((16.0)*r01);
IkReal x947=((8.0)*r11);
IkReal x948=((4.0)*sj4);
IkReal x949=((16.0)*sj3);
IkReal x950=((8.0)*sj3);
IkReal x951=((12.0)*cj3);
IkReal x952=(r12*sj4);
IkReal x953=(r01*x941);
IkReal x954=(r11*x941);
IkReal x955=((16.0)*r11*sj4);
IkReal x956=((4.0)*cj4*r12);
IkReal x957=((4.0)*cj4*r02);
IkReal x958=(cj4*r00*x939);
IkReal x959=(cj4*r10*x939);
IkReal x960=(x951*x952);
IkReal x961=(x940*x951);
IkReal x962=(r10*x938*x948);
IkReal x963=(r10*x942*x948);
IkReal x964=(r00*x938*x948);
IkReal x965=(r00*x942*x948);
IkReal x966=(r02*x938*x943);
IkReal x967=(r02*x942*x943);
IkReal x968=(r12*x942*x943);
IkReal x969=(r12*x938*x943);
IkReal x970=(x964+x954);
IkReal x971=(x963+x953);
IkReal x972=(x965+x959);
IkReal x973=(x960+x966);
IkReal x974=(x962+x958);
IkReal x975=(x961+x968);
j5eval[0]=((((0.5)*(IKabs((x970+x973+(((-1.0)*x967))+(((-1.0)*x972)))))))+(((0.5)*(IKabs((((sj4*x942*x946))+(((-1.0)*sj4*x938*x946))+(((16.0)*r11*x945))+((r10*x949)))))))+(((0.5)*(IKabs((((x945*x946))+(((-1.0)*x942*x955))+((r00*x949))+((x938*x955)))))))+(((0.5)*(IKabs(((((-1.0)*x938*x956))+((x939*x940))+((x942*x956))+x974+(((-1.0)*x971)))))))+(((0.5)*(IKabs(((((-1.0)*x942*x957))+((x938*x957))+((x939*x952))+x972+(((-1.0)*x970)))))))+(((0.5)*(IKabs((x973+x972+(((-1.0)*x967))+(((-1.0)*x970)))))))+(IKabs((((x945*x947))+((sj4*x942*x944))+(((-1.0)*sj4*x938*x944))+((r10*x950)))))+(((0.5)*(IKabs((x975+x974+(((-1.0)*x969))+(((-1.0)*x971)))))))+(((0.5)*(IKabs((x971+x975+(((-1.0)*x969))+(((-1.0)*x974)))))))+(IKabs((((sj4*x938*x947))+(((-1.0)*sj4*x942*x947))+((r00*x950))+((x944*x945))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x976=(r10*sj4);
IkReal x977=(cj1*cj2);
IkReal x978=(r11*sj4);
IkReal x979=(cj4*r12);
IkReal x980=(sj1*sj2);
IkReal x981=(r00*sj3);
IkReal x982=((4.0)*r01*sj3);
IkReal x983=(cj3*cj4*r01);
IkReal x984=((4.0)*x980);
IkReal x985=(cj3*r02*sj4);
IkReal x986=((4.0)*cj3*cj4*r00);
IkReal x987=((12.0)*x985);
IkReal x988=((4.0)*x985);
IkReal x989=((4.0)*x976*x977);
IkReal x990=(x976*x984);
IkReal x991=((12.0)*x979*x980);
IkReal x992=((12.0)*x977*x979);
IkReal x993=(x979*x984);
IkReal x994=((4.0)*x977*x979);
IkReal x995=(x990+x982);
IkReal x996=(x989+x986);
IkReal x997=(x993+x988);
IkReal x998=(x991+x987);
IkReal x999=((((8.0)*x977*x978))+(((8.0)*x981))+(((8.0)*x983))+(((-8.0)*x978*x980)));
op[0]=((((-1.0)*x994))+(((-1.0)*x995))+x997+x996);
op[1]=x999;
op[2]=((((-1.0)*x992))+(((-1.0)*x995))+x996+x998);
op[3]=((((16.0)*x981))+(((16.0)*x983))+(((16.0)*x977*x978))+(((-16.0)*x978*x980)));
op[4]=((((-1.0)*x992))+(((-1.0)*x996))+x995+x998);
op[5]=x999;
op[6]=((((-1.0)*x994))+(((-1.0)*x996))+x997+x995);
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1000=(sj1*sj2);
IkReal x1001=(cj1*cj2);
IkReal x1002=(r10*sj3);
IkReal x1003=(cj4*r02);
IkReal x1004=((4.0)*r11*sj3);
IkReal x1005=((8.0)*r01*sj4);
IkReal x1006=(cj3*cj4*r11);
IkReal x1007=((16.0)*r01*sj4);
IkReal x1008=(cj3*r12*sj4);
IkReal x1009=((4.0)*r00*sj4);
IkReal x1010=((4.0)*x1008);
IkReal x1011=((4.0)*cj3*cj4*r10);
IkReal x1012=((12.0)*x1008);
IkReal x1013=(x1001*x1009);
IkReal x1014=(x1000*x1009);
IkReal x1015=((4.0)*x1001*x1003);
IkReal x1016=((12.0)*x1001*x1003);
IkReal x1017=((12.0)*x1000*x1003);
IkReal x1018=((4.0)*x1000*x1003);
IkReal x1019=(x1013+x1004);
IkReal x1020=(x1014+x1011);
IkReal x1021=(x1016+x1012);
IkReal x1022=(x1015+x1010);
IkReal x1023=((((8.0)*x1006))+(((8.0)*x1002))+((x1000*x1005))+(((-1.0)*x1001*x1005)));
j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*((x1020+x1022+(((-1.0)*x1019))+(((-1.0)*x1018))))))+x1019+x1022+(((-1.0)*x1018))+((htj5*x1023))+(((htj5*htj5)*((x1019+x1021+(((-1.0)*x1017))+(((-1.0)*x1020))))))+(((-1.0)*x1020))+(((htj5*htj5*htj5*htj5)*((x1021+x1020+(((-1.0)*x1019))+(((-1.0)*x1017))))))+((x1023*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5*htj5)*((((x1000*x1007))+(((16.0)*x1006))+(((16.0)*x1002))+(((-1.0)*x1001*x1007)))))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1024=(sj4*sj5);
IkReal x1025=((1.0)*cj4);
IkReal x1026=((1.0)*cj5*sj4);
if( IKabs(((((-1.0)*r12*x1025))+((r11*x1024))+(((-1.0)*r10*x1026)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x1024))+(((-1.0)*r00*x1026))+(((-1.0)*r02*x1025)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*x1025))+((r11*x1024))+(((-1.0)*r10*x1026))))+IKsqr((((r01*x1024))+(((-1.0)*r00*x1026))+(((-1.0)*r02*x1025))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r12*x1025))+((r11*x1024))+(((-1.0)*r10*x1026))), (((r01*x1024))+(((-1.0)*r00*x1026))+(((-1.0)*r02*x1025))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1027=IKsin(j0);
IkReal x1028=IKcos(j0);
IkReal x1029=(r02*sj4);
IkReal x1030=(cj3*r10);
IkReal x1031=((1.0)*sj3);
IkReal x1032=(r12*sj4);
IkReal x1033=(cj3*r00);
IkReal x1034=((1.0)*sj2);
IkReal x1035=((0.39225)*sj2);
IkReal x1036=(r11*sj5);
IkReal x1037=(cj5*r01);
IkReal x1038=(cj5*r10);
IkReal x1039=(cj4*sj3);
IkReal x1040=((0.39225)*cj2);
IkReal x1041=(cj3*cj4);
IkReal x1042=(r01*sj5);
IkReal x1043=(r00*sj5);
IkReal x1044=((1.0)*cj2);
IkReal x1045=(cj5*r11);
IkReal x1046=((1.0)*sj4);
IkReal x1047=(cj5*r00);
IkReal x1048=(r10*sj5);
IkReal x1049=((1.0)*cj4);
IkReal x1050=(cj5*x1049);
IkReal x1051=(sj1*x1027);
IkReal x1052=(cj1*x1028);
IkReal x1053=(cj1*x1027);
IkReal x1054=(sj1*x1028);
evalcond[0]=((((-1.0)*r02*x1049))+(((-1.0)*x1046*x1047))+(((-1.0)*x1028))+((sj4*x1042)));
evalcond[1]=(((sj4*x1036))+(((-1.0)*x1038*x1046))+(((-1.0)*x1027))+(((-1.0)*r12*x1049)));
evalcond[2]=((((-0.10915)*x1028))+((x1035*x1051))+(((-0.09465)*x1043))+(((-1.0)*px))+(((-1.0)*x1040*x1053))+(((-0.09465)*x1037))+(((-0.425)*x1053)));
evalcond[3]=((((0.425)*x1052))+(((-0.10915)*x1027))+((x1040*x1052))+(((-0.09465)*x1048))+(((-0.09465)*x1045))+(((-1.0)*py))+(((-1.0)*x1035*x1054)));
evalcond[4]=(((cj3*x1037))+(((-1.0)*x1029*x1031))+((x1039*x1047))+((sj2*x1053))+((cj2*x1051))+((sj5*x1033))+(((-1.0)*cj4*x1031*x1042)));
evalcond[5]=((((-1.0)*x1033*x1050))+((x1041*x1042))+((sj3*x1043))+((sj3*x1037))+((cj2*x1053))+(((-1.0)*x1034*x1051))+((cj3*x1029)));
evalcond[6]=(((cj3*x1032))+(((-1.0)*x1044*x1052))+((sj2*x1054))+((sj3*x1048))+((sj3*x1045))+((x1036*x1041))+(((-1.0)*x1030*x1050)));
evalcond[7]=(((x1038*x1039))+(((-1.0)*x1044*x1054))+(((-1.0)*cj4*x1031*x1036))+((cj3*x1045))+((sj5*x1030))+(((-1.0)*x1031*x1032))+(((-1.0)*x1034*x1052)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1055=IKPowWithIntegerCheck(cj3,-1);
if(!x1055.valid){
continue;
}
CheckValue<IkReal> x1056=IKPowWithIntegerCheck(r22,-1);
if(!x1056.valid){
continue;
}
sj4array[0]=((-1.0)*(x1055.value)*(x1056.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1057=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x1057);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1057);
IkReal x1058=(cj1*cj2);
IkReal x1059=((4.0)*cj3);
IkReal x1060=(r02*sj4);
IkReal x1061=((4.0)*sj3);
IkReal x1062=(sj1*sj2);
IkReal x1063=((12.0)*cj4);
IkReal x1064=((8.0)*r01);
IkReal x1065=(cj3*cj4);
IkReal x1066=((16.0)*r01);
IkReal x1067=((8.0)*r11);
IkReal x1068=((4.0)*sj4);
IkReal x1069=((16.0)*sj3);
IkReal x1070=((8.0)*sj3);
IkReal x1071=((12.0)*cj3);
IkReal x1072=(r12*sj4);
IkReal x1073=(r01*x1061);
IkReal x1074=(r11*x1061);
IkReal x1075=((16.0)*r11*sj4);
IkReal x1076=((4.0)*cj4*r12);
IkReal x1077=((4.0)*cj4*r02);
IkReal x1078=(cj4*r00*x1059);
IkReal x1079=(cj4*r10*x1059);
IkReal x1080=(x1071*x1072);
IkReal x1081=(x1060*x1071);
IkReal x1082=(r10*x1058*x1068);
IkReal x1083=(r10*x1062*x1068);
IkReal x1084=(r00*x1058*x1068);
IkReal x1085=(r00*x1062*x1068);
IkReal x1086=(r02*x1058*x1063);
IkReal x1087=(r02*x1062*x1063);
IkReal x1088=(r12*x1062*x1063);
IkReal x1089=(r12*x1058*x1063);
IkReal x1090=(x1074+x1084);
IkReal x1091=(x1073+x1083);
IkReal x1092=(x1079+x1085);
IkReal x1093=(x1086+x1080);
IkReal x1094=(x1078+x1082);
IkReal x1095=(x1081+x1088);
j5eval[0]=((((0.5)*(IKabs(((((16.0)*r11*x1065))+((sj4*x1062*x1066))+(((-1.0)*sj4*x1058*x1066))+((r10*x1069)))))))+(((0.5)*(IKabs((x1094+(((-1.0)*x1091))+(((-1.0)*x1058*x1076))+((x1062*x1076))+((x1059*x1060)))))))+(((0.5)*(IKabs((((x1058*x1075))+(((-1.0)*x1062*x1075))+((r00*x1069))+((x1065*x1066)))))))+(((0.5)*(IKabs((x1094+x1095+(((-1.0)*x1091))+(((-1.0)*x1089)))))))+(IKabs((((sj4*x1062*x1064))+(((-1.0)*sj4*x1058*x1064))+((r10*x1070))+((x1065*x1067)))))+(((0.5)*(IKabs((x1095+x1091+(((-1.0)*x1094))+(((-1.0)*x1089)))))))+(((0.5)*(IKabs((((x1058*x1077))+x1092+(((-1.0)*x1090))+(((-1.0)*x1062*x1077))+((x1059*x1072)))))))+(((0.5)*(IKabs((x1092+x1093+(((-1.0)*x1090))+(((-1.0)*x1087)))))))+(((0.5)*(IKabs((x1090+x1093+(((-1.0)*x1092))+(((-1.0)*x1087)))))))+(IKabs((((sj4*x1058*x1067))+((r00*x1070))+((x1064*x1065))+(((-1.0)*sj4*x1062*x1067))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1096=(r10*sj4);
IkReal x1097=(cj1*cj2);
IkReal x1098=(r11*sj4);
IkReal x1099=(cj4*r12);
IkReal x1100=(sj1*sj2);
IkReal x1101=(r00*sj3);
IkReal x1102=((4.0)*r01*sj3);
IkReal x1103=(cj3*cj4*r01);
IkReal x1104=((4.0)*x1100);
IkReal x1105=(cj3*r02*sj4);
IkReal x1106=((4.0)*cj3*cj4*r00);
IkReal x1107=((12.0)*x1105);
IkReal x1108=((4.0)*x1105);
IkReal x1109=((4.0)*x1096*x1097);
IkReal x1110=(x1096*x1104);
IkReal x1111=((12.0)*x1099*x1100);
IkReal x1112=((12.0)*x1097*x1099);
IkReal x1113=(x1099*x1104);
IkReal x1114=((4.0)*x1097*x1099);
IkReal x1115=(x1102+x1110);
IkReal x1116=(x1106+x1109);
IkReal x1117=(x1108+x1113);
IkReal x1118=(x1107+x1111);
IkReal x1119=((((8.0)*x1097*x1098))+(((-8.0)*x1098*x1100))+(((8.0)*x1101))+(((8.0)*x1103)));
op[0]=(x1117+x1116+(((-1.0)*x1114))+(((-1.0)*x1115)));
op[1]=x1119;
op[2]=(x1116+x1118+(((-1.0)*x1115))+(((-1.0)*x1112)));
op[3]=((((16.0)*x1097*x1098))+(((16.0)*x1101))+(((16.0)*x1103))+(((-16.0)*x1098*x1100)));
op[4]=(x1115+x1118+(((-1.0)*x1116))+(((-1.0)*x1112)));
op[5]=x1119;
op[6]=(x1115+x1117+(((-1.0)*x1116))+(((-1.0)*x1114)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1120=(sj1*sj2);
IkReal x1121=(cj1*cj2);
IkReal x1122=(r10*sj3);
IkReal x1123=(cj4*r02);
IkReal x1124=((4.0)*r11*sj3);
IkReal x1125=((8.0)*r01*sj4);
IkReal x1126=(cj3*cj4*r11);
IkReal x1127=((16.0)*r01*sj4);
IkReal x1128=(cj3*r12*sj4);
IkReal x1129=((4.0)*r00*sj4);
IkReal x1130=((4.0)*x1128);
IkReal x1131=((4.0)*cj3*cj4*r10);
IkReal x1132=((12.0)*x1128);
IkReal x1133=(x1121*x1129);
IkReal x1134=(x1120*x1129);
IkReal x1135=((4.0)*x1121*x1123);
IkReal x1136=((12.0)*x1121*x1123);
IkReal x1137=((12.0)*x1120*x1123);
IkReal x1138=((4.0)*x1120*x1123);
IkReal x1139=(x1124+x1133);
IkReal x1140=(x1131+x1134);
IkReal x1141=(x1132+x1136);
IkReal x1142=(x1130+x1135);
IkReal x1143=((((8.0)*x1122))+(((8.0)*x1126))+((x1120*x1125))+(((-1.0)*x1121*x1125)));
j5evalpoly[0]=(x1142+x1139+((x1143*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1142+x1140+(((-1.0)*x1138))+(((-1.0)*x1139))))))+(((-1.0)*x1140))+(((htj5*htj5*htj5)*((((x1120*x1127))+(((-1.0)*x1121*x1127))+(((16.0)*x1122))+(((16.0)*x1126))))))+(((htj5*htj5)*((x1141+x1139+(((-1.0)*x1140))+(((-1.0)*x1137))))))+(((-1.0)*x1138))+((htj5*x1143))+(((htj5*htj5*htj5*htj5)*((x1140+x1141+(((-1.0)*x1139))+(((-1.0)*x1137)))))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1144=(sj4*sj5);
IkReal x1145=((1.0)*cj4);
IkReal x1146=((1.0)*cj5*sj4);
if( IKabs((((r11*x1144))+(((-1.0)*r10*x1146))+(((-1.0)*r12*x1145)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x1146))+(((-1.0)*r02*x1145))+((r01*x1144)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x1144))+(((-1.0)*r10*x1146))+(((-1.0)*r12*x1145))))+IKsqr(((((-1.0)*r00*x1146))+(((-1.0)*r02*x1145))+((r01*x1144))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r11*x1144))+(((-1.0)*r10*x1146))+(((-1.0)*r12*x1145))), ((((-1.0)*r00*x1146))+(((-1.0)*r02*x1145))+((r01*x1144))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1147=IKsin(j0);
IkReal x1148=IKcos(j0);
IkReal x1149=(r02*sj4);
IkReal x1150=(cj3*r10);
IkReal x1151=((1.0)*sj3);
IkReal x1152=(r12*sj4);
IkReal x1153=(cj3*r00);
IkReal x1154=((1.0)*sj2);
IkReal x1155=((0.39225)*sj2);
IkReal x1156=(r11*sj5);
IkReal x1157=(cj5*r01);
IkReal x1158=(cj5*r10);
IkReal x1159=(cj4*sj3);
IkReal x1160=((0.39225)*cj2);
IkReal x1161=(cj3*cj4);
IkReal x1162=(r01*sj5);
IkReal x1163=(r00*sj5);
IkReal x1164=((1.0)*cj2);
IkReal x1165=(cj5*r11);
IkReal x1166=((1.0)*sj4);
IkReal x1167=(cj5*r00);
IkReal x1168=(r10*sj5);
IkReal x1169=((1.0)*cj4);
IkReal x1170=(cj5*x1169);
IkReal x1171=(sj1*x1147);
IkReal x1172=(cj1*x1148);
IkReal x1173=(cj1*x1147);
IkReal x1174=(sj1*x1148);
evalcond[0]=((((-1.0)*x1166*x1167))+(((-1.0)*r02*x1169))+((sj4*x1162))+(((-1.0)*x1148)));
evalcond[1]=((((-1.0)*x1158*x1166))+(((-1.0)*r12*x1169))+(((-1.0)*x1147))+((sj4*x1156)));
evalcond[2]=((((-0.425)*x1173))+(((-0.09465)*x1163))+((x1155*x1171))+(((-1.0)*px))+(((-0.10915)*x1148))+(((-1.0)*x1160*x1173))+(((-0.09465)*x1157)));
evalcond[3]=((((-0.09465)*x1165))+(((-0.09465)*x1168))+(((-1.0)*py))+(((-0.10915)*x1147))+(((0.425)*x1172))+(((-1.0)*x1155*x1174))+((x1160*x1172)));
evalcond[4]=(((x1159*x1167))+(((-1.0)*x1149*x1151))+((cj3*x1157))+((sj5*x1153))+(((-1.0)*cj4*x1151*x1162))+((cj2*x1171))+((sj2*x1173)));
evalcond[5]=(((cj3*x1149))+((sj3*x1157))+(((-1.0)*x1153*x1170))+((cj2*x1173))+(((-1.0)*x1154*x1171))+((x1161*x1162))+((sj3*x1163)));
evalcond[6]=(((cj3*x1152))+(((-1.0)*x1150*x1170))+((x1156*x1161))+(((-1.0)*x1164*x1172))+((sj2*x1174))+((sj3*x1165))+((sj3*x1168)));
evalcond[7]=(((x1158*x1159))+((sj5*x1150))+(((-1.0)*cj4*x1151*x1156))+((cj3*x1165))+(((-1.0)*x1164*x1174))+(((-1.0)*x1154*x1172))+(((-1.0)*x1151*x1152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x1175=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1175);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1175);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1176=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1176);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1176);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1177=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1177);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1177);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1178=IKPowWithIntegerCheck(r22,-1);
if(!x1178.valid){
continue;
}
sj4array[0]=((-1.0)*(x1178.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1179=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1179);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1179);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1181 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1181.valid){
continue;
}
IkReal x1180=x1181.value;
j5array[0]=((-1.0)*x1180);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1180)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1182=(sj4*sj5);
IkReal x1183=((1.0)*cj5*sj4);
if( IKabs(((((-1.0)*r10*x1183))+((r11*x1182)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x1182))+(((-1.0)*r00*x1183)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x1183))+((r11*x1182))))+IKsqr((((r01*x1182))+(((-1.0)*r00*x1183))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x1183))+((r11*x1182))), (((r01*x1182))+(((-1.0)*r00*x1183))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1184=IKsin(j0);
IkReal x1185=IKcos(j0);
IkReal x1186=(cj5*r01);
IkReal x1187=(cj1*sj2);
IkReal x1188=(sj4*sj5);
IkReal x1189=((0.425)*cj1);
IkReal x1190=(cj2*sj1);
IkReal x1191=(r00*sj5);
IkReal x1192=(cj5*r11);
IkReal x1193=(r10*sj5);
IkReal x1194=((1.0)*x1185);
IkReal x1195=((1.0)*cj5*sj4);
evalcond[0]=((((-1.0)*r00*x1195))+((r01*x1188))+(((-1.0)*x1194)));
evalcond[1]=((((-1.0)*r10*x1195))+((r11*x1188))+(((-1.0)*x1184)));
evalcond[2]=(((x1184*x1190))+x1186+x1191+((x1184*x1187)));
evalcond[3]=(x1193+x1192+(((-1.0)*x1190*x1194))+(((-1.0)*x1187*x1194)));
evalcond[4]=((((-0.09465)*x1186))+(((-0.09465)*x1191))+(((-0.10915)*x1185))+(((-1.0)*px))+(((-1.0)*x1184*x1189)));
evalcond[5]=((((-0.09465)*x1193))+(((-0.09465)*x1192))+(((-0.10915)*x1184))+((x1185*x1189))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1196=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1196);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1196);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1197=IKPowWithIntegerCheck(r22,-1);
if(!x1197.valid){
continue;
}
sj4array[0]=((x1197.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1198=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1198);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1198);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1200 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1200.valid){
continue;
}
IkReal x1199=x1200.value;
j5array[0]=((-1.0)*x1199);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1199)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1201=(sj4*sj5);
IkReal x1202=((1.0)*cj5*sj4);
if( IKabs(((((-1.0)*r10*x1202))+((r11*x1201)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x1202))+((r01*x1201)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x1202))+((r11*x1201))))+IKsqr(((((-1.0)*r00*x1202))+((r01*x1201))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x1202))+((r11*x1201))), ((((-1.0)*r00*x1202))+((r01*x1201))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1203=IKsin(j0);
IkReal x1204=IKcos(j0);
IkReal x1205=(cj1*sj2);
IkReal x1206=(sj4*sj5);
IkReal x1207=(cj5*r11);
IkReal x1208=(cj2*sj1);
IkReal x1209=((0.425)*cj1);
IkReal x1210=((1.0)*sj5);
IkReal x1211=((0.09465)*sj5);
IkReal x1212=((1.0)*cj5);
IkReal x1213=((1.0)*x1204);
evalcond[0]=(((r01*x1206))+(((-1.0)*x1213))+(((-1.0)*r00*sj4*x1212)));
evalcond[1]=(((r11*x1206))+(((-1.0)*x1203))+(((-1.0)*r10*sj4*x1212)));
evalcond[2]=((((-1.0)*r00*x1210))+(((-1.0)*r01*x1212))+((x1203*x1208))+((x1203*x1205)));
evalcond[3]=((((-0.09465)*cj5*r01))+(((-0.10915)*x1204))+(((-1.0)*r00*x1211))+(((-1.0)*px))+(((-1.0)*x1203*x1209)));
evalcond[4]=(((x1204*x1209))+(((-0.10915)*x1203))+(((-1.0)*py))+(((-1.0)*r10*x1211))+(((-0.09465)*x1207)));
evalcond[5]=((((-1.0)*x1208*x1213))+(((-1.0)*x1205*x1213))+(((-1.0)*x1207))+(((-1.0)*r10*x1210)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1214=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1214);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1214);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1215=IKPowWithIntegerCheck(r22,-1);
if(!x1215.valid){
continue;
}
sj4array[0]=((x1215.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1216=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1216);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1216);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1218 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1218.valid){
continue;
}
IkReal x1217=x1218.value;
j5array[0]=((-1.0)*x1217);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1217)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1219=(sj4*sj5);
IkReal x1220=((1.0)*cj5*sj4);
if( IKabs((((r11*x1219))+(((-1.0)*r10*x1220)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x1220))+((r01*x1219)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x1219))+(((-1.0)*r10*x1220))))+IKsqr(((((-1.0)*r00*x1220))+((r01*x1219))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r11*x1219))+(((-1.0)*r10*x1220))), ((((-1.0)*r00*x1220))+((r01*x1219))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1221=IKsin(j0);
IkReal x1222=IKcos(j0);
IkReal x1223=(cj5*r01);
IkReal x1224=(sj4*sj5);
IkReal x1225=(r00*sj5);
IkReal x1226=(cj5*r11);
IkReal x1227=(r10*sj5);
IkReal x1228=(cj1*x1222);
IkReal x1229=((1.0)*cj5*sj4);
IkReal x1230=(sj1*sj2*x1221);
IkReal x1231=(cj1*cj2*x1221);
IkReal x1232=(sj1*sj2*x1222);
evalcond[0]=((((-1.0)*r00*x1229))+(((-1.0)*x1222))+((r01*x1224)));
evalcond[1]=((((-1.0)*x1221))+(((-1.0)*r10*x1229))+((r11*x1224)));
evalcond[2]=((((-1.0)*x1230))+x1231+x1225+x1223);
evalcond[3]=(x1232+x1227+x1226+(((-1.0)*cj2*x1228)));
evalcond[4]=((((-1.0)*px))+(((-0.39225)*x1231))+(((-0.09465)*x1225))+(((-0.09465)*x1223))+(((-0.425)*cj1*x1221))+(((0.39225)*x1230))+(((-0.10915)*x1222)));
evalcond[5]=((((0.39225)*cj2*x1228))+(((-1.0)*py))+(((-0.39225)*x1232))+(((-0.09465)*x1227))+(((-0.09465)*x1226))+(((0.425)*x1228))+(((-0.10915)*x1221)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1233=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1233);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1233);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1234=IKPowWithIntegerCheck(r22,-1);
if(!x1234.valid){
continue;
}
sj4array[0]=((-1.0)*(x1234.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1235=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1235);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1235);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1237 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1237.valid){
continue;
}
IkReal x1236=x1237.value;
j5array[0]=((-1.0)*x1236);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1236)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1238=(sj4*sj5);
IkReal x1239=((1.0)*cj5*sj4);
if( IKabs(((((-1.0)*r10*x1239))+((r11*x1238)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x1239))+((r01*x1238)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x1239))+((r11*x1238))))+IKsqr(((((-1.0)*r00*x1239))+((r01*x1238))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x1239))+((r11*x1238))), ((((-1.0)*r00*x1239))+((r01*x1238))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1240=IKsin(j0);
IkReal x1241=IKcos(j0);
IkReal x1242=(sj4*sj5);
IkReal x1243=(cj5*r11);
IkReal x1244=((1.0)*sj5);
IkReal x1245=((0.09465)*sj5);
IkReal x1246=((1.0)*cj5);
IkReal x1247=((1.0)*x1241);
IkReal x1248=(cj1*x1241);
IkReal x1249=(sj1*sj2*x1240);
IkReal x1250=(cj1*cj2*x1240);
IkReal x1251=(sj1*sj2*x1241);
evalcond[0]=(((r01*x1242))+(((-1.0)*x1247))+(((-1.0)*r00*sj4*x1246)));
evalcond[1]=((((-1.0)*x1240))+((r11*x1242))+(((-1.0)*r10*sj4*x1246)));
evalcond[2]=(x1250+(((-1.0)*x1249))+(((-1.0)*r01*x1246))+(((-1.0)*r00*x1244)));
evalcond[3]=(x1251+(((-1.0)*x1243))+(((-1.0)*cj1*cj2*x1247))+(((-1.0)*r10*x1244)));
evalcond[4]=((((-0.09465)*cj5*r01))+(((-0.39225)*x1250))+(((0.39225)*x1249))+(((-1.0)*px))+(((-0.10915)*x1241))+(((-0.425)*cj1*x1240))+(((-1.0)*r00*x1245)));
evalcond[5]=((((-0.39225)*x1251))+(((-1.0)*py))+(((-1.0)*r10*x1245))+(((-0.10915)*x1240))+(((-0.09465)*x1243))+(((0.425)*x1248))+(((0.39225)*cj2*x1248)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1252=IKPowWithIntegerCheck(r22,-1);
if(!x1252.valid){
continue;
}
CheckValue<IkReal> x1253=IKPowWithIntegerCheck(sj3,-1);
if(!x1253.valid){
continue;
}
sj4array[0]=((x1252.value)*(x1253.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1254=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1254);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1254);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))+(((0.5)*(IKabs(((((-16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj2*cj3*r00))+(((-16.0)*cj1*r00*sj2*sj3))+(((-16.0)*cj3*r00*sj1*sj2))+(((-16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj4*r01*sj1*sj2*sj3)))))))+(IKabs(((((-8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r01*sj1))+(((-8.0)*cj1*cj3*cj4*r01*sj2))+(((8.0)*cj4*r01*sj1*sj2*sj3))+(((-8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj1*cj2*cj3*r00))+(((-8.0)*cj1*cj2*cj4*r01*sj3))+(((-8.0)*cj1*r00*sj2*sj3)))))+(((0.5)*(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1255=(cj2*sj1);
IkReal x1256=(cj2*r10);
IkReal x1257=(cj1*sj2);
IkReal x1258=(cj4*r11);
IkReal x1259=((16.0)*cj3);
IkReal x1260=(sj1*sj2);
IkReal x1261=((4.0)*cj3);
IkReal x1262=(cj4*r10);
IkReal x1263=((16.0)*sj3);
IkReal x1264=(cj1*cj2);
IkReal x1265=((8.0)*sj3);
IkReal x1266=((8.0)*cj3);
IkReal x1267=((4.0)*r11*sj3);
IkReal x1268=(cj1*x1266);
IkReal x1269=((4.0)*cj4*sj3);
IkReal x1270=(r10*x1265);
IkReal x1271=(((r11*x1260*x1261))+((x1255*x1267))+(((4.0)*sj3*x1260*x1262))+((x1257*x1267)));
IkReal x1272=(((r11*x1261*x1264))+((cj1*x1256*x1269))+((x1257*x1261*x1262))+((x1255*x1261*x1262)));
IkReal x1273=(x1272+(((-1.0)*x1271)));
IkReal x1274=((((-1.0)*x1258*x1260*x1265))+(((-1.0)*x1256*x1268))+((x1257*x1270))+((x1258*x1264*x1265))+((r10*x1260*x1266))+((x1255*x1270))+((x1255*x1258*x1266))+((x1257*x1258*x1266)));
IkReal x1275=(x1271+(((-1.0)*x1272)));
op[0]=x1273;
op[1]=x1274;
op[2]=x1273;
op[3]=(((x1257*x1258*x1259))+((r10*x1259*x1260))+(((-1.0)*x1258*x1260*x1263))+((x1258*x1263*x1264))+((r10*x1257*x1263))+(((-1.0)*cj1*x1256*x1259))+((x1255*x1258*x1259))+((r10*x1255*x1263)));
op[4]=x1275;
op[5]=x1274;
op[6]=x1275;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5)*(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1))))))+(((htj5*htj5)*(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3))))))+(((4.0)*cj2*cj3*cj4*r00*sj1))+((htj5*(((((-8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r01*sj1))+(((-8.0)*cj1*cj3*cj4*r01*sj2))+(((8.0)*cj4*r01*sj1*sj2*sj3))+(((-8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj1*cj2*cj3*r00))+(((-8.0)*cj1*cj2*cj4*r01*sj3))+(((-8.0)*cj1*r00*sj2*sj3))))))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1))))))+(((-4.0)*cj1*r01*sj2*sj3))+(((htj5*htj5*htj5)*(((((-16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj2*cj3*r00))+(((-16.0)*cj1*r00*sj2*sj3))+(((-16.0)*cj3*r00*sj1*sj2))+(((-16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj4*r01*sj1*sj2*sj3))))))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((htj5*htj5*htj5*htj5*htj5)*(((((-8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r01*sj1))+(((-8.0)*cj1*cj3*cj4*r01*sj2))+(((8.0)*cj4*r01*sj1*sj2*sj3))+(((-8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj1*cj2*cj3*r00))+(((-8.0)*cj1*cj2*cj4*r01*sj3))+(((-8.0)*cj1*r00*sj2*sj3))))))+(((4.0)*cj1*cj2*cj4*r00*sj3)));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1276=(sj4*sj5);
IkReal x1277=((1.0)*cj5*sj4);
if( IKabs((((r11*x1276))+(((-1.0)*r10*x1277)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x1277))+((r01*x1276)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x1276))+(((-1.0)*r10*x1277))))+IKsqr(((((-1.0)*r00*x1277))+((r01*x1276))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r11*x1276))+(((-1.0)*r10*x1277))), ((((-1.0)*r00*x1277))+((r01*x1276))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1278=IKsin(j0);
IkReal x1279=IKcos(j0);
IkReal x1280=(sj1*sj2);
IkReal x1281=((1.0)*cj3);
IkReal x1282=(cj1*sj2);
IkReal x1283=(r11*sj5);
IkReal x1284=(cj5*r01);
IkReal x1285=(cj1*cj2);
IkReal x1286=(cj5*r11);
IkReal x1287=(r01*sj5);
IkReal x1288=((0.425)*cj1);
IkReal x1289=(cj3*cj4);
IkReal x1290=(r00*sj5);
IkReal x1291=(cj2*sj1);
IkReal x1292=(r10*sj5);
IkReal x1293=((0.39225)*x1279);
IkReal x1294=(cj4*cj5*r00);
IkReal x1295=((1.0)*x1278);
IkReal x1296=((1.0)*x1279);
IkReal x1297=((0.39225)*x1278);
IkReal x1298=(cj4*cj5*r10);
IkReal x1299=((1.0)*cj4*sj3);
IkReal x1300=((1.0)*cj5*sj4);
evalcond[0]=((((-1.0)*x1296))+(((-1.0)*r00*x1300))+((sj4*x1287)));
evalcond[1]=((((-1.0)*x1295))+((sj4*x1283))+(((-1.0)*r10*x1300)));
evalcond[2]=((((-1.0)*x1287*x1299))+((x1278*x1282))+((cj3*x1290))+((sj3*x1294))+((x1278*x1291))+((cj3*x1284)));
evalcond[3]=(((x1278*x1285))+((sj3*x1290))+(((-1.0)*x1280*x1295))+(((-1.0)*x1281*x1294))+((x1287*x1289))+((sj3*x1284)));
evalcond[4]=(((x1279*x1280))+((sj3*x1292))+(((-1.0)*x1281*x1298))+((x1283*x1289))+((sj3*x1286))+(((-1.0)*x1285*x1296)));
evalcond[5]=(((cj3*x1292))+(((-1.0)*x1283*x1299))+((sj3*x1298))+(((-1.0)*x1282*x1296))+((cj3*x1286))+(((-1.0)*x1291*x1296)));
evalcond[6]=((((-0.10915)*x1279))+(((-0.09465)*x1284))+((x1280*x1297))+(((-1.0)*px))+(((-1.0)*x1278*x1288))+(((-1.0)*x1285*x1297))+(((-0.09465)*x1290)));
evalcond[7]=(((x1279*x1288))+(((-0.10915)*x1278))+(((-0.09465)*x1286))+(((-1.0)*x1280*x1293))+((x1285*x1293))+(((-1.0)*py))+(((-0.09465)*x1292)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1301=IKPowWithIntegerCheck(cj3,-1);
if(!x1301.valid){
continue;
}
CheckValue<IkReal> x1302=IKPowWithIntegerCheck(r22,-1);
if(!x1302.valid){
continue;
}
sj4array[0]=((-1.0)*(x1301.value)*(x1302.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1303=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1303);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1303);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))+(((0.5)*(IKabs(((((-16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj2*cj3*r00))+(((-16.0)*cj1*r00*sj2*sj3))+(((-16.0)*cj3*r00*sj1*sj2))+(((-16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj4*r01*sj1*sj2*sj3)))))))+(IKabs(((((-8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r01*sj1))+(((-8.0)*cj1*cj3*cj4*r01*sj2))+(((8.0)*cj4*r01*sj1*sj2*sj3))+(((-8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj1*cj2*cj3*r00))+(((-8.0)*cj1*cj2*cj4*r01*sj3))+(((-8.0)*cj1*r00*sj2*sj3)))))+(((0.5)*(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1304=(cj2*sj1);
IkReal x1305=(cj2*r10);
IkReal x1306=(cj1*sj2);
IkReal x1307=(cj4*r11);
IkReal x1308=((16.0)*cj3);
IkReal x1309=(sj1*sj2);
IkReal x1310=((4.0)*cj3);
IkReal x1311=(cj4*r10);
IkReal x1312=((16.0)*sj3);
IkReal x1313=(cj1*cj2);
IkReal x1314=((8.0)*sj3);
IkReal x1315=((8.0)*cj3);
IkReal x1316=((4.0)*r11*sj3);
IkReal x1317=(cj1*x1315);
IkReal x1318=((4.0)*cj4*sj3);
IkReal x1319=(r10*x1314);
IkReal x1320=(((r11*x1309*x1310))+((x1306*x1316))+(((4.0)*sj3*x1309*x1311))+((x1304*x1316)));
IkReal x1321=(((cj1*x1305*x1318))+((x1304*x1310*x1311))+((r11*x1310*x1313))+((x1306*x1310*x1311)));
IkReal x1322=(x1321+(((-1.0)*x1320)));
IkReal x1323=(((x1306*x1307*x1315))+(((-1.0)*x1307*x1309*x1314))+((r10*x1309*x1315))+((x1306*x1319))+(((-1.0)*x1305*x1317))+((x1304*x1307*x1315))+((x1304*x1319))+((x1307*x1313*x1314)));
IkReal x1324=(x1320+(((-1.0)*x1321)));
op[0]=x1322;
op[1]=x1323;
op[2]=x1322;
op[3]=(((x1307*x1312*x1313))+((x1306*x1307*x1308))+(((-1.0)*x1307*x1309*x1312))+((r10*x1304*x1312))+(((-1.0)*cj1*x1305*x1308))+((r10*x1306*x1312))+((x1304*x1307*x1308))+((r10*x1308*x1309)));
op[4]=x1324;
op[5]=x1323;
op[6]=x1324;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5)*(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1))))))+(((htj5*htj5)*(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3))))))+(((4.0)*cj2*cj3*cj4*r00*sj1))+((htj5*(((((-8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r01*sj1))+(((-8.0)*cj1*cj3*cj4*r01*sj2))+(((8.0)*cj4*r01*sj1*sj2*sj3))+(((-8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj1*cj2*cj3*r00))+(((-8.0)*cj1*cj2*cj4*r01*sj3))+(((-8.0)*cj1*r00*sj2*sj3))))))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1))))))+(((-4.0)*cj1*r01*sj2*sj3))+(((htj5*htj5*htj5)*(((((-16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj2*cj3*r00))+(((-16.0)*cj1*r00*sj2*sj3))+(((-16.0)*cj3*r00*sj1*sj2))+(((-16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj4*r01*sj1*sj2*sj3))))))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((htj5*htj5*htj5*htj5*htj5)*(((((-8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r01*sj1))+(((-8.0)*cj1*cj3*cj4*r01*sj2))+(((8.0)*cj4*r01*sj1*sj2*sj3))+(((-8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj1*cj2*cj3*r00))+(((-8.0)*cj1*cj2*cj4*r01*sj3))+(((-8.0)*cj1*r00*sj2*sj3))))))+(((4.0)*cj1*cj2*cj4*r00*sj3)));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1325=(sj4*sj5);
IkReal x1326=((1.0)*cj5*sj4);
if( IKabs((((r11*x1325))+(((-1.0)*r10*x1326)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x1325))+(((-1.0)*r00*x1326)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x1325))+(((-1.0)*r10*x1326))))+IKsqr((((r01*x1325))+(((-1.0)*r00*x1326))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r11*x1325))+(((-1.0)*r10*x1326))), (((r01*x1325))+(((-1.0)*r00*x1326))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1327=IKsin(j0);
IkReal x1328=IKcos(j0);
IkReal x1329=(sj1*sj2);
IkReal x1330=((1.0)*cj3);
IkReal x1331=(cj1*sj2);
IkReal x1332=(r11*sj5);
IkReal x1333=(cj5*r01);
IkReal x1334=(cj1*cj2);
IkReal x1335=(cj5*r11);
IkReal x1336=(r01*sj5);
IkReal x1337=((0.425)*cj1);
IkReal x1338=(cj3*cj4);
IkReal x1339=(r00*sj5);
IkReal x1340=(cj2*sj1);
IkReal x1341=(r10*sj5);
IkReal x1342=((0.39225)*x1328);
IkReal x1343=(cj4*cj5*r00);
IkReal x1344=((1.0)*x1327);
IkReal x1345=((1.0)*x1328);
IkReal x1346=((0.39225)*x1327);
IkReal x1347=(cj4*cj5*r10);
IkReal x1348=((1.0)*cj4*sj3);
IkReal x1349=((1.0)*cj5*sj4);
evalcond[0]=(((sj4*x1336))+(((-1.0)*x1345))+(((-1.0)*r00*x1349)));
evalcond[1]=(((sj4*x1332))+(((-1.0)*x1344))+(((-1.0)*r10*x1349)));
evalcond[2]=((((-1.0)*x1336*x1348))+((x1327*x1340))+((cj3*x1339))+((cj3*x1333))+((x1327*x1331))+((sj3*x1343)));
evalcond[3]=(((x1336*x1338))+(((-1.0)*x1329*x1344))+((sj3*x1339))+((sj3*x1333))+(((-1.0)*x1330*x1343))+((x1327*x1334)));
evalcond[4]=(((sj3*x1335))+((x1328*x1329))+(((-1.0)*x1330*x1347))+(((-1.0)*x1334*x1345))+((sj3*x1341))+((x1332*x1338)));
evalcond[5]=((((-1.0)*x1331*x1345))+(((-1.0)*x1340*x1345))+((cj3*x1335))+((sj3*x1347))+((cj3*x1341))+(((-1.0)*x1332*x1348)));
evalcond[6]=((((-1.0)*x1327*x1337))+(((-0.10915)*x1328))+(((-1.0)*px))+((x1329*x1346))+(((-1.0)*x1334*x1346))+(((-0.09465)*x1339))+(((-0.09465)*x1333)));
evalcond[7]=((((-1.0)*x1329*x1342))+(((-0.10915)*x1327))+(((-0.09465)*x1341))+(((-1.0)*py))+((x1334*x1342))+((x1328*x1337))+(((-0.09465)*x1335)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1352 = IKatan2WithCheck(IkReal(((-0.09465)*r21)),IkReal(((-0.09465)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1352.valid){
continue;
}
IkReal x1350=((1.0)*(x1352.value));
if((((((0.0089586225)*(r21*r21)))+(((0.0089586225)*(r20*r20))))) < -0.00001)
continue;
CheckValue<IkReal> x1353=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.0089586225)*(r21*r21)))+(((0.0089586225)*(r20*r20)))))),-1);
if(!x1353.valid){
continue;
}
if( (((-1.0)*(x1353.value)*(((((-0.39225)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1))+(((-0.39225)*cj1*sj2)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x1353.value)*(((((-0.39225)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1))+(((-0.39225)*cj1*sj2)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1351=((-1.0)*(IKasin(((-1.0)*(x1353.value)*(((((-0.39225)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1))+(((-0.39225)*cj1*sj2))))))));
j5array[0]=((((-1.0)*x1350))+(((-1.0)*x1351)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1350))+(((1.0)*x1351)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x1354=cj5*cj5;
IkReal x1355=r21*r21;
IkReal x1356=(sj3*x1354);
IkReal x1357=(((sj3*(r22*r22)))+(((-2.0)*cj5*r20*r21*sj3*sj5))+((sj3*x1355))+((x1356*(r20*r20)))+(((-1.0)*x1355*x1356)));
j4eval[0]=x1357;
j4eval[1]=IKsign(x1357);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1358=cj5*cj5;
IkReal x1359=r21*r21;
IkReal x1360=((1.0)*cj3);
IkReal x1361=(cj3*x1358);
IkReal x1362=((((-1.0)*x1358*x1360*(r20*r20)))+((x1359*x1361))+(((-1.0)*x1360*(r22*r22)))+(((-1.0)*x1359*x1360))+(((2.0)*cj3*cj5*r20*r21*sj5)));
j4eval[0]=x1362;
j4eval[1]=IKsign(x1362);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1363=cj1*cj1;
IkReal x1364=cj2*cj2;
IkReal x1365=(cj1*sj1*sj2);
IkReal x1366=(cj2*x1363);
IkReal x1367=(x1363*x1364);
j0eval[0]=((6.19369221392727)+x1363+(((-12.4570625281677)*x1365))+(((-11.4971359451148)*cj2*x1365))+(((12.4570625281677)*x1366))+(((-5.74856797255738)*x1364))+(((11.4971359451148)*x1367)));
j0eval[1]=IKsign(((66309514.0)+(((10705975.0)*x1363))+(((123088050.0)*x1367))+(((133365000.0)*x1366))+(((-123088050.0)*cj2*x1365))+(((-133365000.0)*x1365))+(((-61544025.0)*x1364))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1368=((((-1.0)*sj1*sj2))+((cj1*cj2)));
j0eval[0]=x1368;
j0eval[1]=((IKabs(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
j0eval[2]=IKsign(x1368);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1369=cj5*cj5;
IkReal x1370=r21*r21;
IkReal x1371=(sj1*sj2);
IkReal x1372=(r21*sj5);
IkReal x1373=(cj5*r20);
IkReal x1374=(cj1*cj2);
IkReal x1375=(x1370+(r22*r22)+((x1369*(r20*r20)))+(((-2.0)*x1372*x1373))+(((-1.0)*x1369*x1370)));
j4eval[0]=x1375;
j4eval[1]=IKsign(x1375);
j4eval[2]=((IKabs(((((-1.0)*x1372*x1374))+(((-1.0)*x1371*x1373))+((x1371*x1372))+((x1373*x1374)))))+(IKabs(((((-1.0)*r22*x1374))+((r22*x1371))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=((((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.20734818680435)*px))+(((-0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.20734818680435)*px))+(((-0.566898951975751)*py))))+IKsqr(((((2.20734818680435)*py))+(((-0.566898951975751)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.20734818680435)*px))+(((-0.566898951975751)*py))), ((((2.20734818680435)*py))+(((-0.566898951975751)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1376=IKcos(j0);
IkReal x1377=IKsin(j0);
evalcond[0]=((((-0.10915)*x1376))+(((-1.0)*px))+(((-0.425)*x1377)));
evalcond[1]=((((0.425)*x1376))+(((-0.10915)*x1377))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1378=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1378;
j4eval[1]=IKsign(x1378);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1379=((1.0)*sj5);
IkReal x1380=((((-1.0)*cj5*r11))+(((-1.0)*r10*x1379)));
j4eval[0]=x1380;
j4eval[1]=((IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1379)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1380);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1381=((1.0)*cj5);
IkReal x1382=((((-1.0)*r11*x1381))+(((-1.0)*r10*sj5)));
j4eval[0]=x1382;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x1381))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1382);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1383=((1.0)*cj5);
CheckValue<IkReal> x1384=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1383))+(((-1.0)*r10*sj5)))),-1);
if(!x1384.valid){
continue;
}
CheckValue<IkReal> x1385 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1383))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1385.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1384.value)))+(x1385.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1386=IKsin(j4);
IkReal x1387=IKcos(j4);
IkReal x1388=((1.0)*cj0);
IkReal x1389=(cj5*r00);
IkReal x1390=(r11*sj5);
IkReal x1391=(cj5*r10);
IkReal x1392=(r21*sj5);
IkReal x1393=(cj5*r20);
IkReal x1394=(r01*sj5);
IkReal x1395=((1.0)*x1387);
IkReal x1396=((1.0)*x1386);
evalcond[0]=((((-1.0)*x1393*x1396))+((x1386*x1392))+(((-1.0)*r22*x1395)));
evalcond[1]=((((-1.0)*x1392*x1395))+((x1387*x1393))+(((-1.0)*r22*x1396)));
evalcond[2]=(sj0+(((-1.0)*r02*x1396))+(((-1.0)*x1394*x1395))+((x1387*x1389)));
evalcond[3]=((((-1.0)*x1388))+(((-1.0)*r02*x1395))+(((-1.0)*x1389*x1396))+((x1386*x1394)));
evalcond[4]=((((-1.0)*r12*x1395))+(((-1.0)*sj0))+(((-1.0)*x1391*x1396))+((x1386*x1390)));
evalcond[5]=((((-1.0)*x1388))+(((-1.0)*r12*x1396))+(((-1.0)*x1390*x1395))+((x1387*x1391)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1397=((1.0)*sj5);
CheckValue<IkReal> x1398 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj0*x1397))+((cj5*r20*sj0)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1398.valid){
continue;
}
CheckValue<IkReal> x1399=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x1397)))),-1);
if(!x1399.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1398.value)+(((1.5707963267949)*(x1399.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1400=IKsin(j4);
IkReal x1401=IKcos(j4);
IkReal x1402=((1.0)*cj0);
IkReal x1403=(cj5*r00);
IkReal x1404=(r11*sj5);
IkReal x1405=(cj5*r10);
IkReal x1406=(r21*sj5);
IkReal x1407=(cj5*r20);
IkReal x1408=(r01*sj5);
IkReal x1409=((1.0)*x1401);
IkReal x1410=((1.0)*x1400);
evalcond[0]=((((-1.0)*r22*x1409))+(((-1.0)*x1407*x1410))+((x1400*x1406)));
evalcond[1]=((((-1.0)*r22*x1410))+(((-1.0)*x1406*x1409))+((x1401*x1407)));
evalcond[2]=(sj0+(((-1.0)*r02*x1410))+((x1401*x1403))+(((-1.0)*x1408*x1409)));
evalcond[3]=((((-1.0)*x1402))+(((-1.0)*r02*x1409))+(((-1.0)*x1403*x1410))+((x1400*x1408)));
evalcond[4]=((((-1.0)*r12*x1409))+(((-1.0)*sj0))+(((-1.0)*x1405*x1410))+((x1400*x1404)));
evalcond[5]=((((-1.0)*x1402))+(((-1.0)*x1404*x1409))+(((-1.0)*r12*x1410))+((x1401*x1405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1411=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1411.valid){
continue;
}
CheckValue<IkReal> x1412 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1412.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1411.value)))+(x1412.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1413=IKsin(j4);
IkReal x1414=IKcos(j4);
IkReal x1415=((1.0)*cj0);
IkReal x1416=(cj5*r00);
IkReal x1417=(r11*sj5);
IkReal x1418=(cj5*r10);
IkReal x1419=(r21*sj5);
IkReal x1420=(cj5*r20);
IkReal x1421=(r01*sj5);
IkReal x1422=((1.0)*x1414);
IkReal x1423=((1.0)*x1413);
evalcond[0]=(((x1413*x1419))+(((-1.0)*x1420*x1423))+(((-1.0)*r22*x1422)));
evalcond[1]=(((x1414*x1420))+(((-1.0)*x1419*x1422))+(((-1.0)*r22*x1423)));
evalcond[2]=((((-1.0)*x1421*x1422))+sj0+(((-1.0)*r02*x1423))+((x1414*x1416)));
evalcond[3]=((((-1.0)*x1415))+(((-1.0)*x1416*x1423))+(((-1.0)*r02*x1422))+((x1413*x1421)));
evalcond[4]=((((-1.0)*sj0))+((x1413*x1417))+(((-1.0)*x1418*x1423))+(((-1.0)*r12*x1422)));
evalcond[5]=((((-1.0)*x1415))+(((-1.0)*x1417*x1422))+(((-1.0)*r12*x1423))+((x1414*x1418)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.20734818680435)*px))+(((-0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.20734818680435)*px))+(((-0.566898951975751)*py))))+IKsqr(((((2.20734818680435)*py))+(((-0.566898951975751)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.20734818680435)*px))+(((-0.566898951975751)*py))), ((((2.20734818680435)*py))+(((-0.566898951975751)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1424=IKcos(j0);
IkReal x1425=IKsin(j0);
evalcond[0]=((((-0.425)*x1425))+(((-1.0)*px))+(((-0.10915)*x1424)));
evalcond[1]=((((0.425)*x1424))+(((-1.0)*py))+(((-0.10915)*x1425)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1426=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1426;
j4eval[1]=IKsign(x1426);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1427=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1427;
j4eval[1]=IKsign(x1427);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1428=((1.0)*cj5);
IkReal x1429=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1428)));
j4eval[0]=x1429;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1428)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1429);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1430=((1.0)*cj5);
CheckValue<IkReal> x1431 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1430)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1431.valid){
continue;
}
CheckValue<IkReal> x1432=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1430))+(((-1.0)*r10*sj5)))),-1);
if(!x1432.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1431.value)+(((1.5707963267949)*(x1432.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1433=IKsin(j4);
IkReal x1434=IKcos(j4);
IkReal x1435=((1.0)*sj0);
IkReal x1436=(r11*sj5);
IkReal x1437=(cj5*r00);
IkReal x1438=(cj5*r10);
IkReal x1439=(r21*sj5);
IkReal x1440=(cj5*r20);
IkReal x1441=(r01*sj5);
IkReal x1442=((1.0)*x1434);
IkReal x1443=((1.0)*x1433);
evalcond[0]=((((-1.0)*r22*x1442))+((x1433*x1439))+(((-1.0)*x1440*x1443)));
evalcond[1]=(((x1434*x1440))+(((-1.0)*r22*x1443))+(((-1.0)*x1439*x1442)));
evalcond[2]=(cj0+(((-1.0)*r12*x1443))+((x1434*x1438))+(((-1.0)*x1436*x1442)));
evalcond[3]=((((-1.0)*x1437*x1443))+((x1433*x1441))+(((-1.0)*r02*x1442))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x1438*x1443))+((x1433*x1436))+(((-1.0)*r12*x1442))+(((-1.0)*x1435)));
evalcond[5]=((((-1.0)*x1441*x1442))+(((-1.0)*x1435))+((x1434*x1437))+(((-1.0)*r02*x1443)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1444=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1444.valid){
continue;
}
CheckValue<IkReal> x1445 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1445.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1444.value)))+(x1445.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1446=IKsin(j4);
IkReal x1447=IKcos(j4);
IkReal x1448=((1.0)*sj0);
IkReal x1449=(r11*sj5);
IkReal x1450=(cj5*r00);
IkReal x1451=(cj5*r10);
IkReal x1452=(r21*sj5);
IkReal x1453=(cj5*r20);
IkReal x1454=(r01*sj5);
IkReal x1455=((1.0)*x1447);
IkReal x1456=((1.0)*x1446);
evalcond[0]=(((x1446*x1452))+(((-1.0)*r22*x1455))+(((-1.0)*x1453*x1456)));
evalcond[1]=((((-1.0)*r22*x1456))+((x1447*x1453))+(((-1.0)*x1452*x1455)));
evalcond[2]=(cj0+((x1447*x1451))+(((-1.0)*x1449*x1455))+(((-1.0)*r12*x1456)));
evalcond[3]=(((x1446*x1454))+(((-1.0)*r02*x1455))+(((-1.0)*cj0))+(((-1.0)*x1450*x1456)));
evalcond[4]=((((-1.0)*x1448))+(((-1.0)*x1451*x1456))+((x1446*x1449))+(((-1.0)*r12*x1455)));
evalcond[5]=(((x1447*x1450))+(((-1.0)*x1454*x1455))+(((-1.0)*r02*x1456))+(((-1.0)*x1448)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1457=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1457.valid){
continue;
}
CheckValue<IkReal> x1458 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1458.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1457.value)))+(x1458.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1459=IKsin(j4);
IkReal x1460=IKcos(j4);
IkReal x1461=((1.0)*sj0);
IkReal x1462=(r11*sj5);
IkReal x1463=(cj5*r00);
IkReal x1464=(cj5*r10);
IkReal x1465=(r21*sj5);
IkReal x1466=(cj5*r20);
IkReal x1467=(r01*sj5);
IkReal x1468=((1.0)*x1460);
IkReal x1469=((1.0)*x1459);
evalcond[0]=(((x1459*x1465))+(((-1.0)*r22*x1468))+(((-1.0)*x1466*x1469)));
evalcond[1]=((((-1.0)*r22*x1469))+((x1460*x1466))+(((-1.0)*x1465*x1468)));
evalcond[2]=(cj0+(((-1.0)*x1462*x1468))+((x1460*x1464))+(((-1.0)*r12*x1469)));
evalcond[3]=((((-1.0)*r02*x1468))+((x1459*x1467))+(((-1.0)*x1463*x1469))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x1461))+((x1459*x1462))+(((-1.0)*x1464*x1469))+(((-1.0)*r12*x1468)));
evalcond[5]=((((-1.0)*r02*x1469))+(((-1.0)*x1467*x1468))+(((-1.0)*x1461))+((x1460*x1463)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*py))+IKsqr(((-9.16170407695831)*px))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*py), ((-9.16170407695831)*px));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.10915)*(IKcos(j0)))));
evalcond[1]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1470=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1470;
j4eval[1]=IKsign(x1470);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1471=((1.0)*sj5);
IkReal x1472=((((-1.0)*cj5*r11))+(((-1.0)*r10*x1471)));
j4eval[0]=x1472;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1471))))));
j4eval[2]=IKsign(x1472);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1473=((1.0)*cj5);
IkReal x1474=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1473)));
j4eval[0]=x1474;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1473))))));
j4eval[2]=IKsign(x1474);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1475=((1.0)*cj5);
CheckValue<IkReal> x1476=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1475)))),-1);
if(!x1476.valid){
continue;
}
CheckValue<IkReal> x1477 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1475)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1477.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1476.value)))+(x1477.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1478=IKsin(j4);
IkReal x1479=IKcos(j4);
IkReal x1480=((1.0)*cj0);
IkReal x1481=(cj5*r00);
IkReal x1482=(r11*sj5);
IkReal x1483=(cj5*r10);
IkReal x1484=(r21*sj5);
IkReal x1485=(cj5*r20);
IkReal x1486=(r01*sj5);
IkReal x1487=((1.0)*x1479);
IkReal x1488=((1.0)*x1478);
evalcond[0]=((((-1.0)*x1485*x1488))+(((-1.0)*r22*x1487))+((x1478*x1484)));
evalcond[1]=((((-1.0)*x1484*x1487))+(((-1.0)*r22*x1488))+((x1479*x1485)));
evalcond[2]=(sj0+(((-1.0)*x1486*x1487))+(((-1.0)*r02*x1488))+((x1479*x1481)));
evalcond[3]=((((-1.0)*x1480))+(((-1.0)*x1481*x1488))+(((-1.0)*r02*x1487))+((x1478*x1486)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*r12*x1487))+(((-1.0)*x1483*x1488))+((x1478*x1482)));
evalcond[5]=((((-1.0)*x1482*x1487))+(((-1.0)*r12*x1488))+(((-1.0)*x1480))+((x1479*x1483)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1489=((1.0)*sj5);
CheckValue<IkReal> x1490 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1489)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1490.valid){
continue;
}
CheckValue<IkReal> x1491=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x1489)))),-1);
if(!x1491.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1490.value)+(((1.5707963267949)*(x1491.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1492=IKsin(j4);
IkReal x1493=IKcos(j4);
IkReal x1494=((1.0)*cj0);
IkReal x1495=(cj5*r00);
IkReal x1496=(r11*sj5);
IkReal x1497=(cj5*r10);
IkReal x1498=(r21*sj5);
IkReal x1499=(cj5*r20);
IkReal x1500=(r01*sj5);
IkReal x1501=((1.0)*x1493);
IkReal x1502=((1.0)*x1492);
evalcond[0]=((((-1.0)*x1499*x1502))+(((-1.0)*r22*x1501))+((x1492*x1498)));
evalcond[1]=((((-1.0)*x1498*x1501))+(((-1.0)*r22*x1502))+((x1493*x1499)));
evalcond[2]=(sj0+(((-1.0)*r02*x1502))+((x1493*x1495))+(((-1.0)*x1500*x1501)));
evalcond[3]=(((x1492*x1500))+(((-1.0)*x1494))+(((-1.0)*r02*x1501))+(((-1.0)*x1495*x1502)));
evalcond[4]=((((-1.0)*sj0))+((x1492*x1496))+(((-1.0)*x1497*x1502))+(((-1.0)*r12*x1501)));
evalcond[5]=((((-1.0)*x1494))+((x1493*x1497))+(((-1.0)*x1496*x1501))+(((-1.0)*r12*x1502)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1503=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1503.valid){
continue;
}
CheckValue<IkReal> x1504 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1504.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1503.value)))+(x1504.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1505=IKsin(j4);
IkReal x1506=IKcos(j4);
IkReal x1507=((1.0)*cj0);
IkReal x1508=(cj5*r00);
IkReal x1509=(r11*sj5);
IkReal x1510=(cj5*r10);
IkReal x1511=(r21*sj5);
IkReal x1512=(cj5*r20);
IkReal x1513=(r01*sj5);
IkReal x1514=((1.0)*x1506);
IkReal x1515=((1.0)*x1505);
evalcond[0]=((((-1.0)*r22*x1514))+(((-1.0)*x1512*x1515))+((x1505*x1511)));
evalcond[1]=((((-1.0)*r22*x1515))+((x1506*x1512))+(((-1.0)*x1511*x1514)));
evalcond[2]=(sj0+(((-1.0)*x1513*x1514))+((x1506*x1508))+(((-1.0)*r02*x1515)));
evalcond[3]=((((-1.0)*x1507))+(((-1.0)*r02*x1514))+((x1505*x1513))+(((-1.0)*x1508*x1515)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x1510*x1515))+((x1505*x1509))+(((-1.0)*r12*x1514)));
evalcond[5]=((((-1.0)*x1507))+((x1506*x1510))+(((-1.0)*x1509*x1514))+(((-1.0)*r12*x1515)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*py))+IKsqr(((-9.16170407695831)*px))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*py), ((-9.16170407695831)*px));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.10915)*(IKcos(j0)))));
evalcond[1]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1516=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1516;
j4eval[1]=IKsign(x1516);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1517=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1517;
j4eval[1]=IKsign(x1517);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1518=((1.0)*cj5);
IkReal x1519=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1518)));
j4eval[0]=x1519;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x1518))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x1519);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1520=((1.0)*cj5);
CheckValue<IkReal> x1521=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1520))+(((-1.0)*r10*sj5)))),-1);
if(!x1521.valid){
continue;
}
CheckValue<IkReal> x1522 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1520))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1522.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1521.value)))+(x1522.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1523=IKsin(j4);
IkReal x1524=IKcos(j4);
IkReal x1525=((1.0)*sj0);
IkReal x1526=(r11*sj5);
IkReal x1527=(cj5*r00);
IkReal x1528=(cj5*r10);
IkReal x1529=(r21*sj5);
IkReal x1530=(cj5*r20);
IkReal x1531=(r01*sj5);
IkReal x1532=((1.0)*x1524);
IkReal x1533=((1.0)*x1523);
evalcond[0]=((((-1.0)*x1530*x1533))+(((-1.0)*r22*x1532))+((x1523*x1529)));
evalcond[1]=((((-1.0)*x1529*x1532))+((x1524*x1530))+(((-1.0)*r22*x1533)));
evalcond[2]=(((x1524*x1528))+(((-1.0)*r12*x1533))+cj0+(((-1.0)*x1526*x1532)));
evalcond[3]=(((x1523*x1531))+(((-1.0)*r02*x1532))+(((-1.0)*x1527*x1533))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*r12*x1532))+(((-1.0)*x1525))+((x1523*x1526))+(((-1.0)*x1528*x1533)));
evalcond[5]=(((x1524*x1527))+(((-1.0)*x1531*x1532))+(((-1.0)*x1525))+(((-1.0)*r02*x1533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1534=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1534.valid){
continue;
}
CheckValue<IkReal> x1535 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1535.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1534.value)))+(x1535.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1536=IKsin(j4);
IkReal x1537=IKcos(j4);
IkReal x1538=((1.0)*sj0);
IkReal x1539=(r11*sj5);
IkReal x1540=(cj5*r00);
IkReal x1541=(cj5*r10);
IkReal x1542=(r21*sj5);
IkReal x1543=(cj5*r20);
IkReal x1544=(r01*sj5);
IkReal x1545=((1.0)*x1537);
IkReal x1546=((1.0)*x1536);
evalcond[0]=((((-1.0)*x1543*x1546))+((x1536*x1542))+(((-1.0)*r22*x1545)));
evalcond[1]=(((x1537*x1543))+(((-1.0)*r22*x1546))+(((-1.0)*x1542*x1545)));
evalcond[2]=(cj0+((x1537*x1541))+(((-1.0)*x1539*x1545))+(((-1.0)*r12*x1546)));
evalcond[3]=((((-1.0)*r02*x1545))+((x1536*x1544))+(((-1.0)*x1540*x1546))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x1538))+((x1536*x1539))+(((-1.0)*r12*x1545))+(((-1.0)*x1541*x1546)));
evalcond[5]=((((-1.0)*r02*x1546))+((x1537*x1540))+(((-1.0)*x1538))+(((-1.0)*x1544*x1545)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1547=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1547.valid){
continue;
}
CheckValue<IkReal> x1548 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1548.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1547.value)))+(x1548.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1549=IKsin(j4);
IkReal x1550=IKcos(j4);
IkReal x1551=((1.0)*sj0);
IkReal x1552=(r11*sj5);
IkReal x1553=(cj5*r00);
IkReal x1554=(cj5*r10);
IkReal x1555=(r21*sj5);
IkReal x1556=(cj5*r20);
IkReal x1557=(r01*sj5);
IkReal x1558=((1.0)*x1550);
IkReal x1559=((1.0)*x1549);
evalcond[0]=((((-1.0)*r22*x1558))+((x1549*x1555))+(((-1.0)*x1556*x1559)));
evalcond[1]=((((-1.0)*r22*x1559))+((x1550*x1556))+(((-1.0)*x1555*x1558)));
evalcond[2]=(cj0+(((-1.0)*x1552*x1558))+((x1550*x1554))+(((-1.0)*r12*x1559)));
evalcond[3]=((((-1.0)*r02*x1558))+(((-1.0)*x1553*x1559))+((x1549*x1557))+(((-1.0)*cj0)));
evalcond[4]=(((x1549*x1552))+(((-1.0)*r12*x1558))+(((-1.0)*x1551))+(((-1.0)*x1554*x1559)));
evalcond[5]=(((x1550*x1553))+(((-1.0)*r02*x1559))+(((-1.0)*x1557*x1558))+(((-1.0)*x1551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.20734818680435)*px))+(((-0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20734818680435)*px))+(((-0.566898951975751)*py))))+IKsqr(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.20734818680435)*px))+(((-0.566898951975751)*py))), ((((-2.20734818680435)*py))+(((-0.566898951975751)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1560=IKsin(j0);
IkReal x1561=IKcos(j0);
evalcond[0]=((((0.425)*x1560))+(((-1.0)*px))+(((-0.10915)*x1561)));
evalcond[1]=((((-0.425)*x1561))+(((-1.0)*py))+(((-0.10915)*x1560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1562=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1562;
j4eval[1]=IKsign(x1562);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1563=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1563;
j4eval[1]=IKsign(x1563);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1564=((1.0)*cj5);
IkReal x1565=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1564)));
j4eval[0]=x1565;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1564)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1565);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1566=((1.0)*cj5);
CheckValue<IkReal> x1567=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1566)))),-1);
if(!x1567.valid){
continue;
}
CheckValue<IkReal> x1568 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1566)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1568.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1567.value)))+(x1568.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1569=IKsin(j4);
IkReal x1570=IKcos(j4);
IkReal x1571=((1.0)*sj0);
IkReal x1572=(r11*sj5);
IkReal x1573=(cj5*r00);
IkReal x1574=(cj5*r10);
IkReal x1575=(r21*sj5);
IkReal x1576=(cj5*r20);
IkReal x1577=(r01*sj5);
IkReal x1578=((1.0)*x1570);
IkReal x1579=((1.0)*x1569);
evalcond[0]=((((-1.0)*x1576*x1579))+((x1569*x1575))+(((-1.0)*r22*x1578)));
evalcond[1]=((((-1.0)*x1575*x1578))+((x1570*x1576))+(((-1.0)*r22*x1579)));
evalcond[2]=(cj0+(((-1.0)*x1572*x1578))+((x1570*x1574))+(((-1.0)*r12*x1579)));
evalcond[3]=((((-1.0)*r02*x1578))+((x1569*x1577))+(((-1.0)*x1573*x1579))+(((-1.0)*cj0)));
evalcond[4]=(((x1569*x1572))+(((-1.0)*x1574*x1579))+(((-1.0)*r12*x1578))+(((-1.0)*x1571)));
evalcond[5]=((((-1.0)*r02*x1579))+((x1570*x1573))+(((-1.0)*x1577*x1578))+(((-1.0)*x1571)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1580=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1580.valid){
continue;
}
CheckValue<IkReal> x1581 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1581.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1580.value)))+(x1581.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1582=IKsin(j4);
IkReal x1583=IKcos(j4);
IkReal x1584=((1.0)*sj0);
IkReal x1585=(r11*sj5);
IkReal x1586=(cj5*r00);
IkReal x1587=(cj5*r10);
IkReal x1588=(r21*sj5);
IkReal x1589=(cj5*r20);
IkReal x1590=(r01*sj5);
IkReal x1591=((1.0)*x1583);
IkReal x1592=((1.0)*x1582);
evalcond[0]=(((x1582*x1588))+(((-1.0)*x1589*x1592))+(((-1.0)*r22*x1591)));
evalcond[1]=((((-1.0)*x1588*x1591))+((x1583*x1589))+(((-1.0)*r22*x1592)));
evalcond[2]=((((-1.0)*x1585*x1591))+cj0+((x1583*x1587))+(((-1.0)*r12*x1592)));
evalcond[3]=((((-1.0)*r02*x1591))+((x1582*x1590))+(((-1.0)*x1586*x1592))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x1584))+((x1582*x1585))+(((-1.0)*x1587*x1592))+(((-1.0)*r12*x1591)));
evalcond[5]=((((-1.0)*x1584))+(((-1.0)*r02*x1592))+((x1583*x1586))+(((-1.0)*x1590*x1591)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1593=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1593.valid){
continue;
}
CheckValue<IkReal> x1594 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1594.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1593.value)))+(x1594.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1595=IKsin(j4);
IkReal x1596=IKcos(j4);
IkReal x1597=((1.0)*sj0);
IkReal x1598=(r11*sj5);
IkReal x1599=(cj5*r00);
IkReal x1600=(cj5*r10);
IkReal x1601=(r21*sj5);
IkReal x1602=(cj5*r20);
IkReal x1603=(r01*sj5);
IkReal x1604=((1.0)*x1596);
IkReal x1605=((1.0)*x1595);
evalcond[0]=(((x1595*x1601))+(((-1.0)*r22*x1604))+(((-1.0)*x1602*x1605)));
evalcond[1]=((((-1.0)*x1601*x1604))+(((-1.0)*r22*x1605))+((x1596*x1602)));
evalcond[2]=(cj0+((x1596*x1600))+(((-1.0)*r12*x1605))+(((-1.0)*x1598*x1604)));
evalcond[3]=(((x1595*x1603))+(((-1.0)*x1599*x1605))+(((-1.0)*r02*x1604))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x1597))+(((-1.0)*x1600*x1605))+((x1595*x1598))+(((-1.0)*r12*x1604)));
evalcond[5]=(((x1596*x1599))+(((-1.0)*x1597))+(((-1.0)*r02*x1605))+(((-1.0)*x1603*x1604)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.20734818680435)*px))+(((-0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20734818680435)*px))+(((-0.566898951975751)*py))))+IKsqr(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.20734818680435)*px))+(((-0.566898951975751)*py))), ((((-2.20734818680435)*py))+(((-0.566898951975751)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1606=IKsin(j0);
IkReal x1607=IKcos(j0);
evalcond[0]=((((-0.10915)*x1607))+(((0.425)*x1606))+(((-1.0)*px)));
evalcond[1]=((((-0.10915)*x1606))+(((-1.0)*py))+(((-0.425)*x1607)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1608=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1608;
j4eval[1]=IKsign(x1608);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1609=((1.0)*sj5);
IkReal x1610=((((-1.0)*cj5*r11))+(((-1.0)*r10*x1609)));
j4eval[0]=x1610;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1609))))));
j4eval[2]=IKsign(x1610);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1611=((1.0)*cj5);
IkReal x1612=((((-1.0)*r11*x1611))+(((-1.0)*r10*sj5)));
j4eval[0]=x1612;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1611))))));
j4eval[2]=IKsign(x1612);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1613=((1.0)*cj5);
CheckValue<IkReal> x1614 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1613)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1614.valid){
continue;
}
CheckValue<IkReal> x1615=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1613))+(((-1.0)*r10*sj5)))),-1);
if(!x1615.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1614.value)+(((1.5707963267949)*(x1615.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1616=IKsin(j4);
IkReal x1617=IKcos(j4);
IkReal x1618=((1.0)*cj0);
IkReal x1619=(cj5*r00);
IkReal x1620=(r11*sj5);
IkReal x1621=(cj5*r10);
IkReal x1622=(r21*sj5);
IkReal x1623=(cj5*r20);
IkReal x1624=(r01*sj5);
IkReal x1625=((1.0)*x1617);
IkReal x1626=((1.0)*x1616);
evalcond[0]=((((-1.0)*x1623*x1626))+(((-1.0)*r22*x1625))+((x1616*x1622)));
evalcond[1]=(((x1617*x1623))+(((-1.0)*x1622*x1625))+(((-1.0)*r22*x1626)));
evalcond[2]=(sj0+((x1617*x1619))+(((-1.0)*r02*x1626))+(((-1.0)*x1624*x1625)));
evalcond[3]=((((-1.0)*x1619*x1626))+(((-1.0)*x1618))+(((-1.0)*r02*x1625))+((x1616*x1624)));
evalcond[4]=((((-1.0)*r12*x1625))+(((-1.0)*sj0))+(((-1.0)*x1621*x1626))+((x1616*x1620)));
evalcond[5]=((((-1.0)*r12*x1626))+(((-1.0)*x1618))+((x1617*x1621))+(((-1.0)*x1620*x1625)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1627=((1.0)*sj5);
CheckValue<IkReal> x1628 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1627)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1628.valid){
continue;
}
CheckValue<IkReal> x1629=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x1627)))),-1);
if(!x1629.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1628.value)+(((1.5707963267949)*(x1629.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1630=IKsin(j4);
IkReal x1631=IKcos(j4);
IkReal x1632=((1.0)*cj0);
IkReal x1633=(cj5*r00);
IkReal x1634=(r11*sj5);
IkReal x1635=(cj5*r10);
IkReal x1636=(r21*sj5);
IkReal x1637=(cj5*r20);
IkReal x1638=(r01*sj5);
IkReal x1639=((1.0)*x1631);
IkReal x1640=((1.0)*x1630);
evalcond[0]=((((-1.0)*r22*x1639))+(((-1.0)*x1637*x1640))+((x1630*x1636)));
evalcond[1]=((((-1.0)*r22*x1640))+(((-1.0)*x1636*x1639))+((x1631*x1637)));
evalcond[2]=(sj0+(((-1.0)*x1638*x1639))+((x1631*x1633))+(((-1.0)*r02*x1640)));
evalcond[3]=((((-1.0)*x1632))+(((-1.0)*x1633*x1640))+((x1630*x1638))+(((-1.0)*r02*x1639)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x1635*x1640))+(((-1.0)*r12*x1639))+((x1630*x1634)));
evalcond[5]=((((-1.0)*r12*x1640))+(((-1.0)*x1634*x1639))+(((-1.0)*x1632))+((x1631*x1635)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1641=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1641.valid){
continue;
}
CheckValue<IkReal> x1642 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1642.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1641.value)))+(x1642.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1643=IKsin(j4);
IkReal x1644=IKcos(j4);
IkReal x1645=((1.0)*cj0);
IkReal x1646=(cj5*r00);
IkReal x1647=(r11*sj5);
IkReal x1648=(cj5*r10);
IkReal x1649=(r21*sj5);
IkReal x1650=(cj5*r20);
IkReal x1651=(r01*sj5);
IkReal x1652=((1.0)*x1644);
IkReal x1653=((1.0)*x1643);
evalcond[0]=((((-1.0)*r22*x1652))+(((-1.0)*x1650*x1653))+((x1643*x1649)));
evalcond[1]=((((-1.0)*r22*x1653))+((x1644*x1650))+(((-1.0)*x1649*x1652)));
evalcond[2]=(sj0+((x1644*x1646))+(((-1.0)*r02*x1653))+(((-1.0)*x1651*x1652)));
evalcond[3]=((((-1.0)*x1646*x1653))+(((-1.0)*x1645))+(((-1.0)*r02*x1652))+((x1643*x1651)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*r12*x1652))+((x1643*x1647))+(((-1.0)*x1648*x1653)));
evalcond[5]=((((-1.0)*x1647*x1652))+(((-1.0)*r12*x1653))+(((-1.0)*x1645))+((x1644*x1648)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*py))+IKsqr(((-9.16170407695831)*px))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*py), ((-9.16170407695831)*px));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.10915)*(IKcos(j0)))));
evalcond[1]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1654=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1654;
j4eval[1]=IKsign(x1654);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1655=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1655;
j4eval[1]=IKsign(x1655);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1656=((1.0)*cj5);
IkReal x1657=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1656)));
j4eval[0]=x1657;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1656)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1657);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1658=((1.0)*cj5);
CheckValue<IkReal> x1659=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1658)))),-1);
if(!x1659.valid){
continue;
}
CheckValue<IkReal> x1660 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1658)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1660.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1659.value)))+(x1660.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1661=IKsin(j4);
IkReal x1662=IKcos(j4);
IkReal x1663=((1.0)*sj0);
IkReal x1664=(r11*sj5);
IkReal x1665=(cj5*r00);
IkReal x1666=(cj5*r10);
IkReal x1667=(r21*sj5);
IkReal x1668=(cj5*r20);
IkReal x1669=(r01*sj5);
IkReal x1670=((1.0)*x1662);
IkReal x1671=((1.0)*x1661);
evalcond[0]=((((-1.0)*x1668*x1671))+((x1661*x1667))+(((-1.0)*r22*x1670)));
evalcond[1]=((((-1.0)*x1667*x1670))+((x1662*x1668))+(((-1.0)*r22*x1671)));
evalcond[2]=(cj0+((x1662*x1666))+(((-1.0)*r12*x1671))+(((-1.0)*x1664*x1670)));
evalcond[3]=((((-1.0)*r02*x1670))+(((-1.0)*x1665*x1671))+((x1661*x1669))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*r12*x1670))+(((-1.0)*x1663))+(((-1.0)*x1666*x1671))+((x1661*x1664)));
evalcond[5]=((((-1.0)*r02*x1671))+(((-1.0)*x1669*x1670))+((x1662*x1665))+(((-1.0)*x1663)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1672=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1672.valid){
continue;
}
CheckValue<IkReal> x1673 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1673.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1672.value)))+(x1673.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1674=IKsin(j4);
IkReal x1675=IKcos(j4);
IkReal x1676=((1.0)*sj0);
IkReal x1677=(r11*sj5);
IkReal x1678=(cj5*r00);
IkReal x1679=(cj5*r10);
IkReal x1680=(r21*sj5);
IkReal x1681=(cj5*r20);
IkReal x1682=(r01*sj5);
IkReal x1683=((1.0)*x1675);
IkReal x1684=((1.0)*x1674);
evalcond[0]=((((-1.0)*x1681*x1684))+(((-1.0)*r22*x1683))+((x1674*x1680)));
evalcond[1]=(((x1675*x1681))+(((-1.0)*r22*x1684))+(((-1.0)*x1680*x1683)));
evalcond[2]=((((-1.0)*r12*x1684))+(((-1.0)*x1677*x1683))+((x1675*x1679))+cj0);
evalcond[3]=((((-1.0)*x1678*x1684))+((x1674*x1682))+(((-1.0)*r02*x1683))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*r12*x1683))+((x1674*x1677))+(((-1.0)*x1679*x1684))+(((-1.0)*x1676)));
evalcond[5]=(((x1675*x1678))+(((-1.0)*x1682*x1683))+(((-1.0)*r02*x1684))+(((-1.0)*x1676)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1685=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1685.valid){
continue;
}
CheckValue<IkReal> x1686 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1686.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1685.value)))+(x1686.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1687=IKsin(j4);
IkReal x1688=IKcos(j4);
IkReal x1689=((1.0)*sj0);
IkReal x1690=(r11*sj5);
IkReal x1691=(cj5*r00);
IkReal x1692=(cj5*r10);
IkReal x1693=(r21*sj5);
IkReal x1694=(cj5*r20);
IkReal x1695=(r01*sj5);
IkReal x1696=((1.0)*x1688);
IkReal x1697=((1.0)*x1687);
evalcond[0]=((((-1.0)*x1694*x1697))+(((-1.0)*r22*x1696))+((x1687*x1693)));
evalcond[1]=((((-1.0)*r22*x1697))+((x1688*x1694))+(((-1.0)*x1693*x1696)));
evalcond[2]=(cj0+(((-1.0)*r12*x1697))+(((-1.0)*x1690*x1696))+((x1688*x1692)));
evalcond[3]=((((-1.0)*x1691*x1697))+(((-1.0)*r02*x1696))+((x1687*x1695))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x1692*x1697))+(((-1.0)*x1689))+(((-1.0)*r12*x1696))+((x1687*x1690)));
evalcond[5]=((((-1.0)*x1689))+(((-1.0)*r02*x1697))+((x1688*x1691))+(((-1.0)*x1695*x1696)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*py))+IKsqr(((-9.16170407695831)*px))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*py), ((-9.16170407695831)*px));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.10915)*(IKcos(j0)))));
evalcond[1]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1698=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1698;
j4eval[1]=IKsign(x1698);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1699=((1.0)*sj5);
IkReal x1700=((((-1.0)*cj5*r11))+(((-1.0)*r10*x1699)));
j4eval[0]=x1700;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x1699))+((cj5*r20*sj0))))));
j4eval[2]=IKsign(x1700);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1701=((1.0)*cj5);
IkReal x1702=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1701)));
j4eval[0]=x1702;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1701))))));
j4eval[2]=IKsign(x1702);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1703=((1.0)*cj5);
CheckValue<IkReal> x1704=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1703)))),-1);
if(!x1704.valid){
continue;
}
CheckValue<IkReal> x1705 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1703)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1705.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1704.value)))+(x1705.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1706=IKsin(j4);
IkReal x1707=IKcos(j4);
IkReal x1708=((1.0)*cj0);
IkReal x1709=(cj5*r00);
IkReal x1710=(r11*sj5);
IkReal x1711=(cj5*r10);
IkReal x1712=(r21*sj5);
IkReal x1713=(cj5*r20);
IkReal x1714=(r01*sj5);
IkReal x1715=((1.0)*x1707);
IkReal x1716=((1.0)*x1706);
evalcond[0]=((((-1.0)*x1713*x1716))+(((-1.0)*r22*x1715))+((x1706*x1712)));
evalcond[1]=((((-1.0)*x1712*x1715))+(((-1.0)*r22*x1716))+((x1707*x1713)));
evalcond[2]=((((-1.0)*x1714*x1715))+sj0+(((-1.0)*r02*x1716))+((x1707*x1709)));
evalcond[3]=((((-1.0)*x1709*x1716))+(((-1.0)*x1708))+(((-1.0)*r02*x1715))+((x1706*x1714)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x1711*x1716))+((x1706*x1710))+(((-1.0)*r12*x1715)));
evalcond[5]=((((-1.0)*x1710*x1715))+(((-1.0)*x1708))+(((-1.0)*r12*x1716))+((x1707*x1711)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1717=((1.0)*sj5);
CheckValue<IkReal> x1718=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x1717)))),-1);
if(!x1718.valid){
continue;
}
CheckValue<IkReal> x1719 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1717)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1719.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1718.value)))+(x1719.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1720=IKsin(j4);
IkReal x1721=IKcos(j4);
IkReal x1722=((1.0)*cj0);
IkReal x1723=(cj5*r00);
IkReal x1724=(r11*sj5);
IkReal x1725=(cj5*r10);
IkReal x1726=(r21*sj5);
IkReal x1727=(cj5*r20);
IkReal x1728=(r01*sj5);
IkReal x1729=((1.0)*x1721);
IkReal x1730=((1.0)*x1720);
evalcond[0]=((((-1.0)*r22*x1729))+((x1720*x1726))+(((-1.0)*x1727*x1730)));
evalcond[1]=((((-1.0)*x1726*x1729))+((x1721*x1727))+(((-1.0)*r22*x1730)));
evalcond[2]=(sj0+(((-1.0)*x1728*x1729))+((x1721*x1723))+(((-1.0)*r02*x1730)));
evalcond[3]=((((-1.0)*x1723*x1730))+((x1720*x1728))+(((-1.0)*x1722))+(((-1.0)*r02*x1729)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*r12*x1729))+((x1720*x1724))+(((-1.0)*x1725*x1730)));
evalcond[5]=((((-1.0)*r12*x1730))+((x1721*x1725))+(((-1.0)*x1724*x1729))+(((-1.0)*x1722)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1731=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1731.valid){
continue;
}
CheckValue<IkReal> x1732 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1732.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1731.value)))+(x1732.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1733=IKsin(j4);
IkReal x1734=IKcos(j4);
IkReal x1735=((1.0)*cj0);
IkReal x1736=(cj5*r00);
IkReal x1737=(r11*sj5);
IkReal x1738=(cj5*r10);
IkReal x1739=(r21*sj5);
IkReal x1740=(cj5*r20);
IkReal x1741=(r01*sj5);
IkReal x1742=((1.0)*x1734);
IkReal x1743=((1.0)*x1733);
evalcond[0]=((((-1.0)*x1740*x1743))+(((-1.0)*r22*x1742))+((x1733*x1739)));
evalcond[1]=(((x1734*x1740))+(((-1.0)*r22*x1743))+(((-1.0)*x1739*x1742)));
evalcond[2]=((((-1.0)*x1741*x1742))+sj0+((x1734*x1736))+(((-1.0)*r02*x1743)));
evalcond[3]=((((-1.0)*x1736*x1743))+((x1733*x1741))+(((-1.0)*x1735))+(((-1.0)*r02*x1742)));
evalcond[4]=((((-1.0)*r12*x1742))+(((-1.0)*sj0))+(((-1.0)*x1738*x1743))+((x1733*x1737)));
evalcond[5]=((((-1.0)*r12*x1743))+((x1734*x1738))+(((-1.0)*x1737*x1742))+(((-1.0)*x1735)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1744=(cj5*r01);
IkReal x1745=(sj1*sj2);
IkReal x1746=(cj1*cj2);
IkReal x1747=((20000.0)*px);
IkReal x1748=(r00*sj5);
IkReal x1749=((8500.0)*cj1);
CheckValue<IkReal> x1750=IKPowWithIntegerCheck((x1746+(((-1.0)*x1745))),-1);
if(!x1750.valid){
continue;
}
CheckValue<IkReal> x1751=IKPowWithIntegerCheck(((((-2183.0)*x1745))+(((2183.0)*x1746))),-1);
if(!x1751.valid){
continue;
}
if( IKabs(((x1750.value)*(((((-1.0)*x1744))+(((-1.0)*x1748)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1751.value)*(((((5952.0)*x1744*x1746))+(((-5952.0)*x1745*x1748))+(((5952.0)*x1746*x1748))+((x1744*x1749))+((x1745*x1747))+(((-1.0)*x1746*x1747))+((x1748*x1749))+(((-5952.0)*x1744*x1745)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1750.value)*(((((-1.0)*x1744))+(((-1.0)*x1748))))))+IKsqr(((x1751.value)*(((((5952.0)*x1744*x1746))+(((-5952.0)*x1745*x1748))+(((5952.0)*x1746*x1748))+((x1744*x1749))+((x1745*x1747))+(((-1.0)*x1746*x1747))+((x1748*x1749))+(((-5952.0)*x1744*x1745))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1750.value)*(((((-1.0)*x1744))+(((-1.0)*x1748))))), ((x1751.value)*(((((5952.0)*x1744*x1746))+(((-5952.0)*x1745*x1748))+(((5952.0)*x1746*x1748))+((x1744*x1749))+((x1745*x1747))+(((-1.0)*x1746*x1747))+((x1748*x1749))+(((-5952.0)*x1744*x1745))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1752=IKsin(j0);
IkReal x1753=IKcos(j0);
IkReal x1754=(cj5*r01);
IkReal x1755=(cj5*r11);
IkReal x1756=(r00*sj5);
IkReal x1757=(r10*sj5);
IkReal x1758=(cj1*x1753);
IkReal x1759=(sj1*sj2*x1752);
IkReal x1760=(cj1*cj2*x1752);
IkReal x1761=(sj1*sj2*x1753);
evalcond[0]=(x1760+x1756+x1754+(((-1.0)*x1759)));
evalcond[1]=(x1761+x1757+x1755+(((-1.0)*cj2*x1758)));
evalcond[2]=((((-0.39225)*x1760))+(((-0.425)*cj1*x1752))+(((-1.0)*px))+(((0.39225)*x1759))+(((-0.09465)*x1754))+(((-0.09465)*x1756))+(((-0.10915)*x1753)));
evalcond[3]=((((0.39225)*cj2*x1758))+(((-0.39225)*x1761))+(((-1.0)*py))+(((0.425)*x1758))+(((-0.09465)*x1757))+(((-0.09465)*x1755))+(((-0.10915)*x1752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1762=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1762;
j4eval[1]=IKsign(x1762);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1763=((1.0)*cj5);
IkReal x1764=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1763)));
j4eval[0]=x1764;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1763))))));
j4eval[2]=IKsign(x1764);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1765=((1.0)*cj0);
IkReal x1766=((1.0)*cj5);
IkReal x1767=((((-1.0)*r21*x1766))+(((-1.0)*r20*sj5)));
j4eval[0]=x1767;
j4eval[1]=((IKabs((((r02*sj0))+(((-1.0)*r12*x1765)))))+(IKabs((((cj0*cj5*r10))+(((-1.0)*r00*sj0*x1766))+(((-1.0)*r11*sj5*x1765))+((r01*sj0*sj5))))));
j4eval[2]=IKsign(x1767);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1768=((-1.0)*r20);
IkReal x1770 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1770)==0){
continue;
}
IkReal x1769=pow(x1770,-0.5);
CheckValue<IkReal> x1771 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1768),IKFAST_ATAN2_MAGTHRESH);
if(!x1771.valid){
continue;
}
IkReal gconst78=((-1.0)*(x1771.value));
IkReal gconst79=(r21*x1769);
IkReal gconst80=(x1768*x1769);
CheckValue<IkReal> x1772 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1772.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1772.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1773=((-1.0)*r20);
IkReal x1774=x1769;
CheckValue<IkReal> x1776 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1773),IKFAST_ATAN2_MAGTHRESH);
if(!x1776.valid){
continue;
}
IkReal x1775=((-1.0)*(x1776.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1775;
IkReal gconst78=x1775;
IkReal gconst79=(r21*x1774);
IkReal gconst80=(x1773*x1774);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1777=((-1.0)*r20);
IkReal x1778=x1769;
CheckValue<IkReal> x1780 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1777),IKFAST_ATAN2_MAGTHRESH);
if(!x1780.valid){
continue;
}
IkReal x1779=((-1.0)*(x1780.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1779;
IkReal gconst78=x1779;
IkReal gconst79=(r21*x1778);
IkReal gconst80=(x1777*x1778);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1781=((-1.0)*r20);
IkReal x1782=x1769;
CheckValue<IkReal> x1784 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1781),IKFAST_ATAN2_MAGTHRESH);
if(!x1784.valid){
continue;
}
IkReal x1783=((-1.0)*(x1784.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1783;
IkReal gconst78=x1783;
IkReal gconst79=(r21*x1782);
IkReal gconst80=(x1781*x1782);
IkReal x1785=r22*r22;
CheckValue<IkReal> x1788=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x1785))),-1);
if(!x1788.valid){
continue;
}
IkReal x1786=x1788.value;
IkReal x1787=(x1785+((x1786*(r20*r20*r20*r20)))+((x1786*(r21*r21*r21*r21)))+(((2.0)*x1786*(r20*r20)*(r21*r21))));
j4eval[0]=x1787;
j4eval[1]=IKsign(x1787);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1789=(sj1*sj2);
IkReal x1790=(gconst80*r20);
IkReal x1791=(gconst79*r21);
IkReal x1792=(cj1*cj2);
CheckValue<IkReal> x1793 = IKatan2WithCheck(IkReal((((r22*x1789))+(((-1.0)*r22*x1792)))),IkReal(((((-1.0)*x1789*x1790))+((x1789*x1791))+(((-1.0)*x1791*x1792))+((x1790*x1792)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1793.valid){
continue;
}
CheckValue<IkReal> x1794=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x1790*x1790)+(x1791*x1791)+(((-2.0)*x1790*x1791)))),-1);
if(!x1794.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1793.value)+(((1.5707963267949)*(x1794.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1795=IKsin(j4);
IkReal x1796=IKcos(j4);
IkReal x1797=(gconst79*r01);
IkReal x1798=(cj2*sj1);
IkReal x1799=(gconst79*r21);
IkReal x1800=((1.0)*cj1);
IkReal x1801=((1.0)*cj0);
IkReal x1802=(gconst79*r11);
IkReal x1803=((1.0)*x1796);
IkReal x1804=(gconst80*x1796);
IkReal x1805=((1.0)*x1795);
IkReal x1806=(gconst80*x1805);
evalcond[0]=((((-1.0)*r20*x1806))+((x1795*x1799))+(((-1.0)*r22*x1803)));
evalcond[1]=((((-1.0)*r00*x1806))+(((-1.0)*x1801))+(((-1.0)*r02*x1803))+((x1795*x1797)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r10*x1806))+((x1795*x1802))+(((-1.0)*r12*x1803)));
evalcond[3]=((((-1.0)*cj2*x1800))+(((-1.0)*x1799*x1803))+((sj1*sj2))+((r20*x1804))+(((-1.0)*r22*x1805)));
evalcond[4]=(((sj0*x1798))+(((-1.0)*x1797*x1803))+((cj1*sj0*sj2))+(((-1.0)*r02*x1805))+((r00*x1804)));
evalcond[5]=((((-1.0)*cj0*sj2*x1800))+(((-1.0)*x1798*x1801))+(((-1.0)*x1802*x1803))+(((-1.0)*r12*x1805))+((r10*x1804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1807=((1.0)*gconst80);
CheckValue<IkReal> x1808 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst79*r21))+(((-1.0)*cj0*r20*x1807)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1808.valid){
continue;
}
CheckValue<IkReal> x1809=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst79*r10))+(((-1.0)*r11*x1807)))),-1);
if(!x1809.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1808.value)+(((1.5707963267949)*(x1809.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1810=IKsin(j4);
IkReal x1811=IKcos(j4);
IkReal x1812=(gconst79*r01);
IkReal x1813=(cj2*sj1);
IkReal x1814=(gconst79*r21);
IkReal x1815=((1.0)*cj1);
IkReal x1816=((1.0)*cj0);
IkReal x1817=(gconst79*r11);
IkReal x1818=((1.0)*x1811);
IkReal x1819=(gconst80*x1811);
IkReal x1820=((1.0)*x1810);
IkReal x1821=(gconst80*x1820);
evalcond[0]=((((-1.0)*r20*x1821))+((x1810*x1814))+(((-1.0)*r22*x1818)));
evalcond[1]=((((-1.0)*x1816))+(((-1.0)*r02*x1818))+(((-1.0)*r00*x1821))+((x1810*x1812)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r12*x1818))+((x1810*x1817))+(((-1.0)*r10*x1821)));
evalcond[3]=((((-1.0)*cj2*x1815))+((sj1*sj2))+((r20*x1819))+(((-1.0)*r22*x1820))+(((-1.0)*x1814*x1818)));
evalcond[4]=((((-1.0)*x1812*x1818))+((cj1*sj0*sj2))+((sj0*x1813))+(((-1.0)*r02*x1820))+((r00*x1819)));
evalcond[5]=((((-1.0)*x1813*x1816))+(((-1.0)*r12*x1820))+(((-1.0)*cj0*sj2*x1815))+((r10*x1819))+(((-1.0)*x1817*x1818)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1822=IKPowWithIntegerCheck(IKsign((((gconst79*r00))+((gconst80*r01)))),-1);
if(!x1822.valid){
continue;
}
CheckValue<IkReal> x1823 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst79*r21*sj0))+(((-1.0)*gconst80*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1823.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1822.value)))+(x1823.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1824=IKsin(j4);
IkReal x1825=IKcos(j4);
IkReal x1826=(gconst79*r01);
IkReal x1827=(cj2*sj1);
IkReal x1828=(gconst79*r21);
IkReal x1829=((1.0)*cj1);
IkReal x1830=((1.0)*cj0);
IkReal x1831=(gconst79*r11);
IkReal x1832=((1.0)*x1825);
IkReal x1833=(gconst80*x1825);
IkReal x1834=((1.0)*x1824);
IkReal x1835=(gconst80*x1834);
evalcond[0]=((((-1.0)*r20*x1835))+((x1824*x1828))+(((-1.0)*r22*x1832)));
evalcond[1]=((((-1.0)*r00*x1835))+(((-1.0)*x1830))+((x1824*x1826))+(((-1.0)*r02*x1832)));
evalcond[2]=((((-1.0)*sj0))+((x1824*x1831))+(((-1.0)*r10*x1835))+(((-1.0)*r12*x1832)));
evalcond[3]=((((-1.0)*cj2*x1829))+(((-1.0)*x1828*x1832))+((sj1*sj2))+((r20*x1833))+(((-1.0)*r22*x1834)));
evalcond[4]=(((cj1*sj0*sj2))+(((-1.0)*x1826*x1832))+((sj0*x1827))+(((-1.0)*r02*x1834))+((r00*x1833)));
evalcond[5]=(((r10*x1833))+(((-1.0)*cj0*sj2*x1829))+(((-1.0)*x1827*x1830))+(((-1.0)*r12*x1834))+(((-1.0)*x1831*x1832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1836=((-1.0)*r21);
IkReal x1838 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1838)==0){
continue;
}
IkReal x1837=pow(x1838,-0.5);
CheckValue<IkReal> x1839 = IKatan2WithCheck(IkReal(x1836),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1839.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x1839.value))));
IkReal gconst82=(x1836*x1837);
IkReal gconst83=((1.0)*r20*x1837);
CheckValue<IkReal> x1840 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1840.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1840.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1841=((-1.0)*r21);
CheckValue<IkReal> x1844 = IKatan2WithCheck(IkReal(x1841),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1844.valid){
continue;
}
IkReal x1842=((1.0)*(x1844.value));
IkReal x1843=x1837;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1842)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1842)));
IkReal gconst82=(x1841*x1843);
IkReal gconst83=((1.0)*r20*x1843);
IkReal x1845=r22*r22;
IkReal x1846=((1.0)*x1845);
CheckValue<IkReal> x1850=IKPowWithIntegerCheck(((-1.0)+x1845),-1);
if(!x1850.valid){
continue;
}
IkReal x1847=x1850.value;
if((((1.0)+(((-1.0)*x1846)))) < -0.00001)
continue;
IkReal x1848=IKsqrt(((1.0)+(((-1.0)*x1846))));
IkReal x1849=(sj0*x1847*x1848);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x1849+(((-1.0)*x1846*x1849))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1851=((-1.0)*r21);
CheckValue<IkReal> x1854 = IKatan2WithCheck(IkReal(x1851),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1854.valid){
continue;
}
IkReal x1852=((1.0)*(x1854.value));
IkReal x1853=x1837;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1852)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1852)));
IkReal gconst82=(x1851*x1853);
IkReal gconst83=((1.0)*r20*x1853);
IkReal x1855=r22*r22;
IkReal x1856=((1.0)*x1855);
CheckValue<IkReal> x1860=IKPowWithIntegerCheck(((-1.0)+x1855),-1);
if(!x1860.valid){
continue;
}
IkReal x1857=x1860.value;
if((((1.0)+(((-1.0)*x1856)))) < -0.00001)
continue;
IkReal x1858=IKsqrt(((1.0)+(((-1.0)*x1856))));
IkReal x1859=(cj0*x1857*x1858);
j4eval[0]=((IKabs(((((-1.0)*x1856*x1859))+x1859)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1861=((-1.0)*r21);
CheckValue<IkReal> x1864 = IKatan2WithCheck(IkReal(x1861),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1864.valid){
continue;
}
IkReal x1862=((1.0)*(x1864.value));
IkReal x1863=x1837;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1862)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1862)));
IkReal gconst82=(x1861*x1863);
IkReal gconst83=((1.0)*r20*x1863);
IkReal x1865=r22*r22;
IkReal x1866=(cj0*r12);
IkReal x1867=(r02*sj0);
CheckValue<IkReal> x1871=IKPowWithIntegerCheck(((-1.0)+x1865),-1);
if(!x1871.valid){
continue;
}
IkReal x1868=x1871.value;
if((((1.0)+(((-1.0)*x1865)))) < -0.00001)
continue;
IkReal x1869=IKsqrt(((1.0)+(((-1.0)*x1865))));
IkReal x1870=(r22*x1868*x1869);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((x1867+(((-1.0)*x1866)))))+(IKabs((((x1866*x1870))+(((-1.0)*x1867*x1870))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1872=((1.0)*cj0);
IkReal x1873=((1.0)*gconst83);
CheckValue<IkReal> x1874=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*r21*x1873)))),-1);
if(!x1874.valid){
continue;
}
CheckValue<IkReal> x1875 = IKatan2WithCheck(IkReal((((r02*sj0))+(((-1.0)*r12*x1872)))),IkReal(((((-1.0)*gconst82*r11*x1872))+((gconst82*r01*sj0))+(((-1.0)*r00*sj0*x1873))+((cj0*gconst83*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1875.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1874.value)))+(x1875.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1876=IKsin(j4);
IkReal x1877=IKcos(j4);
IkReal x1878=(cj2*sj1);
IkReal x1879=(gconst82*r11);
IkReal x1880=((1.0)*cj1);
IkReal x1881=((1.0)*cj0);
IkReal x1882=((1.0)*x1877);
IkReal x1883=(gconst83*x1877);
IkReal x1884=(gconst82*x1876);
IkReal x1885=((1.0)*x1876);
evalcond[0]=(((r21*x1884))+(((-1.0)*r22*x1882))+(((-1.0)*gconst83*r20*x1885)));
evalcond[1]=((((-1.0)*gconst83*r00*x1885))+(((-1.0)*r02*x1882))+((r01*x1884))+(((-1.0)*x1881)));
evalcond[2]=((((-1.0)*sj0))+((x1876*x1879))+(((-1.0)*r12*x1882))+(((-1.0)*gconst83*r10*x1885)));
evalcond[3]=(((r20*x1883))+(((-1.0)*r22*x1885))+((sj1*sj2))+(((-1.0)*cj2*x1880))+(((-1.0)*gconst82*r21*x1882)));
evalcond[4]=((((-1.0)*r02*x1885))+((sj0*x1878))+((r00*x1883))+(((-1.0)*gconst82*r01*x1882))+((cj1*sj0*sj2)));
evalcond[5]=((((-1.0)*cj0*sj2*x1880))+(((-1.0)*x1879*x1882))+(((-1.0)*x1878*x1881))+(((-1.0)*r12*x1885))+((r10*x1883)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1886=((1.0)*gconst83);
CheckValue<IkReal> x1887 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst82*r21))+(((-1.0)*cj0*r20*x1886)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1887.valid){
continue;
}
CheckValue<IkReal> x1888=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1886))+(((-1.0)*gconst82*r10)))),-1);
if(!x1888.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1887.value)+(((1.5707963267949)*(x1888.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1889=IKsin(j4);
IkReal x1890=IKcos(j4);
IkReal x1891=(cj2*sj1);
IkReal x1892=(gconst82*r11);
IkReal x1893=((1.0)*cj1);
IkReal x1894=((1.0)*cj0);
IkReal x1895=((1.0)*x1890);
IkReal x1896=(gconst83*x1890);
IkReal x1897=(gconst82*x1889);
IkReal x1898=((1.0)*x1889);
evalcond[0]=((((-1.0)*r22*x1895))+(((-1.0)*gconst83*r20*x1898))+((r21*x1897)));
evalcond[1]=((((-1.0)*r02*x1895))+((r01*x1897))+(((-1.0)*x1894))+(((-1.0)*gconst83*r00*x1898)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r12*x1895))+((x1889*x1892))+(((-1.0)*gconst83*r10*x1898)));
evalcond[3]=((((-1.0)*gconst82*r21*x1895))+((r20*x1896))+((sj1*sj2))+(((-1.0)*r22*x1898))+(((-1.0)*cj2*x1893)));
evalcond[4]=((((-1.0)*r02*x1898))+((r00*x1896))+((cj1*sj0*sj2))+((sj0*x1891))+(((-1.0)*gconst82*r01*x1895)));
evalcond[5]=((((-1.0)*x1892*x1895))+((r10*x1896))+(((-1.0)*x1891*x1894))+(((-1.0)*r12*x1898))+(((-1.0)*cj0*sj2*x1893)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1899 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst82*r21*sj0))+(((-1.0)*gconst83*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1899.valid){
continue;
}
CheckValue<IkReal> x1900=IKPowWithIntegerCheck(IKsign((((gconst83*r01))+((gconst82*r00)))),-1);
if(!x1900.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1899.value)+(((1.5707963267949)*(x1900.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1901=IKsin(j4);
IkReal x1902=IKcos(j4);
IkReal x1903=(cj2*sj1);
IkReal x1904=(gconst82*r11);
IkReal x1905=((1.0)*cj1);
IkReal x1906=((1.0)*cj0);
IkReal x1907=((1.0)*x1902);
IkReal x1908=(gconst83*x1902);
IkReal x1909=(gconst82*x1901);
IkReal x1910=((1.0)*x1901);
evalcond[0]=((((-1.0)*r22*x1907))+(((-1.0)*gconst83*r20*x1910))+((r21*x1909)));
evalcond[1]=(((r01*x1909))+(((-1.0)*gconst83*r00*x1910))+(((-1.0)*r02*x1907))+(((-1.0)*x1906)));
evalcond[2]=(((x1901*x1904))+(((-1.0)*sj0))+(((-1.0)*r12*x1907))+(((-1.0)*gconst83*r10*x1910)));
evalcond[3]=((((-1.0)*r22*x1910))+((sj1*sj2))+(((-1.0)*gconst82*r21*x1907))+(((-1.0)*cj2*x1905))+((r20*x1908)));
evalcond[4]=((((-1.0)*r02*x1910))+((r00*x1908))+((cj1*sj0*sj2))+((sj0*x1903))+(((-1.0)*gconst82*r01*x1907)));
evalcond[5]=((((-1.0)*x1903*x1906))+(((-1.0)*cj0*sj2*x1905))+(((-1.0)*r12*x1910))+(((-1.0)*x1904*x1907))+((r10*x1908)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1911=((-1.0)*r10);
IkReal x1913 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x1913)==0){
continue;
}
IkReal x1912=pow(x1913,-0.5);
CheckValue<IkReal> x1914 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x1911),IKFAST_ATAN2_MAGTHRESH);
if(!x1914.valid){
continue;
}
IkReal gconst84=((-1.0)*(x1914.value));
IkReal gconst85=(r11*x1912);
IkReal gconst86=(x1911*x1912);
CheckValue<IkReal> x1915 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1915.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1915.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x1916=((-1.0)*r10);
IkReal x1917=x1912;
CheckValue<IkReal> x1919 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x1916),IKFAST_ATAN2_MAGTHRESH);
if(!x1919.valid){
continue;
}
IkReal x1918=((-1.0)*(x1919.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x1918;
IkReal gconst84=x1918;
IkReal gconst85=(r11*x1917);
IkReal gconst86=(x1916*x1917);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1920=((-1.0)*r10);
IkReal x1921=x1912;
CheckValue<IkReal> x1923 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x1920),IKFAST_ATAN2_MAGTHRESH);
if(!x1923.valid){
continue;
}
IkReal x1922=((-1.0)*(x1923.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x1922;
IkReal gconst84=x1922;
IkReal gconst85=(r11*x1921);
IkReal gconst86=(x1920*x1921);
IkReal x1924=r12*r12;
IkReal x1925=((1.0)*cj0);
IkReal x1926=(r02*sj0);
CheckValue<IkReal> x1930=IKPowWithIntegerCheck(((-1.0)+x1924),-1);
if(!x1930.valid){
continue;
}
IkReal x1927=x1930.value;
if((((1.0)+(((-1.0)*x1924)))) < -0.00001)
continue;
IkReal x1928=IKsqrt(((1.0)+(((-1.0)*x1924))));
IkReal x1929=(x1927*x1928);
j4eval[0]=((IKabs(((((-1.0)*r12*x1925))+x1926)))+(IKabs((((cj0*x1929))+((r12*x1926*x1929))+(((-1.0)*x1924*x1925*x1929))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1931=((-1.0)*r10);
IkReal x1932=x1912;
CheckValue<IkReal> x1934 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x1931),IKFAST_ATAN2_MAGTHRESH);
if(!x1934.valid){
continue;
}
IkReal x1933=((-1.0)*(x1934.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x1933;
IkReal gconst84=x1933;
IkReal gconst85=(r11*x1932);
IkReal gconst86=(x1931*x1932);
IkReal x1935=r12*r12;
IkReal x1936=(sj1*sj2);
IkReal x1937=((1.0)*cj1*cj2);
CheckValue<IkReal> x1941=IKPowWithIntegerCheck(((-1.0)+x1935),-1);
if(!x1941.valid){
continue;
}
IkReal x1938=x1941.value;
if((((1.0)+(((-1.0)*x1935)))) < -0.00001)
continue;
IkReal x1939=IKsqrt(((1.0)+(((-1.0)*x1935))));
IkReal x1940=(r12*r22*x1938*x1939);
j4eval[0]=((IKabs(((((-1.0)*r22*x1937))+((r22*x1936)))))+(IKabs(((((-1.0)*x1937*x1940))+((x1936*x1940))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1942=(gconst85*r21);
IkReal x1943=(cj1*cj2);
IkReal x1944=(sj1*sj2);
IkReal x1945=(gconst86*r20);
CheckValue<IkReal> x1946 = IKatan2WithCheck(IkReal((((r22*x1944))+(((-1.0)*r22*x1943)))),IkReal((((x1943*x1945))+(((-1.0)*x1944*x1945))+(((-1.0)*x1942*x1943))+((x1942*x1944)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1946.valid){
continue;
}
CheckValue<IkReal> x1947=IKPowWithIntegerCheck(IKsign(((x1945*x1945)+(r22*r22)+(x1942*x1942)+(((-2.0)*x1942*x1945)))),-1);
if(!x1947.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1946.value)+(((1.5707963267949)*(x1947.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1948=IKsin(j4);
IkReal x1949=IKcos(j4);
IkReal x1950=(gconst85*r21);
IkReal x1951=(cj2*sj1);
IkReal x1952=(gconst86*r00);
IkReal x1953=(gconst86*r10);
IkReal x1954=((1.0)*cj1);
IkReal x1955=(gconst85*r11);
IkReal x1956=(gconst85*r01);
IkReal x1957=((1.0)*cj0);
IkReal x1958=(gconst86*r20);
IkReal x1959=((1.0)*x1949);
IkReal x1960=((1.0)*x1948);
evalcond[0]=((((-1.0)*r22*x1959))+(((-1.0)*x1958*x1960))+((x1948*x1950)));
evalcond[1]=((((-1.0)*x1952*x1960))+(((-1.0)*x1957))+(((-1.0)*r02*x1959))+((x1948*x1956)));
evalcond[2]=((((-1.0)*sj0))+((x1948*x1955))+(((-1.0)*r12*x1959))+(((-1.0)*x1953*x1960)));
evalcond[3]=((((-1.0)*x1950*x1959))+(((-1.0)*r22*x1960))+((sj1*sj2))+(((-1.0)*cj2*x1954))+((x1949*x1958)));
evalcond[4]=((((-1.0)*r02*x1960))+((sj0*x1951))+((cj1*sj0*sj2))+((x1949*x1952))+(((-1.0)*x1956*x1959)));
evalcond[5]=((((-1.0)*x1951*x1957))+(((-1.0)*cj0*sj2*x1954))+(((-1.0)*r12*x1960))+(((-1.0)*x1955*x1959))+((x1949*x1953)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1961=((1.0)*cj0);
IkReal x1962=((1.0)*gconst86);
CheckValue<IkReal> x1963 = IKatan2WithCheck(IkReal((((r02*sj0))+(((-1.0)*r12*x1961)))),IkReal((((cj0*gconst86*r10))+((gconst85*r01*sj0))+(((-1.0)*gconst85*r11*x1961))+(((-1.0)*r00*sj0*x1962)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1963.valid){
continue;
}
CheckValue<IkReal> x1964=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst85*r20))+(((-1.0)*r21*x1962)))),-1);
if(!x1964.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1963.value)+(((1.5707963267949)*(x1964.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1965=IKsin(j4);
IkReal x1966=IKcos(j4);
IkReal x1967=(gconst85*r21);
IkReal x1968=(cj2*sj1);
IkReal x1969=(gconst86*r00);
IkReal x1970=(gconst86*r10);
IkReal x1971=((1.0)*cj1);
IkReal x1972=(gconst85*r11);
IkReal x1973=(gconst85*r01);
IkReal x1974=((1.0)*cj0);
IkReal x1975=(gconst86*r20);
IkReal x1976=((1.0)*x1966);
IkReal x1977=((1.0)*x1965);
evalcond[0]=((((-1.0)*x1975*x1977))+(((-1.0)*r22*x1976))+((x1965*x1967)));
evalcond[1]=((((-1.0)*r02*x1976))+(((-1.0)*x1974))+((x1965*x1973))+(((-1.0)*x1969*x1977)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x1970*x1977))+((x1965*x1972))+(((-1.0)*r12*x1976)));
evalcond[3]=((((-1.0)*r22*x1977))+((sj1*sj2))+(((-1.0)*cj2*x1971))+((x1966*x1975))+(((-1.0)*x1967*x1976)));
evalcond[4]=((((-1.0)*r02*x1977))+(((-1.0)*x1973*x1976))+((sj0*x1968))+((cj1*sj0*sj2))+((x1966*x1969)));
evalcond[5]=((((-1.0)*cj0*sj2*x1971))+(((-1.0)*x1968*x1974))+(((-1.0)*x1972*x1976))+((x1966*x1970))+(((-1.0)*r12*x1977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1978=IKPowWithIntegerCheck(IKsign((((gconst85*r00))+((gconst86*r01)))),-1);
if(!x1978.valid){
continue;
}
CheckValue<IkReal> x1979 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst86*r20*sj0))+((gconst85*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1979.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1978.value)))+(x1979.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1980=IKsin(j4);
IkReal x1981=IKcos(j4);
IkReal x1982=(gconst85*r21);
IkReal x1983=(cj2*sj1);
IkReal x1984=(gconst86*r00);
IkReal x1985=(gconst86*r10);
IkReal x1986=((1.0)*cj1);
IkReal x1987=(gconst85*r11);
IkReal x1988=(gconst85*r01);
IkReal x1989=((1.0)*cj0);
IkReal x1990=(gconst86*r20);
IkReal x1991=((1.0)*x1981);
IkReal x1992=((1.0)*x1980);
evalcond[0]=(((x1980*x1982))+(((-1.0)*x1990*x1992))+(((-1.0)*r22*x1991)));
evalcond[1]=((((-1.0)*x1989))+(((-1.0)*r02*x1991))+((x1980*x1988))+(((-1.0)*x1984*x1992)));
evalcond[2]=((((-1.0)*sj0))+((x1980*x1987))+(((-1.0)*x1985*x1992))+(((-1.0)*r12*x1991)));
evalcond[3]=((((-1.0)*x1982*x1991))+(((-1.0)*cj2*x1986))+((sj1*sj2))+(((-1.0)*r22*x1992))+((x1981*x1990)));
evalcond[4]=(((x1981*x1984))+(((-1.0)*r02*x1992))+((sj0*x1983))+((cj1*sj0*sj2))+(((-1.0)*x1988*x1991)));
evalcond[5]=((((-1.0)*x1983*x1989))+(((-1.0)*cj0*sj2*x1986))+((x1981*x1985))+(((-1.0)*x1987*x1991))+(((-1.0)*r12*x1992)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1993=((-1.0)*r11);
IkReal x1995 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x1995)==0){
continue;
}
IkReal x1994=pow(x1995,-0.5);
CheckValue<IkReal> x1996 = IKatan2WithCheck(IkReal(x1993),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1996.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x1996.value))));
IkReal gconst88=(x1993*x1994);
IkReal gconst89=((1.0)*r10*x1994);
CheckValue<IkReal> x1997 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1997.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1997.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x1998=((-1.0)*r11);
CheckValue<IkReal> x2001 = IKatan2WithCheck(IkReal(x1998),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2001.valid){
continue;
}
IkReal x1999=((1.0)*(x2001.value));
IkReal x2000=x1994;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x1999)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1999)));
IkReal gconst88=(x1998*x2000);
IkReal gconst89=((1.0)*r10*x2000);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x2002=((-1.0)*r11);
CheckValue<IkReal> x2005 = IKatan2WithCheck(IkReal(x2002),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2005.valid){
continue;
}
IkReal x2003=((1.0)*(x2005.value));
IkReal x2004=x1994;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2003)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2003)));
IkReal gconst88=(x2002*x2004);
IkReal gconst89=((1.0)*r10*x2004);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2006=((1.0)*cj0);
IkReal x2007=((1.0)*gconst89);
CheckValue<IkReal> x2008 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2006))+((r02*sj0)))),IkReal(((((-1.0)*r00*sj0*x2007))+((gconst88*r01*sj0))+(((-1.0)*gconst88*r11*x2006))+((cj0*gconst89*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2008.valid){
continue;
}
CheckValue<IkReal> x2009=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*r21*x2007)))),-1);
if(!x2009.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2008.value)+(((1.5707963267949)*(x2009.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2010=IKsin(j4);
IkReal x2011=IKcos(j4);
IkReal x2012=(cj2*sj1);
IkReal x2013=((1.0)*cj1);
IkReal x2014=(gconst89*r20);
IkReal x2015=(gconst89*r10);
IkReal x2016=((1.0)*cj0);
IkReal x2017=(gconst89*r00);
IkReal x2018=((1.0)*x2011);
IkReal x2019=((1.0)*x2010);
IkReal x2020=(gconst88*x2010);
evalcond[0]=((((-1.0)*x2014*x2019))+((r21*x2020))+(((-1.0)*r22*x2018)));
evalcond[1]=(((r01*x2020))+(((-1.0)*x2016))+(((-1.0)*r02*x2018))+(((-1.0)*x2017*x2019)));
evalcond[2]=((((-1.0)*sj0))+((r11*x2020))+(((-1.0)*x2015*x2019))+(((-1.0)*r12*x2018)));
evalcond[3]=((((-1.0)*gconst88*r21*x2018))+((sj1*sj2))+((x2011*x2014))+(((-1.0)*cj2*x2013))+(((-1.0)*r22*x2019)));
evalcond[4]=(((sj0*x2012))+(((-1.0)*gconst88*r01*x2018))+((x2011*x2017))+((cj1*sj0*sj2))+(((-1.0)*r02*x2019)));
evalcond[5]=((((-1.0)*gconst88*r11*x2018))+((x2011*x2015))+(((-1.0)*r12*x2019))+(((-1.0)*x2012*x2016))+(((-1.0)*cj0*sj2*x2013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2021=((1.0)*gconst89);
CheckValue<IkReal> x2022=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2021))+(((-1.0)*gconst88*r10)))),-1);
if(!x2022.valid){
continue;
}
CheckValue<IkReal> x2023 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2021))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2023.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2022.value)))+(x2023.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2024=IKsin(j4);
IkReal x2025=IKcos(j4);
IkReal x2026=(cj2*sj1);
IkReal x2027=((1.0)*cj1);
IkReal x2028=(gconst89*r20);
IkReal x2029=(gconst89*r10);
IkReal x2030=((1.0)*cj0);
IkReal x2031=(gconst89*r00);
IkReal x2032=((1.0)*x2025);
IkReal x2033=((1.0)*x2024);
IkReal x2034=(gconst88*x2024);
evalcond[0]=(((r21*x2034))+(((-1.0)*r22*x2032))+(((-1.0)*x2028*x2033)));
evalcond[1]=(((r01*x2034))+(((-1.0)*r02*x2032))+(((-1.0)*x2030))+(((-1.0)*x2031*x2033)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r12*x2032))+(((-1.0)*x2029*x2033))+((r11*x2034)));
evalcond[3]=((((-1.0)*cj2*x2027))+(((-1.0)*r22*x2033))+((x2025*x2028))+((sj1*sj2))+(((-1.0)*gconst88*r21*x2032)));
evalcond[4]=(((x2025*x2031))+((sj0*x2026))+((cj1*sj0*sj2))+(((-1.0)*r02*x2033))+(((-1.0)*gconst88*r01*x2032)));
evalcond[5]=((((-1.0)*cj0*sj2*x2027))+(((-1.0)*r12*x2033))+((x2025*x2029))+(((-1.0)*x2026*x2030))+(((-1.0)*gconst88*r11*x2032)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2035=IKPowWithIntegerCheck(IKsign((((gconst88*r00))+((gconst89*r01)))),-1);
if(!x2035.valid){
continue;
}
CheckValue<IkReal> x2036 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst89*r20*sj0))+((gconst88*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2036.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2035.value)))+(x2036.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2037=IKsin(j4);
IkReal x2038=IKcos(j4);
IkReal x2039=(cj2*sj1);
IkReal x2040=((1.0)*cj1);
IkReal x2041=(gconst89*r20);
IkReal x2042=(gconst89*r10);
IkReal x2043=((1.0)*cj0);
IkReal x2044=(gconst89*r00);
IkReal x2045=((1.0)*x2038);
IkReal x2046=((1.0)*x2037);
IkReal x2047=(gconst88*x2037);
evalcond[0]=(((r21*x2047))+(((-1.0)*r22*x2045))+(((-1.0)*x2041*x2046)));
evalcond[1]=((((-1.0)*x2043))+(((-1.0)*r02*x2045))+(((-1.0)*x2044*x2046))+((r01*x2047)));
evalcond[2]=((((-1.0)*sj0))+((r11*x2047))+(((-1.0)*x2042*x2046))+(((-1.0)*r12*x2045)));
evalcond[3]=((((-1.0)*cj2*x2040))+(((-1.0)*r22*x2046))+((sj1*sj2))+(((-1.0)*gconst88*r21*x2045))+((x2038*x2041)));
evalcond[4]=((((-1.0)*r02*x2046))+((cj1*sj0*sj2))+((sj0*x2039))+(((-1.0)*gconst88*r01*x2045))+((x2038*x2044)));
evalcond[5]=((((-1.0)*x2039*x2043))+(((-1.0)*cj0*sj2*x2040))+(((-1.0)*gconst88*r11*x2045))+((x2038*x2042))+(((-1.0)*r12*x2046)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2048=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2048;
j4eval[1]=IKsign(x2048);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2049=((1.0)*cj5);
IkReal x2050=((((-1.0)*r21*x2049))+(((-1.0)*r20*sj5)));
j4eval[0]=x2050;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x2049))))));
j4eval[2]=IKsign(x2050);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2051=cj5*cj5;
IkReal x2052=r11*r11;
IkReal x2053=(cj5*r10);
IkReal x2054=(r11*sj5);
IkReal x2055=((((2.0)*x2053*x2054))+(((-1.0)*x2052))+(((-1.0)*x2051*(r10*r10)))+(((-1.0)*(r12*r12)))+((x2051*x2052)));
j4eval[0]=x2055;
j4eval[1]=((IKabs((x2053+(((-1.0)*x2054)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2055);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2056=cj5*cj5;
IkReal x2057=r11*r11;
IkReal x2058=(cj5*r10);
IkReal x2059=(r11*sj5);
CheckValue<IkReal> x2060 = IKatan2WithCheck(IkReal((x2058+(((-1.0)*x2059)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2060.valid){
continue;
}
CheckValue<IkReal> x2061=IKPowWithIntegerCheck(IKsign(((((2.0)*x2058*x2059))+(((-1.0)*x2056*(r10*r10)))+(((-1.0)*x2057))+(((-1.0)*(r12*r12)))+((x2056*x2057)))),-1);
if(!x2061.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2060.value)+(((1.5707963267949)*(x2061.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2062=IKsin(j4);
IkReal x2063=IKcos(j4);
IkReal x2064=(cj5*r10);
IkReal x2065=(r01*sj5);
IkReal x2066=(cj5*r00);
IkReal x2067=(cj5*r20);
IkReal x2068=((1.0)*x2063);
IkReal x2069=((1.0)*x2062);
IkReal x2070=(sj5*x2062);
evalcond[0]=((((-1.0)*r22*x2068))+(((-1.0)*x2067*x2069))+((r21*x2070)));
evalcond[1]=((((-1.0)*r02*x2068))+((x2062*x2065))+(((-1.0)*x2066*x2069)));
evalcond[2]=((((-1.0)*r12*x2069))+(((-1.0)*r11*sj5*x2068))+((x2063*x2064)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2068))+(((-1.0)*x2064*x2069))+((r11*x2070)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x2069))+((cj1*sj2))+(((-1.0)*x2065*x2068))+((x2063*x2066)));
evalcond[5]=((((-1.0)*r22*x2069))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2063*x2067))+(((-1.0)*r21*sj5*x2068)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2071=((1.0)*cj5);
CheckValue<IkReal> x2072 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2071)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2072.valid){
continue;
}
CheckValue<IkReal> x2073=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2071))+(((-1.0)*r20*sj5)))),-1);
if(!x2073.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2072.value)+(((1.5707963267949)*(x2073.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2074=IKsin(j4);
IkReal x2075=IKcos(j4);
IkReal x2076=(cj5*r10);
IkReal x2077=(r01*sj5);
IkReal x2078=(cj5*r00);
IkReal x2079=(cj5*r20);
IkReal x2080=((1.0)*x2075);
IkReal x2081=((1.0)*x2074);
IkReal x2082=(sj5*x2074);
evalcond[0]=((((-1.0)*r22*x2080))+((r21*x2082))+(((-1.0)*x2079*x2081)));
evalcond[1]=((((-1.0)*r02*x2080))+(((-1.0)*x2078*x2081))+((x2074*x2077)));
evalcond[2]=(((x2075*x2076))+(((-1.0)*r11*sj5*x2080))+(((-1.0)*r12*x2081)));
evalcond[3]=((-1.0)+(((-1.0)*x2076*x2081))+(((-1.0)*r12*x2080))+((r11*x2082)));
evalcond[4]=((((-1.0)*r02*x2081))+((cj2*sj1))+((x2075*x2078))+((cj1*sj2))+(((-1.0)*x2077*x2080)));
evalcond[5]=(((x2075*x2079))+(((-1.0)*r21*sj5*x2080))+(((-1.0)*r22*x2081))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2083 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2083.valid){
continue;
}
CheckValue<IkReal> x2084=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2084.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2083.value)+(((1.5707963267949)*(x2084.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2085=IKsin(j4);
IkReal x2086=IKcos(j4);
IkReal x2087=(cj5*r10);
IkReal x2088=(r01*sj5);
IkReal x2089=(cj5*r00);
IkReal x2090=(cj5*r20);
IkReal x2091=((1.0)*x2086);
IkReal x2092=((1.0)*x2085);
IkReal x2093=(sj5*x2085);
evalcond[0]=((((-1.0)*x2090*x2092))+((r21*x2093))+(((-1.0)*r22*x2091)));
evalcond[1]=(((x2085*x2088))+(((-1.0)*x2089*x2092))+(((-1.0)*r02*x2091)));
evalcond[2]=((((-1.0)*r11*sj5*x2091))+((x2086*x2087))+(((-1.0)*r12*x2092)));
evalcond[3]=((-1.0)+(((-1.0)*x2087*x2092))+(((-1.0)*r12*x2091))+((r11*x2093)));
evalcond[4]=(((cj2*sj1))+((x2086*x2089))+((cj1*sj2))+(((-1.0)*x2088*x2091))+(((-1.0)*r02*x2092)));
evalcond[5]=((((-1.0)*r21*sj5*x2091))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2092))+((x2086*x2090)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2094=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2094;
j4eval[1]=IKsign(x2094);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2095=((1.0)*cj5);
IkReal x2096=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2095)));
j4eval[0]=x2096;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x2095))+((r21*sj5))))));
j4eval[2]=IKsign(x2096);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2097=cj5*cj5;
IkReal x2098=r11*r11;
IkReal x2099=(r11*sj5);
IkReal x2100=(cj5*r10);
IkReal x2101=((r12*r12)+((x2097*(r10*r10)))+x2098+(((-2.0)*x2099*x2100))+(((-1.0)*x2097*x2098)));
j4eval[0]=x2101;
j4eval[1]=IKsign(x2101);
j4eval[2]=((IKabs(r12))+(IKabs((x2100+(((-1.0)*x2099))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2102=cj5*cj5;
IkReal x2103=r11*r11;
IkReal x2104=(cj5*r10);
IkReal x2105=(r11*sj5);
CheckValue<IkReal> x2106 = IKatan2WithCheck(IkReal((x2104+(((-1.0)*x2105)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2106.valid){
continue;
}
CheckValue<IkReal> x2107=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x2102*x2103))+(((-2.0)*x2104*x2105))+x2103+((x2102*(r10*r10))))),-1);
if(!x2107.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2106.value)+(((1.5707963267949)*(x2107.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2108=IKsin(j4);
IkReal x2109=IKcos(j4);
IkReal x2110=(cj5*r10);
IkReal x2111=(r01*sj5);
IkReal x2112=((1.0)*cj2);
IkReal x2113=(cj5*r00);
IkReal x2114=(cj5*r20);
IkReal x2115=((1.0)*x2109);
IkReal x2116=((1.0)*x2108);
IkReal x2117=(sj5*x2108);
evalcond[0]=((((-1.0)*x2114*x2116))+((r21*x2117))+(((-1.0)*r22*x2115)));
evalcond[1]=((((-1.0)*r02*x2115))+((x2108*x2111))+(((-1.0)*x2113*x2116)));
evalcond[2]=(((x2109*x2110))+(((-1.0)*r11*sj5*x2115))+(((-1.0)*r12*x2116)));
evalcond[3]=((1.0)+(((-1.0)*x2110*x2116))+(((-1.0)*r12*x2115))+((r11*x2117)));
evalcond[4]=(((x2109*x2114))+(((-1.0)*r21*sj5*x2115))+((sj1*sj2))+(((-1.0)*r22*x2116))+(((-1.0)*cj1*x2112)));
evalcond[5]=(((x2109*x2113))+(((-1.0)*sj1*x2112))+(((-1.0)*cj1*sj2))+(((-1.0)*x2111*x2115))+(((-1.0)*r02*x2116)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2118=((1.0)*cj5);
CheckValue<IkReal> x2119=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2118))+(((-1.0)*r00*sj5)))),-1);
if(!x2119.valid){
continue;
}
CheckValue<IkReal> x2120 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x2118))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2120.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2119.value)))+(x2120.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2121=IKsin(j4);
IkReal x2122=IKcos(j4);
IkReal x2123=(cj5*r10);
IkReal x2124=(r01*sj5);
IkReal x2125=((1.0)*cj2);
IkReal x2126=(cj5*r00);
IkReal x2127=(cj5*r20);
IkReal x2128=((1.0)*x2122);
IkReal x2129=((1.0)*x2121);
IkReal x2130=(sj5*x2121);
evalcond[0]=(((r21*x2130))+(((-1.0)*r22*x2128))+(((-1.0)*x2127*x2129)));
evalcond[1]=((((-1.0)*r02*x2128))+((x2121*x2124))+(((-1.0)*x2126*x2129)));
evalcond[2]=(((x2122*x2123))+(((-1.0)*r12*x2129))+(((-1.0)*r11*sj5*x2128)));
evalcond[3]=((1.0)+((r11*x2130))+(((-1.0)*r12*x2128))+(((-1.0)*x2123*x2129)));
evalcond[4]=(((x2122*x2127))+(((-1.0)*r22*x2129))+((sj1*sj2))+(((-1.0)*cj1*x2125))+(((-1.0)*r21*sj5*x2128)));
evalcond[5]=(((x2122*x2126))+(((-1.0)*r02*x2129))+(((-1.0)*cj1*sj2))+(((-1.0)*x2124*x2128))+(((-1.0)*sj1*x2125)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2131=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2131.valid){
continue;
}
CheckValue<IkReal> x2132 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2132.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2131.value)))+(x2132.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2133=IKsin(j4);
IkReal x2134=IKcos(j4);
IkReal x2135=(cj5*r10);
IkReal x2136=(r01*sj5);
IkReal x2137=((1.0)*cj2);
IkReal x2138=(cj5*r00);
IkReal x2139=(cj5*r20);
IkReal x2140=((1.0)*x2134);
IkReal x2141=((1.0)*x2133);
IkReal x2142=(sj5*x2133);
evalcond[0]=((((-1.0)*r22*x2140))+((r21*x2142))+(((-1.0)*x2139*x2141)));
evalcond[1]=((((-1.0)*x2138*x2141))+(((-1.0)*r02*x2140))+((x2133*x2136)));
evalcond[2]=((((-1.0)*r11*sj5*x2140))+(((-1.0)*r12*x2141))+((x2134*x2135)));
evalcond[3]=((1.0)+((r11*x2142))+(((-1.0)*x2135*x2141))+(((-1.0)*r12*x2140)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x2137))+((x2134*x2139))+(((-1.0)*r22*x2141))+(((-1.0)*r21*sj5*x2140)));
evalcond[5]=((((-1.0)*x2136*x2140))+(((-1.0)*sj1*x2137))+(((-1.0)*r02*x2141))+(((-1.0)*cj1*sj2))+((x2134*x2138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2144 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2144)==0){
continue;
}
IkReal x2143=pow(x2144,-0.5);
CheckValue<IkReal> x2145 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2145.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2145.value));
IkReal gconst91=((-1.0)*r01*x2143);
IkReal gconst92=(r00*x2143);
CheckValue<IkReal> x2146 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2146.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2146.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2149 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2149.valid){
continue;
}
IkReal x2147=((-1.0)*(x2149.value));
IkReal x2148=x2143;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2147;
IkReal gconst90=x2147;
IkReal gconst91=((-1.0)*r01*x2148);
IkReal gconst92=(r00*x2148);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2152 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2152.valid){
continue;
}
IkReal x2150=((-1.0)*(x2152.value));
IkReal x2151=x2143;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2150;
IkReal gconst90=x2150;
IkReal gconst91=((-1.0)*r01*x2151);
IkReal gconst92=(r00*x2151);
IkReal x2153=r02*r02;
IkReal x2154=(cj0*r12);
IkReal x2155=((1.0)*x2153);
CheckValue<IkReal> x2159=IKPowWithIntegerCheck(((-1.0)+x2153),-1);
if(!x2159.valid){
continue;
}
IkReal x2156=x2159.value;
if((((1.0)+(((-1.0)*x2155)))) < -0.00001)
continue;
IkReal x2157=IKsqrt(((1.0)+(((-1.0)*x2155))));
IkReal x2158=(x2156*x2157);
j4eval[0]=((IKabs((((r02*x2154*x2158))+(((-1.0)*sj0*x2155*x2158))+((sj0*x2158)))))+(IKabs((((r02*sj0))+(((-1.0)*x2154))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2162 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2162.valid){
continue;
}
IkReal x2160=((-1.0)*(x2162.value));
IkReal x2161=x2143;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2160;
IkReal gconst90=x2160;
IkReal gconst91=((-1.0)*r01*x2161);
IkReal gconst92=(r00*x2161);
IkReal x2163=r02*r02;
IkReal x2164=(r22*sj1*sj2);
IkReal x2165=(cj1*cj2*r22);
CheckValue<IkReal> x2169=IKPowWithIntegerCheck(((-1.0)+x2163),-1);
if(!x2169.valid){
continue;
}
IkReal x2166=x2169.value;
if((((1.0)+(((-1.0)*x2163)))) < -0.00001)
continue;
IkReal x2167=IKsqrt(((1.0)+(((-1.0)*x2163))));
IkReal x2168=(r02*x2166*x2167);
j4eval[0]=((IKabs((((x2165*x2168))+(((-1.0)*x2164*x2168)))))+(IKabs((x2164+(((-1.0)*x2165))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2170=(gconst91*r21);
IkReal x2171=(sj1*sj2);
IkReal x2172=(gconst92*r20);
IkReal x2173=((1.0)*cj1*cj2);
CheckValue<IkReal> x2174 = IKatan2WithCheck(IkReal((((r22*x2171))+(((-1.0)*r22*x2173)))),IkReal(((((-1.0)*x2170*x2173))+((x2170*x2171))+(((-1.0)*x2171*x2172))+((cj1*cj2*x2172)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2174.valid){
continue;
}
CheckValue<IkReal> x2175=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x2170*x2170)+(x2172*x2172)+(((-2.0)*x2170*x2172)))),-1);
if(!x2175.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2174.value)+(((1.5707963267949)*(x2175.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2176=IKsin(j4);
IkReal x2177=IKcos(j4);
IkReal x2178=(cj2*sj1);
IkReal x2179=((1.0)*cj1);
IkReal x2180=(gconst92*r00);
IkReal x2181=(gconst92*r20);
IkReal x2182=((1.0)*cj0);
IkReal x2183=(gconst92*r10);
IkReal x2184=((1.0)*x2177);
IkReal x2185=(gconst91*x2176);
IkReal x2186=((1.0)*x2176);
evalcond[0]=(((r21*x2185))+(((-1.0)*r22*x2184))+(((-1.0)*x2181*x2186)));
evalcond[1]=((((-1.0)*x2180*x2186))+(((-1.0)*r02*x2184))+(((-1.0)*x2182))+((r01*x2185)));
evalcond[2]=((((-1.0)*sj0))+((r11*x2185))+(((-1.0)*x2183*x2186))+(((-1.0)*r12*x2184)));
evalcond[3]=((((-1.0)*cj2*x2179))+((sj1*sj2))+((x2177*x2181))+(((-1.0)*gconst91*r21*x2184))+(((-1.0)*r22*x2186)));
evalcond[4]=(((cj1*sj0*sj2))+((x2177*x2180))+(((-1.0)*r02*x2186))+(((-1.0)*gconst91*r01*x2184))+((sj0*x2178)));
evalcond[5]=((((-1.0)*cj0*sj2*x2179))+((x2177*x2183))+(((-1.0)*x2178*x2182))+(((-1.0)*r12*x2186))+(((-1.0)*gconst91*r11*x2184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2187=((1.0)*cj0);
IkReal x2188=((1.0)*gconst92);
CheckValue<IkReal> x2189 = IKatan2WithCheck(IkReal((((r02*sj0))+(((-1.0)*r12*x2187)))),IkReal(((((-1.0)*r00*sj0*x2188))+((cj0*gconst92*r10))+((gconst91*r01*sj0))+(((-1.0)*gconst91*r11*x2187)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2189.valid){
continue;
}
CheckValue<IkReal> x2190=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2188))+(((-1.0)*gconst91*r20)))),-1);
if(!x2190.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2189.value)+(((1.5707963267949)*(x2190.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2191=IKsin(j4);
IkReal x2192=IKcos(j4);
IkReal x2193=(cj2*sj1);
IkReal x2194=((1.0)*cj1);
IkReal x2195=(gconst92*r00);
IkReal x2196=(gconst92*r20);
IkReal x2197=((1.0)*cj0);
IkReal x2198=(gconst92*r10);
IkReal x2199=((1.0)*x2192);
IkReal x2200=(gconst91*x2191);
IkReal x2201=((1.0)*x2191);
evalcond[0]=((((-1.0)*x2196*x2201))+(((-1.0)*r22*x2199))+((r21*x2200)));
evalcond[1]=(((r01*x2200))+(((-1.0)*x2195*x2201))+(((-1.0)*r02*x2199))+(((-1.0)*x2197)));
evalcond[2]=((((-1.0)*sj0))+((r11*x2200))+(((-1.0)*x2198*x2201))+(((-1.0)*r12*x2199)));
evalcond[3]=(((x2192*x2196))+(((-1.0)*r22*x2201))+(((-1.0)*gconst91*r21*x2199))+((sj1*sj2))+(((-1.0)*cj2*x2194)));
evalcond[4]=(((x2192*x2195))+((sj0*x2193))+((cj1*sj0*sj2))+(((-1.0)*gconst91*r01*x2199))+(((-1.0)*r02*x2201)));
evalcond[5]=(((x2192*x2198))+(((-1.0)*x2193*x2197))+(((-1.0)*r12*x2201))+(((-1.0)*cj0*sj2*x2194))+(((-1.0)*gconst91*r11*x2199)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2202=((1.0)*gconst92);
CheckValue<IkReal> x2203=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r10))+(((-1.0)*r11*x2202)))),-1);
if(!x2203.valid){
continue;
}
CheckValue<IkReal> x2204 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst91*r21))+(((-1.0)*cj0*r20*x2202)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2204.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2203.value)))+(x2204.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2205=IKsin(j4);
IkReal x2206=IKcos(j4);
IkReal x2207=(cj2*sj1);
IkReal x2208=((1.0)*cj1);
IkReal x2209=(gconst92*r00);
IkReal x2210=(gconst92*r20);
IkReal x2211=((1.0)*cj0);
IkReal x2212=(gconst92*r10);
IkReal x2213=((1.0)*x2206);
IkReal x2214=(gconst91*x2205);
IkReal x2215=((1.0)*x2205);
evalcond[0]=((((-1.0)*x2210*x2215))+(((-1.0)*r22*x2213))+((r21*x2214)));
evalcond[1]=(((r01*x2214))+(((-1.0)*x2211))+(((-1.0)*x2209*x2215))+(((-1.0)*r02*x2213)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r12*x2213))+((r11*x2214))+(((-1.0)*x2212*x2215)));
evalcond[3]=(((x2206*x2210))+(((-1.0)*r22*x2215))+((sj1*sj2))+(((-1.0)*gconst91*r21*x2213))+(((-1.0)*cj2*x2208)));
evalcond[4]=(((x2206*x2209))+((cj1*sj0*sj2))+(((-1.0)*gconst91*r01*x2213))+((sj0*x2207))+(((-1.0)*r02*x2215)));
evalcond[5]=((((-1.0)*cj0*sj2*x2208))+(((-1.0)*x2207*x2211))+((x2206*x2212))+(((-1.0)*r12*x2215))+(((-1.0)*gconst91*r11*x2213)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2217 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2217)==0){
continue;
}
IkReal x2216=pow(x2217,-0.5);
CheckValue<IkReal> x2218 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2218.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2218.value))));
IkReal gconst94=((1.0)*r01*x2216);
IkReal gconst95=((-1.0)*r00*x2216);
CheckValue<IkReal> x2219 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2219.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2219.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x2222 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2222.valid){
continue;
}
IkReal x2220=((1.0)*(x2222.value));
IkReal x2221=x2216;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2220)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2220)));
IkReal gconst94=((1.0)*r01*x2221);
IkReal gconst95=((-1.0)*r00*x2221);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=sj0;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x2225 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2225.valid){
continue;
}
IkReal x2223=((1.0)*(x2225.value));
IkReal x2224=x2216;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2223)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2223)));
IkReal gconst94=((1.0)*r01*x2224);
IkReal gconst95=((-1.0)*r00*x2224);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2226=((1.0)*cj0);
IkReal x2227=((1.0)*gconst95);
CheckValue<IkReal> x2228 = IKatan2WithCheck(IkReal((((r02*sj0))+(((-1.0)*r12*x2226)))),IkReal(((((-1.0)*gconst94*r11*x2226))+(((-1.0)*r00*sj0*x2227))+((gconst94*r01*sj0))+((cj0*gconst95*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2228.valid){
continue;
}
CheckValue<IkReal> x2229=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2227))+(((-1.0)*gconst94*r20)))),-1);
if(!x2229.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2228.value)+(((1.5707963267949)*(x2229.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2230=IKsin(j4);
IkReal x2231=IKcos(j4);
IkReal x2232=(cj2*sj1);
IkReal x2233=(gconst94*r11);
IkReal x2234=(gconst95*r10);
IkReal x2235=((1.0)*cj1);
IkReal x2236=(gconst94*r21);
IkReal x2237=((1.0)*cj0);
IkReal x2238=(gconst94*r01);
IkReal x2239=((1.0)*x2231);
IkReal x2240=((1.0)*x2230);
IkReal x2241=(gconst95*x2231);
evalcond[0]=(((x2230*x2236))+(((-1.0)*r22*x2239))+(((-1.0)*gconst95*r20*x2240)));
evalcond[1]=((((-1.0)*gconst95*r00*x2240))+(((-1.0)*r02*x2239))+(((-1.0)*x2237))+((x2230*x2238)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x2234*x2240))+(((-1.0)*r12*x2239))+((x2230*x2233)));
evalcond[3]=((((-1.0)*r22*x2240))+(((-1.0)*x2236*x2239))+((sj1*sj2))+((r20*x2241))+(((-1.0)*cj2*x2235)));
evalcond[4]=((((-1.0)*r02*x2240))+((sj0*x2232))+(((-1.0)*x2238*x2239))+((cj1*sj0*sj2))+((r00*x2241)));
evalcond[5]=((((-1.0)*x2232*x2237))+(((-1.0)*cj0*sj2*x2235))+(((-1.0)*r12*x2240))+((x2231*x2234))+(((-1.0)*x2233*x2239)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2242=((1.0)*gconst95);
CheckValue<IkReal> x2243 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2242))+((cj0*gconst94*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2243.valid){
continue;
}
CheckValue<IkReal> x2244=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r10))+(((-1.0)*r11*x2242)))),-1);
if(!x2244.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2243.value)+(((1.5707963267949)*(x2244.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2245=IKsin(j4);
IkReal x2246=IKcos(j4);
IkReal x2247=(cj2*sj1);
IkReal x2248=(gconst94*r11);
IkReal x2249=(gconst95*r10);
IkReal x2250=((1.0)*cj1);
IkReal x2251=(gconst94*r21);
IkReal x2252=((1.0)*cj0);
IkReal x2253=(gconst94*r01);
IkReal x2254=((1.0)*x2246);
IkReal x2255=((1.0)*x2245);
IkReal x2256=(gconst95*x2246);
evalcond[0]=((((-1.0)*r22*x2254))+((x2245*x2251))+(((-1.0)*gconst95*r20*x2255)));
evalcond[1]=((((-1.0)*gconst95*r00*x2255))+((x2245*x2253))+(((-1.0)*r02*x2254))+(((-1.0)*x2252)));
evalcond[2]=((((-1.0)*x2249*x2255))+(((-1.0)*sj0))+(((-1.0)*r12*x2254))+((x2245*x2248)));
evalcond[3]=((((-1.0)*r22*x2255))+((sj1*sj2))+(((-1.0)*cj2*x2250))+((r20*x2256))+(((-1.0)*x2251*x2254)));
evalcond[4]=((((-1.0)*r02*x2255))+(((-1.0)*x2253*x2254))+((cj1*sj0*sj2))+((sj0*x2247))+((r00*x2256)));
evalcond[5]=(((x2246*x2249))+(((-1.0)*cj0*sj2*x2250))+(((-1.0)*r12*x2255))+(((-1.0)*x2248*x2254))+(((-1.0)*x2247*x2252)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2257 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst94*r21*sj0))+(((-1.0)*gconst95*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2257.valid){
continue;
}
CheckValue<IkReal> x2258=IKPowWithIntegerCheck(IKsign((((gconst95*r01))+((gconst94*r00)))),-1);
if(!x2258.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2257.value)+(((1.5707963267949)*(x2258.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2259=IKsin(j4);
IkReal x2260=IKcos(j4);
IkReal x2261=(cj2*sj1);
IkReal x2262=(gconst94*r11);
IkReal x2263=(gconst95*r10);
IkReal x2264=((1.0)*cj1);
IkReal x2265=(gconst94*r21);
IkReal x2266=((1.0)*cj0);
IkReal x2267=(gconst94*r01);
IkReal x2268=((1.0)*x2260);
IkReal x2269=((1.0)*x2259);
IkReal x2270=(gconst95*x2260);
evalcond[0]=(((x2259*x2265))+(((-1.0)*gconst95*r20*x2269))+(((-1.0)*r22*x2268)));
evalcond[1]=(((x2259*x2267))+(((-1.0)*gconst95*r00*x2269))+(((-1.0)*r02*x2268))+(((-1.0)*x2266)));
evalcond[2]=(((x2259*x2262))+(((-1.0)*sj0))+(((-1.0)*x2263*x2269))+(((-1.0)*r12*x2268)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r22*x2269))+((r20*x2270))+(((-1.0)*x2265*x2268))+(((-1.0)*cj2*x2264)));
evalcond[4]=(((r00*x2270))+((sj0*x2261))+((cj1*sj0*sj2))+(((-1.0)*r02*x2269))+(((-1.0)*x2267*x2268)));
evalcond[5]=(((x2260*x2263))+(((-1.0)*x2261*x2266))+(((-1.0)*cj0*sj2*x2264))+(((-1.0)*r12*x2269))+(((-1.0)*x2262*x2268)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2271=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2271;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2271);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2272=((1.0)*cj5);
IkReal x2273=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2272)));
j4eval[0]=x2273;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x2272)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2273);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2274=cj5*cj5;
IkReal x2275=r01*r01;
IkReal x2276=(r01*sj5);
IkReal x2277=(cj5*r00);
IkReal x2278=((((-1.0)*x2274*(r00*r00)))+(((-1.0)*(r02*r02)))+(((-1.0)*x2275))+(((2.0)*x2276*x2277))+((x2274*x2275)));
j4eval[0]=x2278;
j4eval[1]=IKsign(x2278);
j4eval[2]=((IKabs((x2277+(((-1.0)*x2276)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2279=cj5*cj5;
IkReal x2280=r01*r01;
IkReal x2281=(r01*sj5);
IkReal x2282=(cj5*r00);
CheckValue<IkReal> x2283=IKPowWithIntegerCheck(IKsign(((((2.0)*x2281*x2282))+(((-1.0)*(r02*r02)))+(((-1.0)*x2280))+((x2279*x2280))+(((-1.0)*x2279*(r00*r00))))),-1);
if(!x2283.valid){
continue;
}
CheckValue<IkReal> x2284 = IKatan2WithCheck(IkReal((x2282+(((-1.0)*x2281)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2284.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2283.value)))+(x2284.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2285=IKsin(j4);
IkReal x2286=IKcos(j4);
IkReal x2287=(cj5*r10);
IkReal x2288=(r01*sj5);
IkReal x2289=((1.0)*cj2);
IkReal x2290=(cj5*r00);
IkReal x2291=(cj5*r20);
IkReal x2292=((1.0)*x2286);
IkReal x2293=((1.0)*x2285);
IkReal x2294=(sj5*x2285);
evalcond[0]=(((r21*x2294))+(((-1.0)*x2291*x2293))+(((-1.0)*r22*x2292)));
evalcond[1]=((((-1.0)*x2287*x2293))+(((-1.0)*r12*x2292))+((r11*x2294)));
evalcond[2]=((((-1.0)*r02*x2293))+(((-1.0)*x2288*x2292))+((x2286*x2290)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x2292))+(((-1.0)*x2290*x2293))+((x2285*x2288)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x2289))+((x2286*x2291))+(((-1.0)*r21*sj5*x2292))+(((-1.0)*r22*x2293)));
evalcond[5]=((((-1.0)*r11*sj5*x2292))+(((-1.0)*sj1*x2289))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x2293))+((x2286*x2287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2295=((1.0)*cj5);
CheckValue<IkReal> x2296 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2295)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2296.valid){
continue;
}
CheckValue<IkReal> x2297=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2295)))),-1);
if(!x2297.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2296.value)+(((1.5707963267949)*(x2297.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2298=IKsin(j4);
IkReal x2299=IKcos(j4);
IkReal x2300=(cj5*r10);
IkReal x2301=(r01*sj5);
IkReal x2302=((1.0)*cj2);
IkReal x2303=(cj5*r00);
IkReal x2304=(cj5*r20);
IkReal x2305=((1.0)*x2299);
IkReal x2306=((1.0)*x2298);
IkReal x2307=(sj5*x2298);
evalcond[0]=((((-1.0)*r22*x2305))+(((-1.0)*x2304*x2306))+((r21*x2307)));
evalcond[1]=(((r11*x2307))+(((-1.0)*x2300*x2306))+(((-1.0)*r12*x2305)));
evalcond[2]=((((-1.0)*x2301*x2305))+((x2299*x2303))+(((-1.0)*r02*x2306)));
evalcond[3]=((-1.0)+(((-1.0)*x2303*x2306))+((x2298*x2301))+(((-1.0)*r02*x2305)));
evalcond[4]=((((-1.0)*r22*x2306))+((sj1*sj2))+(((-1.0)*r21*sj5*x2305))+(((-1.0)*cj1*x2302))+((x2299*x2304)));
evalcond[5]=((((-1.0)*sj1*x2302))+(((-1.0)*r11*sj5*x2305))+(((-1.0)*cj1*sj2))+((x2299*x2300))+(((-1.0)*r12*x2306)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2308=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2308.valid){
continue;
}
CheckValue<IkReal> x2309 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2309.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2308.value)))+(x2309.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2310=IKsin(j4);
IkReal x2311=IKcos(j4);
IkReal x2312=(cj5*r10);
IkReal x2313=(r01*sj5);
IkReal x2314=((1.0)*cj2);
IkReal x2315=(cj5*r00);
IkReal x2316=(cj5*r20);
IkReal x2317=((1.0)*x2311);
IkReal x2318=((1.0)*x2310);
IkReal x2319=(sj5*x2310);
evalcond[0]=((((-1.0)*r22*x2317))+((r21*x2319))+(((-1.0)*x2316*x2318)));
evalcond[1]=((((-1.0)*x2312*x2318))+((r11*x2319))+(((-1.0)*r12*x2317)));
evalcond[2]=(((x2311*x2315))+(((-1.0)*x2313*x2317))+(((-1.0)*r02*x2318)));
evalcond[3]=((-1.0)+(((-1.0)*x2315*x2318))+(((-1.0)*r02*x2317))+((x2310*x2313)));
evalcond[4]=(((x2311*x2316))+(((-1.0)*r22*x2318))+((sj1*sj2))+(((-1.0)*cj1*x2314))+(((-1.0)*r21*sj5*x2317)));
evalcond[5]=(((x2311*x2312))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x2317))+(((-1.0)*r12*x2318))+(((-1.0)*sj1*x2314)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2320=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2320;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2320);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2321=((1.0)*cj5);
IkReal x2322=((((-1.0)*r20*sj5))+(((-1.0)*r21*x2321)));
j4eval[0]=x2322;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x2321))))));
j4eval[2]=IKsign(x2322);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2323=cj5*cj5;
IkReal x2324=r01*r01;
IkReal x2325=(cj5*r00);
IkReal x2326=(r01*sj5);
IkReal x2327=(x2324+((x2323*(r00*r00)))+(((-2.0)*x2325*x2326))+(r02*r02)+(((-1.0)*x2323*x2324)));
j4eval[0]=x2327;
j4eval[1]=((IKabs((x2325+(((-1.0)*x2326)))))+(IKabs(r02)));
j4eval[2]=IKsign(x2327);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2328=cj5*cj5;
IkReal x2329=r01*r01;
IkReal x2330=(r01*sj5);
IkReal x2331=(cj5*r00);
CheckValue<IkReal> x2332 = IKatan2WithCheck(IkReal((x2331+(((-1.0)*x2330)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2332.valid){
continue;
}
CheckValue<IkReal> x2333=IKPowWithIntegerCheck(IKsign((x2329+((x2328*(r00*r00)))+(((-2.0)*x2330*x2331))+(r02*r02)+(((-1.0)*x2328*x2329)))),-1);
if(!x2333.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2332.value)+(((1.5707963267949)*(x2333.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2334=IKsin(j4);
IkReal x2335=IKcos(j4);
IkReal x2336=(cj5*r10);
IkReal x2337=(r01*sj5);
IkReal x2338=(cj5*r00);
IkReal x2339=(cj5*r20);
IkReal x2340=((1.0)*x2335);
IkReal x2341=((1.0)*x2334);
IkReal x2342=(sj5*x2334);
evalcond[0]=((((-1.0)*x2339*x2341))+(((-1.0)*r22*x2340))+((r21*x2342)));
evalcond[1]=(((r11*x2342))+(((-1.0)*x2336*x2341))+(((-1.0)*r12*x2340)));
evalcond[2]=((((-1.0)*x2337*x2340))+((x2335*x2338))+(((-1.0)*r02*x2341)));
evalcond[3]=((1.0)+((x2334*x2337))+(((-1.0)*r02*x2340))+(((-1.0)*x2338*x2341)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r11*sj5*x2340))+((x2335*x2336))+(((-1.0)*r12*x2341)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x2335*x2339))+(((-1.0)*r22*x2341))+(((-1.0)*r21*sj5*x2340)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2343=((1.0)*cj5);
CheckValue<IkReal> x2344=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2343))+(((-1.0)*r20*sj5)))),-1);
if(!x2344.valid){
continue;
}
CheckValue<IkReal> x2345 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x2343)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2345.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2344.value)))+(x2345.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2346=IKsin(j4);
IkReal x2347=IKcos(j4);
IkReal x2348=(cj5*r10);
IkReal x2349=(r01*sj5);
IkReal x2350=(cj5*r00);
IkReal x2351=(cj5*r20);
IkReal x2352=((1.0)*x2347);
IkReal x2353=((1.0)*x2346);
IkReal x2354=(sj5*x2346);
evalcond[0]=((((-1.0)*r22*x2352))+(((-1.0)*x2351*x2353))+((r21*x2354)));
evalcond[1]=((((-1.0)*x2348*x2353))+((r11*x2354))+(((-1.0)*r12*x2352)));
evalcond[2]=((((-1.0)*r02*x2353))+((x2347*x2350))+(((-1.0)*x2349*x2352)));
evalcond[3]=((1.0)+((x2346*x2349))+(((-1.0)*x2350*x2353))+(((-1.0)*r02*x2352)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x2352))+((cj1*sj2))+(((-1.0)*r12*x2353))+((x2347*x2348)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2353))+(((-1.0)*r21*sj5*x2352))+((x2347*x2351)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2355 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2355.valid){
continue;
}
CheckValue<IkReal> x2356=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2356.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2355.value)+(((1.5707963267949)*(x2356.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2357=IKsin(j4);
IkReal x2358=IKcos(j4);
IkReal x2359=(cj5*r10);
IkReal x2360=(r01*sj5);
IkReal x2361=(cj5*r00);
IkReal x2362=(cj5*r20);
IkReal x2363=((1.0)*x2358);
IkReal x2364=((1.0)*x2357);
IkReal x2365=(sj5*x2357);
evalcond[0]=((((-1.0)*r22*x2363))+(((-1.0)*x2362*x2364))+((r21*x2365)));
evalcond[1]=(((r11*x2365))+(((-1.0)*x2359*x2364))+(((-1.0)*r12*x2363)));
evalcond[2]=(((x2358*x2361))+(((-1.0)*x2360*x2363))+(((-1.0)*r02*x2364)));
evalcond[3]=((1.0)+(((-1.0)*x2361*x2364))+((x2357*x2360))+(((-1.0)*r02*x2363)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x2363))+((cj1*sj2))+((x2358*x2359))+(((-1.0)*r12*x2364)));
evalcond[5]=((((-1.0)*r21*sj5*x2363))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2358*x2362))+(((-1.0)*r22*x2364)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2366=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2366);
rxp1_1=(px*r21);
rxp1_2=(r11*x2366);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2367=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2367);
rxp1_1=(px*r21);
rxp1_2=(r11*x2367);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2368=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2368);
rxp1_1=(px*r21);
rxp1_2=(r11*x2368);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2371=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x2371.valid){
continue;
}
IkReal x2369=x2371.value;
IkReal x2370=(cj0*x2369);
cj4array[0]=(((cj2*sj1*x2370))+((cj1*sj2*x2370)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2372=IKsin(j4);
IkReal x2373=IKcos(j4);
IkReal x2374=(cj5*r20);
IkReal x2375=(r21*sj5);
IkReal x2376=((1.0)*x2372);
IkReal x2377=((1.0)*x2373);
evalcond[0]=((-1.0)*r02*x2372);
evalcond[1]=((((-1.0)*r02*x2377))+(((-1.0)*cj0)));
evalcond[2]=(((x2372*x2375))+(((-1.0)*x2374*x2376)));
evalcond[3]=(((r11*sj5*x2372))+(((-1.0)*cj5*r10*x2376)));
evalcond[4]=(((x2373*x2374))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x2375*x2377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2379=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x2379.valid){
continue;
}
IkReal x2378=x2379.value;
cj4array[0]=((((-1.0)*sj1*sj2*x2378))+((cj1*cj2*x2378)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2380=IKsin(j4);
IkReal x2381=IKcos(j4);
IkReal x2382=(r11*sj5);
IkReal x2383=((1.0)*cj0);
IkReal x2384=((1.0)*x2381);
IkReal x2385=((1.0)*cj5*x2380);
evalcond[0]=((-1.0)*r02*x2380);
evalcond[1]=((((-1.0)*r02*x2384))+(((-1.0)*x2383)));
evalcond[2]=(((r21*sj5*x2380))+(((-1.0)*r20*x2385)));
evalcond[3]=((((-1.0)*r10*x2385))+((x2380*x2382)));
evalcond[4]=((((-1.0)*cj1*sj2*x2383))+(((-1.0)*x2382*x2384))+(((-1.0)*cj2*sj1*x2383))+((cj5*r10*x2381)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2386=IKPowWithIntegerCheck(r02,-1);
if(!x2386.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x2386.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2387=IKsin(j4);
IkReal x2388=IKcos(j4);
IkReal x2389=((1.0)*cj0);
IkReal x2390=(cj5*x2388);
IkReal x2391=(sj5*x2387);
IkReal x2392=((1.0)*sj5*x2388);
IkReal x2393=((1.0)*cj5*x2387);
evalcond[0]=((-1.0)*r02*x2387);
evalcond[1]=((((-1.0)*r20*x2393))+((r21*x2391)));
evalcond[2]=((((-1.0)*r10*x2393))+((r11*x2391)));
evalcond[3]=(((r20*x2390))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x2392)));
evalcond[4]=((((-1.0)*cj1*sj2*x2389))+(((-1.0)*cj2*sj1*x2389))+((r10*x2390))+(((-1.0)*r11*x2392)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2394=((1.0)*cj0);
IkReal x2395=((1.0)*cj5);
CheckValue<IkReal> x2396=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2395))+(((-1.0)*r20*sj5)))),-1);
if(!x2396.valid){
continue;
}
CheckValue<IkReal> x2397 = IKatan2WithCheck(IkReal((((r02*sj0))+(((-1.0)*r12*x2394)))),IkReal((((cj0*cj5*r10))+(((-1.0)*r00*sj0*x2395))+((r01*sj0*sj5))+(((-1.0)*r11*sj5*x2394)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2397.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2396.value)))+(x2397.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2398=IKsin(j4);
IkReal x2399=IKcos(j4);
IkReal x2400=(cj5*r10);
IkReal x2401=(cj2*sj1);
IkReal x2402=(r01*sj5);
IkReal x2403=((1.0)*cj1);
IkReal x2404=(cj5*r00);
IkReal x2405=((1.0)*cj0);
IkReal x2406=(cj5*r20);
IkReal x2407=((1.0)*x2399);
IkReal x2408=((1.0)*x2398);
IkReal x2409=(sj5*x2398);
evalcond[0]=((((-1.0)*x2406*x2408))+((r21*x2409))+(((-1.0)*r22*x2407)));
evalcond[1]=((((-1.0)*x2404*x2408))+(((-1.0)*x2405))+((x2398*x2402))+(((-1.0)*r02*x2407)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x2400*x2408))+((r11*x2409))+(((-1.0)*r12*x2407)));
evalcond[3]=((((-1.0)*cj2*x2403))+(((-1.0)*r21*sj5*x2407))+((x2399*x2406))+((sj1*sj2))+(((-1.0)*r22*x2408)));
evalcond[4]=(((x2399*x2404))+(((-1.0)*r02*x2408))+((cj1*sj0*sj2))+(((-1.0)*x2402*x2407))+((sj0*x2401)));
evalcond[5]=((((-1.0)*x2401*x2405))+(((-1.0)*cj0*sj2*x2403))+((x2399*x2400))+(((-1.0)*r11*sj5*x2407))+(((-1.0)*r12*x2408)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2410=((1.0)*cj5);
CheckValue<IkReal> x2411=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2410)))),-1);
if(!x2411.valid){
continue;
}
CheckValue<IkReal> x2412 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2410))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2412.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2411.value)))+(x2412.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2413=IKsin(j4);
IkReal x2414=IKcos(j4);
IkReal x2415=(cj5*r10);
IkReal x2416=(cj2*sj1);
IkReal x2417=(r01*sj5);
IkReal x2418=((1.0)*cj1);
IkReal x2419=(cj5*r00);
IkReal x2420=((1.0)*cj0);
IkReal x2421=(cj5*r20);
IkReal x2422=((1.0)*x2414);
IkReal x2423=((1.0)*x2413);
IkReal x2424=(sj5*x2413);
evalcond[0]=(((r21*x2424))+(((-1.0)*x2421*x2423))+(((-1.0)*r22*x2422)));
evalcond[1]=((((-1.0)*r02*x2422))+((x2413*x2417))+(((-1.0)*x2420))+(((-1.0)*x2419*x2423)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r12*x2422))+((r11*x2424))+(((-1.0)*x2415*x2423)));
evalcond[3]=(((x2414*x2421))+((sj1*sj2))+(((-1.0)*r22*x2423))+(((-1.0)*r21*sj5*x2422))+(((-1.0)*cj2*x2418)));
evalcond[4]=((((-1.0)*r02*x2423))+((x2414*x2419))+((sj0*x2416))+((cj1*sj0*sj2))+(((-1.0)*x2417*x2422)));
evalcond[5]=((((-1.0)*r11*sj5*x2422))+((x2414*x2415))+(((-1.0)*r12*x2423))+(((-1.0)*x2416*x2420))+(((-1.0)*cj0*sj2*x2418)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2425=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2425.valid){
continue;
}
CheckValue<IkReal> x2426 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2426.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2425.value)))+(x2426.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2427=IKsin(j4);
IkReal x2428=IKcos(j4);
IkReal x2429=(cj5*r10);
IkReal x2430=(cj2*sj1);
IkReal x2431=(r01*sj5);
IkReal x2432=((1.0)*cj1);
IkReal x2433=(cj5*r00);
IkReal x2434=((1.0)*cj0);
IkReal x2435=(cj5*r20);
IkReal x2436=((1.0)*x2428);
IkReal x2437=((1.0)*x2427);
IkReal x2438=(sj5*x2427);
evalcond[0]=((((-1.0)*r22*x2436))+((r21*x2438))+(((-1.0)*x2435*x2437)));
evalcond[1]=((((-1.0)*x2433*x2437))+(((-1.0)*x2434))+(((-1.0)*r02*x2436))+((x2427*x2431)));
evalcond[2]=((((-1.0)*sj0))+((r11*x2438))+(((-1.0)*x2429*x2437))+(((-1.0)*r12*x2436)));
evalcond[3]=((((-1.0)*r22*x2437))+((x2428*x2435))+(((-1.0)*cj2*x2432))+(((-1.0)*r21*sj5*x2436))+((sj1*sj2)));
evalcond[4]=(((x2428*x2433))+(((-1.0)*x2431*x2436))+((cj1*sj0*sj2))+(((-1.0)*r02*x2437))+((sj0*x2430)));
evalcond[5]=((((-1.0)*cj0*sj2*x2432))+(((-1.0)*x2430*x2434))+((x2428*x2429))+(((-1.0)*r11*sj5*x2436))+(((-1.0)*r12*x2437)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2439=cj5*cj5;
IkReal x2440=r21*r21;
IkReal x2441=(sj1*sj2);
IkReal x2442=(r21*sj5);
IkReal x2443=(cj1*cj2);
IkReal x2444=(cj5*r20);
CheckValue<IkReal> x2445 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2443))+((r22*x2441)))),IkReal((((x2443*x2444))+(((-1.0)*x2442*x2443))+(((-1.0)*x2441*x2444))+((x2441*x2442)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2445.valid){
continue;
}
CheckValue<IkReal> x2446=IKPowWithIntegerCheck(IKsign((x2440+(r22*r22)+(((-1.0)*x2439*x2440))+((x2439*(r20*r20)))+(((-2.0)*x2442*x2444)))),-1);
if(!x2446.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2445.value)+(((1.5707963267949)*(x2446.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2447=IKsin(j4);
IkReal x2448=IKcos(j4);
IkReal x2449=(r21*sj5);
IkReal x2450=(cj5*r20);
IkReal x2451=((1.0)*x2448);
IkReal x2452=((1.0)*x2447);
evalcond[0]=((((-1.0)*x2450*x2452))+((x2447*x2449))+(((-1.0)*r22*x2451)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x2449*x2451))+((x2448*x2450))+(((-1.0)*r22*x2452)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2453=(sj4*sj5);
IkReal x2454=((1.0)*cj4);
IkReal x2455=((1.0)*cj5*sj4);
if( IKabs(((((-1.0)*r10*x2455))+(((-1.0)*r12*x2454))+((r11*x2453)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x2453))+(((-1.0)*r02*x2454))+(((-1.0)*r00*x2455)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x2455))+(((-1.0)*r12*x2454))+((r11*x2453))))+IKsqr((((r01*x2453))+(((-1.0)*r02*x2454))+(((-1.0)*r00*x2455))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x2455))+(((-1.0)*r12*x2454))+((r11*x2453))), (((r01*x2453))+(((-1.0)*r02*x2454))+(((-1.0)*r00*x2455))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2456=IKsin(j0);
IkReal x2457=IKcos(j0);
IkReal x2458=(cj4*cj5);
IkReal x2459=(cj5*r01);
IkReal x2460=((1.0)*sj2);
IkReal x2461=((0.39225)*sj2);
IkReal x2462=(r11*sj5);
IkReal x2463=((1.0)*sj4);
IkReal x2464=((0.39225)*cj2);
IkReal x2465=((1.0)*cj2);
IkReal x2466=(r00*sj5);
IkReal x2467=(cj5*r11);
IkReal x2468=((1.0)*cj4);
IkReal x2469=(r01*sj5);
IkReal x2470=(r10*sj5);
IkReal x2471=(sj1*x2456);
IkReal x2472=(cj1*x2457);
IkReal x2473=(cj1*x2456);
IkReal x2474=(sj1*x2457);
evalcond[0]=((((-1.0)*cj5*r00*x2463))+(((-1.0)*x2457))+(((-1.0)*r02*x2468))+((sj4*x2469)));
evalcond[1]=((((-1.0)*r12*x2468))+(((-1.0)*x2456))+(((-1.0)*cj5*r10*x2463))+((sj4*x2462)));
evalcond[2]=((((-1.0)*x2460*x2471))+x2466+x2459+((cj2*x2473)));
evalcond[3]=(x2467+x2470+((sj2*x2474))+(((-1.0)*x2465*x2472)));
evalcond[4]=(((cj2*x2471))+(((-1.0)*x2468*x2469))+((r00*x2458))+((sj2*x2473))+(((-1.0)*r02*x2463)));
evalcond[5]=((((-1.0)*x2460*x2472))+(((-1.0)*r12*x2463))+((r10*x2458))+(((-1.0)*x2465*x2474))+(((-1.0)*x2462*x2468)));
evalcond[6]=(((x2461*x2471))+(((-1.0)*px))+(((-0.09465)*x2466))+(((-0.10915)*x2457))+(((-0.425)*x2473))+(((-1.0)*x2464*x2473))+(((-0.09465)*x2459)));
evalcond[7]=((((-1.0)*py))+(((0.425)*x2472))+(((-0.09465)*x2467))+(((-0.10915)*x2456))+(((-0.09465)*x2470))+(((-1.0)*x2461*x2474))+((x2464*x2472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x2475=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj1*sj2))+((cj1*cj2)))),-1);
if(!x2475.valid){
continue;
}
CheckValue<IkReal> x2476 = IKatan2WithCheck(IkReal(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),IkReal((((cj5*r11))+((r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2476.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2475.value)))+(x2476.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2477=IKsin(j0);
IkReal x2478=IKcos(j0);
IkReal x2479=(cj5*r01);
IkReal x2480=(cj5*r11);
IkReal x2481=(r00*sj5);
IkReal x2482=(r10*sj5);
IkReal x2483=(cj1*x2478);
IkReal x2484=(sj1*sj2*x2477);
IkReal x2485=(cj1*cj2*x2477);
IkReal x2486=(sj1*sj2*x2478);
evalcond[0]=(x2485+x2481+x2479+(((-1.0)*x2484)));
evalcond[1]=(x2486+x2482+x2480+(((-1.0)*cj2*x2483)));
evalcond[2]=((((-0.09465)*x2481))+(((-1.0)*px))+(((0.39225)*x2484))+(((-0.425)*cj1*x2477))+(((-0.09465)*x2479))+(((-0.10915)*x2478))+(((-0.39225)*x2485)));
evalcond[3]=((((0.39225)*cj2*x2483))+(((-0.09465)*x2482))+(((-0.09465)*x2480))+(((-1.0)*py))+(((0.425)*x2483))+(((-0.10915)*x2477))+(((-0.39225)*x2486)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2487=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2487;
j4eval[1]=IKsign(x2487);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2488=((1.0)*cj5);
IkReal x2489=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2488)));
j4eval[0]=x2489;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x2488))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x2489);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2490=((1.0)*cj0);
IkReal x2491=((1.0)*cj5);
IkReal x2492=((((-1.0)*r21*x2491))+(((-1.0)*r20*sj5)));
j4eval[0]=x2492;
j4eval[1]=((IKabs((((r02*sj0))+(((-1.0)*r12*x2490)))))+(IKabs((((cj0*cj5*r10))+(((-1.0)*r11*sj5*x2490))+(((-1.0)*r00*sj0*x2491))+((r01*sj0*sj5))))));
j4eval[2]=IKsign(x2492);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2493=((-1.0)*r20);
IkReal x2495 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2495)==0){
continue;
}
IkReal x2494=pow(x2495,-0.5);
CheckValue<IkReal> x2496 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2493),IKFAST_ATAN2_MAGTHRESH);
if(!x2496.valid){
continue;
}
IkReal gconst78=((-1.0)*(x2496.value));
IkReal gconst79=(r21*x2494);
IkReal gconst80=(x2493*x2494);
CheckValue<IkReal> x2497 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2497.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2497.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2498=((-1.0)*r20);
IkReal x2499=x2494;
CheckValue<IkReal> x2501 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2498),IKFAST_ATAN2_MAGTHRESH);
if(!x2501.valid){
continue;
}
IkReal x2500=((-1.0)*(x2501.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2500;
IkReal gconst78=x2500;
IkReal gconst79=(r21*x2499);
IkReal gconst80=(x2498*x2499);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2502=((-1.0)*r20);
IkReal x2503=x2494;
CheckValue<IkReal> x2505 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2502),IKFAST_ATAN2_MAGTHRESH);
if(!x2505.valid){
continue;
}
IkReal x2504=((-1.0)*(x2505.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2504;
IkReal gconst78=x2504;
IkReal gconst79=(r21*x2503);
IkReal gconst80=(x2502*x2503);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2506=((-1.0)*r20);
IkReal x2507=x2494;
CheckValue<IkReal> x2509 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2506),IKFAST_ATAN2_MAGTHRESH);
if(!x2509.valid){
continue;
}
IkReal x2508=((-1.0)*(x2509.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2508;
IkReal gconst78=x2508;
IkReal gconst79=(r21*x2507);
IkReal gconst80=(x2506*x2507);
IkReal x2510=r22*r22;
CheckValue<IkReal> x2513=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2510))),-1);
if(!x2513.valid){
continue;
}
IkReal x2511=x2513.value;
IkReal x2512=(x2510+(((2.0)*x2511*(r20*r20)*(r21*r21)))+((x2511*(r21*r21*r21*r21)))+((x2511*(r20*r20*r20*r20))));
j4eval[0]=x2512;
j4eval[1]=IKsign(x2512);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2514=(sj1*sj2);
IkReal x2515=(gconst80*r20);
IkReal x2516=(gconst79*r21);
IkReal x2517=(cj1*cj2);
CheckValue<IkReal> x2518 = IKatan2WithCheck(IkReal((((r22*x2514))+(((-1.0)*r22*x2517)))),IkReal((((x2514*x2516))+(((-1.0)*x2514*x2515))+(((-1.0)*x2516*x2517))+((x2515*x2517)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2518.valid){
continue;
}
CheckValue<IkReal> x2519=IKPowWithIntegerCheck(IKsign(((x2516*x2516)+(x2515*x2515)+(r22*r22)+(((-2.0)*x2515*x2516)))),-1);
if(!x2519.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2518.value)+(((1.5707963267949)*(x2519.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2520=IKsin(j4);
IkReal x2521=IKcos(j4);
IkReal x2522=(gconst79*r01);
IkReal x2523=(cj2*sj1);
IkReal x2524=(gconst79*r21);
IkReal x2525=((1.0)*cj1);
IkReal x2526=((1.0)*cj0);
IkReal x2527=(gconst79*r11);
IkReal x2528=((1.0)*x2521);
IkReal x2529=(gconst80*x2521);
IkReal x2530=((1.0)*x2520);
IkReal x2531=(gconst80*x2530);
evalcond[0]=((((-1.0)*r20*x2531))+((x2520*x2524))+(((-1.0)*r22*x2528)));
evalcond[1]=((((-1.0)*r00*x2531))+(((-1.0)*r02*x2528))+((x2520*x2522))+(((-1.0)*x2526)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r12*x2528))+(((-1.0)*r10*x2531))+((x2520*x2527)));
evalcond[3]=((((-1.0)*x2524*x2528))+((sj1*sj2))+(((-1.0)*cj2*x2525))+(((-1.0)*r22*x2530))+((r20*x2529)));
evalcond[4]=((((-1.0)*r02*x2530))+((cj1*sj0*sj2))+((r00*x2529))+(((-1.0)*x2522*x2528))+((sj0*x2523)));
evalcond[5]=((((-1.0)*x2523*x2526))+(((-1.0)*x2527*x2528))+(((-1.0)*cj0*sj2*x2525))+(((-1.0)*r12*x2530))+((r10*x2529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2532=((1.0)*gconst80);
CheckValue<IkReal> x2533 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst79*r21))+(((-1.0)*cj0*r20*x2532)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2533.valid){
continue;
}
CheckValue<IkReal> x2534=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst79*r10))+(((-1.0)*r11*x2532)))),-1);
if(!x2534.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2533.value)+(((1.5707963267949)*(x2534.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2535=IKsin(j4);
IkReal x2536=IKcos(j4);
IkReal x2537=(gconst79*r01);
IkReal x2538=(cj2*sj1);
IkReal x2539=(gconst79*r21);
IkReal x2540=((1.0)*cj1);
IkReal x2541=((1.0)*cj0);
IkReal x2542=(gconst79*r11);
IkReal x2543=((1.0)*x2536);
IkReal x2544=(gconst80*x2536);
IkReal x2545=((1.0)*x2535);
IkReal x2546=(gconst80*x2545);
evalcond[0]=((((-1.0)*r20*x2546))+(((-1.0)*r22*x2543))+((x2535*x2539)));
evalcond[1]=((((-1.0)*r00*x2546))+(((-1.0)*x2541))+(((-1.0)*r02*x2543))+((x2535*x2537)));
evalcond[2]=((((-1.0)*r12*x2543))+(((-1.0)*sj0))+(((-1.0)*r10*x2546))+((x2535*x2542)));
evalcond[3]=((((-1.0)*cj2*x2540))+((sj1*sj2))+(((-1.0)*x2539*x2543))+((r20*x2544))+(((-1.0)*r22*x2545)));
evalcond[4]=(((sj0*x2538))+((cj1*sj0*sj2))+((r00*x2544))+(((-1.0)*r02*x2545))+(((-1.0)*x2537*x2543)));
evalcond[5]=((((-1.0)*x2542*x2543))+(((-1.0)*r12*x2545))+(((-1.0)*cj0*sj2*x2540))+(((-1.0)*x2538*x2541))+((r10*x2544)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2547=IKPowWithIntegerCheck(IKsign((((gconst79*r00))+((gconst80*r01)))),-1);
if(!x2547.valid){
continue;
}
CheckValue<IkReal> x2548 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst79*r21*sj0))+(((-1.0)*gconst80*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2548.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2547.value)))+(x2548.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2549=IKsin(j4);
IkReal x2550=IKcos(j4);
IkReal x2551=(gconst79*r01);
IkReal x2552=(cj2*sj1);
IkReal x2553=(gconst79*r21);
IkReal x2554=((1.0)*cj1);
IkReal x2555=((1.0)*cj0);
IkReal x2556=(gconst79*r11);
IkReal x2557=((1.0)*x2550);
IkReal x2558=(gconst80*x2550);
IkReal x2559=((1.0)*x2549);
IkReal x2560=(gconst80*x2559);
evalcond[0]=((((-1.0)*r20*x2560))+((x2549*x2553))+(((-1.0)*r22*x2557)));
evalcond[1]=((((-1.0)*r00*x2560))+((x2549*x2551))+(((-1.0)*r02*x2557))+(((-1.0)*x2555)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r12*x2557))+((x2549*x2556))+(((-1.0)*r10*x2560)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj2*x2554))+((r20*x2558))+(((-1.0)*x2553*x2557))+(((-1.0)*r22*x2559)));
evalcond[4]=(((cj1*sj0*sj2))+((r00*x2558))+((sj0*x2552))+(((-1.0)*r02*x2559))+(((-1.0)*x2551*x2557)));
evalcond[5]=((((-1.0)*cj0*sj2*x2554))+(((-1.0)*r12*x2559))+(((-1.0)*x2556*x2557))+(((-1.0)*x2552*x2555))+((r10*x2558)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2561=((-1.0)*r21);
IkReal x2563 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2563)==0){
continue;
}
IkReal x2562=pow(x2563,-0.5);
CheckValue<IkReal> x2564 = IKatan2WithCheck(IkReal(x2561),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2564.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x2564.value))));
IkReal gconst82=(x2561*x2562);
IkReal gconst83=((1.0)*r20*x2562);
CheckValue<IkReal> x2565 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2565.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2565.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2566=((-1.0)*r21);
CheckValue<IkReal> x2569 = IKatan2WithCheck(IkReal(x2566),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2569.valid){
continue;
}
IkReal x2567=((1.0)*(x2569.value));
IkReal x2568=x2562;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2567)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2567)));
IkReal gconst82=(x2566*x2568);
IkReal gconst83=((1.0)*r20*x2568);
IkReal x2570=r22*r22;
IkReal x2571=((1.0)*x2570);
CheckValue<IkReal> x2575=IKPowWithIntegerCheck(((-1.0)+x2570),-1);
if(!x2575.valid){
continue;
}
IkReal x2572=x2575.value;
if((((1.0)+(((-1.0)*x2571)))) < -0.00001)
continue;
IkReal x2573=IKsqrt(((1.0)+(((-1.0)*x2571))));
IkReal x2574=(sj0*x2572*x2573);
j4eval[0]=((IKabs((x2574+(((-1.0)*x2571*x2574)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2576=((-1.0)*r21);
CheckValue<IkReal> x2579 = IKatan2WithCheck(IkReal(x2576),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2579.valid){
continue;
}
IkReal x2577=((1.0)*(x2579.value));
IkReal x2578=x2562;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2577)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2577)));
IkReal gconst82=(x2576*x2578);
IkReal gconst83=((1.0)*r20*x2578);
IkReal x2580=r22*r22;
IkReal x2581=((1.0)*x2580);
CheckValue<IkReal> x2585=IKPowWithIntegerCheck(((-1.0)+x2580),-1);
if(!x2585.valid){
continue;
}
IkReal x2582=x2585.value;
if((((1.0)+(((-1.0)*x2581)))) < -0.00001)
continue;
IkReal x2583=IKsqrt(((1.0)+(((-1.0)*x2581))));
IkReal x2584=(cj0*x2582*x2583);
j4eval[0]=((IKabs((x2584+(((-1.0)*x2581*x2584)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2586=((-1.0)*r21);
CheckValue<IkReal> x2589 = IKatan2WithCheck(IkReal(x2586),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2589.valid){
continue;
}
IkReal x2587=((1.0)*(x2589.value));
IkReal x2588=x2562;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2587)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2587)));
IkReal gconst82=(x2586*x2588);
IkReal gconst83=((1.0)*r20*x2588);
IkReal x2590=r22*r22;
IkReal x2591=(cj0*r12);
IkReal x2592=(r02*sj0);
CheckValue<IkReal> x2596=IKPowWithIntegerCheck(((-1.0)+x2590),-1);
if(!x2596.valid){
continue;
}
IkReal x2593=x2596.value;
if((((1.0)+(((-1.0)*x2590)))) < -0.00001)
continue;
IkReal x2594=IKsqrt(((1.0)+(((-1.0)*x2590))));
IkReal x2595=(r22*x2593*x2594);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((x2592+(((-1.0)*x2591)))))+(IKabs((((x2591*x2595))+(((-1.0)*x2592*x2595))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2597=((1.0)*cj0);
IkReal x2598=((1.0)*gconst83);
CheckValue<IkReal> x2599 = IKatan2WithCheck(IkReal((((r02*sj0))+(((-1.0)*r12*x2597)))),IkReal((((gconst82*r01*sj0))+(((-1.0)*r00*sj0*x2598))+(((-1.0)*gconst82*r11*x2597))+((cj0*gconst83*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2599.valid){
continue;
}
CheckValue<IkReal> x2600=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*r21*x2598)))),-1);
if(!x2600.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2599.value)+(((1.5707963267949)*(x2600.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2601=IKsin(j4);
IkReal x2602=IKcos(j4);
IkReal x2603=(cj2*sj1);
IkReal x2604=(gconst82*r11);
IkReal x2605=((1.0)*cj1);
IkReal x2606=((1.0)*cj0);
IkReal x2607=((1.0)*x2602);
IkReal x2608=(gconst83*x2602);
IkReal x2609=(gconst82*x2601);
IkReal x2610=((1.0)*x2601);
evalcond[0]=((((-1.0)*gconst83*r20*x2610))+(((-1.0)*r22*x2607))+((r21*x2609)));
evalcond[1]=((((-1.0)*r02*x2607))+(((-1.0)*gconst83*r00*x2610))+((r01*x2609))+(((-1.0)*x2606)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r12*x2607))+((x2601*x2604))+(((-1.0)*gconst83*r10*x2610)));
evalcond[3]=(((r20*x2608))+((sj1*sj2))+(((-1.0)*gconst82*r21*x2607))+(((-1.0)*r22*x2610))+(((-1.0)*cj2*x2605)));
evalcond[4]=((((-1.0)*gconst82*r01*x2607))+((cj1*sj0*sj2))+((sj0*x2603))+(((-1.0)*r02*x2610))+((r00*x2608)));
evalcond[5]=((((-1.0)*r12*x2610))+(((-1.0)*cj0*sj2*x2605))+((r10*x2608))+(((-1.0)*x2603*x2606))+(((-1.0)*x2604*x2607)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2611=((1.0)*gconst83);
CheckValue<IkReal> x2612=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2611))+(((-1.0)*gconst82*r10)))),-1);
if(!x2612.valid){
continue;
}
CheckValue<IkReal> x2613 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2611))+((cj0*gconst82*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2613.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2612.value)))+(x2613.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2614=IKsin(j4);
IkReal x2615=IKcos(j4);
IkReal x2616=(cj2*sj1);
IkReal x2617=(gconst82*r11);
IkReal x2618=((1.0)*cj1);
IkReal x2619=((1.0)*cj0);
IkReal x2620=((1.0)*x2615);
IkReal x2621=(gconst83*x2615);
IkReal x2622=(gconst82*x2614);
IkReal x2623=((1.0)*x2614);
evalcond[0]=((((-1.0)*gconst83*r20*x2623))+(((-1.0)*r22*x2620))+((r21*x2622)));
evalcond[1]=(((r01*x2622))+(((-1.0)*gconst83*r00*x2623))+(((-1.0)*r02*x2620))+(((-1.0)*x2619)));
evalcond[2]=((((-1.0)*gconst83*r10*x2623))+(((-1.0)*sj0))+(((-1.0)*r12*x2620))+((x2614*x2617)));
evalcond[3]=(((r20*x2621))+(((-1.0)*gconst82*r21*x2620))+((sj1*sj2))+(((-1.0)*r22*x2623))+(((-1.0)*cj2*x2618)));
evalcond[4]=(((r00*x2621))+(((-1.0)*gconst82*r01*x2620))+((cj1*sj0*sj2))+(((-1.0)*r02*x2623))+((sj0*x2616)));
evalcond[5]=((((-1.0)*x2617*x2620))+(((-1.0)*r12*x2623))+(((-1.0)*cj0*sj2*x2618))+((r10*x2621))+(((-1.0)*x2616*x2619)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2624 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst82*r21*sj0))+(((-1.0)*gconst83*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2624.valid){
continue;
}
CheckValue<IkReal> x2625=IKPowWithIntegerCheck(IKsign((((gconst83*r01))+((gconst82*r00)))),-1);
if(!x2625.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2624.value)+(((1.5707963267949)*(x2625.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2626=IKsin(j4);
IkReal x2627=IKcos(j4);
IkReal x2628=(cj2*sj1);
IkReal x2629=(gconst82*r11);
IkReal x2630=((1.0)*cj1);
IkReal x2631=((1.0)*cj0);
IkReal x2632=((1.0)*x2627);
IkReal x2633=(gconst83*x2627);
IkReal x2634=(gconst82*x2626);
IkReal x2635=((1.0)*x2626);
evalcond[0]=(((r21*x2634))+(((-1.0)*gconst83*r20*x2635))+(((-1.0)*r22*x2632)));
evalcond[1]=((((-1.0)*r02*x2632))+(((-1.0)*gconst83*r00*x2635))+(((-1.0)*x2631))+((r01*x2634)));
evalcond[2]=((((-1.0)*sj0))+((x2626*x2629))+(((-1.0)*gconst83*r10*x2635))+(((-1.0)*r12*x2632)));
evalcond[3]=((((-1.0)*cj2*x2630))+((sj1*sj2))+((r20*x2633))+(((-1.0)*gconst82*r21*x2632))+(((-1.0)*r22*x2635)));
evalcond[4]=((((-1.0)*r02*x2635))+(((-1.0)*gconst82*r01*x2632))+((cj1*sj0*sj2))+((r00*x2633))+((sj0*x2628)));
evalcond[5]=((((-1.0)*x2628*x2631))+((r10*x2633))+(((-1.0)*x2629*x2632))+(((-1.0)*r12*x2635))+(((-1.0)*cj0*sj2*x2630)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2636=((-1.0)*r10);
IkReal x2638 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2638)==0){
continue;
}
IkReal x2637=pow(x2638,-0.5);
CheckValue<IkReal> x2639 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2636),IKFAST_ATAN2_MAGTHRESH);
if(!x2639.valid){
continue;
}
IkReal gconst84=((-1.0)*(x2639.value));
IkReal gconst85=(r11*x2637);
IkReal gconst86=(x2636*x2637);
CheckValue<IkReal> x2640 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2640.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2640.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2641=((-1.0)*r10);
IkReal x2642=x2637;
CheckValue<IkReal> x2644 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2641),IKFAST_ATAN2_MAGTHRESH);
if(!x2644.valid){
continue;
}
IkReal x2643=((-1.0)*(x2644.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x2643;
IkReal gconst84=x2643;
IkReal gconst85=(r11*x2642);
IkReal gconst86=(x2641*x2642);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2645=((-1.0)*r10);
IkReal x2646=x2637;
CheckValue<IkReal> x2648 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2645),IKFAST_ATAN2_MAGTHRESH);
if(!x2648.valid){
continue;
}
IkReal x2647=((-1.0)*(x2648.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x2647;
IkReal gconst84=x2647;
IkReal gconst85=(r11*x2646);
IkReal gconst86=(x2645*x2646);
IkReal x2649=r12*r12;
IkReal x2650=((1.0)*cj0);
IkReal x2651=(r02*sj0);
CheckValue<IkReal> x2655=IKPowWithIntegerCheck(((-1.0)+x2649),-1);
if(!x2655.valid){
continue;
}
IkReal x2652=x2655.value;
if((((1.0)+(((-1.0)*x2649)))) < -0.00001)
continue;
IkReal x2653=IKsqrt(((1.0)+(((-1.0)*x2649))));
IkReal x2654=(x2652*x2653);
j4eval[0]=((IKabs((((cj0*x2654))+((r12*x2651*x2654))+(((-1.0)*x2649*x2650*x2654)))))+(IKabs(((((-1.0)*r12*x2650))+x2651))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2656=((-1.0)*r10);
IkReal x2657=x2637;
CheckValue<IkReal> x2659 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2656),IKFAST_ATAN2_MAGTHRESH);
if(!x2659.valid){
continue;
}
IkReal x2658=((-1.0)*(x2659.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x2658;
IkReal gconst84=x2658;
IkReal gconst85=(r11*x2657);
IkReal gconst86=(x2656*x2657);
IkReal x2660=r12*r12;
IkReal x2661=(sj1*sj2);
IkReal x2662=((1.0)*cj1*cj2);
CheckValue<IkReal> x2666=IKPowWithIntegerCheck(((-1.0)+x2660),-1);
if(!x2666.valid){
continue;
}
IkReal x2663=x2666.value;
if((((1.0)+(((-1.0)*x2660)))) < -0.00001)
continue;
IkReal x2664=IKsqrt(((1.0)+(((-1.0)*x2660))));
IkReal x2665=(r12*r22*x2663*x2664);
j4eval[0]=((IKabs((((r22*x2661))+(((-1.0)*r22*x2662)))))+(IKabs((((x2661*x2665))+(((-1.0)*x2662*x2665))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2667=(gconst85*r21);
IkReal x2668=(cj1*cj2);
IkReal x2669=(sj1*sj2);
IkReal x2670=(gconst86*r20);
CheckValue<IkReal> x2671=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x2667*x2667)+(((-2.0)*x2667*x2670))+(x2670*x2670))),-1);
if(!x2671.valid){
continue;
}
CheckValue<IkReal> x2672 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2668))+((r22*x2669)))),IkReal(((((-1.0)*x2669*x2670))+((x2668*x2670))+((x2667*x2669))+(((-1.0)*x2667*x2668)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2672.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2671.value)))+(x2672.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2673=IKsin(j4);
IkReal x2674=IKcos(j4);
IkReal x2675=(gconst85*r21);
IkReal x2676=(cj2*sj1);
IkReal x2677=(gconst86*r00);
IkReal x2678=(gconst86*r10);
IkReal x2679=((1.0)*cj1);
IkReal x2680=(gconst85*r11);
IkReal x2681=(gconst85*r01);
IkReal x2682=((1.0)*cj0);
IkReal x2683=(gconst86*r20);
IkReal x2684=((1.0)*x2674);
IkReal x2685=((1.0)*x2673);
evalcond[0]=(((x2673*x2675))+(((-1.0)*x2683*x2685))+(((-1.0)*r22*x2684)));
evalcond[1]=((((-1.0)*r02*x2684))+((x2673*x2681))+(((-1.0)*x2682))+(((-1.0)*x2677*x2685)));
evalcond[2]=((((-1.0)*r12*x2684))+(((-1.0)*sj0))+((x2673*x2680))+(((-1.0)*x2678*x2685)));
evalcond[3]=((((-1.0)*cj2*x2679))+((x2674*x2683))+((sj1*sj2))+(((-1.0)*r22*x2685))+(((-1.0)*x2675*x2684)));
evalcond[4]=((((-1.0)*r02*x2685))+((sj0*x2676))+((cj1*sj0*sj2))+(((-1.0)*x2681*x2684))+((x2674*x2677)));
evalcond[5]=((((-1.0)*r12*x2685))+(((-1.0)*x2680*x2684))+(((-1.0)*x2676*x2682))+(((-1.0)*cj0*sj2*x2679))+((x2674*x2678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2686=((1.0)*cj0);
IkReal x2687=((1.0)*gconst86);
CheckValue<IkReal> x2688 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2686))+((r02*sj0)))),IkReal(((((-1.0)*gconst85*r11*x2686))+((cj0*gconst86*r10))+((gconst85*r01*sj0))+(((-1.0)*r00*sj0*x2687)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2688.valid){
continue;
}
CheckValue<IkReal> x2689=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst85*r20))+(((-1.0)*r21*x2687)))),-1);
if(!x2689.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2688.value)+(((1.5707963267949)*(x2689.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2690=IKsin(j4);
IkReal x2691=IKcos(j4);
IkReal x2692=(gconst85*r21);
IkReal x2693=(cj2*sj1);
IkReal x2694=(gconst86*r00);
IkReal x2695=(gconst86*r10);
IkReal x2696=((1.0)*cj1);
IkReal x2697=(gconst85*r11);
IkReal x2698=(gconst85*r01);
IkReal x2699=((1.0)*cj0);
IkReal x2700=(gconst86*r20);
IkReal x2701=((1.0)*x2691);
IkReal x2702=((1.0)*x2690);
evalcond[0]=((((-1.0)*r22*x2701))+((x2690*x2692))+(((-1.0)*x2700*x2702)));
evalcond[1]=((((-1.0)*r02*x2701))+(((-1.0)*x2699))+(((-1.0)*x2694*x2702))+((x2690*x2698)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r12*x2701))+(((-1.0)*x2695*x2702))+((x2690*x2697)));
evalcond[3]=((((-1.0)*r22*x2702))+((sj1*sj2))+(((-1.0)*cj2*x2696))+(((-1.0)*x2692*x2701))+((x2691*x2700)));
evalcond[4]=(((x2691*x2694))+(((-1.0)*r02*x2702))+((cj1*sj0*sj2))+((sj0*x2693))+(((-1.0)*x2698*x2701)));
evalcond[5]=(((x2691*x2695))+(((-1.0)*x2697*x2701))+(((-1.0)*r12*x2702))+(((-1.0)*cj0*sj2*x2696))+(((-1.0)*x2693*x2699)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2703=IKPowWithIntegerCheck(IKsign((((gconst85*r00))+((gconst86*r01)))),-1);
if(!x2703.valid){
continue;
}
CheckValue<IkReal> x2704 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst86*r20*sj0))+((gconst85*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2704.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2703.value)))+(x2704.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2705=IKsin(j4);
IkReal x2706=IKcos(j4);
IkReal x2707=(gconst85*r21);
IkReal x2708=(cj2*sj1);
IkReal x2709=(gconst86*r00);
IkReal x2710=(gconst86*r10);
IkReal x2711=((1.0)*cj1);
IkReal x2712=(gconst85*r11);
IkReal x2713=(gconst85*r01);
IkReal x2714=((1.0)*cj0);
IkReal x2715=(gconst86*r20);
IkReal x2716=((1.0)*x2706);
IkReal x2717=((1.0)*x2705);
evalcond[0]=(((x2705*x2707))+(((-1.0)*x2715*x2717))+(((-1.0)*r22*x2716)));
evalcond[1]=((((-1.0)*x2714))+(((-1.0)*r02*x2716))+(((-1.0)*x2709*x2717))+((x2705*x2713)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x2710*x2717))+((x2705*x2712))+(((-1.0)*r12*x2716)));
evalcond[3]=((((-1.0)*cj2*x2711))+((x2706*x2715))+((sj1*sj2))+(((-1.0)*r22*x2717))+(((-1.0)*x2707*x2716)));
evalcond[4]=(((sj0*x2708))+(((-1.0)*r02*x2717))+(((-1.0)*x2713*x2716))+((cj1*sj0*sj2))+((x2706*x2709)));
evalcond[5]=((((-1.0)*x2712*x2716))+(((-1.0)*cj0*sj2*x2711))+((x2706*x2710))+(((-1.0)*x2708*x2714))+(((-1.0)*r12*x2717)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2718=((-1.0)*r11);
IkReal x2720 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2720)==0){
continue;
}
IkReal x2719=pow(x2720,-0.5);
CheckValue<IkReal> x2721 = IKatan2WithCheck(IkReal(x2718),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2721.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2721.value))));
IkReal gconst88=(x2718*x2719);
IkReal gconst89=((1.0)*r10*x2719);
CheckValue<IkReal> x2722 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2722.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2722.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2723=((-1.0)*r11);
CheckValue<IkReal> x2726 = IKatan2WithCheck(IkReal(x2723),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2726.valid){
continue;
}
IkReal x2724=((1.0)*(x2726.value));
IkReal x2725=x2719;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2724)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2724)));
IkReal gconst88=(x2723*x2725);
IkReal gconst89=((1.0)*r10*x2725);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x2727=((-1.0)*r11);
CheckValue<IkReal> x2730 = IKatan2WithCheck(IkReal(x2727),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2730.valid){
continue;
}
IkReal x2728=((1.0)*(x2730.value));
IkReal x2729=x2719;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2728)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2728)));
IkReal gconst88=(x2727*x2729);
IkReal gconst89=((1.0)*r10*x2729);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2731=((1.0)*cj0);
IkReal x2732=((1.0)*gconst89);
CheckValue<IkReal> x2733=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*r21*x2732)))),-1);
if(!x2733.valid){
continue;
}
CheckValue<IkReal> x2734 = IKatan2WithCheck(IkReal((((r02*sj0))+(((-1.0)*r12*x2731)))),IkReal((((gconst88*r01*sj0))+((cj0*gconst89*r10))+(((-1.0)*r00*sj0*x2732))+(((-1.0)*gconst88*r11*x2731)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2734.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2733.value)))+(x2734.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2735=IKsin(j4);
IkReal x2736=IKcos(j4);
IkReal x2737=(cj2*sj1);
IkReal x2738=((1.0)*cj1);
IkReal x2739=(gconst89*r20);
IkReal x2740=(gconst89*r10);
IkReal x2741=((1.0)*cj0);
IkReal x2742=(gconst89*r00);
IkReal x2743=((1.0)*x2736);
IkReal x2744=((1.0)*x2735);
IkReal x2745=(gconst88*x2735);
evalcond[0]=(((r21*x2745))+(((-1.0)*x2739*x2744))+(((-1.0)*r22*x2743)));
evalcond[1]=(((r01*x2745))+(((-1.0)*x2741))+(((-1.0)*r02*x2743))+(((-1.0)*x2742*x2744)));
evalcond[2]=((((-1.0)*sj0))+((r11*x2745))+(((-1.0)*x2740*x2744))+(((-1.0)*r12*x2743)));
evalcond[3]=((((-1.0)*cj2*x2738))+(((-1.0)*gconst88*r21*x2743))+((sj1*sj2))+((x2736*x2739))+(((-1.0)*r22*x2744)));
evalcond[4]=(((cj1*sj0*sj2))+((sj0*x2737))+((x2736*x2742))+(((-1.0)*r02*x2744))+(((-1.0)*gconst88*r01*x2743)));
evalcond[5]=((((-1.0)*gconst88*r11*x2743))+(((-1.0)*cj0*sj2*x2738))+(((-1.0)*r12*x2744))+(((-1.0)*x2737*x2741))+((x2736*x2740)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2746=((1.0)*gconst89);
CheckValue<IkReal> x2747=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2746))+(((-1.0)*gconst88*r10)))),-1);
if(!x2747.valid){
continue;
}
CheckValue<IkReal> x2748 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2746))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2748.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2747.value)))+(x2748.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2749=IKsin(j4);
IkReal x2750=IKcos(j4);
IkReal x2751=(cj2*sj1);
IkReal x2752=((1.0)*cj1);
IkReal x2753=(gconst89*r20);
IkReal x2754=(gconst89*r10);
IkReal x2755=((1.0)*cj0);
IkReal x2756=(gconst89*r00);
IkReal x2757=((1.0)*x2750);
IkReal x2758=((1.0)*x2749);
IkReal x2759=(gconst88*x2749);
evalcond[0]=((((-1.0)*r22*x2757))+((r21*x2759))+(((-1.0)*x2753*x2758)));
evalcond[1]=((((-1.0)*x2756*x2758))+((r01*x2759))+(((-1.0)*x2755))+(((-1.0)*r02*x2757)));
evalcond[2]=(((r11*x2759))+(((-1.0)*sj0))+(((-1.0)*r12*x2757))+(((-1.0)*x2754*x2758)));
evalcond[3]=((((-1.0)*r22*x2758))+(((-1.0)*gconst88*r21*x2757))+((x2750*x2753))+((sj1*sj2))+(((-1.0)*cj2*x2752)));
evalcond[4]=((((-1.0)*gconst88*r01*x2757))+((x2750*x2756))+((cj1*sj0*sj2))+((sj0*x2751))+(((-1.0)*r02*x2758)));
evalcond[5]=((((-1.0)*gconst88*r11*x2757))+((x2750*x2754))+(((-1.0)*cj0*sj2*x2752))+(((-1.0)*r12*x2758))+(((-1.0)*x2751*x2755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2760=IKPowWithIntegerCheck(IKsign((((gconst88*r00))+((gconst89*r01)))),-1);
if(!x2760.valid){
continue;
}
CheckValue<IkReal> x2761 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst89*r20*sj0))+((gconst88*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2761.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2760.value)))+(x2761.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2762=IKsin(j4);
IkReal x2763=IKcos(j4);
IkReal x2764=(cj2*sj1);
IkReal x2765=((1.0)*cj1);
IkReal x2766=(gconst89*r20);
IkReal x2767=(gconst89*r10);
IkReal x2768=((1.0)*cj0);
IkReal x2769=(gconst89*r00);
IkReal x2770=((1.0)*x2763);
IkReal x2771=((1.0)*x2762);
IkReal x2772=(gconst88*x2762);
evalcond[0]=((((-1.0)*x2766*x2771))+((r21*x2772))+(((-1.0)*r22*x2770)));
evalcond[1]=(((r01*x2772))+(((-1.0)*x2769*x2771))+(((-1.0)*r02*x2770))+(((-1.0)*x2768)));
evalcond[2]=((((-1.0)*sj0))+((r11*x2772))+(((-1.0)*r12*x2770))+(((-1.0)*x2767*x2771)));
evalcond[3]=((((-1.0)*cj2*x2765))+((sj1*sj2))+(((-1.0)*gconst88*r21*x2770))+((x2763*x2766))+(((-1.0)*r22*x2771)));
evalcond[4]=(((sj0*x2764))+(((-1.0)*r02*x2771))+((cj1*sj0*sj2))+(((-1.0)*gconst88*r01*x2770))+((x2763*x2769)));
evalcond[5]=((((-1.0)*x2764*x2768))+(((-1.0)*cj0*sj2*x2765))+(((-1.0)*gconst88*r11*x2770))+(((-1.0)*r12*x2771))+((x2763*x2767)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2773=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2773;
j4eval[1]=IKsign(x2773);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2774=((1.0)*cj5);
IkReal x2775=((((-1.0)*r21*x2774))+(((-1.0)*r20*sj5)));
j4eval[0]=x2775;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x2774))))));
j4eval[2]=IKsign(x2775);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2776=cj5*cj5;
IkReal x2777=r11*r11;
IkReal x2778=(cj5*r10);
IkReal x2779=(r11*sj5);
IkReal x2780=((((-1.0)*x2777))+(((2.0)*x2778*x2779))+(((-1.0)*(r12*r12)))+(((-1.0)*x2776*(r10*r10)))+((x2776*x2777)));
j4eval[0]=x2780;
j4eval[1]=((IKabs(r12))+(IKabs((x2778+(((-1.0)*x2779))))));
j4eval[2]=IKsign(x2780);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2781=cj5*cj5;
IkReal x2782=r11*r11;
IkReal x2783=(cj5*r10);
IkReal x2784=(r11*sj5);
CheckValue<IkReal> x2785 = IKatan2WithCheck(IkReal((x2783+(((-1.0)*x2784)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2785.valid){
continue;
}
CheckValue<IkReal> x2786=IKPowWithIntegerCheck(IKsign(((((2.0)*x2783*x2784))+((x2781*x2782))+(((-1.0)*(r12*r12)))+(((-1.0)*x2782))+(((-1.0)*x2781*(r10*r10))))),-1);
if(!x2786.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2785.value)+(((1.5707963267949)*(x2786.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2787=IKsin(j4);
IkReal x2788=IKcos(j4);
IkReal x2789=(cj5*r10);
IkReal x2790=(r01*sj5);
IkReal x2791=(cj5*r00);
IkReal x2792=(cj5*r20);
IkReal x2793=((1.0)*x2788);
IkReal x2794=((1.0)*x2787);
IkReal x2795=(sj5*x2787);
evalcond[0]=(((r21*x2795))+(((-1.0)*r22*x2793))+(((-1.0)*x2792*x2794)));
evalcond[1]=((((-1.0)*x2791*x2794))+((x2787*x2790))+(((-1.0)*r02*x2793)));
evalcond[2]=((((-1.0)*r11*sj5*x2793))+((x2788*x2789))+(((-1.0)*r12*x2794)));
evalcond[3]=((-1.0)+(((-1.0)*x2789*x2794))+((r11*x2795))+(((-1.0)*r12*x2793)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x2790*x2793))+((cj1*sj2))+((x2788*x2791))+(((-1.0)*r02*x2794)));
evalcond[5]=((((-1.0)*r21*sj5*x2793))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2794))+((x2788*x2792)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2796=((1.0)*cj5);
CheckValue<IkReal> x2797=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2796))+(((-1.0)*r20*sj5)))),-1);
if(!x2797.valid){
continue;
}
CheckValue<IkReal> x2798 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2796)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2798.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2797.value)))+(x2798.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2799=IKsin(j4);
IkReal x2800=IKcos(j4);
IkReal x2801=(cj5*r10);
IkReal x2802=(r01*sj5);
IkReal x2803=(cj5*r00);
IkReal x2804=(cj5*r20);
IkReal x2805=((1.0)*x2800);
IkReal x2806=((1.0)*x2799);
IkReal x2807=(sj5*x2799);
evalcond[0]=((((-1.0)*r22*x2805))+(((-1.0)*x2804*x2806))+((r21*x2807)));
evalcond[1]=((((-1.0)*x2803*x2806))+((x2799*x2802))+(((-1.0)*r02*x2805)));
evalcond[2]=((((-1.0)*r12*x2806))+(((-1.0)*r11*sj5*x2805))+((x2800*x2801)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2805))+((r11*x2807))+(((-1.0)*x2801*x2806)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x2802*x2805))+(((-1.0)*r02*x2806))+((x2800*x2803)));
evalcond[5]=((((-1.0)*r21*sj5*x2805))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2806))+((x2800*x2804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2808 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2808.valid){
continue;
}
CheckValue<IkReal> x2809=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2809.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2808.value)+(((1.5707963267949)*(x2809.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2810=IKsin(j4);
IkReal x2811=IKcos(j4);
IkReal x2812=(cj5*r10);
IkReal x2813=(r01*sj5);
IkReal x2814=(cj5*r00);
IkReal x2815=(cj5*r20);
IkReal x2816=((1.0)*x2811);
IkReal x2817=((1.0)*x2810);
IkReal x2818=(sj5*x2810);
evalcond[0]=((((-1.0)*x2815*x2817))+((r21*x2818))+(((-1.0)*r22*x2816)));
evalcond[1]=(((x2810*x2813))+(((-1.0)*r02*x2816))+(((-1.0)*x2814*x2817)));
evalcond[2]=((((-1.0)*r12*x2817))+(((-1.0)*r11*sj5*x2816))+((x2811*x2812)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2816))+(((-1.0)*x2812*x2817))+((r11*x2818)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x2817))+(((-1.0)*x2813*x2816))+((cj1*sj2))+((x2811*x2814)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2817))+(((-1.0)*r21*sj5*x2816))+((x2811*x2815)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2819=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2819;
j4eval[1]=IKsign(x2819);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2820=((1.0)*cj5);
IkReal x2821=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2820)));
j4eval[0]=x2821;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x2820))))));
j4eval[2]=IKsign(x2821);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2822=cj5*cj5;
IkReal x2823=r11*r11;
IkReal x2824=(r11*sj5);
IkReal x2825=(cj5*r10);
IkReal x2826=((r12*r12)+(((-1.0)*x2822*x2823))+((x2822*(r10*r10)))+(((-2.0)*x2824*x2825))+x2823);
j4eval[0]=x2826;
j4eval[1]=IKsign(x2826);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x2824))+x2825))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2827=cj5*cj5;
IkReal x2828=r11*r11;
IkReal x2829=(cj5*r10);
IkReal x2830=(r11*sj5);
CheckValue<IkReal> x2831=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x2827*(r10*r10)))+(((-2.0)*x2829*x2830))+x2828+(((-1.0)*x2827*x2828)))),-1);
if(!x2831.valid){
continue;
}
CheckValue<IkReal> x2832 = IKatan2WithCheck(IkReal(((((-1.0)*x2830))+x2829)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2832.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2831.value)))+(x2832.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2833=IKsin(j4);
IkReal x2834=IKcos(j4);
IkReal x2835=(cj5*r10);
IkReal x2836=(r01*sj5);
IkReal x2837=((1.0)*cj2);
IkReal x2838=(cj5*r00);
IkReal x2839=(cj5*r20);
IkReal x2840=((1.0)*x2834);
IkReal x2841=((1.0)*x2833);
IkReal x2842=(sj5*x2833);
evalcond[0]=(((r21*x2842))+(((-1.0)*x2839*x2841))+(((-1.0)*r22*x2840)));
evalcond[1]=((((-1.0)*r02*x2840))+(((-1.0)*x2838*x2841))+((x2833*x2836)));
evalcond[2]=(((x2834*x2835))+(((-1.0)*r12*x2841))+(((-1.0)*r11*sj5*x2840)));
evalcond[3]=((1.0)+((r11*x2842))+(((-1.0)*r12*x2840))+(((-1.0)*x2835*x2841)));
evalcond[4]=((((-1.0)*cj1*x2837))+((x2834*x2839))+((sj1*sj2))+(((-1.0)*r22*x2841))+(((-1.0)*r21*sj5*x2840)));
evalcond[5]=(((x2834*x2838))+(((-1.0)*sj1*x2837))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x2841))+(((-1.0)*x2836*x2840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2843=((1.0)*cj5);
CheckValue<IkReal> x2844 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x2843))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2844.valid){
continue;
}
CheckValue<IkReal> x2845=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2843))+(((-1.0)*r00*sj5)))),-1);
if(!x2845.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2844.value)+(((1.5707963267949)*(x2845.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2846=IKsin(j4);
IkReal x2847=IKcos(j4);
IkReal x2848=(cj5*r10);
IkReal x2849=(r01*sj5);
IkReal x2850=((1.0)*cj2);
IkReal x2851=(cj5*r00);
IkReal x2852=(cj5*r20);
IkReal x2853=((1.0)*x2847);
IkReal x2854=((1.0)*x2846);
IkReal x2855=(sj5*x2846);
evalcond[0]=(((r21*x2855))+(((-1.0)*r22*x2853))+(((-1.0)*x2852*x2854)));
evalcond[1]=(((x2846*x2849))+(((-1.0)*x2851*x2854))+(((-1.0)*r02*x2853)));
evalcond[2]=((((-1.0)*r11*sj5*x2853))+((x2847*x2848))+(((-1.0)*r12*x2854)));
evalcond[3]=((1.0)+((r11*x2855))+(((-1.0)*r12*x2853))+(((-1.0)*x2848*x2854)));
evalcond[4]=((((-1.0)*cj1*x2850))+((x2847*x2852))+((sj1*sj2))+(((-1.0)*r22*x2854))+(((-1.0)*r21*sj5*x2853)));
evalcond[5]=(((x2847*x2851))+(((-1.0)*cj1*sj2))+(((-1.0)*x2849*x2853))+(((-1.0)*r02*x2854))+(((-1.0)*sj1*x2850)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2856=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2856.valid){
continue;
}
CheckValue<IkReal> x2857 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2857.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2856.value)))+(x2857.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2858=IKsin(j4);
IkReal x2859=IKcos(j4);
IkReal x2860=(cj5*r10);
IkReal x2861=(r01*sj5);
IkReal x2862=((1.0)*cj2);
IkReal x2863=(cj5*r00);
IkReal x2864=(cj5*r20);
IkReal x2865=((1.0)*x2859);
IkReal x2866=((1.0)*x2858);
IkReal x2867=(sj5*x2858);
evalcond[0]=((((-1.0)*x2864*x2866))+((r21*x2867))+(((-1.0)*r22*x2865)));
evalcond[1]=((((-1.0)*r02*x2865))+((x2858*x2861))+(((-1.0)*x2863*x2866)));
evalcond[2]=((((-1.0)*r12*x2866))+(((-1.0)*r11*sj5*x2865))+((x2859*x2860)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2865))+(((-1.0)*x2860*x2866))+((r11*x2867)));
evalcond[4]=((((-1.0)*cj1*x2862))+((sj1*sj2))+(((-1.0)*r22*x2866))+(((-1.0)*r21*sj5*x2865))+((x2859*x2864)));
evalcond[5]=((((-1.0)*r02*x2866))+(((-1.0)*x2861*x2865))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2862))+((x2859*x2863)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2869 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2869)==0){
continue;
}
IkReal x2868=pow(x2869,-0.5);
CheckValue<IkReal> x2870 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2870.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2870.value));
IkReal gconst91=((-1.0)*r01*x2868);
IkReal gconst92=(r00*x2868);
CheckValue<IkReal> x2871 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2871.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2871.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2874 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2874.valid){
continue;
}
IkReal x2872=((-1.0)*(x2874.value));
IkReal x2873=x2868;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2872;
IkReal gconst90=x2872;
IkReal gconst91=((-1.0)*r01*x2873);
IkReal gconst92=(r00*x2873);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2877 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2877.valid){
continue;
}
IkReal x2875=((-1.0)*(x2877.value));
IkReal x2876=x2868;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2875;
IkReal gconst90=x2875;
IkReal gconst91=((-1.0)*r01*x2876);
IkReal gconst92=(r00*x2876);
IkReal x2878=r02*r02;
IkReal x2879=(cj0*r12);
IkReal x2880=((1.0)*x2878);
CheckValue<IkReal> x2884=IKPowWithIntegerCheck(((-1.0)+x2878),-1);
if(!x2884.valid){
continue;
}
IkReal x2881=x2884.value;
if((((1.0)+(((-1.0)*x2880)))) < -0.00001)
continue;
IkReal x2882=IKsqrt(((1.0)+(((-1.0)*x2880))));
IkReal x2883=(x2881*x2882);
j4eval[0]=((IKabs(((((-1.0)*x2879))+((r02*sj0)))))+(IKabs(((((-1.0)*sj0*x2880*x2883))+((sj0*x2883))+((r02*x2879*x2883))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2887 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2887.valid){
continue;
}
IkReal x2885=((-1.0)*(x2887.value));
IkReal x2886=x2868;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2885;
IkReal gconst90=x2885;
IkReal gconst91=((-1.0)*r01*x2886);
IkReal gconst92=(r00*x2886);
IkReal x2888=r02*r02;
IkReal x2889=(r22*sj1*sj2);
IkReal x2890=(cj1*cj2*r22);
CheckValue<IkReal> x2894=IKPowWithIntegerCheck(((-1.0)+x2888),-1);
if(!x2894.valid){
continue;
}
IkReal x2891=x2894.value;
if((((1.0)+(((-1.0)*x2888)))) < -0.00001)
continue;
IkReal x2892=IKsqrt(((1.0)+(((-1.0)*x2888))));
IkReal x2893=(r02*x2891*x2892);
j4eval[0]=((IKabs(((((-1.0)*x2890))+x2889)))+(IKabs((((x2890*x2893))+(((-1.0)*x2889*x2893))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2895=(gconst91*r21);
IkReal x2896=(sj1*sj2);
IkReal x2897=(gconst92*r20);
IkReal x2898=((1.0)*cj1*cj2);
CheckValue<IkReal> x2899 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2898))+((r22*x2896)))),IkReal(((((-1.0)*x2896*x2897))+((cj1*cj2*x2897))+(((-1.0)*x2895*x2898))+((x2895*x2896)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2899.valid){
continue;
}
CheckValue<IkReal> x2900=IKPowWithIntegerCheck(IKsign(((x2895*x2895)+(((-2.0)*x2895*x2897))+(x2897*x2897)+(r22*r22))),-1);
if(!x2900.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2899.value)+(((1.5707963267949)*(x2900.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2901=IKsin(j4);
IkReal x2902=IKcos(j4);
IkReal x2903=(cj2*sj1);
IkReal x2904=((1.0)*cj1);
IkReal x2905=(gconst92*r00);
IkReal x2906=(gconst92*r20);
IkReal x2907=((1.0)*cj0);
IkReal x2908=(gconst92*r10);
IkReal x2909=((1.0)*x2902);
IkReal x2910=(gconst91*x2901);
IkReal x2911=((1.0)*x2901);
evalcond[0]=((((-1.0)*x2906*x2911))+((r21*x2910))+(((-1.0)*r22*x2909)));
evalcond[1]=((((-1.0)*r02*x2909))+((r01*x2910))+(((-1.0)*x2907))+(((-1.0)*x2905*x2911)));
evalcond[2]=(((r11*x2910))+(((-1.0)*sj0))+(((-1.0)*x2908*x2911))+(((-1.0)*r12*x2909)));
evalcond[3]=(((x2902*x2906))+((sj1*sj2))+(((-1.0)*cj2*x2904))+(((-1.0)*gconst91*r21*x2909))+(((-1.0)*r22*x2911)));
evalcond[4]=(((x2902*x2905))+((cj1*sj0*sj2))+(((-1.0)*r02*x2911))+(((-1.0)*gconst91*r01*x2909))+((sj0*x2903)));
evalcond[5]=((((-1.0)*cj0*sj2*x2904))+((x2902*x2908))+(((-1.0)*r12*x2911))+(((-1.0)*gconst91*r11*x2909))+(((-1.0)*x2903*x2907)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2912=((1.0)*cj0);
IkReal x2913=((1.0)*gconst92);
CheckValue<IkReal> x2914=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*r21*x2913)))),-1);
if(!x2914.valid){
continue;
}
CheckValue<IkReal> x2915 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2912))+((r02*sj0)))),IkReal(((((-1.0)*gconst91*r11*x2912))+((cj0*gconst92*r10))+((gconst91*r01*sj0))+(((-1.0)*r00*sj0*x2913)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2915.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2914.value)))+(x2915.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2916=IKsin(j4);
IkReal x2917=IKcos(j4);
IkReal x2918=(cj2*sj1);
IkReal x2919=((1.0)*cj1);
IkReal x2920=(gconst92*r00);
IkReal x2921=(gconst92*r20);
IkReal x2922=((1.0)*cj0);
IkReal x2923=(gconst92*r10);
IkReal x2924=((1.0)*x2917);
IkReal x2925=(gconst91*x2916);
IkReal x2926=((1.0)*x2916);
evalcond[0]=((((-1.0)*x2921*x2926))+((r21*x2925))+(((-1.0)*r22*x2924)));
evalcond[1]=((((-1.0)*x2920*x2926))+(((-1.0)*r02*x2924))+(((-1.0)*x2922))+((r01*x2925)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x2923*x2926))+(((-1.0)*r12*x2924))+((r11*x2925)));
evalcond[3]=((((-1.0)*gconst91*r21*x2924))+((sj1*sj2))+((x2917*x2921))+(((-1.0)*r22*x2926))+(((-1.0)*cj2*x2919)));
evalcond[4]=((((-1.0)*r02*x2926))+((sj0*x2918))+((x2917*x2920))+((cj1*sj0*sj2))+(((-1.0)*gconst91*r01*x2924)));
evalcond[5]=((((-1.0)*x2918*x2922))+((x2917*x2923))+(((-1.0)*cj0*sj2*x2919))+(((-1.0)*r12*x2926))+(((-1.0)*gconst91*r11*x2924)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2927=((1.0)*gconst92);
CheckValue<IkReal> x2928=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r10))+(((-1.0)*r11*x2927)))),-1);
if(!x2928.valid){
continue;
}
CheckValue<IkReal> x2929 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst91*r21))+(((-1.0)*cj0*r20*x2927)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2929.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2928.value)))+(x2929.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2930=IKsin(j4);
IkReal x2931=IKcos(j4);
IkReal x2932=(cj2*sj1);
IkReal x2933=((1.0)*cj1);
IkReal x2934=(gconst92*r00);
IkReal x2935=(gconst92*r20);
IkReal x2936=((1.0)*cj0);
IkReal x2937=(gconst92*r10);
IkReal x2938=((1.0)*x2931);
IkReal x2939=(gconst91*x2930);
IkReal x2940=((1.0)*x2930);
evalcond[0]=((((-1.0)*x2935*x2940))+((r21*x2939))+(((-1.0)*r22*x2938)));
evalcond[1]=((((-1.0)*x2934*x2940))+((r01*x2939))+(((-1.0)*x2936))+(((-1.0)*r02*x2938)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r12*x2938))+((r11*x2939))+(((-1.0)*x2937*x2940)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj2*x2933))+(((-1.0)*r22*x2940))+(((-1.0)*gconst91*r21*x2938))+((x2931*x2935)));
evalcond[4]=((((-1.0)*r02*x2940))+((cj1*sj0*sj2))+((sj0*x2932))+((x2931*x2934))+(((-1.0)*gconst91*r01*x2938)));
evalcond[5]=((((-1.0)*r12*x2940))+(((-1.0)*x2932*x2936))+(((-1.0)*gconst91*r11*x2938))+((x2931*x2937))+(((-1.0)*cj0*sj2*x2933)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2942 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2942)==0){
continue;
}
IkReal x2941=pow(x2942,-0.5);
CheckValue<IkReal> x2943 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2943.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2943.value))));
IkReal gconst94=((1.0)*r01*x2941);
IkReal gconst95=((-1.0)*r00*x2941);
CheckValue<IkReal> x2944 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2944.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2944.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x2947 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2947.valid){
continue;
}
IkReal x2945=((1.0)*(x2947.value));
IkReal x2946=x2941;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2945)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2945)));
IkReal gconst94=((1.0)*r01*x2946);
IkReal gconst95=((-1.0)*r00*x2946);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=sj0;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x2950 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2950.valid){
continue;
}
IkReal x2948=((1.0)*(x2950.value));
IkReal x2949=x2941;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2948)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2948)));
IkReal gconst94=((1.0)*r01*x2949);
IkReal gconst95=((-1.0)*r00*x2949);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2951=((1.0)*cj0);
IkReal x2952=((1.0)*gconst95);
CheckValue<IkReal> x2953 = IKatan2WithCheck(IkReal((((r02*sj0))+(((-1.0)*r12*x2951)))),IkReal(((((-1.0)*gconst94*r11*x2951))+((gconst94*r01*sj0))+(((-1.0)*r00*sj0*x2952))+((cj0*gconst95*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2953.valid){
continue;
}
CheckValue<IkReal> x2954=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2952))+(((-1.0)*gconst94*r20)))),-1);
if(!x2954.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2953.value)+(((1.5707963267949)*(x2954.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2955=IKsin(j4);
IkReal x2956=IKcos(j4);
IkReal x2957=(cj2*sj1);
IkReal x2958=(gconst94*r11);
IkReal x2959=(gconst95*r10);
IkReal x2960=((1.0)*cj1);
IkReal x2961=(gconst94*r21);
IkReal x2962=((1.0)*cj0);
IkReal x2963=(gconst94*r01);
IkReal x2964=((1.0)*x2956);
IkReal x2965=((1.0)*x2955);
IkReal x2966=(gconst95*x2956);
evalcond[0]=(((x2955*x2961))+(((-1.0)*r22*x2964))+(((-1.0)*gconst95*r20*x2965)));
evalcond[1]=(((x2955*x2963))+(((-1.0)*r02*x2964))+(((-1.0)*x2962))+(((-1.0)*gconst95*r00*x2965)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x2959*x2965))+(((-1.0)*r12*x2964))+((x2955*x2958)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj2*x2960))+(((-1.0)*r22*x2965))+(((-1.0)*x2961*x2964))+((r20*x2966)));
evalcond[4]=(((sj0*x2957))+(((-1.0)*x2963*x2964))+(((-1.0)*r02*x2965))+((cj1*sj0*sj2))+((r00*x2966)));
evalcond[5]=((((-1.0)*x2957*x2962))+(((-1.0)*cj0*sj2*x2960))+(((-1.0)*x2958*x2964))+((x2956*x2959))+(((-1.0)*r12*x2965)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2967=((1.0)*gconst95);
CheckValue<IkReal> x2968=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2967))+(((-1.0)*gconst94*r10)))),-1);
if(!x2968.valid){
continue;
}
CheckValue<IkReal> x2969 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2967))+((cj0*gconst94*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2969.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2968.value)))+(x2969.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2970=IKsin(j4);
IkReal x2971=IKcos(j4);
IkReal x2972=(cj2*sj1);
IkReal x2973=(gconst94*r11);
IkReal x2974=(gconst95*r10);
IkReal x2975=((1.0)*cj1);
IkReal x2976=(gconst94*r21);
IkReal x2977=((1.0)*cj0);
IkReal x2978=(gconst94*r01);
IkReal x2979=((1.0)*x2971);
IkReal x2980=((1.0)*x2970);
IkReal x2981=(gconst95*x2971);
evalcond[0]=(((x2970*x2976))+(((-1.0)*gconst95*r20*x2980))+(((-1.0)*r22*x2979)));
evalcond[1]=(((x2970*x2978))+(((-1.0)*r02*x2979))+(((-1.0)*gconst95*r00*x2980))+(((-1.0)*x2977)));
evalcond[2]=((((-1.0)*sj0))+((x2970*x2973))+(((-1.0)*r12*x2979))+(((-1.0)*x2974*x2980)));
evalcond[3]=((((-1.0)*x2976*x2979))+((sj1*sj2))+((r20*x2981))+(((-1.0)*r22*x2980))+(((-1.0)*cj2*x2975)));
evalcond[4]=((((-1.0)*x2978*x2979))+((cj1*sj0*sj2))+((r00*x2981))+(((-1.0)*r02*x2980))+((sj0*x2972)));
evalcond[5]=((((-1.0)*x2972*x2977))+((x2971*x2974))+(((-1.0)*r12*x2980))+(((-1.0)*cj0*sj2*x2975))+(((-1.0)*x2973*x2979)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2982 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst94*r21*sj0))+(((-1.0)*gconst95*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2982.valid){
continue;
}
CheckValue<IkReal> x2983=IKPowWithIntegerCheck(IKsign((((gconst95*r01))+((gconst94*r00)))),-1);
if(!x2983.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2982.value)+(((1.5707963267949)*(x2983.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2984=IKsin(j4);
IkReal x2985=IKcos(j4);
IkReal x2986=(cj2*sj1);
IkReal x2987=(gconst94*r11);
IkReal x2988=(gconst95*r10);
IkReal x2989=((1.0)*cj1);
IkReal x2990=(gconst94*r21);
IkReal x2991=((1.0)*cj0);
IkReal x2992=(gconst94*r01);
IkReal x2993=((1.0)*x2985);
IkReal x2994=((1.0)*x2984);
IkReal x2995=(gconst95*x2985);
evalcond[0]=((((-1.0)*r22*x2993))+(((-1.0)*gconst95*r20*x2994))+((x2984*x2990)));
evalcond[1]=((((-1.0)*x2991))+(((-1.0)*gconst95*r00*x2994))+((x2984*x2992))+(((-1.0)*r02*x2993)));
evalcond[2]=(((x2984*x2987))+(((-1.0)*sj0))+(((-1.0)*r12*x2993))+(((-1.0)*x2988*x2994)));
evalcond[3]=((((-1.0)*r22*x2994))+(((-1.0)*cj2*x2989))+((r20*x2995))+((sj1*sj2))+(((-1.0)*x2990*x2993)));
evalcond[4]=((((-1.0)*x2992*x2993))+((r00*x2995))+((cj1*sj0*sj2))+((sj0*x2986))+(((-1.0)*r02*x2994)));
evalcond[5]=((((-1.0)*cj0*sj2*x2989))+(((-1.0)*x2987*x2993))+(((-1.0)*r12*x2994))+(((-1.0)*x2986*x2991))+((x2985*x2988)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2996=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2996;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2996);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2997=((1.0)*cj5);
IkReal x2998=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2997)));
j4eval[0]=x2998;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x2997))))));
j4eval[2]=IKsign(x2998);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2999=cj5*cj5;
IkReal x3000=r01*r01;
IkReal x3001=(r01*sj5);
IkReal x3002=(cj5*r00);
IkReal x3003=((((-1.0)*x3000))+((x2999*x3000))+(((-1.0)*(r02*r02)))+(((-1.0)*x2999*(r00*r00)))+(((2.0)*x3001*x3002)));
j4eval[0]=x3003;
j4eval[1]=IKsign(x3003);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x3001))+x3002))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3004=cj5*cj5;
IkReal x3005=r01*r01;
IkReal x3006=(r01*sj5);
IkReal x3007=(cj5*r00);
CheckValue<IkReal> x3008 = IKatan2WithCheck(IkReal(((((-1.0)*x3006))+x3007)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x3008.valid){
continue;
}
CheckValue<IkReal> x3009=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3005))+(((-1.0)*(r02*r02)))+(((-1.0)*x3004*(r00*r00)))+(((2.0)*x3006*x3007))+((x3004*x3005)))),-1);
if(!x3009.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3008.value)+(((1.5707963267949)*(x3009.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3010=IKsin(j4);
IkReal x3011=IKcos(j4);
IkReal x3012=(cj5*r10);
IkReal x3013=(r01*sj5);
IkReal x3014=((1.0)*cj2);
IkReal x3015=(cj5*r00);
IkReal x3016=(cj5*r20);
IkReal x3017=((1.0)*x3011);
IkReal x3018=((1.0)*x3010);
IkReal x3019=(sj5*x3010);
evalcond[0]=((((-1.0)*r22*x3017))+((r21*x3019))+(((-1.0)*x3016*x3018)));
evalcond[1]=((((-1.0)*r12*x3017))+((r11*x3019))+(((-1.0)*x3012*x3018)));
evalcond[2]=(((x3011*x3015))+(((-1.0)*r02*x3018))+(((-1.0)*x3013*x3017)));
evalcond[3]=((-1.0)+((x3010*x3013))+(((-1.0)*r02*x3017))+(((-1.0)*x3015*x3018)));
evalcond[4]=(((x3011*x3016))+(((-1.0)*r22*x3018))+(((-1.0)*r21*sj5*x3017))+((sj1*sj2))+(((-1.0)*cj1*x3014)));
evalcond[5]=(((x3011*x3012))+(((-1.0)*r11*sj5*x3017))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x3018))+(((-1.0)*sj1*x3014)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3020=((1.0)*cj5);
CheckValue<IkReal> x3021=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3020))+(((-1.0)*r10*sj5)))),-1);
if(!x3021.valid){
continue;
}
CheckValue<IkReal> x3022 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x3020)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3022.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3021.value)))+(x3022.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3023=IKsin(j4);
IkReal x3024=IKcos(j4);
IkReal x3025=(cj5*r10);
IkReal x3026=(r01*sj5);
IkReal x3027=((1.0)*cj2);
IkReal x3028=(cj5*r00);
IkReal x3029=(cj5*r20);
IkReal x3030=((1.0)*x3024);
IkReal x3031=((1.0)*x3023);
IkReal x3032=(sj5*x3023);
evalcond[0]=((((-1.0)*x3029*x3031))+((r21*x3032))+(((-1.0)*r22*x3030)));
evalcond[1]=((((-1.0)*x3025*x3031))+((r11*x3032))+(((-1.0)*r12*x3030)));
evalcond[2]=((((-1.0)*x3026*x3030))+(((-1.0)*r02*x3031))+((x3024*x3028)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x3030))+(((-1.0)*x3028*x3031))+((x3023*x3026)));
evalcond[4]=((((-1.0)*cj1*x3027))+(((-1.0)*r21*sj5*x3030))+((sj1*sj2))+(((-1.0)*r22*x3031))+((x3024*x3029)));
evalcond[5]=((((-1.0)*sj1*x3027))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x3031))+((x3024*x3025))+(((-1.0)*r11*sj5*x3030)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3033=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3033.valid){
continue;
}
CheckValue<IkReal> x3034 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3034.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3033.value)))+(x3034.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3035=IKsin(j4);
IkReal x3036=IKcos(j4);
IkReal x3037=(cj5*r10);
IkReal x3038=(r01*sj5);
IkReal x3039=((1.0)*cj2);
IkReal x3040=(cj5*r00);
IkReal x3041=(cj5*r20);
IkReal x3042=((1.0)*x3036);
IkReal x3043=((1.0)*x3035);
IkReal x3044=(sj5*x3035);
evalcond[0]=(((r21*x3044))+(((-1.0)*r22*x3042))+(((-1.0)*x3041*x3043)));
evalcond[1]=((((-1.0)*r12*x3042))+(((-1.0)*x3037*x3043))+((r11*x3044)));
evalcond[2]=((((-1.0)*x3038*x3042))+(((-1.0)*r02*x3043))+((x3036*x3040)));
evalcond[3]=((-1.0)+((x3035*x3038))+(((-1.0)*x3040*x3043))+(((-1.0)*r02*x3042)));
evalcond[4]=((((-1.0)*cj1*x3039))+(((-1.0)*r22*x3043))+((sj1*sj2))+(((-1.0)*r21*sj5*x3042))+((x3036*x3041)));
evalcond[5]=((((-1.0)*r12*x3043))+((x3036*x3037))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x3042))+(((-1.0)*sj1*x3039)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3045=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3045;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3045);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3046=((1.0)*cj5);
IkReal x3047=((((-1.0)*r21*x3046))+(((-1.0)*r20*sj5)));
j4eval[0]=x3047;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x3046))+((r11*sj5))))));
j4eval[2]=IKsign(x3047);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3048=cj5*cj5;
IkReal x3049=r01*r01;
IkReal x3050=(cj5*r00);
IkReal x3051=(r01*sj5);
IkReal x3052=((((-1.0)*x3048*x3049))+(((-2.0)*x3050*x3051))+x3049+(r02*r02)+((x3048*(r00*r00))));
j4eval[0]=x3052;
j4eval[1]=((IKabs(r02))+(IKabs((x3050+(((-1.0)*x3051))))));
j4eval[2]=IKsign(x3052);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3053=cj5*cj5;
IkReal x3054=r01*r01;
IkReal x3055=(r01*sj5);
IkReal x3056=(cj5*r00);
CheckValue<IkReal> x3057 = IKatan2WithCheck(IkReal((x3056+(((-1.0)*x3055)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x3057.valid){
continue;
}
CheckValue<IkReal> x3058=IKPowWithIntegerCheck(IKsign((((x3053*(r00*r00)))+x3054+(((-2.0)*x3055*x3056))+(((-1.0)*x3053*x3054))+(r02*r02))),-1);
if(!x3058.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3057.value)+(((1.5707963267949)*(x3058.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3059=IKsin(j4);
IkReal x3060=IKcos(j4);
IkReal x3061=(cj5*r10);
IkReal x3062=(r01*sj5);
IkReal x3063=(cj5*r00);
IkReal x3064=(cj5*r20);
IkReal x3065=((1.0)*x3060);
IkReal x3066=((1.0)*x3059);
IkReal x3067=(sj5*x3059);
evalcond[0]=((((-1.0)*r22*x3065))+(((-1.0)*x3064*x3066))+((r21*x3067)));
evalcond[1]=((((-1.0)*x3061*x3066))+(((-1.0)*r12*x3065))+((r11*x3067)));
evalcond[2]=((((-1.0)*x3062*x3065))+(((-1.0)*r02*x3066))+((x3060*x3063)));
evalcond[3]=((1.0)+(((-1.0)*x3063*x3066))+(((-1.0)*r02*x3065))+((x3059*x3062)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x3065))+((cj1*sj2))+(((-1.0)*r12*x3066))+((x3060*x3061)));
evalcond[5]=((((-1.0)*r21*sj5*x3065))+(((-1.0)*r22*x3066))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3060*x3064)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3068=((1.0)*cj5);
CheckValue<IkReal> x3069=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3068))+(((-1.0)*r20*sj5)))),-1);
if(!x3069.valid){
continue;
}
CheckValue<IkReal> x3070 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x3068))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3070.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3069.value)))+(x3070.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3071=IKsin(j4);
IkReal x3072=IKcos(j4);
IkReal x3073=(cj5*r10);
IkReal x3074=(r01*sj5);
IkReal x3075=(cj5*r00);
IkReal x3076=(cj5*r20);
IkReal x3077=((1.0)*x3072);
IkReal x3078=((1.0)*x3071);
IkReal x3079=(sj5*x3071);
evalcond[0]=((((-1.0)*r22*x3077))+(((-1.0)*x3076*x3078))+((r21*x3079)));
evalcond[1]=((((-1.0)*x3073*x3078))+(((-1.0)*r12*x3077))+((r11*x3079)));
evalcond[2]=((((-1.0)*r02*x3078))+(((-1.0)*x3074*x3077))+((x3072*x3075)));
evalcond[3]=((1.0)+(((-1.0)*r02*x3077))+(((-1.0)*x3075*x3078))+((x3071*x3074)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r11*sj5*x3077))+((x3072*x3073))+(((-1.0)*r12*x3078)));
evalcond[5]=((((-1.0)*r21*sj5*x3077))+(((-1.0)*r22*x3078))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3072*x3076)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3080 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3080.valid){
continue;
}
CheckValue<IkReal> x3081=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3081.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3080.value)+(((1.5707963267949)*(x3081.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3082=IKsin(j4);
IkReal x3083=IKcos(j4);
IkReal x3084=(cj5*r10);
IkReal x3085=(r01*sj5);
IkReal x3086=(cj5*r00);
IkReal x3087=(cj5*r20);
IkReal x3088=((1.0)*x3083);
IkReal x3089=((1.0)*x3082);
IkReal x3090=(sj5*x3082);
evalcond[0]=(((r21*x3090))+(((-1.0)*r22*x3088))+(((-1.0)*x3087*x3089)));
evalcond[1]=((((-1.0)*x3084*x3089))+((r11*x3090))+(((-1.0)*r12*x3088)));
evalcond[2]=(((x3083*x3086))+(((-1.0)*r02*x3089))+(((-1.0)*x3085*x3088)));
evalcond[3]=((1.0)+((x3082*x3085))+(((-1.0)*r02*x3088))+(((-1.0)*x3086*x3089)));
evalcond[4]=(((cj2*sj1))+((x3083*x3084))+((cj1*sj2))+(((-1.0)*r12*x3089))+(((-1.0)*r11*sj5*x3088)));
evalcond[5]=(((x3083*x3087))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x3088))+(((-1.0)*r22*x3089)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3091=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3091);
rxp1_1=(px*r21);
rxp1_2=(r11*x3091);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3092=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3092);
rxp1_1=(px*r21);
rxp1_2=(r11*x3092);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3093=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3093);
rxp1_1=(px*r21);
rxp1_2=(r11*x3093);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3096=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x3096.valid){
continue;
}
IkReal x3094=x3096.value;
IkReal x3095=(cj0*x3094);
cj4array[0]=(((cj2*sj1*x3095))+((cj1*sj2*x3095)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3097=IKsin(j4);
IkReal x3098=IKcos(j4);
IkReal x3099=(cj5*r20);
IkReal x3100=(r21*sj5);
IkReal x3101=((1.0)*x3097);
IkReal x3102=((1.0)*x3098);
evalcond[0]=((-1.0)*r02*x3097);
evalcond[1]=((((-1.0)*r02*x3102))+(((-1.0)*cj0)));
evalcond[2]=(((x3097*x3100))+(((-1.0)*x3099*x3101)));
evalcond[3]=(((r11*sj5*x3097))+(((-1.0)*cj5*r10*x3101)));
evalcond[4]=(((x3098*x3099))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3100*x3102)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3104=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x3104.valid){
continue;
}
IkReal x3103=x3104.value;
cj4array[0]=((((-1.0)*sj1*sj2*x3103))+((cj1*cj2*x3103)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3105=IKsin(j4);
IkReal x3106=IKcos(j4);
IkReal x3107=(r11*sj5);
IkReal x3108=((1.0)*cj0);
IkReal x3109=((1.0)*x3106);
IkReal x3110=((1.0)*cj5*x3105);
evalcond[0]=((-1.0)*r02*x3105);
evalcond[1]=((((-1.0)*x3108))+(((-1.0)*r02*x3109)));
evalcond[2]=((((-1.0)*r20*x3110))+((r21*sj5*x3105)));
evalcond[3]=((((-1.0)*r10*x3110))+((x3105*x3107)));
evalcond[4]=((((-1.0)*cj1*sj2*x3108))+(((-1.0)*cj2*sj1*x3108))+(((-1.0)*x3107*x3109))+((cj5*r10*x3106)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3111=IKPowWithIntegerCheck(r02,-1);
if(!x3111.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x3111.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3112=IKsin(j4);
IkReal x3113=IKcos(j4);
IkReal x3114=((1.0)*cj0);
IkReal x3115=(cj5*x3113);
IkReal x3116=(sj5*x3112);
IkReal x3117=((1.0)*sj5*x3113);
IkReal x3118=((1.0)*cj5*x3112);
evalcond[0]=((-1.0)*r02*x3112);
evalcond[1]=((((-1.0)*r20*x3118))+((r21*x3116)));
evalcond[2]=((((-1.0)*r10*x3118))+((r11*x3116)));
evalcond[3]=((((-1.0)*r21*x3117))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x3115)));
evalcond[4]=((((-1.0)*cj1*sj2*x3114))+(((-1.0)*cj2*sj1*x3114))+(((-1.0)*r11*x3117))+((r10*x3115)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3119=((1.0)*cj0);
IkReal x3120=((1.0)*cj5);
CheckValue<IkReal> x3121=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3120))+(((-1.0)*r20*sj5)))),-1);
if(!x3121.valid){
continue;
}
CheckValue<IkReal> x3122 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3119))+((r02*sj0)))),IkReal((((cj0*cj5*r10))+(((-1.0)*r11*sj5*x3119))+(((-1.0)*r00*sj0*x3120))+((r01*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3122.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3121.value)))+(x3122.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3123=IKsin(j4);
IkReal x3124=IKcos(j4);
IkReal x3125=(cj5*r10);
IkReal x3126=(cj2*sj1);
IkReal x3127=(r01*sj5);
IkReal x3128=((1.0)*cj1);
IkReal x3129=(cj5*r00);
IkReal x3130=((1.0)*cj0);
IkReal x3131=(cj5*r20);
IkReal x3132=((1.0)*x3124);
IkReal x3133=((1.0)*x3123);
IkReal x3134=(sj5*x3123);
evalcond[0]=((((-1.0)*x3131*x3133))+((r21*x3134))+(((-1.0)*r22*x3132)));
evalcond[1]=((((-1.0)*r02*x3132))+(((-1.0)*x3129*x3133))+(((-1.0)*x3130))+((x3123*x3127)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x3125*x3133))+(((-1.0)*r12*x3132))+((r11*x3134)));
evalcond[3]=((((-1.0)*r21*sj5*x3132))+((sj1*sj2))+(((-1.0)*cj2*x3128))+((x3124*x3131))+(((-1.0)*r22*x3133)));
evalcond[4]=((((-1.0)*r02*x3133))+((cj1*sj0*sj2))+((x3124*x3129))+(((-1.0)*x3127*x3132))+((sj0*x3126)));
evalcond[5]=((((-1.0)*cj0*sj2*x3128))+(((-1.0)*r12*x3133))+((x3124*x3125))+(((-1.0)*x3126*x3130))+(((-1.0)*r11*sj5*x3132)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3135=((1.0)*cj5);
CheckValue<IkReal> x3136 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3135)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3136.valid){
continue;
}
CheckValue<IkReal> x3137=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3135)))),-1);
if(!x3137.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3136.value)+(((1.5707963267949)*(x3137.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3138=IKsin(j4);
IkReal x3139=IKcos(j4);
IkReal x3140=(cj5*r10);
IkReal x3141=(cj2*sj1);
IkReal x3142=(r01*sj5);
IkReal x3143=((1.0)*cj1);
IkReal x3144=(cj5*r00);
IkReal x3145=((1.0)*cj0);
IkReal x3146=(cj5*r20);
IkReal x3147=((1.0)*x3139);
IkReal x3148=((1.0)*x3138);
IkReal x3149=(sj5*x3138);
evalcond[0]=((((-1.0)*x3146*x3148))+(((-1.0)*r22*x3147))+((r21*x3149)));
evalcond[1]=((((-1.0)*x3145))+(((-1.0)*x3144*x3148))+(((-1.0)*r02*x3147))+((x3138*x3142)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r12*x3147))+(((-1.0)*x3140*x3148))+((r11*x3149)));
evalcond[3]=((((-1.0)*r22*x3148))+((sj1*sj2))+(((-1.0)*r21*sj5*x3147))+((x3139*x3146))+(((-1.0)*cj2*x3143)));
evalcond[4]=((((-1.0)*x3142*x3147))+((sj0*x3141))+((cj1*sj0*sj2))+(((-1.0)*r02*x3148))+((x3139*x3144)));
evalcond[5]=((((-1.0)*r12*x3148))+(((-1.0)*x3141*x3145))+((x3139*x3140))+(((-1.0)*cj0*sj2*x3143))+(((-1.0)*r11*sj5*x3147)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3150=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3150.valid){
continue;
}
CheckValue<IkReal> x3151 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3151.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3150.value)))+(x3151.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3152=IKsin(j4);
IkReal x3153=IKcos(j4);
IkReal x3154=(cj5*r10);
IkReal x3155=(cj2*sj1);
IkReal x3156=(r01*sj5);
IkReal x3157=((1.0)*cj1);
IkReal x3158=(cj5*r00);
IkReal x3159=((1.0)*cj0);
IkReal x3160=(cj5*r20);
IkReal x3161=((1.0)*x3153);
IkReal x3162=((1.0)*x3152);
IkReal x3163=(sj5*x3152);
evalcond[0]=((((-1.0)*x3160*x3162))+((r21*x3163))+(((-1.0)*r22*x3161)));
evalcond[1]=((((-1.0)*x3159))+(((-1.0)*x3158*x3162))+(((-1.0)*r02*x3161))+((x3152*x3156)));
evalcond[2]=((((-1.0)*r12*x3161))+(((-1.0)*sj0))+((r11*x3163))+(((-1.0)*x3154*x3162)));
evalcond[3]=(((sj1*sj2))+((x3153*x3160))+(((-1.0)*r21*sj5*x3161))+(((-1.0)*cj2*x3157))+(((-1.0)*r22*x3162)));
evalcond[4]=((((-1.0)*x3156*x3161))+((x3153*x3158))+((sj0*x3155))+((cj1*sj0*sj2))+(((-1.0)*r02*x3162)));
evalcond[5]=((((-1.0)*r12*x3162))+((x3153*x3154))+(((-1.0)*r11*sj5*x3161))+(((-1.0)*x3155*x3159))+(((-1.0)*cj0*sj2*x3157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3164=((((-1.0)*sj1*sj2))+((cj1*cj2)));
j0eval[0]=x3164;
j0eval[1]=IKsign(x3164);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs(((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3165=r21*r21;
IkReal x3166=cj5*cj5;
IkReal x3167=(sj1*sj2);
IkReal x3168=(r21*sj5);
IkReal x3169=(cj5*r20);
IkReal x3170=(cj1*cj2);
IkReal x3171=((((-1.0)*x3165))+(((2.0)*x3168*x3169))+(((-1.0)*(r22*r22)))+(((-1.0)*x3166*(r20*r20)))+((x3165*x3166)));
j4eval[0]=x3171;
j4eval[1]=((IKabs((((r22*x3167))+(((-1.0)*r22*x3170)))))+(IKabs(((((-1.0)*x3168*x3170))+((x3167*x3168))+(((-1.0)*x3167*x3169))+((x3169*x3170))))));
j4eval[2]=IKsign(x3171);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=((((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.20734818680435)*px))+(((-0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.20734818680435)*px))+(((-0.566898951975751)*py))))+IKsqr(((((2.20734818680435)*py))+(((-0.566898951975751)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.20734818680435)*px))+(((-0.566898951975751)*py))), ((((2.20734818680435)*py))+(((-0.566898951975751)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3172=IKcos(j0);
IkReal x3173=IKsin(j0);
evalcond[0]=((((-0.425)*x3173))+(((-1.0)*px))+(((-0.10915)*x3172)));
evalcond[1]=((((0.425)*x3172))+(((-1.0)*py))+(((-0.10915)*x3173)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3174=((1.0)*cj5);
IkReal x3175=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3174)));
j4eval[0]=x3175;
j4eval[1]=IKsign(x3175);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3174))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3176=((1.0)*cj5);
IkReal x3177=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3176)));
j4eval[0]=x3177;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3176)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3177);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3178=cj5*cj5;
IkReal x3179=((1.0)*r20);
IkReal x3180=(r01*r21);
IkReal x3181=(cj5*sj5);
IkReal x3182=((((-1.0)*r02*r22))+((x3178*x3180))+((r01*r20*x3181))+(((-1.0)*r00*x3178*x3179))+(((-1.0)*x3180))+((r00*r21*x3181)));
j4eval[0]=x3182;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*cj5*sj0*x3179))))));
j4eval[2]=IKsign(x3182);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3183=cj5*cj5;
IkReal x3184=((1.0)*r20);
IkReal x3185=(r01*r21);
IkReal x3186=(cj5*sj5);
CheckValue<IkReal> x3187=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+(((-1.0)*r00*x3183*x3184))+((r01*r20*x3186))+((x3183*x3185))+(((-1.0)*x3185))+((r00*r21*x3186)))),-1);
if(!x3187.valid){
continue;
}
CheckValue<IkReal> x3188 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*sj0*x3184))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3188.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3187.value)))+(x3188.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3189=IKcos(j4);
IkReal x3190=IKsin(j4);
IkReal x3191=((1.0)*cj0);
IkReal x3192=(cj5*r00);
IkReal x3193=(cj5*r10);
IkReal x3194=(cj5*r20);
IkReal x3195=((1.0)*x3189);
IkReal x3196=((1.0)*x3190);
IkReal x3197=(sj5*x3189);
IkReal x3198=(sj5*x3190);
evalcond[0]=(((r21*x3197))+((r22*x3190))+(((-1.0)*x3194*x3195)));
evalcond[1]=((((-1.0)*r22*x3195))+((r21*x3198))+(((-1.0)*x3194*x3196)));
evalcond[2]=(sj0+(((-1.0)*x3192*x3195))+((r01*x3197))+((r02*x3190)));
evalcond[3]=((((-1.0)*x3193*x3195))+((r11*x3197))+((r12*x3190))+(((-1.0)*x3191)));
evalcond[4]=((((-1.0)*x3192*x3196))+((r01*x3198))+(((-1.0)*r02*x3195))+(((-1.0)*x3191)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3193*x3196))+((r11*x3198))+(((-1.0)*r12*x3195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3199=((1.0)*cj5);
CheckValue<IkReal> x3200=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3199))+(((-1.0)*r00*sj5)))),-1);
if(!x3200.valid){
continue;
}
CheckValue<IkReal> x3201 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3199)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3201.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3200.value)))+(x3201.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3202=IKcos(j4);
IkReal x3203=IKsin(j4);
IkReal x3204=((1.0)*cj0);
IkReal x3205=(cj5*r00);
IkReal x3206=(cj5*r10);
IkReal x3207=(cj5*r20);
IkReal x3208=((1.0)*x3202);
IkReal x3209=((1.0)*x3203);
IkReal x3210=(sj5*x3202);
IkReal x3211=(sj5*x3203);
evalcond[0]=((((-1.0)*x3207*x3208))+((r22*x3203))+((r21*x3210)));
evalcond[1]=((((-1.0)*x3207*x3209))+(((-1.0)*r22*x3208))+((r21*x3211)));
evalcond[2]=(sj0+((r01*x3210))+((r02*x3203))+(((-1.0)*x3205*x3208)));
evalcond[3]=(((r12*x3203))+((r11*x3210))+(((-1.0)*x3204))+(((-1.0)*x3206*x3208)));
evalcond[4]=((((-1.0)*r02*x3208))+((r01*x3211))+(((-1.0)*x3204))+(((-1.0)*x3205*x3209)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x3208))+((r11*x3211))+(((-1.0)*x3206*x3209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3212=((1.0)*cj5);
CheckValue<IkReal> x3213=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3212)))),-1);
if(!x3213.valid){
continue;
}
CheckValue<IkReal> x3214 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3212)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3214.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3213.value)))+(x3214.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3215=IKcos(j4);
IkReal x3216=IKsin(j4);
IkReal x3217=((1.0)*cj0);
IkReal x3218=(cj5*r00);
IkReal x3219=(cj5*r10);
IkReal x3220=(cj5*r20);
IkReal x3221=((1.0)*x3215);
IkReal x3222=((1.0)*x3216);
IkReal x3223=(sj5*x3215);
IkReal x3224=(sj5*x3216);
evalcond[0]=(((r22*x3216))+((r21*x3223))+(((-1.0)*x3220*x3221)));
evalcond[1]=(((r21*x3224))+(((-1.0)*r22*x3221))+(((-1.0)*x3220*x3222)));
evalcond[2]=(sj0+((r01*x3223))+(((-1.0)*x3218*x3221))+((r02*x3216)));
evalcond[3]=(((r11*x3223))+((r12*x3216))+(((-1.0)*x3219*x3221))+(((-1.0)*x3217)));
evalcond[4]=((((-1.0)*r02*x3221))+((r01*x3224))+(((-1.0)*x3217))+(((-1.0)*x3218*x3222)));
evalcond[5]=((((-1.0)*sj0))+((r11*x3224))+(((-1.0)*x3219*x3222))+(((-1.0)*r12*x3221)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.20734818680435)*px))+(((-0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.20734818680435)*px))+(((-0.566898951975751)*py))))+IKsqr(((((2.20734818680435)*py))+(((-0.566898951975751)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.20734818680435)*px))+(((-0.566898951975751)*py))), ((((2.20734818680435)*py))+(((-0.566898951975751)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3225=IKcos(j0);
IkReal x3226=IKsin(j0);
evalcond[0]=((((-0.425)*x3226))+(((-1.0)*px))+(((-0.10915)*x3225)));
evalcond[1]=((((0.425)*x3225))+(((-1.0)*py))+(((-0.10915)*x3226)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3227=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3227;
j4eval[1]=IKsign(x3227);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3228=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3228;
j4eval[1]=IKsign(x3228);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3229=cj5*cj5;
IkReal x3230=(r11*r21);
IkReal x3231=((1.0)*r20);
IkReal x3232=(cj5*sj5);
IkReal x3233=((((-1.0)*r12*r22))+((r10*r21*x3232))+(((-1.0)*x3230))+((x3229*x3230))+(((-1.0)*r10*x3229*x3231))+((r11*r20*x3232)));
j4eval[0]=x3233;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x3231)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3233);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3234=cj5*cj5;
IkReal x3235=(r11*r21);
IkReal x3236=((1.0)*r20);
IkReal x3237=(cj5*sj5);
CheckValue<IkReal> x3238 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x3236)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3238.valid){
continue;
}
CheckValue<IkReal> x3239=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+((x3234*x3235))+((r10*r21*x3237))+(((-1.0)*x3235))+((r11*r20*x3237))+(((-1.0)*r10*x3234*x3236)))),-1);
if(!x3239.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3238.value)+(((1.5707963267949)*(x3239.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3240=IKcos(j4);
IkReal x3241=IKsin(j4);
IkReal x3242=((1.0)*sj0);
IkReal x3243=(cj5*r00);
IkReal x3244=(cj5*r10);
IkReal x3245=(cj5*r20);
IkReal x3246=((1.0)*x3240);
IkReal x3247=(sj5*x3240);
IkReal x3248=((1.0)*x3241);
IkReal x3249=(sj5*x3241);
evalcond[0]=(((r22*x3241))+((r21*x3247))+(((-1.0)*x3245*x3246)));
evalcond[1]=(((r21*x3249))+(((-1.0)*x3245*x3248))+(((-1.0)*r22*x3246)));
evalcond[2]=(cj0+(((-1.0)*x3244*x3246))+((r12*x3241))+((r11*x3247)));
evalcond[3]=(((r01*x3247))+(((-1.0)*x3243*x3246))+(((-1.0)*x3242))+((r02*x3241)));
evalcond[4]=(((r01*x3249))+(((-1.0)*x3243*x3248))+(((-1.0)*r02*x3246))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x3246))+(((-1.0)*x3244*x3248))+(((-1.0)*x3242))+((r11*x3249)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3250 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3250.valid){
continue;
}
CheckValue<IkReal> x3251=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3251.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3250.value)+(((1.5707963267949)*(x3251.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3252=IKcos(j4);
IkReal x3253=IKsin(j4);
IkReal x3254=((1.0)*sj0);
IkReal x3255=(cj5*r00);
IkReal x3256=(cj5*r10);
IkReal x3257=(cj5*r20);
IkReal x3258=((1.0)*x3252);
IkReal x3259=(sj5*x3252);
IkReal x3260=((1.0)*x3253);
IkReal x3261=(sj5*x3253);
evalcond[0]=(((r21*x3259))+(((-1.0)*x3257*x3258))+((r22*x3253)));
evalcond[1]=((((-1.0)*x3257*x3260))+((r21*x3261))+(((-1.0)*r22*x3258)));
evalcond[2]=(((r12*x3253))+cj0+((r11*x3259))+(((-1.0)*x3256*x3258)));
evalcond[3]=(((r02*x3253))+((r01*x3259))+(((-1.0)*x3255*x3258))+(((-1.0)*x3254)));
evalcond[4]=((((-1.0)*r02*x3258))+((r01*x3261))+(((-1.0)*x3255*x3260))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x3256*x3260))+((r11*x3261))+(((-1.0)*r12*x3258))+(((-1.0)*x3254)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3262 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3262.valid){
continue;
}
CheckValue<IkReal> x3263=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3263.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3262.value)+(((1.5707963267949)*(x3263.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3264=IKcos(j4);
IkReal x3265=IKsin(j4);
IkReal x3266=((1.0)*sj0);
IkReal x3267=(cj5*r00);
IkReal x3268=(cj5*r10);
IkReal x3269=(cj5*r20);
IkReal x3270=((1.0)*x3264);
IkReal x3271=(sj5*x3264);
IkReal x3272=((1.0)*x3265);
IkReal x3273=(sj5*x3265);
evalcond[0]=(((r21*x3271))+(((-1.0)*x3269*x3270))+((r22*x3265)));
evalcond[1]=(((r21*x3273))+(((-1.0)*x3269*x3272))+(((-1.0)*r22*x3270)));
evalcond[2]=((((-1.0)*x3268*x3270))+cj0+((r11*x3271))+((r12*x3265)));
evalcond[3]=(((r01*x3271))+(((-1.0)*x3266))+((r02*x3265))+(((-1.0)*x3267*x3270)));
evalcond[4]=(((r01*x3273))+(((-1.0)*x3267*x3272))+(((-1.0)*r02*x3270))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x3268*x3272))+(((-1.0)*r12*x3270))+(((-1.0)*x3266))+((r11*x3273)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*py))+IKsqr(((-9.16170407695831)*px))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*py), ((-9.16170407695831)*px));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.10915)*(IKcos(j0)))));
evalcond[1]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3274=((1.0)*cj5);
IkReal x3275=((((-1.0)*r11*x3274))+(((-1.0)*r10*sj5)));
j4eval[0]=x3275;
j4eval[1]=IKsign(x3275);
j4eval[2]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3274)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3276=((1.0)*cj5);
IkReal x3277=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3276)));
j4eval[0]=x3277;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3276))))));
j4eval[2]=IKsign(x3277);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3278=cj5*cj5;
IkReal x3279=((1.0)*r20);
IkReal x3280=(r01*r21);
IkReal x3281=(cj5*sj5);
IkReal x3282=((((-1.0)*r02*r22))+((r00*r21*x3281))+((r01*r20*x3281))+(((-1.0)*r00*x3278*x3279))+(((-1.0)*x3280))+((x3278*x3280)));
j4eval[0]=x3282;
j4eval[1]=((IKabs(((((-1.0)*cj5*sj0*x3279))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x3282);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3283=cj5*cj5;
IkReal x3284=((1.0)*r20);
IkReal x3285=(r01*r21);
IkReal x3286=(cj5*sj5);
CheckValue<IkReal> x3287=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+(((-1.0)*r00*x3283*x3284))+((r00*r21*x3286))+((r01*r20*x3286))+((x3283*x3285))+(((-1.0)*x3285)))),-1);
if(!x3287.valid){
continue;
}
CheckValue<IkReal> x3288 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*sj0*x3284))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3288.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3287.value)))+(x3288.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3289=IKcos(j4);
IkReal x3290=IKsin(j4);
IkReal x3291=((1.0)*cj0);
IkReal x3292=(cj5*r00);
IkReal x3293=(cj5*r10);
IkReal x3294=(cj5*r20);
IkReal x3295=((1.0)*x3289);
IkReal x3296=((1.0)*x3290);
IkReal x3297=(sj5*x3289);
IkReal x3298=(sj5*x3290);
evalcond[0]=(((r21*x3297))+((r22*x3290))+(((-1.0)*x3294*x3295)));
evalcond[1]=((((-1.0)*r22*x3295))+((r21*x3298))+(((-1.0)*x3294*x3296)));
evalcond[2]=(((r01*x3297))+sj0+((r02*x3290))+(((-1.0)*x3292*x3295)));
evalcond[3]=((((-1.0)*x3291))+(((-1.0)*x3293*x3295))+((r11*x3297))+((r12*x3290)));
evalcond[4]=(((r01*x3298))+(((-1.0)*x3291))+(((-1.0)*x3292*x3296))+(((-1.0)*r02*x3295)));
evalcond[5]=((((-1.0)*r12*x3295))+(((-1.0)*sj0))+(((-1.0)*x3293*x3296))+((r11*x3298)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3299=((1.0)*cj5);
CheckValue<IkReal> x3300 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x3299))+((cj0*r21*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3300.valid){
continue;
}
CheckValue<IkReal> x3301=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3299)))),-1);
if(!x3301.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3300.value)+(((1.5707963267949)*(x3301.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3302=IKcos(j4);
IkReal x3303=IKsin(j4);
IkReal x3304=((1.0)*cj0);
IkReal x3305=(cj5*r00);
IkReal x3306=(cj5*r10);
IkReal x3307=(cj5*r20);
IkReal x3308=((1.0)*x3302);
IkReal x3309=((1.0)*x3303);
IkReal x3310=(sj5*x3302);
IkReal x3311=(sj5*x3303);
evalcond[0]=(((r21*x3310))+((r22*x3303))+(((-1.0)*x3307*x3308)));
evalcond[1]=(((r21*x3311))+(((-1.0)*r22*x3308))+(((-1.0)*x3307*x3309)));
evalcond[2]=(sj0+(((-1.0)*x3305*x3308))+((r02*x3303))+((r01*x3310)));
evalcond[3]=((((-1.0)*x3304))+((r11*x3310))+(((-1.0)*x3306*x3308))+((r12*x3303)));
evalcond[4]=((((-1.0)*x3305*x3309))+(((-1.0)*x3304))+(((-1.0)*r02*x3308))+((r01*x3311)));
evalcond[5]=((((-1.0)*sj0))+((r11*x3311))+(((-1.0)*x3306*x3309))+(((-1.0)*r12*x3308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3312=((1.0)*cj5);
CheckValue<IkReal> x3313=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3312)))),-1);
if(!x3313.valid){
continue;
}
CheckValue<IkReal> x3314 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3312))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3314.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3313.value)))+(x3314.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3315=IKcos(j4);
IkReal x3316=IKsin(j4);
IkReal x3317=((1.0)*cj0);
IkReal x3318=(cj5*r00);
IkReal x3319=(cj5*r10);
IkReal x3320=(cj5*r20);
IkReal x3321=((1.0)*x3315);
IkReal x3322=((1.0)*x3316);
IkReal x3323=(sj5*x3315);
IkReal x3324=(sj5*x3316);
evalcond[0]=(((r22*x3316))+(((-1.0)*x3320*x3321))+((r21*x3323)));
evalcond[1]=((((-1.0)*x3320*x3322))+((r21*x3324))+(((-1.0)*r22*x3321)));
evalcond[2]=(sj0+((r01*x3323))+((r02*x3316))+(((-1.0)*x3318*x3321)));
evalcond[3]=(((r11*x3323))+(((-1.0)*x3317))+(((-1.0)*x3319*x3321))+((r12*x3316)));
evalcond[4]=((((-1.0)*r02*x3321))+((r01*x3324))+(((-1.0)*x3317))+(((-1.0)*x3318*x3322)));
evalcond[5]=((((-1.0)*sj0))+((r11*x3324))+(((-1.0)*x3319*x3322))+(((-1.0)*r12*x3321)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*py))+IKsqr(((-9.16170407695831)*px))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*py), ((-9.16170407695831)*px));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.10915)*(IKcos(j0)))));
evalcond[1]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3325=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3325;
j4eval[1]=IKsign(x3325);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3326=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3326;
j4eval[1]=IKsign(x3326);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3327=cj5*cj5;
IkReal x3328=(r11*r21);
IkReal x3329=((1.0)*r20);
IkReal x3330=(cj5*sj5);
IkReal x3331=((((-1.0)*x3328))+((r11*r20*x3330))+(((-1.0)*r12*r22))+((r10*r21*x3330))+(((-1.0)*r10*x3327*x3329))+((x3327*x3328)));
j4eval[0]=x3331;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x3329))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3331);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3332=cj5*cj5;
IkReal x3333=(r11*r21);
IkReal x3334=((1.0)*r20);
IkReal x3335=(cj5*sj5);
CheckValue<IkReal> x3336 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x3334)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3336.valid){
continue;
}
CheckValue<IkReal> x3337=IKPowWithIntegerCheck(IKsign((((x3332*x3333))+((r11*r20*x3335))+(((-1.0)*r12*r22))+((r10*r21*x3335))+(((-1.0)*x3333))+(((-1.0)*r10*x3332*x3334)))),-1);
if(!x3337.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3336.value)+(((1.5707963267949)*(x3337.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3338=IKcos(j4);
IkReal x3339=IKsin(j4);
IkReal x3340=((1.0)*sj0);
IkReal x3341=(cj5*r00);
IkReal x3342=(cj5*r10);
IkReal x3343=(cj5*r20);
IkReal x3344=((1.0)*x3338);
IkReal x3345=(sj5*x3338);
IkReal x3346=((1.0)*x3339);
IkReal x3347=(sj5*x3339);
evalcond[0]=((((-1.0)*x3343*x3344))+((r21*x3345))+((r22*x3339)));
evalcond[1]=((((-1.0)*x3343*x3346))+((r21*x3347))+(((-1.0)*r22*x3344)));
evalcond[2]=(cj0+((r12*x3339))+(((-1.0)*x3342*x3344))+((r11*x3345)));
evalcond[3]=((((-1.0)*x3341*x3344))+(((-1.0)*x3340))+((r02*x3339))+((r01*x3345)));
evalcond[4]=((((-1.0)*x3341*x3346))+(((-1.0)*r02*x3344))+(((-1.0)*cj0))+((r01*x3347)));
evalcond[5]=((((-1.0)*x3340))+(((-1.0)*r12*x3344))+(((-1.0)*x3342*x3346))+((r11*x3347)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3348 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3348.valid){
continue;
}
CheckValue<IkReal> x3349=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3349.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3348.value)+(((1.5707963267949)*(x3349.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3350=IKcos(j4);
IkReal x3351=IKsin(j4);
IkReal x3352=((1.0)*sj0);
IkReal x3353=(cj5*r00);
IkReal x3354=(cj5*r10);
IkReal x3355=(cj5*r20);
IkReal x3356=((1.0)*x3350);
IkReal x3357=(sj5*x3350);
IkReal x3358=((1.0)*x3351);
IkReal x3359=(sj5*x3351);
evalcond[0]=((((-1.0)*x3355*x3356))+((r21*x3357))+((r22*x3351)));
evalcond[1]=((((-1.0)*x3355*x3358))+((r21*x3359))+(((-1.0)*r22*x3356)));
evalcond[2]=(((r12*x3351))+cj0+((r11*x3357))+(((-1.0)*x3354*x3356)));
evalcond[3]=((((-1.0)*x3352))+((r01*x3357))+(((-1.0)*x3353*x3356))+((r02*x3351)));
evalcond[4]=((((-1.0)*r02*x3356))+((r01*x3359))+(((-1.0)*x3353*x3358))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x3352))+((r11*x3359))+(((-1.0)*x3354*x3358))+(((-1.0)*r12*x3356)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3360 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3360.valid){
continue;
}
CheckValue<IkReal> x3361=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3361.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3360.value)+(((1.5707963267949)*(x3361.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3362=IKcos(j4);
IkReal x3363=IKsin(j4);
IkReal x3364=((1.0)*sj0);
IkReal x3365=(cj5*r00);
IkReal x3366=(cj5*r10);
IkReal x3367=(cj5*r20);
IkReal x3368=((1.0)*x3362);
IkReal x3369=(sj5*x3362);
IkReal x3370=((1.0)*x3363);
IkReal x3371=(sj5*x3363);
evalcond[0]=(((r22*x3363))+((r21*x3369))+(((-1.0)*x3367*x3368)));
evalcond[1]=((((-1.0)*x3367*x3370))+(((-1.0)*r22*x3368))+((r21*x3371)));
evalcond[2]=(cj0+(((-1.0)*x3366*x3368))+((r12*x3363))+((r11*x3369)));
evalcond[3]=(((r02*x3363))+(((-1.0)*x3364))+((r01*x3369))+(((-1.0)*x3365*x3368)));
evalcond[4]=(((r01*x3371))+(((-1.0)*x3365*x3370))+(((-1.0)*r02*x3368))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x3368))+(((-1.0)*x3366*x3370))+(((-1.0)*x3364))+((r11*x3371)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.20734818680435)*px))+(((-0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20734818680435)*px))+(((-0.566898951975751)*py))))+IKsqr(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.20734818680435)*px))+(((-0.566898951975751)*py))), ((((-2.20734818680435)*py))+(((-0.566898951975751)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3372=IKsin(j0);
IkReal x3373=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((-0.10915)*x3373))+(((0.425)*x3372)));
evalcond[1]=((((-1.0)*py))+(((-0.10915)*x3372))+(((-0.425)*x3373)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3374=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3374;
j4eval[1]=IKsign(x3374);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3375=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3375;
j4eval[1]=IKsign(x3375);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3376=cj5*cj5;
IkReal x3377=(r11*r21);
IkReal x3378=((1.0)*r20);
IkReal x3379=(cj5*sj5);
IkReal x3380=((((-1.0)*x3377))+((x3376*x3377))+(((-1.0)*r12*r22))+((r10*r21*x3379))+(((-1.0)*r10*x3376*x3378))+((r11*r20*x3379)));
j4eval[0]=x3380;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x3378))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3380);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3381=cj5*cj5;
IkReal x3382=(r11*r21);
IkReal x3383=((1.0)*r20);
IkReal x3384=(cj5*sj5);
CheckValue<IkReal> x3385 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x3383))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3385.valid){
continue;
}
CheckValue<IkReal> x3386=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3382))+((x3381*x3382))+(((-1.0)*r12*r22))+(((-1.0)*r10*x3381*x3383))+((r11*r20*x3384))+((r10*r21*x3384)))),-1);
if(!x3386.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3385.value)+(((1.5707963267949)*(x3386.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3387=IKcos(j4);
IkReal x3388=IKsin(j4);
IkReal x3389=((1.0)*sj0);
IkReal x3390=(cj5*r00);
IkReal x3391=(cj5*r10);
IkReal x3392=(cj5*r20);
IkReal x3393=((1.0)*x3387);
IkReal x3394=(sj5*x3387);
IkReal x3395=((1.0)*x3388);
IkReal x3396=(sj5*x3388);
evalcond[0]=((((-1.0)*x3392*x3393))+((r21*x3394))+((r22*x3388)));
evalcond[1]=((((-1.0)*r22*x3393))+(((-1.0)*x3392*x3395))+((r21*x3396)));
evalcond[2]=(cj0+((r11*x3394))+((r12*x3388))+(((-1.0)*x3391*x3393)));
evalcond[3]=(((r01*x3394))+((r02*x3388))+(((-1.0)*x3389))+(((-1.0)*x3390*x3393)));
evalcond[4]=(((r01*x3396))+(((-1.0)*r02*x3393))+(((-1.0)*x3390*x3395))+(((-1.0)*cj0)));
evalcond[5]=(((r11*x3396))+(((-1.0)*r12*x3393))+(((-1.0)*x3391*x3395))+(((-1.0)*x3389)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3397 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3397.valid){
continue;
}
CheckValue<IkReal> x3398=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3398.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3397.value)+(((1.5707963267949)*(x3398.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3399=IKcos(j4);
IkReal x3400=IKsin(j4);
IkReal x3401=((1.0)*sj0);
IkReal x3402=(cj5*r00);
IkReal x3403=(cj5*r10);
IkReal x3404=(cj5*r20);
IkReal x3405=((1.0)*x3399);
IkReal x3406=(sj5*x3399);
IkReal x3407=((1.0)*x3400);
IkReal x3408=(sj5*x3400);
evalcond[0]=(((r22*x3400))+(((-1.0)*x3404*x3405))+((r21*x3406)));
evalcond[1]=((((-1.0)*x3404*x3407))+((r21*x3408))+(((-1.0)*r22*x3405)));
evalcond[2]=(cj0+((r11*x3406))+((r12*x3400))+(((-1.0)*x3403*x3405)));
evalcond[3]=(((r02*x3400))+(((-1.0)*x3402*x3405))+((r01*x3406))+(((-1.0)*x3401)));
evalcond[4]=((((-1.0)*x3402*x3407))+(((-1.0)*r02*x3405))+((r01*x3408))+(((-1.0)*cj0)));
evalcond[5]=(((r11*x3408))+(((-1.0)*r12*x3405))+(((-1.0)*x3403*x3407))+(((-1.0)*x3401)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3409 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3409.valid){
continue;
}
CheckValue<IkReal> x3410=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3410.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3409.value)+(((1.5707963267949)*(x3410.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3411=IKcos(j4);
IkReal x3412=IKsin(j4);
IkReal x3413=((1.0)*sj0);
IkReal x3414=(cj5*r00);
IkReal x3415=(cj5*r10);
IkReal x3416=(cj5*r20);
IkReal x3417=((1.0)*x3411);
IkReal x3418=(sj5*x3411);
IkReal x3419=((1.0)*x3412);
IkReal x3420=(sj5*x3412);
evalcond[0]=(((r22*x3412))+((r21*x3418))+(((-1.0)*x3416*x3417)));
evalcond[1]=((((-1.0)*r22*x3417))+((r21*x3420))+(((-1.0)*x3416*x3419)));
evalcond[2]=((((-1.0)*x3415*x3417))+cj0+((r12*x3412))+((r11*x3418)));
evalcond[3]=(((r02*x3412))+(((-1.0)*x3414*x3417))+((r01*x3418))+(((-1.0)*x3413)));
evalcond[4]=((((-1.0)*x3414*x3419))+(((-1.0)*r02*x3417))+(((-1.0)*cj0))+((r01*x3420)));
evalcond[5]=((((-1.0)*x3415*x3419))+(((-1.0)*r12*x3417))+((r11*x3420))+(((-1.0)*x3413)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.20734818680435)*px))+(((-0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20734818680435)*px))+(((-0.566898951975751)*py))))+IKsqr(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.20734818680435)*px))+(((-0.566898951975751)*py))), ((((-2.20734818680435)*py))+(((-0.566898951975751)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3421=IKsin(j0);
IkReal x3422=IKcos(j0);
evalcond[0]=((((0.425)*x3421))+(((-1.0)*px))+(((-0.10915)*x3422)));
evalcond[1]=((((-0.425)*x3422))+(((-1.0)*py))+(((-0.10915)*x3421)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3423=((1.0)*cj5);
IkReal x3424=((((-1.0)*r11*x3423))+(((-1.0)*r10*sj5)));
j4eval[0]=x3424;
j4eval[1]=IKsign(x3424);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3423))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3425=((1.0)*cj5);
IkReal x3426=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3425)));
j4eval[0]=x3426;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3425)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3426);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3427=cj5*cj5;
IkReal x3428=((1.0)*r20);
IkReal x3429=(r01*r21);
IkReal x3430=(cj5*sj5);
IkReal x3431=((((-1.0)*r02*r22))+((r01*r20*x3430))+((x3427*x3429))+(((-1.0)*r00*x3427*x3428))+(((-1.0)*x3429))+((r00*r21*x3430)));
j4eval[0]=x3431;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*cj5*sj0*x3428))))));
j4eval[2]=IKsign(x3431);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3432=cj5*cj5;
IkReal x3433=((1.0)*r20);
IkReal x3434=(r01*r21);
IkReal x3435=(cj5*sj5);
CheckValue<IkReal> x3436=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3432*x3433))+(((-1.0)*r02*r22))+((r01*r20*x3435))+((x3432*x3434))+(((-1.0)*x3434))+((r00*r21*x3435)))),-1);
if(!x3436.valid){
continue;
}
CheckValue<IkReal> x3437 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*cj5*sj0*x3433)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3437.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3436.value)))+(x3437.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3438=IKcos(j4);
IkReal x3439=IKsin(j4);
IkReal x3440=((1.0)*cj0);
IkReal x3441=(cj5*r00);
IkReal x3442=(cj5*r10);
IkReal x3443=(cj5*r20);
IkReal x3444=((1.0)*x3438);
IkReal x3445=((1.0)*x3439);
IkReal x3446=(sj5*x3438);
IkReal x3447=(sj5*x3439);
evalcond[0]=(((r21*x3446))+(((-1.0)*x3443*x3444))+((r22*x3439)));
evalcond[1]=(((r21*x3447))+(((-1.0)*x3443*x3445))+(((-1.0)*r22*x3444)));
evalcond[2]=(sj0+(((-1.0)*x3441*x3444))+((r01*x3446))+((r02*x3439)));
evalcond[3]=(((r11*x3446))+((r12*x3439))+(((-1.0)*x3442*x3444))+(((-1.0)*x3440)));
evalcond[4]=((((-1.0)*x3441*x3445))+(((-1.0)*r02*x3444))+((r01*x3447))+(((-1.0)*x3440)));
evalcond[5]=(((r11*x3447))+(((-1.0)*sj0))+(((-1.0)*r12*x3444))+(((-1.0)*x3442*x3445)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3448=((1.0)*cj5);
CheckValue<IkReal> x3449=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3448)))),-1);
if(!x3449.valid){
continue;
}
CheckValue<IkReal> x3450 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x3448))+((cj0*r21*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3450.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3449.value)))+(x3450.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3451=IKcos(j4);
IkReal x3452=IKsin(j4);
IkReal x3453=((1.0)*cj0);
IkReal x3454=(cj5*r00);
IkReal x3455=(cj5*r10);
IkReal x3456=(cj5*r20);
IkReal x3457=((1.0)*x3451);
IkReal x3458=((1.0)*x3452);
IkReal x3459=(sj5*x3451);
IkReal x3460=(sj5*x3452);
evalcond[0]=(((r21*x3459))+((r22*x3452))+(((-1.0)*x3456*x3457)));
evalcond[1]=(((r21*x3460))+(((-1.0)*r22*x3457))+(((-1.0)*x3456*x3458)));
evalcond[2]=(sj0+((r02*x3452))+(((-1.0)*x3454*x3457))+((r01*x3459)));
evalcond[3]=((((-1.0)*x3453))+((r12*x3452))+(((-1.0)*x3455*x3457))+((r11*x3459)));
evalcond[4]=((((-1.0)*x3453))+((r01*x3460))+(((-1.0)*x3454*x3458))+(((-1.0)*r02*x3457)));
evalcond[5]=((((-1.0)*sj0))+((r11*x3460))+(((-1.0)*r12*x3457))+(((-1.0)*x3455*x3458)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3461=((1.0)*cj5);
CheckValue<IkReal> x3462 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3461))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3462.valid){
continue;
}
CheckValue<IkReal> x3463=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3461)))),-1);
if(!x3463.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3462.value)+(((1.5707963267949)*(x3463.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3464=IKcos(j4);
IkReal x3465=IKsin(j4);
IkReal x3466=((1.0)*cj0);
IkReal x3467=(cj5*r00);
IkReal x3468=(cj5*r10);
IkReal x3469=(cj5*r20);
IkReal x3470=((1.0)*x3464);
IkReal x3471=((1.0)*x3465);
IkReal x3472=(sj5*x3464);
IkReal x3473=(sj5*x3465);
evalcond[0]=((((-1.0)*x3469*x3470))+((r21*x3472))+((r22*x3465)));
evalcond[1]=((((-1.0)*x3469*x3471))+(((-1.0)*r22*x3470))+((r21*x3473)));
evalcond[2]=(sj0+(((-1.0)*x3467*x3470))+((r01*x3472))+((r02*x3465)));
evalcond[3]=(((r12*x3465))+((r11*x3472))+(((-1.0)*x3468*x3470))+(((-1.0)*x3466)));
evalcond[4]=((((-1.0)*x3467*x3471))+(((-1.0)*r02*x3470))+((r01*x3473))+(((-1.0)*x3466)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x3470))+((r11*x3473))+(((-1.0)*x3468*x3471)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*py))+IKsqr(((-9.16170407695831)*px))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*py), ((-9.16170407695831)*px));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.10915)*(IKcos(j0)))));
evalcond[1]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3474=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3474;
j4eval[1]=IKsign(x3474);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3475=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3475;
j4eval[1]=IKsign(x3475);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3476=cj5*cj5;
IkReal x3477=(r11*r21);
IkReal x3478=((1.0)*r20);
IkReal x3479=(cj5*sj5);
IkReal x3480=(((x3476*x3477))+(((-1.0)*r12*r22))+((r10*r21*x3479))+(((-1.0)*r10*x3476*x3478))+((r11*r20*x3479))+(((-1.0)*x3477)));
j4eval[0]=x3480;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x3478))))));
j4eval[2]=IKsign(x3480);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3481=cj5*cj5;
IkReal x3482=(r11*r21);
IkReal x3483=((1.0)*r20);
IkReal x3484=(cj5*sj5);
CheckValue<IkReal> x3485 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x3483)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3485.valid){
continue;
}
CheckValue<IkReal> x3486=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x3481*x3483))+(((-1.0)*r12*r22))+((r10*r21*x3484))+((r11*r20*x3484))+(((-1.0)*x3482))+((x3481*x3482)))),-1);
if(!x3486.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3485.value)+(((1.5707963267949)*(x3486.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3487=IKcos(j4);
IkReal x3488=IKsin(j4);
IkReal x3489=((1.0)*sj0);
IkReal x3490=(cj5*r00);
IkReal x3491=(cj5*r10);
IkReal x3492=(cj5*r20);
IkReal x3493=((1.0)*x3487);
IkReal x3494=(sj5*x3487);
IkReal x3495=((1.0)*x3488);
IkReal x3496=(sj5*x3488);
evalcond[0]=((((-1.0)*x3492*x3493))+((r21*x3494))+((r22*x3488)));
evalcond[1]=((((-1.0)*r22*x3493))+(((-1.0)*x3492*x3495))+((r21*x3496)));
evalcond[2]=(cj0+((r12*x3488))+((r11*x3494))+(((-1.0)*x3491*x3493)));
evalcond[3]=(((r01*x3494))+(((-1.0)*x3490*x3493))+(((-1.0)*x3489))+((r02*x3488)));
evalcond[4]=((((-1.0)*r02*x3493))+((r01*x3496))+(((-1.0)*x3490*x3495))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x3493))+((r11*x3496))+(((-1.0)*x3489))+(((-1.0)*x3491*x3495)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3497 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3497.valid){
continue;
}
CheckValue<IkReal> x3498=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3498.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3497.value)+(((1.5707963267949)*(x3498.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3499=IKcos(j4);
IkReal x3500=IKsin(j4);
IkReal x3501=((1.0)*sj0);
IkReal x3502=(cj5*r00);
IkReal x3503=(cj5*r10);
IkReal x3504=(cj5*r20);
IkReal x3505=((1.0)*x3499);
IkReal x3506=(sj5*x3499);
IkReal x3507=((1.0)*x3500);
IkReal x3508=(sj5*x3500);
evalcond[0]=(((r22*x3500))+(((-1.0)*x3504*x3505))+((r21*x3506)));
evalcond[1]=((((-1.0)*r22*x3505))+(((-1.0)*x3504*x3507))+((r21*x3508)));
evalcond[2]=(cj0+((r12*x3500))+((r11*x3506))+(((-1.0)*x3503*x3505)));
evalcond[3]=(((r01*x3506))+(((-1.0)*x3501))+(((-1.0)*x3502*x3505))+((r02*x3500)));
evalcond[4]=(((r01*x3508))+(((-1.0)*x3502*x3507))+(((-1.0)*r02*x3505))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x3505))+(((-1.0)*x3501))+((r11*x3508))+(((-1.0)*x3503*x3507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3509 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3509.valid){
continue;
}
CheckValue<IkReal> x3510=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3510.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3509.value)+(((1.5707963267949)*(x3510.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3511=IKcos(j4);
IkReal x3512=IKsin(j4);
IkReal x3513=((1.0)*sj0);
IkReal x3514=(cj5*r00);
IkReal x3515=(cj5*r10);
IkReal x3516=(cj5*r20);
IkReal x3517=((1.0)*x3511);
IkReal x3518=(sj5*x3511);
IkReal x3519=((1.0)*x3512);
IkReal x3520=(sj5*x3512);
evalcond[0]=(((r21*x3518))+((r22*x3512))+(((-1.0)*x3516*x3517)));
evalcond[1]=(((r21*x3520))+(((-1.0)*r22*x3517))+(((-1.0)*x3516*x3519)));
evalcond[2]=((((-1.0)*x3515*x3517))+cj0+((r11*x3518))+((r12*x3512)));
evalcond[3]=((((-1.0)*x3514*x3517))+(((-1.0)*x3513))+((r01*x3518))+((r02*x3512)));
evalcond[4]=((((-1.0)*x3514*x3519))+(((-1.0)*r02*x3517))+((r01*x3520))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x3515*x3519))+(((-1.0)*x3513))+((r11*x3520))+(((-1.0)*r12*x3517)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*py))+IKsqr(((-9.16170407695831)*px))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*py), ((-9.16170407695831)*px));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.10915)*(IKcos(j0)))));
evalcond[1]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3521=((1.0)*cj5);
IkReal x3522=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3521)));
j4eval[0]=x3522;
j4eval[1]=IKsign(x3522);
j4eval[2]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3521)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3523=((1.0)*cj5);
IkReal x3524=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3523)));
j4eval[0]=x3524;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3523)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3524);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3525=cj5*cj5;
IkReal x3526=((1.0)*r20);
IkReal x3527=(r01*r21);
IkReal x3528=(cj5*sj5);
IkReal x3529=((((-1.0)*x3527))+((x3525*x3527))+(((-1.0)*r02*r22))+((r01*r20*x3528))+(((-1.0)*r00*x3525*x3526))+((r00*r21*x3528)));
j4eval[0]=x3529;
j4eval[1]=((IKabs(((((-1.0)*cj5*sj0*x3526))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x3529);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3530=cj5*cj5;
IkReal x3531=((1.0)*r20);
IkReal x3532=(r01*r21);
IkReal x3533=(cj5*sj5);
CheckValue<IkReal> x3534 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*sj0*x3531))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3534.valid){
continue;
}
CheckValue<IkReal> x3535=IKPowWithIntegerCheck(IKsign((((r00*r21*x3533))+(((-1.0)*r02*r22))+(((-1.0)*x3532))+((r01*r20*x3533))+((x3530*x3532))+(((-1.0)*r00*x3530*x3531)))),-1);
if(!x3535.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3534.value)+(((1.5707963267949)*(x3535.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3536=IKcos(j4);
IkReal x3537=IKsin(j4);
IkReal x3538=((1.0)*cj0);
IkReal x3539=(cj5*r00);
IkReal x3540=(cj5*r10);
IkReal x3541=(cj5*r20);
IkReal x3542=((1.0)*x3536);
IkReal x3543=((1.0)*x3537);
IkReal x3544=(sj5*x3536);
IkReal x3545=(sj5*x3537);
evalcond[0]=((((-1.0)*x3541*x3542))+((r22*x3537))+((r21*x3544)));
evalcond[1]=((((-1.0)*x3541*x3543))+((r21*x3545))+(((-1.0)*r22*x3542)));
evalcond[2]=(((r02*x3537))+(((-1.0)*x3539*x3542))+sj0+((r01*x3544)));
evalcond[3]=(((r12*x3537))+(((-1.0)*x3538))+((r11*x3544))+(((-1.0)*x3540*x3542)));
evalcond[4]=((((-1.0)*r02*x3542))+(((-1.0)*x3539*x3543))+((r01*x3545))+(((-1.0)*x3538)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x3542))+((r11*x3545))+(((-1.0)*x3540*x3543)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3546=((1.0)*cj5);
CheckValue<IkReal> x3547 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3546)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3547.valid){
continue;
}
CheckValue<IkReal> x3548=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3546)))),-1);
if(!x3548.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3547.value)+(((1.5707963267949)*(x3548.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3549=IKcos(j4);
IkReal x3550=IKsin(j4);
IkReal x3551=((1.0)*cj0);
IkReal x3552=(cj5*r00);
IkReal x3553=(cj5*r10);
IkReal x3554=(cj5*r20);
IkReal x3555=((1.0)*x3549);
IkReal x3556=((1.0)*x3550);
IkReal x3557=(sj5*x3549);
IkReal x3558=(sj5*x3550);
evalcond[0]=((((-1.0)*x3554*x3555))+((r21*x3557))+((r22*x3550)));
evalcond[1]=((((-1.0)*x3554*x3556))+((r21*x3558))+(((-1.0)*r22*x3555)));
evalcond[2]=(sj0+((r01*x3557))+(((-1.0)*x3552*x3555))+((r02*x3550)));
evalcond[3]=(((r12*x3550))+(((-1.0)*x3553*x3555))+(((-1.0)*x3551))+((r11*x3557)));
evalcond[4]=(((r01*x3558))+(((-1.0)*x3551))+(((-1.0)*x3552*x3556))+(((-1.0)*r02*x3555)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3553*x3556))+(((-1.0)*r12*x3555))+((r11*x3558)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3559=((1.0)*cj5);
CheckValue<IkReal> x3560=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3559)))),-1);
if(!x3560.valid){
continue;
}
CheckValue<IkReal> x3561 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3559))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3561.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3560.value)))+(x3561.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3562=IKcos(j4);
IkReal x3563=IKsin(j4);
IkReal x3564=((1.0)*cj0);
IkReal x3565=(cj5*r00);
IkReal x3566=(cj5*r10);
IkReal x3567=(cj5*r20);
IkReal x3568=((1.0)*x3562);
IkReal x3569=((1.0)*x3563);
IkReal x3570=(sj5*x3562);
IkReal x3571=(sj5*x3563);
evalcond[0]=(((r21*x3570))+((r22*x3563))+(((-1.0)*x3567*x3568)));
evalcond[1]=(((r21*x3571))+(((-1.0)*r22*x3568))+(((-1.0)*x3567*x3569)));
evalcond[2]=((((-1.0)*x3565*x3568))+sj0+((r01*x3570))+((r02*x3563)));
evalcond[3]=((((-1.0)*x3566*x3568))+(((-1.0)*x3564))+((r11*x3570))+((r12*x3563)));
evalcond[4]=((((-1.0)*x3565*x3569))+(((-1.0)*r02*x3568))+((r01*x3571))+(((-1.0)*x3564)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3566*x3569))+(((-1.0)*r12*x3568))+((r11*x3571)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3572=(r00*sj5);
IkReal x3573=(cj1*cj2);
IkReal x3574=(sj1*sj2);
IkReal x3575=(cj5*r01);
IkReal x3576=((20000.0)*px);
IkReal x3577=((8500.0)*cj1);
CheckValue<IkReal> x3578=IKPowWithIntegerCheck((x3573+(((-1.0)*x3574))),-1);
if(!x3578.valid){
continue;
}
CheckValue<IkReal> x3579=IKPowWithIntegerCheck(((((-2183.0)*x3574))+(((2183.0)*x3573))),-1);
if(!x3579.valid){
continue;
}
if( IKabs(((x3578.value)*((x3575+x3572)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3579.value)*(((((-9738.0)*x3573*x3575))+(((-9738.0)*x3572*x3573))+(((9738.0)*x3574*x3575))+(((-1.0)*x3575*x3577))+(((-1.0)*x3573*x3576))+(((-1.0)*x3572*x3577))+((x3574*x3576))+(((9738.0)*x3572*x3574)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3578.value)*((x3575+x3572))))+IKsqr(((x3579.value)*(((((-9738.0)*x3573*x3575))+(((-9738.0)*x3572*x3573))+(((9738.0)*x3574*x3575))+(((-1.0)*x3575*x3577))+(((-1.0)*x3573*x3576))+(((-1.0)*x3572*x3577))+((x3574*x3576))+(((9738.0)*x3572*x3574))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x3578.value)*((x3575+x3572))), ((x3579.value)*(((((-9738.0)*x3573*x3575))+(((-9738.0)*x3572*x3573))+(((9738.0)*x3574*x3575))+(((-1.0)*x3575*x3577))+(((-1.0)*x3573*x3576))+(((-1.0)*x3572*x3577))+((x3574*x3576))+(((9738.0)*x3572*x3574))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3580=IKsin(j0);
IkReal x3581=IKcos(j0);
IkReal x3582=(cj5*r11);
IkReal x3583=((1.0)*sj5);
IkReal x3584=((0.09465)*sj5);
IkReal x3585=(cj5*r01);
IkReal x3586=(cj1*x3581);
IkReal x3587=(sj1*sj2*x3580);
IkReal x3588=(cj1*cj2*x3580);
IkReal x3589=(sj1*sj2*x3581);
evalcond[0]=((((-1.0)*r00*x3583))+x3588+(((-1.0)*x3587))+(((-1.0)*x3585)));
evalcond[1]=(x3589+(((-1.0)*cj2*x3586))+(((-1.0)*x3582))+(((-1.0)*r10*x3583)));
evalcond[2]=((((-1.0)*r00*x3584))+(((0.39225)*x3587))+(((-0.09465)*x3585))+(((-0.39225)*x3588))+(((-1.0)*px))+(((-0.10915)*x3581))+(((-0.425)*cj1*x3580)));
evalcond[3]=((((0.425)*x3586))+(((-0.09465)*x3582))+(((-0.39225)*x3589))+(((-1.0)*py))+(((0.39225)*cj2*x3586))+(((-0.10915)*x3580))+(((-1.0)*r10*x3584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3590=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3590;
j4eval[1]=IKsign(x3590);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3591=((1.0)*cj5);
IkReal x3592=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3591)));
j4eval[0]=x3592;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3591)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3592);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3593=((1.0)*cj0);
IkReal x3594=((1.0)*cj5);
IkReal x3595=((((-1.0)*r21*x3594))+(((-1.0)*r20*sj5)));
j4eval[0]=x3595;
j4eval[1]=((IKabs(((((-1.0)*r11*sj5*x3593))+((cj0*cj5*r10))+((r01*sj0*sj5))+(((-1.0)*r00*sj0*x3594)))))+(IKabs((((r02*sj0))+(((-1.0)*r12*x3593))))));
j4eval[2]=IKsign(x3595);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3596=((-1.0)*r20);
IkReal x3598 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3598)==0){
continue;
}
IkReal x3597=pow(x3598,-0.5);
CheckValue<IkReal> x3599 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3596),IKFAST_ATAN2_MAGTHRESH);
if(!x3599.valid){
continue;
}
IkReal gconst96=((-1.0)*(x3599.value));
IkReal gconst97=(r21*x3597);
IkReal gconst98=(x3596*x3597);
CheckValue<IkReal> x3600 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3600.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3600.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3601=((-1.0)*r20);
IkReal x3602=x3597;
CheckValue<IkReal> x3604 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3601),IKFAST_ATAN2_MAGTHRESH);
if(!x3604.valid){
continue;
}
IkReal x3603=((-1.0)*(x3604.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3603;
IkReal gconst96=x3603;
IkReal gconst97=(r21*x3602);
IkReal gconst98=(x3601*x3602);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3605=((-1.0)*r20);
IkReal x3606=x3597;
CheckValue<IkReal> x3608 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3605),IKFAST_ATAN2_MAGTHRESH);
if(!x3608.valid){
continue;
}
IkReal x3607=((-1.0)*(x3608.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3607;
IkReal gconst96=x3607;
IkReal gconst97=(r21*x3606);
IkReal gconst98=(x3605*x3606);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x3609=((-1.0)*r20);
IkReal x3610=x3597;
CheckValue<IkReal> x3612 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3609),IKFAST_ATAN2_MAGTHRESH);
if(!x3612.valid){
continue;
}
IkReal x3611=((-1.0)*(x3612.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3611;
IkReal gconst96=x3611;
IkReal gconst97=(r21*x3610);
IkReal gconst98=(x3609*x3610);
IkReal x3613=((1.0)*(r22*r22));
CheckValue<IkReal> x3617=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3613))),-1);
if(!x3617.valid){
continue;
}
IkReal x3614=x3617.value;
IkReal x3615=((1.0)*x3614);
IkReal x3616=((((-2.0)*x3614*(r20*r20)*(r21*r21)))+(((-1.0)*x3615*(r21*r21*r21*r21)))+(((-1.0)*x3613))+(((-1.0)*x3615*(r20*r20*r20*r20))));
j4eval[0]=x3616;
j4eval[1]=IKsign(x3616);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3618=(cj1*cj2);
IkReal x3619=(gconst98*r20);
IkReal x3620=(sj1*sj2);
IkReal x3621=(gconst97*r21);
CheckValue<IkReal> x3622=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r22*r22)))+(((-1.0)*(x3619*x3619)))+(((-1.0)*(x3621*x3621)))+(((2.0)*x3619*x3621)))),-1);
if(!x3622.valid){
continue;
}
CheckValue<IkReal> x3623 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x3618))+((r22*x3620)))),IkReal((((x3618*x3619))+(((-1.0)*x3618*x3621))+((x3620*x3621))+(((-1.0)*x3619*x3620)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3623.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3622.value)))+(x3623.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3624=IKsin(j4);
IkReal x3625=IKcos(j4);
IkReal x3626=(gconst98*r10);
IkReal x3627=(gconst97*r21);
IkReal x3628=(cj2*sj1);
IkReal x3629=(gconst98*r20);
IkReal x3630=((1.0)*cj1);
IkReal x3631=((1.0)*cj0);
IkReal x3632=(gconst98*r00);
IkReal x3633=((1.0)*x3625);
IkReal x3634=((1.0)*x3624);
IkReal x3635=(gconst97*x3624);
IkReal x3636=(gconst97*x3625);
evalcond[0]=((((-1.0)*r22*x3633))+((x3624*x3627))+(((-1.0)*x3629*x3634)));
evalcond[1]=((((-1.0)*x3631))+(((-1.0)*r02*x3633))+((r01*x3635))+(((-1.0)*x3632*x3634)));
evalcond[2]=(((r11*x3635))+(((-1.0)*sj0))+(((-1.0)*r12*x3633))+(((-1.0)*x3626*x3634)));
evalcond[3]=((((-1.0)*cj2*x3630))+((sj1*sj2))+((x3625*x3627))+((r22*x3624))+(((-1.0)*x3629*x3633)));
evalcond[4]=(((sj0*x3628))+((r02*x3624))+((cj1*sj0*sj2))+((r01*x3636))+(((-1.0)*x3632*x3633)));
evalcond[5]=(((r11*x3636))+(((-1.0)*x3628*x3631))+(((-1.0)*cj0*sj2*x3630))+((r12*x3624))+(((-1.0)*x3626*x3633)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3637=((1.0)*gconst98);
CheckValue<IkReal> x3638 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3637))+((cj0*gconst97*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3638.valid){
continue;
}
CheckValue<IkReal> x3639=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3637))+(((-1.0)*gconst97*r10)))),-1);
if(!x3639.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3638.value)+(((1.5707963267949)*(x3639.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3640=IKsin(j4);
IkReal x3641=IKcos(j4);
IkReal x3642=(gconst98*r10);
IkReal x3643=(gconst97*r21);
IkReal x3644=(cj2*sj1);
IkReal x3645=(gconst98*r20);
IkReal x3646=((1.0)*cj1);
IkReal x3647=((1.0)*cj0);
IkReal x3648=(gconst98*r00);
IkReal x3649=((1.0)*x3641);
IkReal x3650=((1.0)*x3640);
IkReal x3651=(gconst97*x3640);
IkReal x3652=(gconst97*x3641);
evalcond[0]=((((-1.0)*x3645*x3650))+(((-1.0)*r22*x3649))+((x3640*x3643)));
evalcond[1]=((((-1.0)*x3648*x3650))+(((-1.0)*r02*x3649))+(((-1.0)*x3647))+((r01*x3651)));
evalcond[2]=((((-1.0)*x3642*x3650))+(((-1.0)*sj0))+((r11*x3651))+(((-1.0)*r12*x3649)));
evalcond[3]=(((x3641*x3643))+(((-1.0)*cj2*x3646))+((sj1*sj2))+(((-1.0)*x3645*x3649))+((r22*x3640)));
evalcond[4]=(((cj1*sj0*sj2))+((r02*x3640))+((sj0*x3644))+(((-1.0)*x3648*x3649))+((r01*x3652)));
evalcond[5]=((((-1.0)*cj0*sj2*x3646))+((r12*x3640))+((r11*x3652))+(((-1.0)*x3644*x3647))+(((-1.0)*x3642*x3649)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3653 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*gconst98*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3653.valid){
continue;
}
CheckValue<IkReal> x3654=IKPowWithIntegerCheck(IKsign((((gconst98*r01))+((gconst97*r00)))),-1);
if(!x3654.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3653.value)+(((1.5707963267949)*(x3654.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3655=IKsin(j4);
IkReal x3656=IKcos(j4);
IkReal x3657=(gconst98*r10);
IkReal x3658=(gconst97*r21);
IkReal x3659=(cj2*sj1);
IkReal x3660=(gconst98*r20);
IkReal x3661=((1.0)*cj1);
IkReal x3662=((1.0)*cj0);
IkReal x3663=(gconst98*r00);
IkReal x3664=((1.0)*x3656);
IkReal x3665=((1.0)*x3655);
IkReal x3666=(gconst97*x3655);
IkReal x3667=(gconst97*x3656);
evalcond[0]=((((-1.0)*x3660*x3665))+((x3655*x3658))+(((-1.0)*r22*x3664)));
evalcond[1]=((((-1.0)*x3663*x3665))+(((-1.0)*x3662))+(((-1.0)*r02*x3664))+((r01*x3666)));
evalcond[2]=((((-1.0)*sj0))+((r11*x3666))+(((-1.0)*r12*x3664))+(((-1.0)*x3657*x3665)));
evalcond[3]=((((-1.0)*x3660*x3664))+(((-1.0)*cj2*x3661))+((sj1*sj2))+((x3656*x3658))+((r22*x3655)));
evalcond[4]=((((-1.0)*x3663*x3664))+((r01*x3667))+((cj1*sj0*sj2))+((sj0*x3659))+((r02*x3655)));
evalcond[5]=(((r12*x3655))+((r11*x3667))+(((-1.0)*x3659*x3662))+(((-1.0)*cj0*sj2*x3661))+(((-1.0)*x3657*x3664)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3668=((-1.0)*r21);
IkReal x3670 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3670)==0){
continue;
}
IkReal x3669=pow(x3670,-0.5);
CheckValue<IkReal> x3671 = IKatan2WithCheck(IkReal(x3668),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3671.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x3671.value))));
IkReal gconst100=(x3668*x3669);
IkReal gconst101=((1.0)*r20*x3669);
CheckValue<IkReal> x3672 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3672.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3672.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3673=((-1.0)*r21);
CheckValue<IkReal> x3676 = IKatan2WithCheck(IkReal(x3673),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3676.valid){
continue;
}
IkReal x3674=((1.0)*(x3676.value));
IkReal x3675=x3669;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3674)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3674)));
IkReal gconst100=(x3673*x3675);
IkReal gconst101=((1.0)*r20*x3675);
IkReal x3677=r22*r22;
IkReal x3678=((1.0)*x3677);
CheckValue<IkReal> x3682=IKPowWithIntegerCheck(((-1.0)+x3677),-1);
if(!x3682.valid){
continue;
}
IkReal x3679=x3682.value;
if((((1.0)+(((-1.0)*x3678)))) < -0.00001)
continue;
IkReal x3680=IKsqrt(((1.0)+(((-1.0)*x3678))));
IkReal x3681=(sj0*x3679*x3680);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x3681+(((-1.0)*x3678*x3681))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3683=((-1.0)*r21);
CheckValue<IkReal> x3686 = IKatan2WithCheck(IkReal(x3683),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3686.valid){
continue;
}
IkReal x3684=((1.0)*(x3686.value));
IkReal x3685=x3669;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3684)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3684)));
IkReal gconst100=(x3683*x3685);
IkReal gconst101=((1.0)*r20*x3685);
IkReal x3687=r22*r22;
IkReal x3688=((1.0)*x3687);
CheckValue<IkReal> x3692=IKPowWithIntegerCheck(((-1.0)+x3687),-1);
if(!x3692.valid){
continue;
}
IkReal x3689=x3692.value;
if((((1.0)+(((-1.0)*x3688)))) < -0.00001)
continue;
IkReal x3690=IKsqrt(((1.0)+(((-1.0)*x3688))));
IkReal x3691=(cj0*x3689*x3690);
j4eval[0]=((IKabs(((((-1.0)*x3688*x3691))+x3691)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3693=((-1.0)*r21);
CheckValue<IkReal> x3696 = IKatan2WithCheck(IkReal(x3693),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3696.valid){
continue;
}
IkReal x3694=((1.0)*(x3696.value));
IkReal x3695=x3669;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3694)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3694)));
IkReal gconst100=(x3693*x3695);
IkReal gconst101=((1.0)*r20*x3695);
IkReal x3697=r22*r22;
IkReal x3698=(cj0*r12);
IkReal x3699=(r02*sj0);
CheckValue<IkReal> x3703=IKPowWithIntegerCheck(((-1.0)+x3697),-1);
if(!x3703.valid){
continue;
}
IkReal x3700=x3703.value;
if((((1.0)+(((-1.0)*x3697)))) < -0.00001)
continue;
IkReal x3701=IKsqrt(((1.0)+(((-1.0)*x3697))));
IkReal x3702=(r22*x3700*x3701);
j4eval[0]=0;
j4eval[1]=((IKabs((((x3698*x3702))+(((-1.0)*x3699*x3702)))))+(IKabs((x3699+(((-1.0)*x3698))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3704=((1.0)*cj0);
IkReal x3705=((1.0)*gconst101);
CheckValue<IkReal> x3706=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r20))+(((-1.0)*r21*x3705)))),-1);
if(!x3706.valid){
continue;
}
CheckValue<IkReal> x3707 = IKatan2WithCheck(IkReal((((r02*sj0))+(((-1.0)*r12*x3704)))),IkReal((((cj0*gconst101*r10))+(((-1.0)*r00*sj0*x3705))+(((-1.0)*gconst100*r11*x3704))+((gconst100*r01*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3707.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3706.value)))+(x3707.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3708=IKsin(j4);
IkReal x3709=IKcos(j4);
IkReal x3710=(cj2*sj1);
IkReal x3711=(gconst101*r20);
IkReal x3712=(gconst101*r10);
IkReal x3713=((1.0)*cj1);
IkReal x3714=(gconst101*r00);
IkReal x3715=((1.0)*cj0);
IkReal x3716=((1.0)*x3709);
IkReal x3717=((1.0)*x3708);
IkReal x3718=(gconst100*x3708);
IkReal x3719=(gconst100*x3709);
evalcond[0]=((((-1.0)*x3711*x3717))+((r21*x3718))+(((-1.0)*r22*x3716)));
evalcond[1]=((((-1.0)*x3714*x3717))+(((-1.0)*r02*x3716))+(((-1.0)*x3715))+((r01*x3718)));
evalcond[2]=(((r11*x3718))+(((-1.0)*sj0))+(((-1.0)*r12*x3716))+(((-1.0)*x3712*x3717)));
evalcond[3]=((((-1.0)*cj2*x3713))+(((-1.0)*x3711*x3716))+((sj1*sj2))+((r21*x3719))+((r22*x3708)));
evalcond[4]=((((-1.0)*x3714*x3716))+((sj0*x3710))+((r01*x3719))+((cj1*sj0*sj2))+((r02*x3708)));
evalcond[5]=(((r11*x3719))+((r12*x3708))+(((-1.0)*x3710*x3715))+(((-1.0)*cj0*sj2*x3713))+(((-1.0)*x3712*x3716)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3720=((1.0)*gconst101);
CheckValue<IkReal> x3721=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r10))+(((-1.0)*r11*x3720)))),-1);
if(!x3721.valid){
continue;
}
CheckValue<IkReal> x3722 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*r20*x3720)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3722.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3721.value)))+(x3722.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3723=IKsin(j4);
IkReal x3724=IKcos(j4);
IkReal x3725=(cj2*sj1);
IkReal x3726=(gconst101*r20);
IkReal x3727=(gconst101*r10);
IkReal x3728=((1.0)*cj1);
IkReal x3729=(gconst101*r00);
IkReal x3730=((1.0)*cj0);
IkReal x3731=((1.0)*x3724);
IkReal x3732=((1.0)*x3723);
IkReal x3733=(gconst100*x3723);
IkReal x3734=(gconst100*x3724);
evalcond[0]=((((-1.0)*x3726*x3732))+(((-1.0)*r22*x3731))+((r21*x3733)));
evalcond[1]=((((-1.0)*x3730))+((r01*x3733))+(((-1.0)*x3729*x3732))+(((-1.0)*r02*x3731)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x3727*x3732))+(((-1.0)*r12*x3731))+((r11*x3733)));
evalcond[3]=((((-1.0)*cj2*x3728))+((r22*x3723))+((sj1*sj2))+(((-1.0)*x3726*x3731))+((r21*x3734)));
evalcond[4]=(((r01*x3734))+((sj0*x3725))+((r02*x3723))+((cj1*sj0*sj2))+(((-1.0)*x3729*x3731)));
evalcond[5]=((((-1.0)*x3727*x3731))+(((-1.0)*x3725*x3730))+((r11*x3734))+(((-1.0)*cj0*sj2*x3728))+((r12*x3723)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3735=IKPowWithIntegerCheck(IKsign((((gconst100*r00))+((gconst101*r01)))),-1);
if(!x3735.valid){
continue;
}
CheckValue<IkReal> x3736 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst101*r20*sj0))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3736.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3735.value)))+(x3736.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3737=IKsin(j4);
IkReal x3738=IKcos(j4);
IkReal x3739=(cj2*sj1);
IkReal x3740=(gconst101*r20);
IkReal x3741=(gconst101*r10);
IkReal x3742=((1.0)*cj1);
IkReal x3743=(gconst101*r00);
IkReal x3744=((1.0)*cj0);
IkReal x3745=((1.0)*x3738);
IkReal x3746=((1.0)*x3737);
IkReal x3747=(gconst100*x3737);
IkReal x3748=(gconst100*x3738);
evalcond[0]=((((-1.0)*r22*x3745))+(((-1.0)*x3740*x3746))+((r21*x3747)));
evalcond[1]=(((r01*x3747))+(((-1.0)*x3743*x3746))+(((-1.0)*x3744))+(((-1.0)*r02*x3745)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r12*x3745))+((r11*x3747))+(((-1.0)*x3741*x3746)));
evalcond[3]=((((-1.0)*x3740*x3745))+(((-1.0)*cj2*x3742))+((sj1*sj2))+((r22*x3737))+((r21*x3748)));
evalcond[4]=(((r01*x3748))+(((-1.0)*x3743*x3745))+((sj0*x3739))+((r02*x3737))+((cj1*sj0*sj2)));
evalcond[5]=((((-1.0)*cj0*sj2*x3742))+((r12*x3737))+((r11*x3748))+(((-1.0)*x3741*x3745))+(((-1.0)*x3739*x3744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3749=((-1.0)*r10);
IkReal x3751 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3751)==0){
continue;
}
IkReal x3750=pow(x3751,-0.5);
CheckValue<IkReal> x3752 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3749),IKFAST_ATAN2_MAGTHRESH);
if(!x3752.valid){
continue;
}
IkReal gconst102=((-1.0)*(x3752.value));
IkReal gconst103=(r11*x3750);
IkReal gconst104=(x3749*x3750);
CheckValue<IkReal> x3753 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3753.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3753.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3754=((-1.0)*r10);
IkReal x3755=x3750;
CheckValue<IkReal> x3757 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3754),IKFAST_ATAN2_MAGTHRESH);
if(!x3757.valid){
continue;
}
IkReal x3756=((-1.0)*(x3757.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x3756;
IkReal gconst102=x3756;
IkReal gconst103=(r11*x3755);
IkReal gconst104=(x3754*x3755);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3758=((-1.0)*r10);
IkReal x3759=x3750;
CheckValue<IkReal> x3761 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3758),IKFAST_ATAN2_MAGTHRESH);
if(!x3761.valid){
continue;
}
IkReal x3760=((-1.0)*(x3761.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x3760;
IkReal gconst102=x3760;
IkReal gconst103=(r11*x3759);
IkReal gconst104=(x3758*x3759);
IkReal x3762=r12*r12;
IkReal x3763=((1.0)*cj0);
IkReal x3764=(r02*sj0);
CheckValue<IkReal> x3768=IKPowWithIntegerCheck(((-1.0)+x3762),-1);
if(!x3768.valid){
continue;
}
IkReal x3765=x3768.value;
if((((1.0)+(((-1.0)*x3762)))) < -0.00001)
continue;
IkReal x3766=IKsqrt(((1.0)+(((-1.0)*x3762))));
IkReal x3767=(x3765*x3766);
j4eval[0]=((IKabs(((((-1.0)*x3762*x3763*x3767))+((cj0*x3767))+((r12*x3764*x3767)))))+(IKabs((x3764+(((-1.0)*r12*x3763))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3769=((-1.0)*r10);
IkReal x3770=x3750;
CheckValue<IkReal> x3772 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3769),IKFAST_ATAN2_MAGTHRESH);
if(!x3772.valid){
continue;
}
IkReal x3771=((-1.0)*(x3772.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x3771;
IkReal gconst102=x3771;
IkReal gconst103=(r11*x3770);
IkReal gconst104=(x3769*x3770);
IkReal x3773=r12*r12;
IkReal x3774=(sj1*sj2);
IkReal x3775=((1.0)+(((-1.0)*x3773)));
IkReal x3776=((1.0)*cj1*cj2);
CheckValue<IkReal> x3783=IKPowWithIntegerCheck(x3775,-1);
if(!x3783.valid){
continue;
}
IkReal x3777=x3783.value;
CheckValue<IkReal> x3784=IKPowWithIntegerCheck(((-1.0)+x3773),-1);
if(!x3784.valid){
continue;
}
IkReal x3778=x3784.value;
IkReal x3779=((1.0)*x3777);
if((x3775) < -0.00001)
continue;
IkReal x3780=IKsqrt(x3775);
IkReal x3781=(r12*r22*x3778*x3780);
IkReal x3782=((((-2.0)*r10*r11*r20*r21*x3777))+(((-1.0)*x3779*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-1.0)*x3779*(r11*r11)*(r21*r21))));
j4eval[0]=x3782;
j4eval[1]=IKsign(x3782);
j4eval[2]=((IKabs((((x3774*x3781))+(((-1.0)*x3776*x3781)))))+(IKabs((((r22*x3774))+(((-1.0)*r22*x3776))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3785=(gconst103*r21);
IkReal x3786=(sj1*sj2);
IkReal x3787=(cj1*cj2);
IkReal x3788=(gconst104*r20);
CheckValue<IkReal> x3789=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x3788*x3788)))+(((-1.0)*(r22*r22)))+(((2.0)*x3785*x3788))+(((-1.0)*(x3785*x3785))))),-1);
if(!x3789.valid){
continue;
}
CheckValue<IkReal> x3790 = IKatan2WithCheck(IkReal((((r22*x3786))+(((-1.0)*r22*x3787)))),IkReal((((x3785*x3786))+((x3787*x3788))+(((-1.0)*x3785*x3787))+(((-1.0)*x3786*x3788)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3790.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3789.value)))+(x3790.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3791=IKsin(j4);
IkReal x3792=IKcos(j4);
IkReal x3793=(gconst103*r11);
IkReal x3794=(cj2*sj1);
IkReal x3795=((1.0)*cj1);
IkReal x3796=((1.0)*cj0);
IkReal x3797=((1.0)*x3792);
IkReal x3798=(gconst103*x3792);
IkReal x3799=(gconst103*x3791);
IkReal x3800=((1.0)*gconst104*x3791);
evalcond[0]=(((r21*x3799))+(((-1.0)*r22*x3797))+(((-1.0)*r20*x3800)));
evalcond[1]=((((-1.0)*x3796))+(((-1.0)*r00*x3800))+(((-1.0)*r02*x3797))+((r01*x3799)));
evalcond[2]=((((-1.0)*r12*x3797))+(((-1.0)*sj0))+((x3791*x3793))+(((-1.0)*r10*x3800)));
evalcond[3]=(((r21*x3798))+((r22*x3791))+((sj1*sj2))+(((-1.0)*gconst104*r20*x3797))+(((-1.0)*cj2*x3795)));
evalcond[4]=(((r02*x3791))+((cj1*sj0*sj2))+((sj0*x3794))+(((-1.0)*gconst104*r00*x3797))+((r01*x3798)));
evalcond[5]=(((x3792*x3793))+(((-1.0)*gconst104*r10*x3797))+(((-1.0)*cj0*sj2*x3795))+((r12*x3791))+(((-1.0)*x3794*x3796)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3801=((1.0)*cj0);
IkReal x3802=((1.0)*gconst104);
CheckValue<IkReal> x3803=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r20))+(((-1.0)*r21*x3802)))),-1);
if(!x3803.valid){
continue;
}
CheckValue<IkReal> x3804 = IKatan2WithCheck(IkReal((((r02*sj0))+(((-1.0)*r12*x3801)))),IkReal(((((-1.0)*gconst103*r11*x3801))+((gconst103*r01*sj0))+(((-1.0)*r00*sj0*x3802))+((cj0*gconst104*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3804.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3803.value)))+(x3804.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3805=IKsin(j4);
IkReal x3806=IKcos(j4);
IkReal x3807=(gconst103*r11);
IkReal x3808=(cj2*sj1);
IkReal x3809=((1.0)*cj1);
IkReal x3810=((1.0)*cj0);
IkReal x3811=((1.0)*x3806);
IkReal x3812=(gconst103*x3806);
IkReal x3813=(gconst103*x3805);
IkReal x3814=((1.0)*gconst104*x3805);
evalcond[0]=((((-1.0)*r22*x3811))+((r21*x3813))+(((-1.0)*r20*x3814)));
evalcond[1]=((((-1.0)*r00*x3814))+(((-1.0)*r02*x3811))+(((-1.0)*x3810))+((r01*x3813)));
evalcond[2]=((((-1.0)*r12*x3811))+(((-1.0)*sj0))+((x3805*x3807))+(((-1.0)*r10*x3814)));
evalcond[3]=((((-1.0)*gconst104*r20*x3811))+((r21*x3812))+(((-1.0)*cj2*x3809))+((r22*x3805))+((sj1*sj2)));
evalcond[4]=((((-1.0)*gconst104*r00*x3811))+((r02*x3805))+((cj1*sj0*sj2))+((r01*x3812))+((sj0*x3808)));
evalcond[5]=((((-1.0)*cj0*sj2*x3809))+((r12*x3805))+(((-1.0)*x3808*x3810))+((x3806*x3807))+(((-1.0)*gconst104*r10*x3811)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3815 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst103*r21*sj0))+(((-1.0)*gconst104*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3815.valid){
continue;
}
CheckValue<IkReal> x3816=IKPowWithIntegerCheck(IKsign((((gconst103*r00))+((gconst104*r01)))),-1);
if(!x3816.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3815.value)+(((1.5707963267949)*(x3816.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3817=IKsin(j4);
IkReal x3818=IKcos(j4);
IkReal x3819=(gconst103*r11);
IkReal x3820=(cj2*sj1);
IkReal x3821=((1.0)*cj1);
IkReal x3822=((1.0)*cj0);
IkReal x3823=((1.0)*x3818);
IkReal x3824=(gconst103*x3818);
IkReal x3825=(gconst103*x3817);
IkReal x3826=((1.0)*gconst104*x3817);
evalcond[0]=((((-1.0)*r22*x3823))+(((-1.0)*r20*x3826))+((r21*x3825)));
evalcond[1]=((((-1.0)*r00*x3826))+(((-1.0)*r02*x3823))+(((-1.0)*x3822))+((r01*x3825)));
evalcond[2]=((((-1.0)*r12*x3823))+(((-1.0)*sj0))+((x3817*x3819))+(((-1.0)*r10*x3826)));
evalcond[3]=((((-1.0)*cj2*x3821))+((sj1*sj2))+((r22*x3817))+(((-1.0)*gconst104*r20*x3823))+((r21*x3824)));
evalcond[4]=((((-1.0)*gconst104*r00*x3823))+((cj1*sj0*sj2))+((r02*x3817))+((sj0*x3820))+((r01*x3824)));
evalcond[5]=(((r12*x3817))+((x3818*x3819))+(((-1.0)*gconst104*r10*x3823))+(((-1.0)*cj0*sj2*x3821))+(((-1.0)*x3820*x3822)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3827=((-1.0)*r11);
IkReal x3829 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3829)==0){
continue;
}
IkReal x3828=pow(x3829,-0.5);
CheckValue<IkReal> x3830 = IKatan2WithCheck(IkReal(x3827),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3830.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x3830.value))));
IkReal gconst106=(x3827*x3828);
IkReal gconst107=((1.0)*r10*x3828);
CheckValue<IkReal> x3831 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3831.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3831.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3832=((-1.0)*r11);
CheckValue<IkReal> x3835 = IKatan2WithCheck(IkReal(x3832),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3835.valid){
continue;
}
IkReal x3833=((1.0)*(x3835.value));
IkReal x3834=x3828;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3833)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3833)));
IkReal gconst106=(x3832*x3834);
IkReal gconst107=((1.0)*r10*x3834);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x3836=((-1.0)*r11);
CheckValue<IkReal> x3839 = IKatan2WithCheck(IkReal(x3836),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3839.valid){
continue;
}
IkReal x3837=((1.0)*(x3839.value));
IkReal x3838=x3828;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3837)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3837)));
IkReal gconst106=(x3836*x3838);
IkReal gconst107=((1.0)*r10*x3838);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r12*r12))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3840=((1.0)*cj0);
IkReal x3841=((1.0)*gconst107);
CheckValue<IkReal> x3842 = IKatan2WithCheck(IkReal((((r02*sj0))+(((-1.0)*r12*x3840)))),IkReal(((((-1.0)*gconst106*r11*x3840))+(((-1.0)*r00*sj0*x3841))+((gconst106*r01*sj0))+((cj0*gconst107*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3842.valid){
continue;
}
CheckValue<IkReal> x3843=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3841))+(((-1.0)*gconst106*r20)))),-1);
if(!x3843.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3842.value)+(((1.5707963267949)*(x3843.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3844=IKsin(j4);
IkReal x3845=IKcos(j4);
IkReal x3846=(gconst106*r21);
IkReal x3847=(cj2*sj1);
IkReal x3848=(gconst107*r10);
IkReal x3849=(gconst107*r00);
IkReal x3850=((1.0)*cj1);
IkReal x3851=(gconst107*r20);
IkReal x3852=((1.0)*cj0);
IkReal x3853=((1.0)*x3845);
IkReal x3854=(gconst106*x3844);
IkReal x3855=((1.0)*x3844);
IkReal x3856=(gconst106*x3845);
evalcond[0]=(((x3844*x3846))+(((-1.0)*x3851*x3855))+(((-1.0)*r22*x3853)));
evalcond[1]=((((-1.0)*x3852))+((r01*x3854))+(((-1.0)*r02*x3853))+(((-1.0)*x3849*x3855)));
evalcond[2]=(((r11*x3854))+(((-1.0)*sj0))+(((-1.0)*x3848*x3855))+(((-1.0)*r12*x3853)));
evalcond[3]=((((-1.0)*cj2*x3850))+((sj1*sj2))+((x3845*x3846))+(((-1.0)*x3851*x3853))+((r22*x3844)));
evalcond[4]=(((r01*x3856))+((cj1*sj0*sj2))+((r02*x3844))+((sj0*x3847))+(((-1.0)*x3849*x3853)));
evalcond[5]=(((r12*x3844))+((r11*x3856))+(((-1.0)*x3848*x3853))+(((-1.0)*x3847*x3852))+(((-1.0)*cj0*sj2*x3850)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3857=((1.0)*gconst107);
CheckValue<IkReal> x3858=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst106*r10))+(((-1.0)*r11*x3857)))),-1);
if(!x3858.valid){
continue;
}
CheckValue<IkReal> x3859 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3857))+((cj0*gconst106*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3859.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3858.value)))+(x3859.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3860=IKsin(j4);
IkReal x3861=IKcos(j4);
IkReal x3862=(gconst106*r21);
IkReal x3863=(cj2*sj1);
IkReal x3864=(gconst107*r10);
IkReal x3865=(gconst107*r00);
IkReal x3866=((1.0)*cj1);
IkReal x3867=(gconst107*r20);
IkReal x3868=((1.0)*cj0);
IkReal x3869=((1.0)*x3861);
IkReal x3870=(gconst106*x3860);
IkReal x3871=((1.0)*x3860);
IkReal x3872=(gconst106*x3861);
evalcond[0]=(((x3860*x3862))+(((-1.0)*x3867*x3871))+(((-1.0)*r22*x3869)));
evalcond[1]=((((-1.0)*r02*x3869))+(((-1.0)*x3868))+(((-1.0)*x3865*x3871))+((r01*x3870)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r12*x3869))+((r11*x3870))+(((-1.0)*x3864*x3871)));
evalcond[3]=((((-1.0)*x3867*x3869))+(((-1.0)*cj2*x3866))+((sj1*sj2))+((x3861*x3862))+((r22*x3860)));
evalcond[4]=(((r02*x3860))+(((-1.0)*x3865*x3869))+((r01*x3872))+((cj1*sj0*sj2))+((sj0*x3863)));
evalcond[5]=((((-1.0)*x3864*x3869))+(((-1.0)*x3863*x3868))+((r11*x3872))+((r12*x3860))+(((-1.0)*cj0*sj2*x3866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3873=IKPowWithIntegerCheck(IKsign((((gconst107*r01))+((gconst106*r00)))),-1);
if(!x3873.valid){
continue;
}
CheckValue<IkReal> x3874 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst106*r21*sj0))+(((-1.0)*gconst107*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3874.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3873.value)))+(x3874.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3875=IKsin(j4);
IkReal x3876=IKcos(j4);
IkReal x3877=(gconst106*r21);
IkReal x3878=(cj2*sj1);
IkReal x3879=(gconst107*r10);
IkReal x3880=(gconst107*r00);
IkReal x3881=((1.0)*cj1);
IkReal x3882=(gconst107*r20);
IkReal x3883=((1.0)*cj0);
IkReal x3884=((1.0)*x3876);
IkReal x3885=(gconst106*x3875);
IkReal x3886=((1.0)*x3875);
IkReal x3887=(gconst106*x3876);
evalcond[0]=((((-1.0)*r22*x3884))+((x3875*x3877))+(((-1.0)*x3882*x3886)));
evalcond[1]=((((-1.0)*r02*x3884))+(((-1.0)*x3883))+(((-1.0)*x3880*x3886))+((r01*x3885)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x3879*x3886))+((r11*x3885))+(((-1.0)*r12*x3884)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj2*x3881))+((r22*x3875))+((x3876*x3877))+(((-1.0)*x3882*x3884)));
evalcond[4]=((((-1.0)*x3880*x3884))+((sj0*x3878))+((cj1*sj0*sj2))+((r01*x3887))+((r02*x3875)));
evalcond[5]=((((-1.0)*x3879*x3884))+(((-1.0)*cj0*sj2*x3881))+((r11*x3887))+(((-1.0)*x3878*x3883))+((r12*x3875)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3888=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3888;
j4eval[1]=IKsign(x3888);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3889=((1.0)*cj5);
IkReal x3890=((((-1.0)*r21*x3889))+(((-1.0)*r20*sj5)));
j4eval[0]=x3890;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x3889))))));
j4eval[2]=IKsign(x3890);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3891=cj5*cj5;
IkReal x3892=r11*r11;
IkReal x3893=(r11*sj5);
IkReal x3894=(cj5*r10);
IkReal x3895=((r12*r12)+((x3891*(r10*r10)))+x3892+(((-1.0)*x3891*x3892))+(((-2.0)*x3893*x3894)));
j4eval[0]=x3895;
j4eval[1]=IKsign(x3895);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x3894))+x3893))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3896=cj5*cj5;
IkReal x3897=r11*r11;
IkReal x3898=(cj5*r10);
IkReal x3899=(r11*sj5);
CheckValue<IkReal> x3900=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x3896*(r10*r10)))+(((-2.0)*x3898*x3899))+x3897+(((-1.0)*x3896*x3897)))),-1);
if(!x3900.valid){
continue;
}
CheckValue<IkReal> x3901 = IKatan2WithCheck(IkReal(((((-1.0)*x3898))+x3899)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3901.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3900.value)))+(x3901.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3902=IKcos(j4);
IkReal x3903=IKsin(j4);
IkReal x3904=(cj5*r00);
IkReal x3905=(cj5*r10);
IkReal x3906=(r21*sj5);
IkReal x3907=(cj5*r20);
IkReal x3908=((1.0)*x3902);
IkReal x3909=((1.0)*x3903);
IkReal x3910=(sj5*x3903);
IkReal x3911=(sj5*x3902);
evalcond[0]=((((-1.0)*x3905*x3908))+((r12*x3903))+((r11*x3911)));
evalcond[1]=(((x3903*x3906))+(((-1.0)*r22*x3908))+(((-1.0)*x3907*x3909)));
evalcond[2]=((((-1.0)*x3904*x3909))+((r01*x3910))+(((-1.0)*r02*x3908)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x3908))+(((-1.0)*x3905*x3909))+((r11*x3910)));
evalcond[4]=((((-1.0)*x3904*x3908))+((cj2*sj1))+((cj1*sj2))+((r01*x3911))+((r02*x3903)));
evalcond[5]=(((r22*x3903))+((x3902*x3906))+(((-1.0)*cj1*cj2))+(((-1.0)*x3907*x3908))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3912=((1.0)*cj5);
CheckValue<IkReal> x3913=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3912))+(((-1.0)*r20*sj5)))),-1);
if(!x3913.valid){
continue;
}
CheckValue<IkReal> x3914 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x3912)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3914.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3913.value)))+(x3914.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3915=IKcos(j4);
IkReal x3916=IKsin(j4);
IkReal x3917=(cj5*r00);
IkReal x3918=(cj5*r10);
IkReal x3919=(r21*sj5);
IkReal x3920=(cj5*r20);
IkReal x3921=((1.0)*x3915);
IkReal x3922=((1.0)*x3916);
IkReal x3923=(sj5*x3916);
IkReal x3924=(sj5*x3915);
evalcond[0]=(((r11*x3924))+(((-1.0)*x3918*x3921))+((r12*x3916)));
evalcond[1]=((((-1.0)*x3920*x3922))+(((-1.0)*r22*x3921))+((x3916*x3919)));
evalcond[2]=((((-1.0)*r02*x3921))+(((-1.0)*x3917*x3922))+((r01*x3923)));
evalcond[3]=((-1.0)+((r11*x3923))+(((-1.0)*r12*x3921))+(((-1.0)*x3918*x3922)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x3917*x3921))+((r02*x3916))+((r01*x3924)));
evalcond[5]=(((x3915*x3919))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3920*x3921))+((r22*x3916)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3925 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3925.valid){
continue;
}
CheckValue<IkReal> x3926=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3926.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3925.value)+(((1.5707963267949)*(x3926.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3927=IKcos(j4);
IkReal x3928=IKsin(j4);
IkReal x3929=(cj5*r00);
IkReal x3930=(cj5*r10);
IkReal x3931=(r21*sj5);
IkReal x3932=(cj5*r20);
IkReal x3933=((1.0)*x3927);
IkReal x3934=((1.0)*x3928);
IkReal x3935=(sj5*x3928);
IkReal x3936=(sj5*x3927);
evalcond[0]=(((r12*x3928))+(((-1.0)*x3930*x3933))+((r11*x3936)));
evalcond[1]=((((-1.0)*x3932*x3934))+(((-1.0)*r22*x3933))+((x3928*x3931)));
evalcond[2]=((((-1.0)*x3929*x3934))+((r01*x3935))+(((-1.0)*r02*x3933)));
evalcond[3]=((-1.0)+(((-1.0)*x3930*x3934))+(((-1.0)*r12*x3933))+((r11*x3935)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x3929*x3933))+((r01*x3936))+((cj1*sj2))+((r02*x3928)));
evalcond[5]=((((-1.0)*x3932*x3933))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3927*x3931))+((r22*x3928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3937=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3937;
j4eval[1]=IKsign(x3937);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3938=((1.0)*cj5);
IkReal x3939=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3938)));
j4eval[0]=x3939;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x3938))))));
j4eval[2]=IKsign(x3939);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3940=(sj1*sj2);
IkReal x3941=(cj5*r10);
IkReal x3942=(r11*sj5);
IkReal x3943=(cj1*cj2);
IkReal x3944=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x3944;
j4eval[1]=((IKabs((((r12*x3943))+(((-1.0)*r12*x3940)))))+(IKabs(((((-1.0)*x3940*x3941))+((x3940*x3942))+((x3941*x3943))+(((-1.0)*x3942*x3943))))));
j4eval[2]=IKsign(x3944);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3945=(sj1*sj2);
IkReal x3946=(cj5*r10);
IkReal x3947=(r11*sj5);
IkReal x3948=(cj1*cj2);
CheckValue<IkReal> x3949=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x3949.valid){
continue;
}
CheckValue<IkReal> x3950 = IKatan2WithCheck(IkReal(((((-1.0)*x3947*x3948))+((x3946*x3948))+((x3945*x3947))+(((-1.0)*x3945*x3946)))),IkReal((((r12*x3948))+(((-1.0)*r12*x3945)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3950.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3949.value)))+(x3950.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3951=IKcos(j4);
IkReal x3952=IKsin(j4);
IkReal x3953=(cj5*r00);
IkReal x3954=(cj5*r10);
IkReal x3955=(r21*sj5);
IkReal x3956=((1.0)*cj2);
IkReal x3957=(cj5*r20);
IkReal x3958=((1.0)*x3951);
IkReal x3959=((1.0)*x3952);
IkReal x3960=(sj5*x3952);
IkReal x3961=(sj5*x3951);
evalcond[0]=((((-1.0)*x3954*x3958))+((r11*x3961))+((r12*x3952)));
evalcond[1]=((((-1.0)*x3957*x3959))+(((-1.0)*r22*x3958))+((x3952*x3955)));
evalcond[2]=((((-1.0)*x3953*x3959))+(((-1.0)*r02*x3958))+((r01*x3960)));
evalcond[3]=((1.0)+(((-1.0)*x3954*x3959))+((r11*x3960))+(((-1.0)*r12*x3958)));
evalcond[4]=((((-1.0)*x3957*x3958))+((sj1*sj2))+(((-1.0)*cj1*x3956))+((x3951*x3955))+((r22*x3952)));
evalcond[5]=((((-1.0)*x3953*x3958))+(((-1.0)*sj1*x3956))+(((-1.0)*cj1*sj2))+((r02*x3952))+((r01*x3961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3962=((1.0)*cj5);
CheckValue<IkReal> x3963 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x3962))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3963.valid){
continue;
}
CheckValue<IkReal> x3964=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3962)))),-1);
if(!x3964.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3963.value)+(((1.5707963267949)*(x3964.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3965=IKcos(j4);
IkReal x3966=IKsin(j4);
IkReal x3967=(cj5*r00);
IkReal x3968=(cj5*r10);
IkReal x3969=(r21*sj5);
IkReal x3970=((1.0)*cj2);
IkReal x3971=(cj5*r20);
IkReal x3972=((1.0)*x3965);
IkReal x3973=((1.0)*x3966);
IkReal x3974=(sj5*x3966);
IkReal x3975=(sj5*x3965);
evalcond[0]=((((-1.0)*x3968*x3972))+((r11*x3975))+((r12*x3966)));
evalcond[1]=((((-1.0)*x3971*x3973))+(((-1.0)*r22*x3972))+((x3966*x3969)));
evalcond[2]=((((-1.0)*r02*x3972))+((r01*x3974))+(((-1.0)*x3967*x3973)));
evalcond[3]=((1.0)+(((-1.0)*r12*x3972))+(((-1.0)*x3968*x3973))+((r11*x3974)));
evalcond[4]=((((-1.0)*cj1*x3970))+((x3965*x3969))+((r22*x3966))+((sj1*sj2))+(((-1.0)*x3971*x3972)));
evalcond[5]=(((r02*x3966))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x3970))+((r01*x3975))+(((-1.0)*x3967*x3972)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3976=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3976.valid){
continue;
}
CheckValue<IkReal> x3977 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3977.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3976.value)))+(x3977.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3978=IKcos(j4);
IkReal x3979=IKsin(j4);
IkReal x3980=(cj5*r00);
IkReal x3981=(cj5*r10);
IkReal x3982=(r21*sj5);
IkReal x3983=((1.0)*cj2);
IkReal x3984=(cj5*r20);
IkReal x3985=((1.0)*x3978);
IkReal x3986=((1.0)*x3979);
IkReal x3987=(sj5*x3979);
IkReal x3988=(sj5*x3978);
evalcond[0]=(((r11*x3988))+(((-1.0)*x3981*x3985))+((r12*x3979)));
evalcond[1]=((((-1.0)*x3984*x3986))+(((-1.0)*r22*x3985))+((x3979*x3982)));
evalcond[2]=(((r01*x3987))+(((-1.0)*x3980*x3986))+(((-1.0)*r02*x3985)));
evalcond[3]=((1.0)+(((-1.0)*r12*x3985))+((r11*x3987))+(((-1.0)*x3981*x3986)));
evalcond[4]=((((-1.0)*x3984*x3985))+((sj1*sj2))+((r22*x3979))+((x3978*x3982))+(((-1.0)*cj1*x3983)));
evalcond[5]=(((r02*x3979))+((r01*x3988))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x3983))+(((-1.0)*x3980*x3985)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3990 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3990)==0){
continue;
}
IkReal x3989=pow(x3990,-0.5);
CheckValue<IkReal> x3991 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3991.valid){
continue;
}
IkReal gconst108=((-1.0)*(x3991.value));
IkReal gconst109=((-1.0)*r01*x3989);
IkReal gconst110=(r00*x3989);
CheckValue<IkReal> x3992 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3992.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3992.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x3995 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3995.valid){
continue;
}
IkReal x3993=((-1.0)*(x3995.value));
IkReal x3994=x3989;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x3993;
IkReal gconst108=x3993;
IkReal gconst109=((-1.0)*r01*x3994);
IkReal gconst110=(r00*x3994);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x3998 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3998.valid){
continue;
}
IkReal x3996=((-1.0)*(x3998.value));
IkReal x3997=x3989;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x3996;
IkReal gconst108=x3996;
IkReal gconst109=((-1.0)*r01*x3997);
IkReal gconst110=(r00*x3997);
IkReal x3999=r02*r02;
IkReal x4000=(cj0*r12);
IkReal x4001=((1.0)*x3999);
CheckValue<IkReal> x4005=IKPowWithIntegerCheck(((-1.0)+x3999),-1);
if(!x4005.valid){
continue;
}
IkReal x4002=x4005.value;
if((((1.0)+(((-1.0)*x4001)))) < -0.00001)
continue;
IkReal x4003=IKsqrt(((1.0)+(((-1.0)*x4001))));
IkReal x4004=(x4002*x4003);
j4eval[0]=((IKabs(((((-1.0)*sj0*x4001*x4004))+((sj0*x4004))+((r02*x4000*x4004)))))+(IKabs(((((-1.0)*x4000))+((r02*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x4008 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4008.valid){
continue;
}
IkReal x4006=((-1.0)*(x4008.value));
IkReal x4007=x3989;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x4006;
IkReal gconst108=x4006;
IkReal gconst109=((-1.0)*r01*x4007);
IkReal gconst110=(r00*x4007);
IkReal x4009=r02*r02;
IkReal x4010=(sj1*sj2);
IkReal x4011=(cj1*cj2);
IkReal x4012=((1.0)+(((-1.0)*x4009)));
CheckValue<IkReal> x4019=IKPowWithIntegerCheck(x4012,-1);
if(!x4019.valid){
continue;
}
IkReal x4013=x4019.value;
CheckValue<IkReal> x4020=IKPowWithIntegerCheck(((-1.0)+x4009),-1);
if(!x4020.valid){
continue;
}
IkReal x4014=x4020.value;
IkReal x4015=((1.0)*x4013);
if((x4012) < -0.00001)
continue;
IkReal x4016=IKsqrt(x4012);
IkReal x4017=(r02*r22*x4014*x4016);
IkReal x4018=((((-1.0)*x4015*(r00*r00)*(r20*r20)))+(((-1.0)*x4015*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x4013))+(((-1.0)*(r22*r22))));
j4eval[0]=x4018;
j4eval[1]=((IKabs((((r22*x4010))+(((-1.0)*r22*x4011)))))+(IKabs((((x4011*x4017))+(((-1.0)*x4010*x4017))))));
j4eval[2]=IKsign(x4018);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4021=(gconst110*r20);
IkReal x4022=(gconst109*r21);
IkReal x4023=(sj1*sj2);
IkReal x4024=(cj1*cj2);
CheckValue<IkReal> x4025=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x4021*x4021)))+(((-1.0)*(r22*r22)))+(((2.0)*x4021*x4022))+(((-1.0)*(x4022*x4022))))),-1);
if(!x4025.valid){
continue;
}
CheckValue<IkReal> x4026 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4024))+((r22*x4023)))),IkReal((((x4021*x4024))+(((-1.0)*x4022*x4024))+((x4022*x4023))+(((-1.0)*x4021*x4023)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4026.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4025.value)))+(x4026.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4027=IKsin(j4);
IkReal x4028=IKcos(j4);
IkReal x4029=(gconst109*r21);
IkReal x4030=(cj2*sj1);
IkReal x4031=((1.0)*cj1);
IkReal x4032=((1.0)*cj0);
IkReal x4033=((1.0)*x4028);
IkReal x4034=(gconst109*x4027);
IkReal x4035=(gconst109*x4028);
IkReal x4036=((1.0)*gconst110*x4027);
evalcond[0]=((((-1.0)*r22*x4033))+(((-1.0)*r20*x4036))+((x4027*x4029)));
evalcond[1]=((((-1.0)*r00*x4036))+((r01*x4034))+(((-1.0)*x4032))+(((-1.0)*r02*x4033)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r12*x4033))+(((-1.0)*r10*x4036))+((r11*x4034)));
evalcond[3]=((((-1.0)*gconst110*r20*x4033))+((sj1*sj2))+((x4028*x4029))+(((-1.0)*cj2*x4031))+((r22*x4027)));
evalcond[4]=(((cj1*sj0*sj2))+((r01*x4035))+(((-1.0)*gconst110*r00*x4033))+((sj0*x4030))+((r02*x4027)));
evalcond[5]=((((-1.0)*gconst110*r10*x4033))+(((-1.0)*x4030*x4032))+(((-1.0)*cj0*sj2*x4031))+((r12*x4027))+((r11*x4035)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4037=((1.0)*cj0);
IkReal x4038=((1.0)*gconst110);
CheckValue<IkReal> x4039 = IKatan2WithCheck(IkReal((((r02*sj0))+(((-1.0)*r12*x4037)))),IkReal((((cj0*gconst110*r10))+((gconst109*r01*sj0))+(((-1.0)*gconst109*r11*x4037))+(((-1.0)*r00*sj0*x4038)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4039.valid){
continue;
}
CheckValue<IkReal> x4040=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4038))+(((-1.0)*gconst109*r20)))),-1);
if(!x4040.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4039.value)+(((1.5707963267949)*(x4040.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4041=IKsin(j4);
IkReal x4042=IKcos(j4);
IkReal x4043=(gconst109*r21);
IkReal x4044=(cj2*sj1);
IkReal x4045=((1.0)*cj1);
IkReal x4046=((1.0)*cj0);
IkReal x4047=((1.0)*x4042);
IkReal x4048=(gconst109*x4041);
IkReal x4049=(gconst109*x4042);
IkReal x4050=((1.0)*gconst110*x4041);
evalcond[0]=(((x4041*x4043))+(((-1.0)*r20*x4050))+(((-1.0)*r22*x4047)));
evalcond[1]=((((-1.0)*r00*x4050))+(((-1.0)*r02*x4047))+((r01*x4048))+(((-1.0)*x4046)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r12*x4047))+((r11*x4048))+(((-1.0)*r10*x4050)));
evalcond[3]=(((r22*x4041))+(((-1.0)*cj2*x4045))+(((-1.0)*gconst110*r20*x4047))+((sj1*sj2))+((x4042*x4043)));
evalcond[4]=((((-1.0)*gconst110*r00*x4047))+((r02*x4041))+((cj1*sj0*sj2))+((r01*x4049))+((sj0*x4044)));
evalcond[5]=((((-1.0)*cj0*sj2*x4045))+(((-1.0)*x4044*x4046))+(((-1.0)*gconst110*r10*x4047))+((r12*x4041))+((r11*x4049)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4051=((1.0)*gconst110);
CheckValue<IkReal> x4052 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst109*r21))+(((-1.0)*cj0*r20*x4051)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4052.valid){
continue;
}
CheckValue<IkReal> x4053=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4051))+(((-1.0)*gconst109*r10)))),-1);
if(!x4053.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4052.value)+(((1.5707963267949)*(x4053.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4054=IKsin(j4);
IkReal x4055=IKcos(j4);
IkReal x4056=(gconst109*r21);
IkReal x4057=(cj2*sj1);
IkReal x4058=((1.0)*cj1);
IkReal x4059=((1.0)*cj0);
IkReal x4060=((1.0)*x4055);
IkReal x4061=(gconst109*x4054);
IkReal x4062=(gconst109*x4055);
IkReal x4063=((1.0)*gconst110*x4054);
evalcond[0]=((((-1.0)*r20*x4063))+((x4054*x4056))+(((-1.0)*r22*x4060)));
evalcond[1]=((((-1.0)*x4059))+(((-1.0)*r00*x4063))+(((-1.0)*r02*x4060))+((r01*x4061)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r12*x4060))+((r11*x4061))+(((-1.0)*r10*x4063)));
evalcond[3]=((((-1.0)*cj2*x4058))+((sj1*sj2))+(((-1.0)*gconst110*r20*x4060))+((x4055*x4056))+((r22*x4054)));
evalcond[4]=(((sj0*x4057))+((r02*x4054))+(((-1.0)*gconst110*r00*x4060))+((cj1*sj0*sj2))+((r01*x4062)));
evalcond[5]=((((-1.0)*cj0*sj2*x4058))+((r11*x4062))+((r12*x4054))+(((-1.0)*gconst110*r10*x4060))+(((-1.0)*x4057*x4059)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4065 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4065)==0){
continue;
}
IkReal x4064=pow(x4065,-0.5);
CheckValue<IkReal> x4066 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4066.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x4066.value))));
IkReal gconst112=((1.0)*r01*x4064);
IkReal gconst113=((-1.0)*r00*x4064);
CheckValue<IkReal> x4067 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4067.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4067.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x4070 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4070.valid){
continue;
}
IkReal x4068=((1.0)*(x4070.value));
IkReal x4069=x4064;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4068)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4068)));
IkReal gconst112=((1.0)*r01*x4069);
IkReal gconst113=((-1.0)*r00*x4069);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=sj0;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x4073 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4073.valid){
continue;
}
IkReal x4071=((1.0)*(x4073.value));
IkReal x4072=x4064;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4071)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4071)));
IkReal gconst112=((1.0)*r01*x4072);
IkReal gconst113=((-1.0)*r00*x4072);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4074=((1.0)*cj0);
IkReal x4075=((1.0)*gconst113);
CheckValue<IkReal> x4076=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4075))+(((-1.0)*gconst112*r20)))),-1);
if(!x4076.valid){
continue;
}
CheckValue<IkReal> x4077 = IKatan2WithCheck(IkReal((((r02*sj0))+(((-1.0)*r12*x4074)))),IkReal((((cj0*gconst113*r10))+((gconst112*r01*sj0))+(((-1.0)*r00*sj0*x4075))+(((-1.0)*gconst112*r11*x4074)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4077.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4076.value)))+(x4077.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4078=IKsin(j4);
IkReal x4079=IKcos(j4);
IkReal x4080=(cj2*sj1);
IkReal x4081=(gconst113*r20);
IkReal x4082=(gconst112*r21);
IkReal x4083=((1.0)*cj1);
IkReal x4084=(gconst113*r00);
IkReal x4085=(gconst112*r11);
IkReal x4086=((1.0)*cj0);
IkReal x4087=(gconst113*r10);
IkReal x4088=(gconst112*r01);
IkReal x4089=((1.0)*x4079);
IkReal x4090=((1.0)*x4078);
evalcond[0]=((((-1.0)*r22*x4089))+(((-1.0)*x4081*x4090))+((x4078*x4082)));
evalcond[1]=((((-1.0)*x4086))+(((-1.0)*r02*x4089))+(((-1.0)*x4084*x4090))+((x4078*x4088)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r12*x4089))+(((-1.0)*x4087*x4090))+((x4078*x4085)));
evalcond[3]=(((x4079*x4082))+(((-1.0)*cj2*x4083))+((r22*x4078))+((sj1*sj2))+(((-1.0)*x4081*x4089)));
evalcond[4]=(((x4079*x4088))+((cj1*sj0*sj2))+((r02*x4078))+(((-1.0)*x4084*x4089))+((sj0*x4080)));
evalcond[5]=(((r12*x4078))+((x4079*x4085))+(((-1.0)*x4087*x4089))+(((-1.0)*cj0*sj2*x4083))+(((-1.0)*x4080*x4086)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4091=((1.0)*gconst113);
CheckValue<IkReal> x4092=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4091))+(((-1.0)*gconst112*r10)))),-1);
if(!x4092.valid){
continue;
}
CheckValue<IkReal> x4093 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4091))+((cj0*gconst112*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4093.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4092.value)))+(x4093.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4094=IKsin(j4);
IkReal x4095=IKcos(j4);
IkReal x4096=(cj2*sj1);
IkReal x4097=(gconst113*r20);
IkReal x4098=(gconst112*r21);
IkReal x4099=((1.0)*cj1);
IkReal x4100=(gconst113*r00);
IkReal x4101=(gconst112*r11);
IkReal x4102=((1.0)*cj0);
IkReal x4103=(gconst113*r10);
IkReal x4104=(gconst112*r01);
IkReal x4105=((1.0)*x4095);
IkReal x4106=((1.0)*x4094);
evalcond[0]=(((x4094*x4098))+(((-1.0)*r22*x4105))+(((-1.0)*x4097*x4106)));
evalcond[1]=((((-1.0)*x4102))+((x4094*x4104))+(((-1.0)*x4100*x4106))+(((-1.0)*r02*x4105)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r12*x4105))+((x4094*x4101))+(((-1.0)*x4103*x4106)));
evalcond[3]=((((-1.0)*cj2*x4099))+((sj1*sj2))+((r22*x4094))+((x4095*x4098))+(((-1.0)*x4097*x4105)));
evalcond[4]=(((cj1*sj0*sj2))+((r02*x4094))+(((-1.0)*x4100*x4105))+((x4095*x4104))+((sj0*x4096)));
evalcond[5]=((((-1.0)*x4096*x4102))+((r12*x4094))+(((-1.0)*x4103*x4105))+((x4095*x4101))+(((-1.0)*cj0*sj2*x4099)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4107=IKPowWithIntegerCheck(IKsign((((gconst112*r00))+((gconst113*r01)))),-1);
if(!x4107.valid){
continue;
}
CheckValue<IkReal> x4108 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst112*r21*sj0))+(((-1.0)*gconst113*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4108.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4107.value)))+(x4108.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4109=IKsin(j4);
IkReal x4110=IKcos(j4);
IkReal x4111=(cj2*sj1);
IkReal x4112=(gconst113*r20);
IkReal x4113=(gconst112*r21);
IkReal x4114=((1.0)*cj1);
IkReal x4115=(gconst113*r00);
IkReal x4116=(gconst112*r11);
IkReal x4117=((1.0)*cj0);
IkReal x4118=(gconst113*r10);
IkReal x4119=(gconst112*r01);
IkReal x4120=((1.0)*x4110);
IkReal x4121=((1.0)*x4109);
evalcond[0]=((((-1.0)*r22*x4120))+((x4109*x4113))+(((-1.0)*x4112*x4121)));
evalcond[1]=((((-1.0)*x4117))+((x4109*x4119))+(((-1.0)*x4115*x4121))+(((-1.0)*r02*x4120)));
evalcond[2]=((((-1.0)*r12*x4120))+(((-1.0)*sj0))+((x4109*x4116))+(((-1.0)*x4118*x4121)));
evalcond[3]=(((r22*x4109))+(((-1.0)*cj2*x4114))+((sj1*sj2))+(((-1.0)*x4112*x4120))+((x4110*x4113)));
evalcond[4]=(((sj0*x4111))+((cj1*sj0*sj2))+(((-1.0)*x4115*x4120))+((r02*x4109))+((x4110*x4119)));
evalcond[5]=((((-1.0)*x4111*x4117))+((r12*x4109))+(((-1.0)*x4118*x4120))+((x4110*x4116))+(((-1.0)*cj0*sj2*x4114)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4122=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4122;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4122);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4123=((1.0)*cj5);
IkReal x4124=((((-1.0)*r11*x4123))+(((-1.0)*r10*sj5)));
j4eval[0]=x4124;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x4123)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4124);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4125=cj5*cj5;
IkReal x4126=r01*r01;
IkReal x4127=(cj5*r00);
IkReal x4128=(r01*sj5);
IkReal x4129=(((x4125*(r00*r00)))+(((-1.0)*x4125*x4126))+x4126+(r02*r02)+(((-2.0)*x4127*x4128)));
j4eval[0]=x4129;
j4eval[1]=IKsign(x4129);
j4eval[2]=((IKabs(r02))+(IKabs((x4128+(((-1.0)*x4127))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4130=cj5*cj5;
IkReal x4131=r01*r01;
IkReal x4132=(r01*sj5);
IkReal x4133=(cj5*r00);
CheckValue<IkReal> x4134=IKPowWithIntegerCheck(IKsign((x4131+(r02*r02)+(((-2.0)*x4132*x4133))+(((-1.0)*x4130*x4131))+((x4130*(r00*r00))))),-1);
if(!x4134.valid){
continue;
}
CheckValue<IkReal> x4135 = IKatan2WithCheck(IkReal(((((-1.0)*x4133))+x4132)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4135.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4134.value)))+(x4135.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4136=IKcos(j4);
IkReal x4137=IKsin(j4);
IkReal x4138=(cj5*r00);
IkReal x4139=(cj5*r10);
IkReal x4140=(r21*sj5);
IkReal x4141=((1.0)*cj2);
IkReal x4142=(cj5*r20);
IkReal x4143=((1.0)*x4136);
IkReal x4144=((1.0)*x4137);
IkReal x4145=(sj5*x4137);
IkReal x4146=(sj5*x4136);
evalcond[0]=(((r01*x4146))+(((-1.0)*x4138*x4143))+((r02*x4137)));
evalcond[1]=(((x4137*x4140))+(((-1.0)*x4142*x4144))+(((-1.0)*r22*x4143)));
evalcond[2]=(((r11*x4145))+(((-1.0)*x4139*x4144))+(((-1.0)*r12*x4143)));
evalcond[3]=((-1.0)+((r01*x4145))+(((-1.0)*r02*x4143))+(((-1.0)*x4138*x4144)));
evalcond[4]=(((r22*x4137))+((sj1*sj2))+(((-1.0)*x4142*x4143))+(((-1.0)*cj1*x4141))+((x4136*x4140)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r11*x4146))+((r12*x4137))+(((-1.0)*x4139*x4143))+(((-1.0)*sj1*x4141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4147=((1.0)*cj5);
CheckValue<IkReal> x4148=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4147)))),-1);
if(!x4148.valid){
continue;
}
CheckValue<IkReal> x4149 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x4147)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4149.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4148.value)))+(x4149.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4150=IKcos(j4);
IkReal x4151=IKsin(j4);
IkReal x4152=(cj5*r00);
IkReal x4153=(cj5*r10);
IkReal x4154=(r21*sj5);
IkReal x4155=((1.0)*cj2);
IkReal x4156=(cj5*r20);
IkReal x4157=((1.0)*x4150);
IkReal x4158=((1.0)*x4151);
IkReal x4159=(sj5*x4151);
IkReal x4160=(sj5*x4150);
evalcond[0]=(((r01*x4160))+((r02*x4151))+(((-1.0)*x4152*x4157)));
evalcond[1]=((((-1.0)*x4156*x4158))+((x4151*x4154))+(((-1.0)*r22*x4157)));
evalcond[2]=((((-1.0)*x4153*x4158))+((r11*x4159))+(((-1.0)*r12*x4157)));
evalcond[3]=((-1.0)+((r01*x4159))+(((-1.0)*r02*x4157))+(((-1.0)*x4152*x4158)));
evalcond[4]=(((x4150*x4154))+((r22*x4151))+(((-1.0)*x4156*x4157))+((sj1*sj2))+(((-1.0)*cj1*x4155)));
evalcond[5]=((((-1.0)*x4153*x4157))+((r12*x4151))+(((-1.0)*cj1*sj2))+((r11*x4160))+(((-1.0)*sj1*x4155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4161=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4161.valid){
continue;
}
CheckValue<IkReal> x4162 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4162.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4161.value)))+(x4162.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4163=IKcos(j4);
IkReal x4164=IKsin(j4);
IkReal x4165=(cj5*r00);
IkReal x4166=(cj5*r10);
IkReal x4167=(r21*sj5);
IkReal x4168=((1.0)*cj2);
IkReal x4169=(cj5*r20);
IkReal x4170=((1.0)*x4163);
IkReal x4171=((1.0)*x4164);
IkReal x4172=(sj5*x4164);
IkReal x4173=(sj5*x4163);
evalcond[0]=((((-1.0)*x4165*x4170))+((r02*x4164))+((r01*x4173)));
evalcond[1]=((((-1.0)*x4169*x4171))+(((-1.0)*r22*x4170))+((x4164*x4167)));
evalcond[2]=(((r11*x4172))+(((-1.0)*x4166*x4171))+(((-1.0)*r12*x4170)));
evalcond[3]=((-1.0)+(((-1.0)*x4165*x4171))+((r01*x4172))+(((-1.0)*r02*x4170)));
evalcond[4]=(((r22*x4164))+(((-1.0)*cj1*x4168))+((sj1*sj2))+(((-1.0)*x4169*x4170))+((x4163*x4167)));
evalcond[5]=(((r11*x4173))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4168))+(((-1.0)*x4166*x4170))+((r12*x4164)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4174=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4174;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4174);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4175=((1.0)*cj5);
IkReal x4176=((((-1.0)*r21*x4175))+(((-1.0)*r20*sj5)));
j4eval[0]=x4176;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x4175))))));
j4eval[2]=IKsign(x4176);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4177=cj5*cj5;
IkReal x4178=r01*r01;
IkReal x4179=(r01*sj5);
IkReal x4180=(cj5*r00);
IkReal x4181=((((-1.0)*x4177*(r00*r00)))+(((-1.0)*(r02*r02)))+((x4177*x4178))+(((-1.0)*x4178))+(((2.0)*x4179*x4180)));
j4eval[0]=x4181;
j4eval[1]=IKsign(x4181);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4180))+x4179))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4182=cj5*cj5;
IkReal x4183=r01*r01;
IkReal x4184=(r01*sj5);
IkReal x4185=(cj5*r00);
CheckValue<IkReal> x4186=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4182*(r00*r00)))+(((-1.0)*(r02*r02)))+(((-1.0)*x4183))+((x4182*x4183))+(((2.0)*x4184*x4185)))),-1);
if(!x4186.valid){
continue;
}
CheckValue<IkReal> x4187 = IKatan2WithCheck(IkReal(((((-1.0)*x4185))+x4184)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4187.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4186.value)))+(x4187.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4188=IKcos(j4);
IkReal x4189=IKsin(j4);
IkReal x4190=(cj5*r00);
IkReal x4191=(cj5*r10);
IkReal x4192=(r21*sj5);
IkReal x4193=(cj5*r20);
IkReal x4194=((1.0)*x4188);
IkReal x4195=((1.0)*x4189);
IkReal x4196=(sj5*x4189);
IkReal x4197=(sj5*x4188);
evalcond[0]=(((r02*x4189))+((r01*x4197))+(((-1.0)*x4190*x4194)));
evalcond[1]=(((x4189*x4192))+(((-1.0)*x4193*x4195))+(((-1.0)*r22*x4194)));
evalcond[2]=((((-1.0)*r12*x4194))+((r11*x4196))+(((-1.0)*x4191*x4195)));
evalcond[3]=((1.0)+(((-1.0)*r02*x4194))+((r01*x4196))+(((-1.0)*x4190*x4195)));
evalcond[4]=(((r12*x4189))+((cj2*sj1))+((r11*x4197))+((cj1*sj2))+(((-1.0)*x4191*x4194)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4189))+(((-1.0)*x4193*x4194))+((x4188*x4192)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4198=((1.0)*cj5);
CheckValue<IkReal> x4199=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4198))+(((-1.0)*r20*sj5)))),-1);
if(!x4199.valid){
continue;
}
CheckValue<IkReal> x4200 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x4198)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4200.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4199.value)))+(x4200.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4201=IKcos(j4);
IkReal x4202=IKsin(j4);
IkReal x4203=(cj5*r00);
IkReal x4204=(cj5*r10);
IkReal x4205=(r21*sj5);
IkReal x4206=(cj5*r20);
IkReal x4207=((1.0)*x4201);
IkReal x4208=((1.0)*x4202);
IkReal x4209=(sj5*x4202);
IkReal x4210=(sj5*x4201);
evalcond[0]=(((r02*x4202))+(((-1.0)*x4203*x4207))+((r01*x4210)));
evalcond[1]=((((-1.0)*x4206*x4208))+(((-1.0)*r22*x4207))+((x4202*x4205)));
evalcond[2]=(((r11*x4209))+(((-1.0)*r12*x4207))+(((-1.0)*x4204*x4208)));
evalcond[3]=((1.0)+(((-1.0)*r02*x4207))+((r01*x4209))+(((-1.0)*x4203*x4208)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r11*x4210))+(((-1.0)*x4204*x4207))+((r12*x4202)));
evalcond[5]=(((r22*x4202))+(((-1.0)*x4206*x4207))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4201*x4205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4211 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4211.valid){
continue;
}
CheckValue<IkReal> x4212=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4212.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4211.value)+(((1.5707963267949)*(x4212.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4213=IKcos(j4);
IkReal x4214=IKsin(j4);
IkReal x4215=(cj5*r00);
IkReal x4216=(cj5*r10);
IkReal x4217=(r21*sj5);
IkReal x4218=(cj5*r20);
IkReal x4219=((1.0)*x4213);
IkReal x4220=((1.0)*x4214);
IkReal x4221=(sj5*x4214);
IkReal x4222=(sj5*x4213);
evalcond[0]=(((r01*x4222))+((r02*x4214))+(((-1.0)*x4215*x4219)));
evalcond[1]=((((-1.0)*x4218*x4220))+((x4214*x4217))+(((-1.0)*r22*x4219)));
evalcond[2]=((((-1.0)*r12*x4219))+(((-1.0)*x4216*x4220))+((r11*x4221)));
evalcond[3]=((1.0)+((r01*x4221))+(((-1.0)*r02*x4219))+(((-1.0)*x4215*x4220)));
evalcond[4]=(((cj2*sj1))+((r12*x4214))+((cj1*sj2))+(((-1.0)*x4216*x4219))+((r11*x4222)));
evalcond[5]=(((r22*x4214))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4213*x4217))+(((-1.0)*x4218*x4219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4223=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4223);
rxp1_1=(px*r21);
rxp1_2=(r11*x4223);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4224=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4224);
rxp1_1=(px*r21);
rxp1_2=(r11*x4224);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4225=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4225);
rxp1_1=(px*r21);
rxp1_2=(r11*x4225);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4228=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x4228.valid){
continue;
}
IkReal x4226=x4228.value;
IkReal x4227=(cj0*x4226);
cj4array[0]=(((cj1*sj2*x4227))+((cj2*sj1*x4227)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4229=IKsin(j4);
IkReal x4230=IKcos(j4);
IkReal x4231=(r21*sj5);
IkReal x4232=((1.0)*cj5*r20);
evalcond[0]=(r02*x4229);
evalcond[1]=((((-1.0)*r02*x4230))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*x4229*x4232))+((x4229*x4231)));
evalcond[3]=((((-1.0)*cj5*r10*x4229))+((r11*sj5*x4229)));
evalcond[4]=(((x4230*x4231))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4230*x4232)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4234=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x4234.valid){
continue;
}
IkReal x4233=x4234.value;
cj4array[0]=(((cj1*cj2*x4233))+(((-1.0)*sj1*sj2*x4233)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4235=IKsin(j4);
IkReal x4236=IKcos(j4);
IkReal x4237=((1.0)*cj0);
IkReal x4238=((1.0)*cj5);
IkReal x4239=(sj5*x4235);
evalcond[0]=(r02*x4235);
evalcond[1]=((((-1.0)*x4237))+(((-1.0)*r02*x4236)));
evalcond[2]=(((r21*x4239))+(((-1.0)*r20*x4235*x4238)));
evalcond[3]=((((-1.0)*r10*x4235*x4238))+((r11*x4239)));
evalcond[4]=((((-1.0)*cj1*sj2*x4237))+(((-1.0)*r10*x4236*x4238))+(((-1.0)*cj2*sj1*x4237))+((r11*sj5*x4236)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4240=IKPowWithIntegerCheck(r02,-1);
if(!x4240.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x4240.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4241=IKsin(j4);
IkReal x4242=IKcos(j4);
IkReal x4243=((1.0)*cj1);
IkReal x4244=(r21*sj5);
IkReal x4245=((1.0)*cj5);
IkReal x4246=(r11*sj5);
evalcond[0]=(r02*x4241);
evalcond[1]=((((-1.0)*r20*x4241*x4245))+((x4241*x4244)));
evalcond[2]=(((x4241*x4246))+(((-1.0)*r10*x4241*x4245)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj2*x4243))+(((-1.0)*r20*x4242*x4245))+((x4242*x4244)));
evalcond[4]=((((-1.0)*cj0*cj2*sj1))+(((-1.0)*r10*x4242*x4245))+(((-1.0)*cj0*sj2*x4243))+((x4242*x4246)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4247=((1.0)*cj0);
IkReal x4248=((1.0)*cj5);
CheckValue<IkReal> x4249 = IKatan2WithCheck(IkReal((((r02*sj0))+(((-1.0)*r12*x4247)))),IkReal((((cj0*cj5*r10))+(((-1.0)*r11*sj5*x4247))+(((-1.0)*r00*sj0*x4248))+((r01*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4249.valid){
continue;
}
CheckValue<IkReal> x4250=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4248))+(((-1.0)*r20*sj5)))),-1);
if(!x4250.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4249.value)+(((1.5707963267949)*(x4250.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4251=IKsin(j4);
IkReal x4252=IKcos(j4);
IkReal x4253=(cj5*r00);
IkReal x4254=(cj5*r10);
IkReal x4255=(cj2*sj1);
IkReal x4256=(r21*sj5);
IkReal x4257=((1.0)*cj1);
IkReal x4258=((1.0)*cj0);
IkReal x4259=(cj5*r20);
IkReal x4260=((1.0)*x4252);
IkReal x4261=((1.0)*x4251);
IkReal x4262=(sj5*x4251);
IkReal x4263=(sj5*x4252);
evalcond[0]=((((-1.0)*x4259*x4261))+(((-1.0)*r22*x4260))+((x4251*x4256)));
evalcond[1]=(((r01*x4262))+(((-1.0)*r02*x4260))+(((-1.0)*x4258))+(((-1.0)*x4253*x4261)));
evalcond[2]=((((-1.0)*r12*x4260))+((r11*x4262))+(((-1.0)*sj0))+(((-1.0)*x4254*x4261)));
evalcond[3]=(((r22*x4251))+(((-1.0)*x4259*x4260))+((sj1*sj2))+(((-1.0)*cj2*x4257))+((x4252*x4256)));
evalcond[4]=(((r01*x4263))+((r02*x4251))+((cj1*sj0*sj2))+((sj0*x4255))+(((-1.0)*x4253*x4260)));
evalcond[5]=(((r11*x4263))+(((-1.0)*cj0*sj2*x4257))+(((-1.0)*x4255*x4258))+((r12*x4251))+(((-1.0)*x4254*x4260)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4264=((1.0)*cj5);
CheckValue<IkReal> x4265 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4264)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4265.valid){
continue;
}
CheckValue<IkReal> x4266=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4264))+(((-1.0)*r10*sj5)))),-1);
if(!x4266.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4265.value)+(((1.5707963267949)*(x4266.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4267=IKsin(j4);
IkReal x4268=IKcos(j4);
IkReal x4269=(cj5*r00);
IkReal x4270=(cj5*r10);
IkReal x4271=(cj2*sj1);
IkReal x4272=(r21*sj5);
IkReal x4273=((1.0)*cj1);
IkReal x4274=((1.0)*cj0);
IkReal x4275=(cj5*r20);
IkReal x4276=((1.0)*x4268);
IkReal x4277=((1.0)*x4267);
IkReal x4278=(sj5*x4267);
IkReal x4279=(sj5*x4268);
evalcond[0]=(((x4267*x4272))+(((-1.0)*x4275*x4277))+(((-1.0)*r22*x4276)));
evalcond[1]=((((-1.0)*r02*x4276))+(((-1.0)*x4269*x4277))+(((-1.0)*x4274))+((r01*x4278)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r12*x4276))+((r11*x4278))+(((-1.0)*x4270*x4277)));
evalcond[3]=((((-1.0)*x4275*x4276))+((sj1*sj2))+(((-1.0)*cj2*x4273))+((x4268*x4272))+((r22*x4267)));
evalcond[4]=(((r02*x4267))+((cj1*sj0*sj2))+((sj0*x4271))+(((-1.0)*x4269*x4276))+((r01*x4279)));
evalcond[5]=(((r11*x4279))+(((-1.0)*cj0*sj2*x4273))+((r12*x4267))+(((-1.0)*x4271*x4274))+(((-1.0)*x4270*x4276)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4280=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4280.valid){
continue;
}
CheckValue<IkReal> x4281 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4281.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4280.value)))+(x4281.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4282=IKsin(j4);
IkReal x4283=IKcos(j4);
IkReal x4284=(cj5*r00);
IkReal x4285=(cj5*r10);
IkReal x4286=(cj2*sj1);
IkReal x4287=(r21*sj5);
IkReal x4288=((1.0)*cj1);
IkReal x4289=((1.0)*cj0);
IkReal x4290=(cj5*r20);
IkReal x4291=((1.0)*x4283);
IkReal x4292=((1.0)*x4282);
IkReal x4293=(sj5*x4282);
IkReal x4294=(sj5*x4283);
evalcond[0]=((((-1.0)*r22*x4291))+((x4282*x4287))+(((-1.0)*x4290*x4292)));
evalcond[1]=((((-1.0)*x4289))+((r01*x4293))+(((-1.0)*x4284*x4292))+(((-1.0)*r02*x4291)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x4285*x4292))+(((-1.0)*r12*x4291))+((r11*x4293)));
evalcond[3]=(((x4283*x4287))+((r22*x4282))+(((-1.0)*x4290*x4291))+((sj1*sj2))+(((-1.0)*cj2*x4288)));
evalcond[4]=(((r01*x4294))+(((-1.0)*x4284*x4291))+((r02*x4282))+((cj1*sj0*sj2))+((sj0*x4286)));
evalcond[5]=((((-1.0)*x4286*x4289))+(((-1.0)*cj0*sj2*x4288))+((r12*x4282))+(((-1.0)*x4285*x4291))+((r11*x4294)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4295=r21*r21;
IkReal x4296=cj5*cj5;
IkReal x4297=(sj1*sj2);
IkReal x4298=(r21*sj5);
IkReal x4299=(cj1*cj2);
IkReal x4300=(cj5*r20);
CheckValue<IkReal> x4301 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4299))+((r22*x4297)))),IkReal((((x4297*x4298))+(((-1.0)*x4298*x4299))+((x4299*x4300))+(((-1.0)*x4297*x4300)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4301.valid){
continue;
}
CheckValue<IkReal> x4302=IKPowWithIntegerCheck(IKsign(((((2.0)*x4298*x4300))+(((-1.0)*x4295))+(((-1.0)*x4296*(r20*r20)))+(((-1.0)*(r22*r22)))+((x4295*x4296)))),-1);
if(!x4302.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4301.value)+(((1.5707963267949)*(x4302.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x4303=IKsin(j4);
IkReal x4304=IKcos(j4);
IkReal x4305=(r21*sj5);
IkReal x4306=(cj5*r20);
IkReal x4307=((1.0)*x4304);
evalcond[0]=((((-1.0)*x4303*x4306))+(((-1.0)*r22*x4307))+((x4303*x4305)));
evalcond[1]=(((r22*x4303))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4304*x4305))+(((-1.0)*x4306*x4307)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4308=(sj4*sj5);
IkReal x4309=((1.0)*cj4);
IkReal x4310=((1.0)*cj5*sj4);
if( IKabs(((((-1.0)*r12*x4309))+((r11*x4308))+(((-1.0)*r10*x4310)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x4308))+(((-1.0)*r02*x4309))+(((-1.0)*r00*x4310)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*x4309))+((r11*x4308))+(((-1.0)*r10*x4310))))+IKsqr((((r01*x4308))+(((-1.0)*r02*x4309))+(((-1.0)*r00*x4310))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r12*x4309))+((r11*x4308))+(((-1.0)*r10*x4310))), (((r01*x4308))+(((-1.0)*r02*x4309))+(((-1.0)*r00*x4310))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x4311=IKsin(j0);
IkReal x4312=IKcos(j0);
IkReal x4313=((1.0)*sj2);
IkReal x4314=((0.39225)*sj2);
IkReal x4315=(r11*sj5);
IkReal x4316=(cj5*r11);
IkReal x4317=((1.0)*r00);
IkReal x4318=(cj4*cj5);
IkReal x4319=((1.0)*cj2);
IkReal x4320=((0.39225)*cj2);
IkReal x4321=((1.0)*r10);
IkReal x4322=((0.09465)*sj5);
IkReal x4323=(cj5*r01);
IkReal x4324=(cj5*sj4);
IkReal x4325=((1.0)*cj4);
IkReal x4326=(r01*sj5);
IkReal x4327=(sj1*x4311);
IkReal x4328=(cj1*x4312);
IkReal x4329=(cj1*x4311);
IkReal x4330=(sj1*x4312);
evalcond[0]=((((-1.0)*x4317*x4324))+(((-1.0)*r02*x4325))+(((-1.0)*x4312))+((sj4*x4326)));
evalcond[1]=((((-1.0)*x4321*x4324))+(((-1.0)*r12*x4325))+(((-1.0)*x4311))+((sj4*x4315)));
evalcond[2]=((((-1.0)*x4323))+((cj2*x4329))+(((-1.0)*x4313*x4327))+(((-1.0)*sj5*x4317)));
evalcond[3]=((((-1.0)*sj5*x4321))+((sj2*x4330))+(((-1.0)*x4316))+(((-1.0)*x4319*x4328)));
evalcond[4]=(((cj4*x4326))+(((-1.0)*x4317*x4318))+((sj2*x4329))+((cj2*x4327))+((r02*sj4)));
evalcond[5]=((((-1.0)*x4313*x4328))+((r12*sj4))+((cj4*x4315))+(((-1.0)*x4318*x4321))+(((-1.0)*x4319*x4330)));
evalcond[6]=((((-1.0)*r00*x4322))+(((-0.10915)*x4312))+((x4314*x4327))+(((-0.425)*x4329))+(((-1.0)*px))+(((-0.09465)*x4323))+(((-1.0)*x4320*x4329)));
evalcond[7]=((((-1.0)*r10*x4322))+(((-1.0)*x4314*x4330))+(((-0.10915)*x4311))+(((0.425)*x4328))+((x4320*x4328))+(((-1.0)*py))+(((-0.09465)*x4316)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4331 = IKatan2WithCheck(IkReal((((r00*sj5))+((cj5*r01)))),IkReal(((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4331.valid){
continue;
}
CheckValue<IkReal> x4332=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj1*sj2))+((cj1*cj2)))),-1);
if(!x4332.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4331.value)+(((1.5707963267949)*(x4332.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4333=IKsin(j0);
IkReal x4334=IKcos(j0);
IkReal x4335=(cj5*r11);
IkReal x4336=((1.0)*sj5);
IkReal x4337=((0.09465)*sj5);
IkReal x4338=(cj5*r01);
IkReal x4339=(cj1*x4334);
IkReal x4340=(sj1*sj2*x4333);
IkReal x4341=(cj1*cj2*x4333);
IkReal x4342=(sj1*sj2*x4334);
evalcond[0]=((((-1.0)*r00*x4336))+(((-1.0)*x4338))+x4341+(((-1.0)*x4340)));
evalcond[1]=((((-1.0)*r10*x4336))+(((-1.0)*x4335))+(((-1.0)*cj2*x4339))+x4342);
evalcond[2]=((((-1.0)*r00*x4337))+(((0.39225)*x4340))+(((-0.39225)*x4341))+(((-0.425)*cj1*x4333))+(((-0.09465)*x4338))+(((-1.0)*px))+(((-0.10915)*x4334)));
evalcond[3]=((((-1.0)*r10*x4337))+(((-0.39225)*x4342))+(((0.39225)*cj2*x4339))+(((0.425)*x4339))+(((-0.09465)*x4335))+(((-1.0)*py))+(((-0.10915)*x4333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4343=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4343;
j4eval[1]=IKsign(x4343);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4344=((1.0)*cj5);
IkReal x4345=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4344)));
j4eval[0]=x4345;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4344))))));
j4eval[2]=IKsign(x4345);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4346=((1.0)*cj0);
IkReal x4347=((1.0)*cj5);
IkReal x4348=((((-1.0)*r21*x4347))+(((-1.0)*r20*sj5)));
j4eval[0]=x4348;
j4eval[1]=((IKabs(((((-1.0)*r00*sj0*x4347))+((cj0*cj5*r10))+(((-1.0)*r11*sj5*x4346))+((r01*sj0*sj5)))))+(IKabs((((r02*sj0))+(((-1.0)*r12*x4346))))));
j4eval[2]=IKsign(x4348);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x4349=((-1.0)*r20);
IkReal x4351 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4351)==0){
continue;
}
IkReal x4350=pow(x4351,-0.5);
CheckValue<IkReal> x4352 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4349),IKFAST_ATAN2_MAGTHRESH);
if(!x4352.valid){
continue;
}
IkReal gconst96=((-1.0)*(x4352.value));
IkReal gconst97=(r21*x4350);
IkReal gconst98=(x4349*x4350);
CheckValue<IkReal> x4353 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4353.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4353.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4354=((-1.0)*r20);
IkReal x4355=x4350;
CheckValue<IkReal> x4357 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4354),IKFAST_ATAN2_MAGTHRESH);
if(!x4357.valid){
continue;
}
IkReal x4356=((-1.0)*(x4357.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4356;
IkReal gconst96=x4356;
IkReal gconst97=(r21*x4355);
IkReal gconst98=(x4354*x4355);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4358=((-1.0)*r20);
IkReal x4359=x4350;
CheckValue<IkReal> x4361 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4358),IKFAST_ATAN2_MAGTHRESH);
if(!x4361.valid){
continue;
}
IkReal x4360=((-1.0)*(x4361.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4360;
IkReal gconst96=x4360;
IkReal gconst97=(r21*x4359);
IkReal gconst98=(x4358*x4359);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x4362=((-1.0)*r20);
IkReal x4363=x4350;
CheckValue<IkReal> x4365 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4362),IKFAST_ATAN2_MAGTHRESH);
if(!x4365.valid){
continue;
}
IkReal x4364=((-1.0)*(x4365.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4364;
IkReal gconst96=x4364;
IkReal gconst97=(r21*x4363);
IkReal gconst98=(x4362*x4363);
IkReal x4366=((1.0)*(r22*r22));
CheckValue<IkReal> x4370=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x4366))),-1);
if(!x4370.valid){
continue;
}
IkReal x4367=x4370.value;
IkReal x4368=((1.0)*x4367);
IkReal x4369=((((-1.0)*x4368*(r20*r20*r20*r20)))+(((-1.0)*x4368*(r21*r21*r21*r21)))+(((-1.0)*x4366))+(((-2.0)*x4367*(r20*r20)*(r21*r21))));
j4eval[0]=x4369;
j4eval[1]=IKsign(x4369);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4371=(cj1*cj2);
IkReal x4372=(gconst98*r20);
IkReal x4373=(sj1*sj2);
IkReal x4374=(gconst97*r21);
CheckValue<IkReal> x4375 = IKatan2WithCheck(IkReal((((r22*x4373))+(((-1.0)*r22*x4371)))),IkReal((((x4371*x4372))+(((-1.0)*x4372*x4373))+(((-1.0)*x4371*x4374))+((x4373*x4374)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4375.valid){
continue;
}
CheckValue<IkReal> x4376=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x4374*x4374)))+(((-1.0)*(x4372*x4372)))+(((-1.0)*(r22*r22)))+(((2.0)*x4372*x4374)))),-1);
if(!x4376.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4375.value)+(((1.5707963267949)*(x4376.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4377=IKsin(j4);
IkReal x4378=IKcos(j4);
IkReal x4379=(gconst98*r10);
IkReal x4380=(gconst97*r21);
IkReal x4381=(cj2*sj1);
IkReal x4382=(gconst98*r20);
IkReal x4383=((1.0)*cj1);
IkReal x4384=((1.0)*cj0);
IkReal x4385=(gconst98*r00);
IkReal x4386=((1.0)*x4378);
IkReal x4387=((1.0)*x4377);
IkReal x4388=(gconst97*x4377);
IkReal x4389=(gconst97*x4378);
evalcond[0]=((((-1.0)*x4382*x4387))+(((-1.0)*r22*x4386))+((x4377*x4380)));
evalcond[1]=((((-1.0)*r02*x4386))+(((-1.0)*x4385*x4387))+(((-1.0)*x4384))+((r01*x4388)));
evalcond[2]=((((-1.0)*x4379*x4387))+(((-1.0)*sj0))+(((-1.0)*r12*x4386))+((r11*x4388)));
evalcond[3]=(((r22*x4377))+((x4378*x4380))+(((-1.0)*x4382*x4386))+((sj1*sj2))+(((-1.0)*cj2*x4383)));
evalcond[4]=(((r02*x4377))+((cj1*sj0*sj2))+((sj0*x4381))+(((-1.0)*x4385*x4386))+((r01*x4389)));
evalcond[5]=((((-1.0)*x4379*x4386))+(((-1.0)*x4381*x4384))+((r12*x4377))+((r11*x4389))+(((-1.0)*cj0*sj2*x4383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4390=((1.0)*gconst98);
CheckValue<IkReal> x4391=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4390))+(((-1.0)*gconst97*r10)))),-1);
if(!x4391.valid){
continue;
}
CheckValue<IkReal> x4392 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst97*r21))+(((-1.0)*cj0*r20*x4390)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4392.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4391.value)))+(x4392.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4393=IKsin(j4);
IkReal x4394=IKcos(j4);
IkReal x4395=(gconst98*r10);
IkReal x4396=(gconst97*r21);
IkReal x4397=(cj2*sj1);
IkReal x4398=(gconst98*r20);
IkReal x4399=((1.0)*cj1);
IkReal x4400=((1.0)*cj0);
IkReal x4401=(gconst98*r00);
IkReal x4402=((1.0)*x4394);
IkReal x4403=((1.0)*x4393);
IkReal x4404=(gconst97*x4393);
IkReal x4405=(gconst97*x4394);
evalcond[0]=((((-1.0)*x4398*x4403))+(((-1.0)*r22*x4402))+((x4393*x4396)));
evalcond[1]=((((-1.0)*x4401*x4403))+((r01*x4404))+(((-1.0)*r02*x4402))+(((-1.0)*x4400)));
evalcond[2]=(((r11*x4404))+(((-1.0)*sj0))+(((-1.0)*r12*x4402))+(((-1.0)*x4395*x4403)));
evalcond[3]=(((r22*x4393))+((sj1*sj2))+(((-1.0)*x4398*x4402))+(((-1.0)*cj2*x4399))+((x4394*x4396)));
evalcond[4]=(((r02*x4393))+(((-1.0)*x4401*x4402))+((cj1*sj0*sj2))+((r01*x4405))+((sj0*x4397)));
evalcond[5]=((((-1.0)*cj0*sj2*x4399))+((r11*x4405))+(((-1.0)*x4395*x4402))+(((-1.0)*x4397*x4400))+((r12*x4393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4406 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*gconst98*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4406.valid){
continue;
}
CheckValue<IkReal> x4407=IKPowWithIntegerCheck(IKsign((((gconst98*r01))+((gconst97*r00)))),-1);
if(!x4407.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4406.value)+(((1.5707963267949)*(x4407.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4408=IKsin(j4);
IkReal x4409=IKcos(j4);
IkReal x4410=(gconst98*r10);
IkReal x4411=(gconst97*r21);
IkReal x4412=(cj2*sj1);
IkReal x4413=(gconst98*r20);
IkReal x4414=((1.0)*cj1);
IkReal x4415=((1.0)*cj0);
IkReal x4416=(gconst98*r00);
IkReal x4417=((1.0)*x4409);
IkReal x4418=((1.0)*x4408);
IkReal x4419=(gconst97*x4408);
IkReal x4420=(gconst97*x4409);
evalcond[0]=((((-1.0)*x4413*x4418))+(((-1.0)*r22*x4417))+((x4408*x4411)));
evalcond[1]=(((r01*x4419))+(((-1.0)*r02*x4417))+(((-1.0)*x4415))+(((-1.0)*x4416*x4418)));
evalcond[2]=((((-1.0)*x4410*x4418))+(((-1.0)*sj0))+((r11*x4419))+(((-1.0)*r12*x4417)));
evalcond[3]=(((r22*x4408))+((sj1*sj2))+(((-1.0)*cj2*x4414))+(((-1.0)*x4413*x4417))+((x4409*x4411)));
evalcond[4]=(((cj1*sj0*sj2))+((r01*x4420))+(((-1.0)*x4416*x4417))+((r02*x4408))+((sj0*x4412)));
evalcond[5]=((((-1.0)*x4410*x4417))+((r12*x4408))+(((-1.0)*cj0*sj2*x4414))+(((-1.0)*x4412*x4415))+((r11*x4420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4421=((-1.0)*r21);
IkReal x4423 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4423)==0){
continue;
}
IkReal x4422=pow(x4423,-0.5);
CheckValue<IkReal> x4424 = IKatan2WithCheck(IkReal(x4421),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4424.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x4424.value))));
IkReal gconst100=(x4421*x4422);
IkReal gconst101=((1.0)*r20*x4422);
CheckValue<IkReal> x4425 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4425.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4425.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4426=((-1.0)*r21);
CheckValue<IkReal> x4429 = IKatan2WithCheck(IkReal(x4426),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4429.valid){
continue;
}
IkReal x4427=((1.0)*(x4429.value));
IkReal x4428=x4422;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4427)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4427)));
IkReal gconst100=(x4426*x4428);
IkReal gconst101=((1.0)*r20*x4428);
IkReal x4430=r22*r22;
IkReal x4431=((1.0)*x4430);
CheckValue<IkReal> x4435=IKPowWithIntegerCheck(((-1.0)+x4430),-1);
if(!x4435.valid){
continue;
}
IkReal x4432=x4435.value;
if((((1.0)+(((-1.0)*x4431)))) < -0.00001)
continue;
IkReal x4433=IKsqrt(((1.0)+(((-1.0)*x4431))));
IkReal x4434=(sj0*x4432*x4433);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x4434+(((-1.0)*x4431*x4434))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4436=((-1.0)*r21);
CheckValue<IkReal> x4439 = IKatan2WithCheck(IkReal(x4436),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4439.valid){
continue;
}
IkReal x4437=((1.0)*(x4439.value));
IkReal x4438=x4422;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4437)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4437)));
IkReal gconst100=(x4436*x4438);
IkReal gconst101=((1.0)*r20*x4438);
IkReal x4440=r22*r22;
IkReal x4441=((1.0)*x4440);
CheckValue<IkReal> x4445=IKPowWithIntegerCheck(((-1.0)+x4440),-1);
if(!x4445.valid){
continue;
}
IkReal x4442=x4445.value;
if((((1.0)+(((-1.0)*x4441)))) < -0.00001)
continue;
IkReal x4443=IKsqrt(((1.0)+(((-1.0)*x4441))));
IkReal x4444=(cj0*x4442*x4443);
j4eval[0]=((IKabs((x4444+(((-1.0)*x4441*x4444)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4446=((-1.0)*r21);
CheckValue<IkReal> x4449 = IKatan2WithCheck(IkReal(x4446),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4449.valid){
continue;
}
IkReal x4447=((1.0)*(x4449.value));
IkReal x4448=x4422;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4447)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4447)));
IkReal gconst100=(x4446*x4448);
IkReal gconst101=((1.0)*r20*x4448);
IkReal x4450=r22*r22;
IkReal x4451=(cj0*r12);
IkReal x4452=(r02*sj0);
CheckValue<IkReal> x4456=IKPowWithIntegerCheck(((-1.0)+x4450),-1);
if(!x4456.valid){
continue;
}
IkReal x4453=x4456.value;
if((((1.0)+(((-1.0)*x4450)))) < -0.00001)
continue;
IkReal x4454=IKsqrt(((1.0)+(((-1.0)*x4450))));
IkReal x4455=(r22*x4453*x4454);
j4eval[0]=0;
j4eval[1]=((IKabs((((x4451*x4455))+(((-1.0)*x4452*x4455)))))+(IKabs((x4452+(((-1.0)*x4451))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4457=((1.0)*cj0);
IkReal x4458=((1.0)*gconst101);
CheckValue<IkReal> x4459=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r20))+(((-1.0)*r21*x4458)))),-1);
if(!x4459.valid){
continue;
}
CheckValue<IkReal> x4460 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4457))+((r02*sj0)))),IkReal((((cj0*gconst101*r10))+(((-1.0)*gconst100*r11*x4457))+((gconst100*r01*sj0))+(((-1.0)*r00*sj0*x4458)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4460.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4459.value)))+(x4460.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4461=IKsin(j4);
IkReal x4462=IKcos(j4);
IkReal x4463=(cj2*sj1);
IkReal x4464=(gconst101*r20);
IkReal x4465=(gconst101*r10);
IkReal x4466=((1.0)*cj1);
IkReal x4467=(gconst101*r00);
IkReal x4468=((1.0)*cj0);
IkReal x4469=((1.0)*x4462);
IkReal x4470=((1.0)*x4461);
IkReal x4471=(gconst100*x4461);
IkReal x4472=(gconst100*x4462);
evalcond[0]=(((r21*x4471))+(((-1.0)*r22*x4469))+(((-1.0)*x4464*x4470)));
evalcond[1]=((((-1.0)*r02*x4469))+(((-1.0)*x4468))+(((-1.0)*x4467*x4470))+((r01*x4471)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r12*x4469))+((r11*x4471))+(((-1.0)*x4465*x4470)));
evalcond[3]=((((-1.0)*x4464*x4469))+((r22*x4461))+((r21*x4472))+((sj1*sj2))+(((-1.0)*cj2*x4466)));
evalcond[4]=(((cj1*sj0*sj2))+((sj0*x4463))+((r01*x4472))+(((-1.0)*x4467*x4469))+((r02*x4461)));
evalcond[5]=((((-1.0)*x4463*x4468))+(((-1.0)*x4465*x4469))+((r12*x4461))+(((-1.0)*cj0*sj2*x4466))+((r11*x4472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4473=((1.0)*gconst101);
CheckValue<IkReal> x4474 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*r20*x4473)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4474.valid){
continue;
}
CheckValue<IkReal> x4475=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4473))+(((-1.0)*gconst100*r10)))),-1);
if(!x4475.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4474.value)+(((1.5707963267949)*(x4475.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4476=IKsin(j4);
IkReal x4477=IKcos(j4);
IkReal x4478=(cj2*sj1);
IkReal x4479=(gconst101*r20);
IkReal x4480=(gconst101*r10);
IkReal x4481=((1.0)*cj1);
IkReal x4482=(gconst101*r00);
IkReal x4483=((1.0)*cj0);
IkReal x4484=((1.0)*x4477);
IkReal x4485=((1.0)*x4476);
IkReal x4486=(gconst100*x4476);
IkReal x4487=(gconst100*x4477);
evalcond[0]=(((r21*x4486))+(((-1.0)*x4479*x4485))+(((-1.0)*r22*x4484)));
evalcond[1]=(((r01*x4486))+(((-1.0)*r02*x4484))+(((-1.0)*x4482*x4485))+(((-1.0)*x4483)));
evalcond[2]=(((r11*x4486))+(((-1.0)*sj0))+(((-1.0)*r12*x4484))+(((-1.0)*x4480*x4485)));
evalcond[3]=((((-1.0)*cj2*x4481))+((r21*x4487))+(((-1.0)*x4479*x4484))+((sj1*sj2))+((r22*x4476)));
evalcond[4]=(((sj0*x4478))+((cj1*sj0*sj2))+((r02*x4476))+((r01*x4487))+(((-1.0)*x4482*x4484)));
evalcond[5]=(((r11*x4487))+(((-1.0)*cj0*sj2*x4481))+(((-1.0)*x4480*x4484))+(((-1.0)*x4478*x4483))+((r12*x4476)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4488=IKPowWithIntegerCheck(IKsign((((gconst100*r00))+((gconst101*r01)))),-1);
if(!x4488.valid){
continue;
}
CheckValue<IkReal> x4489 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst101*r20*sj0))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4489.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4488.value)))+(x4489.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4490=IKsin(j4);
IkReal x4491=IKcos(j4);
IkReal x4492=(cj2*sj1);
IkReal x4493=(gconst101*r20);
IkReal x4494=(gconst101*r10);
IkReal x4495=((1.0)*cj1);
IkReal x4496=(gconst101*r00);
IkReal x4497=((1.0)*cj0);
IkReal x4498=((1.0)*x4491);
IkReal x4499=((1.0)*x4490);
IkReal x4500=(gconst100*x4490);
IkReal x4501=(gconst100*x4491);
evalcond[0]=(((r21*x4500))+(((-1.0)*r22*x4498))+(((-1.0)*x4493*x4499)));
evalcond[1]=((((-1.0)*r02*x4498))+(((-1.0)*x4496*x4499))+((r01*x4500))+(((-1.0)*x4497)));
evalcond[2]=((((-1.0)*sj0))+((r11*x4500))+(((-1.0)*x4494*x4499))+(((-1.0)*r12*x4498)));
evalcond[3]=((((-1.0)*cj2*x4495))+((r21*x4501))+((sj1*sj2))+((r22*x4490))+(((-1.0)*x4493*x4498)));
evalcond[4]=(((sj0*x4492))+(((-1.0)*x4496*x4498))+((r02*x4490))+((cj1*sj0*sj2))+((r01*x4501)));
evalcond[5]=((((-1.0)*x4492*x4497))+((r12*x4490))+((r11*x4501))+(((-1.0)*cj0*sj2*x4495))+(((-1.0)*x4494*x4498)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4502=((-1.0)*r10);
IkReal x4504 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4504)==0){
continue;
}
IkReal x4503=pow(x4504,-0.5);
CheckValue<IkReal> x4505 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4502),IKFAST_ATAN2_MAGTHRESH);
if(!x4505.valid){
continue;
}
IkReal gconst102=((-1.0)*(x4505.value));
IkReal gconst103=(r11*x4503);
IkReal gconst104=(x4502*x4503);
CheckValue<IkReal> x4506 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4506.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4506.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4507=((-1.0)*r10);
IkReal x4508=x4503;
CheckValue<IkReal> x4510 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4507),IKFAST_ATAN2_MAGTHRESH);
if(!x4510.valid){
continue;
}
IkReal x4509=((-1.0)*(x4510.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x4509;
IkReal gconst102=x4509;
IkReal gconst103=(r11*x4508);
IkReal gconst104=(x4507*x4508);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4511=((-1.0)*r10);
IkReal x4512=x4503;
CheckValue<IkReal> x4514 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4511),IKFAST_ATAN2_MAGTHRESH);
if(!x4514.valid){
continue;
}
IkReal x4513=((-1.0)*(x4514.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x4513;
IkReal gconst102=x4513;
IkReal gconst103=(r11*x4512);
IkReal gconst104=(x4511*x4512);
IkReal x4515=r12*r12;
IkReal x4516=((1.0)*cj0);
IkReal x4517=(r02*sj0);
CheckValue<IkReal> x4521=IKPowWithIntegerCheck(((-1.0)+x4515),-1);
if(!x4521.valid){
continue;
}
IkReal x4518=x4521.value;
if((((1.0)+(((-1.0)*x4515)))) < -0.00001)
continue;
IkReal x4519=IKsqrt(((1.0)+(((-1.0)*x4515))));
IkReal x4520=(x4518*x4519);
j4eval[0]=((IKabs((x4517+(((-1.0)*r12*x4516)))))+(IKabs((((cj0*x4520))+(((-1.0)*x4515*x4516*x4520))+((r12*x4517*x4520))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4522=((-1.0)*r10);
IkReal x4523=x4503;
CheckValue<IkReal> x4525 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4522),IKFAST_ATAN2_MAGTHRESH);
if(!x4525.valid){
continue;
}
IkReal x4524=((-1.0)*(x4525.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x4524;
IkReal gconst102=x4524;
IkReal gconst103=(r11*x4523);
IkReal gconst104=(x4522*x4523);
IkReal x4526=r12*r12;
IkReal x4527=(sj1*sj2);
IkReal x4528=((1.0)+(((-1.0)*x4526)));
IkReal x4529=((1.0)*cj1*cj2);
CheckValue<IkReal> x4536=IKPowWithIntegerCheck(x4528,-1);
if(!x4536.valid){
continue;
}
IkReal x4530=x4536.value;
CheckValue<IkReal> x4537=IKPowWithIntegerCheck(((-1.0)+x4526),-1);
if(!x4537.valid){
continue;
}
IkReal x4531=x4537.value;
IkReal x4532=((1.0)*x4530);
if((x4528) < -0.00001)
continue;
IkReal x4533=IKsqrt(x4528);
IkReal x4534=(r12*r22*x4531*x4533);
IkReal x4535=((((-1.0)*x4532*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x4530))+(((-1.0)*x4532*(r11*r11)*(r21*r21))));
j4eval[0]=x4535;
j4eval[1]=IKsign(x4535);
j4eval[2]=((IKabs(((((-1.0)*r22*x4529))+((r22*x4527)))))+(IKabs((((x4527*x4534))+(((-1.0)*x4529*x4534))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4538=(gconst103*r21);
IkReal x4539=(sj1*sj2);
IkReal x4540=(cj1*cj2);
IkReal x4541=(gconst104*r20);
CheckValue<IkReal> x4542 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4540))+((r22*x4539)))),IkReal((((x4538*x4539))+((x4540*x4541))+(((-1.0)*x4539*x4541))+(((-1.0)*x4538*x4540)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4542.valid){
continue;
}
CheckValue<IkReal> x4543=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x4538*x4538)))+(((2.0)*x4538*x4541))+(((-1.0)*(x4541*x4541)))+(((-1.0)*(r22*r22))))),-1);
if(!x4543.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4542.value)+(((1.5707963267949)*(x4543.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4544=IKsin(j4);
IkReal x4545=IKcos(j4);
IkReal x4546=(gconst103*r11);
IkReal x4547=(cj2*sj1);
IkReal x4548=((1.0)*cj1);
IkReal x4549=((1.0)*cj0);
IkReal x4550=((1.0)*x4545);
IkReal x4551=(gconst103*x4545);
IkReal x4552=(gconst103*x4544);
IkReal x4553=((1.0)*gconst104*x4544);
evalcond[0]=((((-1.0)*r20*x4553))+((r21*x4552))+(((-1.0)*r22*x4550)));
evalcond[1]=((((-1.0)*r00*x4553))+((r01*x4552))+(((-1.0)*r02*x4550))+(((-1.0)*x4549)));
evalcond[2]=((((-1.0)*r12*x4550))+(((-1.0)*sj0))+(((-1.0)*r10*x4553))+((x4544*x4546)));
evalcond[3]=(((r22*x4544))+((sj1*sj2))+(((-1.0)*gconst104*r20*x4550))+(((-1.0)*cj2*x4548))+((r21*x4551)));
evalcond[4]=(((r01*x4551))+((r02*x4544))+(((-1.0)*gconst104*r00*x4550))+((cj1*sj0*sj2))+((sj0*x4547)));
evalcond[5]=((((-1.0)*x4547*x4549))+(((-1.0)*gconst104*r10*x4550))+((x4545*x4546))+((r12*x4544))+(((-1.0)*cj0*sj2*x4548)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4554=((1.0)*cj0);
IkReal x4555=((1.0)*gconst104);
CheckValue<IkReal> x4556 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4554))+((r02*sj0)))),IkReal(((((-1.0)*gconst103*r11*x4554))+(((-1.0)*r00*sj0*x4555))+((gconst103*r01*sj0))+((cj0*gconst104*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4556.valid){
continue;
}
CheckValue<IkReal> x4557=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r20))+(((-1.0)*r21*x4555)))),-1);
if(!x4557.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4556.value)+(((1.5707963267949)*(x4557.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4558=IKsin(j4);
IkReal x4559=IKcos(j4);
IkReal x4560=(gconst103*r11);
IkReal x4561=(cj2*sj1);
IkReal x4562=((1.0)*cj1);
IkReal x4563=((1.0)*cj0);
IkReal x4564=((1.0)*x4559);
IkReal x4565=(gconst103*x4559);
IkReal x4566=(gconst103*x4558);
IkReal x4567=((1.0)*gconst104*x4558);
evalcond[0]=((((-1.0)*r20*x4567))+((r21*x4566))+(((-1.0)*r22*x4564)));
evalcond[1]=((((-1.0)*r00*x4567))+(((-1.0)*r02*x4564))+((r01*x4566))+(((-1.0)*x4563)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r10*x4567))+(((-1.0)*r12*x4564))+((x4558*x4560)));
evalcond[3]=((((-1.0)*cj2*x4562))+(((-1.0)*gconst104*r20*x4564))+((sj1*sj2))+((r21*x4565))+((r22*x4558)));
evalcond[4]=(((sj0*x4561))+(((-1.0)*gconst104*r00*x4564))+((cj1*sj0*sj2))+((r02*x4558))+((r01*x4565)));
evalcond[5]=(((r12*x4558))+(((-1.0)*cj0*sj2*x4562))+(((-1.0)*x4561*x4563))+((x4559*x4560))+(((-1.0)*gconst104*r10*x4564)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4568 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst103*r21*sj0))+(((-1.0)*gconst104*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4568.valid){
continue;
}
CheckValue<IkReal> x4569=IKPowWithIntegerCheck(IKsign((((gconst103*r00))+((gconst104*r01)))),-1);
if(!x4569.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4568.value)+(((1.5707963267949)*(x4569.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4570=IKsin(j4);
IkReal x4571=IKcos(j4);
IkReal x4572=(gconst103*r11);
IkReal x4573=(cj2*sj1);
IkReal x4574=((1.0)*cj1);
IkReal x4575=((1.0)*cj0);
IkReal x4576=((1.0)*x4571);
IkReal x4577=(gconst103*x4571);
IkReal x4578=(gconst103*x4570);
IkReal x4579=((1.0)*gconst104*x4570);
evalcond[0]=(((r21*x4578))+(((-1.0)*r22*x4576))+(((-1.0)*r20*x4579)));
evalcond[1]=((((-1.0)*r00*x4579))+(((-1.0)*x4575))+(((-1.0)*r02*x4576))+((r01*x4578)));
evalcond[2]=((((-1.0)*sj0))+((x4570*x4572))+(((-1.0)*r12*x4576))+(((-1.0)*r10*x4579)));
evalcond[3]=((((-1.0)*gconst104*r20*x4576))+((r22*x4570))+(((-1.0)*cj2*x4574))+((r21*x4577))+((sj1*sj2)));
evalcond[4]=((((-1.0)*gconst104*r00*x4576))+((sj0*x4573))+((r02*x4570))+((cj1*sj0*sj2))+((r01*x4577)));
evalcond[5]=(((r12*x4570))+(((-1.0)*cj0*sj2*x4574))+((x4571*x4572))+(((-1.0)*gconst104*r10*x4576))+(((-1.0)*x4573*x4575)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4580=((-1.0)*r11);
IkReal x4582 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4582)==0){
continue;
}
IkReal x4581=pow(x4582,-0.5);
CheckValue<IkReal> x4583 = IKatan2WithCheck(IkReal(x4580),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4583.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x4583.value))));
IkReal gconst106=(x4580*x4581);
IkReal gconst107=((1.0)*r10*x4581);
CheckValue<IkReal> x4584 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4584.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4584.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4585=((-1.0)*r11);
CheckValue<IkReal> x4588 = IKatan2WithCheck(IkReal(x4585),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4588.valid){
continue;
}
IkReal x4586=((1.0)*(x4588.value));
IkReal x4587=x4581;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4586)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4586)));
IkReal gconst106=(x4585*x4587);
IkReal gconst107=((1.0)*r10*x4587);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x4589=((-1.0)*r11);
CheckValue<IkReal> x4592 = IKatan2WithCheck(IkReal(x4589),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4592.valid){
continue;
}
IkReal x4590=((1.0)*(x4592.value));
IkReal x4591=x4581;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4590)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4590)));
IkReal gconst106=(x4589*x4591);
IkReal gconst107=((1.0)*r10*x4591);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r12*r12))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4593=((1.0)*cj0);
IkReal x4594=((1.0)*gconst107);
CheckValue<IkReal> x4595 = IKatan2WithCheck(IkReal((((r02*sj0))+(((-1.0)*r12*x4593)))),IkReal(((((-1.0)*gconst106*r11*x4593))+(((-1.0)*r00*sj0*x4594))+((gconst106*r01*sj0))+((cj0*gconst107*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4595.valid){
continue;
}
CheckValue<IkReal> x4596=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst106*r20))+(((-1.0)*r21*x4594)))),-1);
if(!x4596.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4595.value)+(((1.5707963267949)*(x4596.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4597=IKsin(j4);
IkReal x4598=IKcos(j4);
IkReal x4599=(gconst106*r21);
IkReal x4600=(cj2*sj1);
IkReal x4601=(gconst107*r10);
IkReal x4602=(gconst107*r00);
IkReal x4603=((1.0)*cj1);
IkReal x4604=(gconst107*r20);
IkReal x4605=((1.0)*cj0);
IkReal x4606=((1.0)*x4598);
IkReal x4607=(gconst106*x4597);
IkReal x4608=((1.0)*x4597);
IkReal x4609=(gconst106*x4598);
evalcond[0]=(((x4597*x4599))+(((-1.0)*x4604*x4608))+(((-1.0)*r22*x4606)));
evalcond[1]=((((-1.0)*x4605))+((r01*x4607))+(((-1.0)*r02*x4606))+(((-1.0)*x4602*x4608)));
evalcond[2]=(((r11*x4607))+(((-1.0)*sj0))+(((-1.0)*x4601*x4608))+(((-1.0)*r12*x4606)));
evalcond[3]=(((r22*x4597))+((x4598*x4599))+((sj1*sj2))+(((-1.0)*cj2*x4603))+(((-1.0)*x4604*x4606)));
evalcond[4]=(((r01*x4609))+((r02*x4597))+((sj0*x4600))+(((-1.0)*x4602*x4606))+((cj1*sj0*sj2)));
evalcond[5]=(((r11*x4609))+(((-1.0)*x4600*x4605))+(((-1.0)*x4601*x4606))+((r12*x4597))+(((-1.0)*cj0*sj2*x4603)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4610=((1.0)*gconst107);
CheckValue<IkReal> x4611 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst106*r21))+(((-1.0)*cj0*r20*x4610)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4611.valid){
continue;
}
CheckValue<IkReal> x4612=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst106*r10))+(((-1.0)*r11*x4610)))),-1);
if(!x4612.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4611.value)+(((1.5707963267949)*(x4612.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4613=IKsin(j4);
IkReal x4614=IKcos(j4);
IkReal x4615=(gconst106*r21);
IkReal x4616=(cj2*sj1);
IkReal x4617=(gconst107*r10);
IkReal x4618=(gconst107*r00);
IkReal x4619=((1.0)*cj1);
IkReal x4620=(gconst107*r20);
IkReal x4621=((1.0)*cj0);
IkReal x4622=((1.0)*x4614);
IkReal x4623=(gconst106*x4613);
IkReal x4624=((1.0)*x4613);
IkReal x4625=(gconst106*x4614);
evalcond[0]=((((-1.0)*r22*x4622))+(((-1.0)*x4620*x4624))+((x4613*x4615)));
evalcond[1]=((((-1.0)*r02*x4622))+(((-1.0)*x4618*x4624))+((r01*x4623))+(((-1.0)*x4621)));
evalcond[2]=((((-1.0)*sj0))+((r11*x4623))+(((-1.0)*r12*x4622))+(((-1.0)*x4617*x4624)));
evalcond[3]=(((sj1*sj2))+((r22*x4613))+((x4614*x4615))+(((-1.0)*x4620*x4622))+(((-1.0)*cj2*x4619)));
evalcond[4]=(((sj0*x4616))+((r02*x4613))+(((-1.0)*x4618*x4622))+((cj1*sj0*sj2))+((r01*x4625)));
evalcond[5]=(((r11*x4625))+((r12*x4613))+(((-1.0)*x4616*x4621))+(((-1.0)*cj0*sj2*x4619))+(((-1.0)*x4617*x4622)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4626=IKPowWithIntegerCheck(IKsign((((gconst107*r01))+((gconst106*r00)))),-1);
if(!x4626.valid){
continue;
}
CheckValue<IkReal> x4627 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst106*r21*sj0))+(((-1.0)*gconst107*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4627.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4626.value)))+(x4627.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4628=IKsin(j4);
IkReal x4629=IKcos(j4);
IkReal x4630=(gconst106*r21);
IkReal x4631=(cj2*sj1);
IkReal x4632=(gconst107*r10);
IkReal x4633=(gconst107*r00);
IkReal x4634=((1.0)*cj1);
IkReal x4635=(gconst107*r20);
IkReal x4636=((1.0)*cj0);
IkReal x4637=((1.0)*x4629);
IkReal x4638=(gconst106*x4628);
IkReal x4639=((1.0)*x4628);
IkReal x4640=(gconst106*x4629);
evalcond[0]=((((-1.0)*x4635*x4639))+((x4628*x4630))+(((-1.0)*r22*x4637)));
evalcond[1]=(((r01*x4638))+(((-1.0)*x4636))+(((-1.0)*r02*x4637))+(((-1.0)*x4633*x4639)));
evalcond[2]=((((-1.0)*sj0))+((r11*x4638))+(((-1.0)*r12*x4637))+(((-1.0)*x4632*x4639)));
evalcond[3]=((((-1.0)*x4635*x4637))+((sj1*sj2))+((x4629*x4630))+(((-1.0)*cj2*x4634))+((r22*x4628)));
evalcond[4]=(((sj0*x4631))+((r02*x4628))+((cj1*sj0*sj2))+((r01*x4640))+(((-1.0)*x4633*x4637)));
evalcond[5]=(((r12*x4628))+((r11*x4640))+(((-1.0)*x4631*x4636))+(((-1.0)*cj0*sj2*x4634))+(((-1.0)*x4632*x4637)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4641=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4641;
j4eval[1]=IKsign(x4641);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4642=((1.0)*cj5);
IkReal x4643=((((-1.0)*r21*x4642))+(((-1.0)*r20*sj5)));
j4eval[0]=x4643;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x4642))))));
j4eval[2]=IKsign(x4643);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4644=cj5*cj5;
IkReal x4645=r11*r11;
IkReal x4646=(r11*sj5);
IkReal x4647=(cj5*r10);
IkReal x4648=(((x4644*(r10*r10)))+(r12*r12)+x4645+(((-1.0)*x4644*x4645))+(((-2.0)*x4646*x4647)));
j4eval[0]=x4648;
j4eval[1]=IKsign(x4648);
j4eval[2]=((IKabs(r12))+(IKabs((x4646+(((-1.0)*x4647))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4649=cj5*cj5;
IkReal x4650=r11*r11;
IkReal x4651=(cj5*r10);
IkReal x4652=(r11*sj5);
CheckValue<IkReal> x4653=IKPowWithIntegerCheck(IKsign(((((-2.0)*x4651*x4652))+(r12*r12)+x4650+(((-1.0)*x4649*x4650))+((x4649*(r10*r10))))),-1);
if(!x4653.valid){
continue;
}
CheckValue<IkReal> x4654 = IKatan2WithCheck(IkReal((x4652+(((-1.0)*x4651)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4654.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4653.value)))+(x4654.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4655=IKcos(j4);
IkReal x4656=IKsin(j4);
IkReal x4657=(cj5*r00);
IkReal x4658=(cj5*r10);
IkReal x4659=(r21*sj5);
IkReal x4660=(cj5*r20);
IkReal x4661=((1.0)*x4655);
IkReal x4662=((1.0)*x4656);
IkReal x4663=(sj5*x4656);
IkReal x4664=(sj5*x4655);
evalcond[0]=(((r12*x4656))+(((-1.0)*x4658*x4661))+((r11*x4664)));
evalcond[1]=((((-1.0)*x4660*x4662))+((x4656*x4659))+(((-1.0)*r22*x4661)));
evalcond[2]=(((r01*x4663))+(((-1.0)*x4657*x4662))+(((-1.0)*r02*x4661)));
evalcond[3]=((-1.0)+(((-1.0)*x4658*x4662))+((r11*x4663))+(((-1.0)*r12*x4661)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r01*x4664))+((r02*x4656))+(((-1.0)*x4657*x4661)));
evalcond[5]=((((-1.0)*cj1*cj2))+(((-1.0)*x4660*x4661))+((sj1*sj2))+((r22*x4656))+((x4655*x4659)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4665=((1.0)*cj5);
CheckValue<IkReal> x4666=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4665))+(((-1.0)*r20*sj5)))),-1);
if(!x4666.valid){
continue;
}
CheckValue<IkReal> x4667 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x4665)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4667.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4666.value)))+(x4667.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4668=IKcos(j4);
IkReal x4669=IKsin(j4);
IkReal x4670=(cj5*r00);
IkReal x4671=(cj5*r10);
IkReal x4672=(r21*sj5);
IkReal x4673=(cj5*r20);
IkReal x4674=((1.0)*x4668);
IkReal x4675=((1.0)*x4669);
IkReal x4676=(sj5*x4669);
IkReal x4677=(sj5*x4668);
evalcond[0]=(((r12*x4669))+((r11*x4677))+(((-1.0)*x4671*x4674)));
evalcond[1]=(((x4669*x4672))+(((-1.0)*r22*x4674))+(((-1.0)*x4673*x4675)));
evalcond[2]=((((-1.0)*r02*x4674))+((r01*x4676))+(((-1.0)*x4670*x4675)));
evalcond[3]=((-1.0)+((r11*x4676))+(((-1.0)*r12*x4674))+(((-1.0)*x4671*x4675)));
evalcond[4]=(((cj2*sj1))+((r02*x4669))+((cj1*sj2))+((r01*x4677))+(((-1.0)*x4670*x4674)));
evalcond[5]=(((x4668*x4672))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4669))+(((-1.0)*x4673*x4674)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4678 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4678.valid){
continue;
}
CheckValue<IkReal> x4679=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4679.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4678.value)+(((1.5707963267949)*(x4679.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4680=IKcos(j4);
IkReal x4681=IKsin(j4);
IkReal x4682=(cj5*r00);
IkReal x4683=(cj5*r10);
IkReal x4684=(r21*sj5);
IkReal x4685=(cj5*r20);
IkReal x4686=((1.0)*x4680);
IkReal x4687=((1.0)*x4681);
IkReal x4688=(sj5*x4681);
IkReal x4689=(sj5*x4680);
evalcond[0]=((((-1.0)*x4683*x4686))+((r12*x4681))+((r11*x4689)));
evalcond[1]=(((x4681*x4684))+(((-1.0)*x4685*x4687))+(((-1.0)*r22*x4686)));
evalcond[2]=((((-1.0)*x4682*x4687))+(((-1.0)*r02*x4686))+((r01*x4688)));
evalcond[3]=((-1.0)+(((-1.0)*x4683*x4687))+((r11*x4688))+(((-1.0)*r12*x4686)));
evalcond[4]=(((cj2*sj1))+((r02*x4681))+((cj1*sj2))+(((-1.0)*x4682*x4686))+((r01*x4689)));
evalcond[5]=(((x4680*x4684))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4681))+(((-1.0)*x4685*x4686)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4690=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4690;
j4eval[1]=IKsign(x4690);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4691=((1.0)*cj5);
IkReal x4692=((((-1.0)*r01*x4691))+(((-1.0)*r00*sj5)));
j4eval[0]=x4692;
j4eval[1]=((IKabs(((((-1.0)*r20*x4691))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4692);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4693=(sj1*sj2);
IkReal x4694=(cj5*r10);
IkReal x4695=(r11*sj5);
IkReal x4696=(cj1*cj2);
IkReal x4697=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x4697;
j4eval[1]=((IKabs(((((-1.0)*r12*x4693))+((r12*x4696)))))+(IKabs(((((-1.0)*x4695*x4696))+((x4693*x4695))+(((-1.0)*x4693*x4694))+((x4694*x4696))))));
j4eval[2]=IKsign(x4697);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4698=(sj1*sj2);
IkReal x4699=(cj5*r10);
IkReal x4700=(r11*sj5);
IkReal x4701=(cj1*cj2);
CheckValue<IkReal> x4702 = IKatan2WithCheck(IkReal(((((-1.0)*x4700*x4701))+((x4698*x4700))+((x4699*x4701))+(((-1.0)*x4698*x4699)))),IkReal(((((-1.0)*r12*x4698))+((r12*x4701)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4702.valid){
continue;
}
CheckValue<IkReal> x4703=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x4703.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4702.value)+(((1.5707963267949)*(x4703.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4704=IKcos(j4);
IkReal x4705=IKsin(j4);
IkReal x4706=(cj5*r00);
IkReal x4707=(cj5*r10);
IkReal x4708=(r21*sj5);
IkReal x4709=((1.0)*cj2);
IkReal x4710=(cj5*r20);
IkReal x4711=((1.0)*x4704);
IkReal x4712=((1.0)*x4705);
IkReal x4713=(sj5*x4705);
IkReal x4714=(sj5*x4704);
evalcond[0]=((((-1.0)*x4707*x4711))+((r11*x4714))+((r12*x4705)));
evalcond[1]=((((-1.0)*r22*x4711))+(((-1.0)*x4710*x4712))+((x4705*x4708)));
evalcond[2]=((((-1.0)*r02*x4711))+((r01*x4713))+(((-1.0)*x4706*x4712)));
evalcond[3]=((1.0)+(((-1.0)*r12*x4711))+(((-1.0)*x4707*x4712))+((r11*x4713)));
evalcond[4]=((((-1.0)*x4710*x4711))+((sj1*sj2))+((x4704*x4708))+(((-1.0)*cj1*x4709))+((r22*x4705)));
evalcond[5]=(((r01*x4714))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4709))+((r02*x4705))+(((-1.0)*x4706*x4711)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4715=((1.0)*cj5);
CheckValue<IkReal> x4716=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4715)))),-1);
if(!x4716.valid){
continue;
}
CheckValue<IkReal> x4717 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x4715)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4717.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4716.value)))+(x4717.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4718=IKcos(j4);
IkReal x4719=IKsin(j4);
IkReal x4720=(cj5*r00);
IkReal x4721=(cj5*r10);
IkReal x4722=(r21*sj5);
IkReal x4723=((1.0)*cj2);
IkReal x4724=(cj5*r20);
IkReal x4725=((1.0)*x4718);
IkReal x4726=((1.0)*x4719);
IkReal x4727=(sj5*x4719);
IkReal x4728=(sj5*x4718);
evalcond[0]=(((r11*x4728))+((r12*x4719))+(((-1.0)*x4721*x4725)));
evalcond[1]=((((-1.0)*x4724*x4726))+((x4719*x4722))+(((-1.0)*r22*x4725)));
evalcond[2]=(((r01*x4727))+(((-1.0)*r02*x4725))+(((-1.0)*x4720*x4726)));
evalcond[3]=((1.0)+((r11*x4727))+(((-1.0)*r12*x4725))+(((-1.0)*x4721*x4726)));
evalcond[4]=(((r22*x4719))+(((-1.0)*cj1*x4723))+((sj1*sj2))+(((-1.0)*x4724*x4725))+((x4718*x4722)));
evalcond[5]=((((-1.0)*sj1*x4723))+(((-1.0)*cj1*sj2))+((r01*x4728))+(((-1.0)*x4720*x4725))+((r02*x4719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4729=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4729.valid){
continue;
}
CheckValue<IkReal> x4730 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4730.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4729.value)))+(x4730.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4731=IKcos(j4);
IkReal x4732=IKsin(j4);
IkReal x4733=(cj5*r00);
IkReal x4734=(cj5*r10);
IkReal x4735=(r21*sj5);
IkReal x4736=((1.0)*cj2);
IkReal x4737=(cj5*r20);
IkReal x4738=((1.0)*x4731);
IkReal x4739=((1.0)*x4732);
IkReal x4740=(sj5*x4732);
IkReal x4741=(sj5*x4731);
evalcond[0]=(((r11*x4741))+(((-1.0)*x4734*x4738))+((r12*x4732)));
evalcond[1]=((((-1.0)*x4737*x4739))+((x4732*x4735))+(((-1.0)*r22*x4738)));
evalcond[2]=(((r01*x4740))+(((-1.0)*x4733*x4739))+(((-1.0)*r02*x4738)));
evalcond[3]=((1.0)+((r11*x4740))+(((-1.0)*x4734*x4739))+(((-1.0)*r12*x4738)));
evalcond[4]=((((-1.0)*cj1*x4736))+((x4731*x4735))+(((-1.0)*x4737*x4738))+((sj1*sj2))+((r22*x4732)));
evalcond[5]=((((-1.0)*sj1*x4736))+((r01*x4741))+(((-1.0)*cj1*sj2))+(((-1.0)*x4733*x4738))+((r02*x4732)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4743 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4743)==0){
continue;
}
IkReal x4742=pow(x4743,-0.5);
CheckValue<IkReal> x4744 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4744.valid){
continue;
}
IkReal gconst108=((-1.0)*(x4744.value));
IkReal gconst109=((-1.0)*r01*x4742);
IkReal gconst110=(r00*x4742);
CheckValue<IkReal> x4745 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4745.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4745.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x4748 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4748.valid){
continue;
}
IkReal x4746=((-1.0)*(x4748.value));
IkReal x4747=x4742;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x4746;
IkReal gconst108=x4746;
IkReal gconst109=((-1.0)*r01*x4747);
IkReal gconst110=(r00*x4747);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x4751 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4751.valid){
continue;
}
IkReal x4749=((-1.0)*(x4751.value));
IkReal x4750=x4742;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x4749;
IkReal gconst108=x4749;
IkReal gconst109=((-1.0)*r01*x4750);
IkReal gconst110=(r00*x4750);
IkReal x4752=r02*r02;
IkReal x4753=(cj0*r12);
IkReal x4754=((1.0)*x4752);
CheckValue<IkReal> x4758=IKPowWithIntegerCheck(((-1.0)+x4752),-1);
if(!x4758.valid){
continue;
}
IkReal x4755=x4758.value;
if((((1.0)+(((-1.0)*x4754)))) < -0.00001)
continue;
IkReal x4756=IKsqrt(((1.0)+(((-1.0)*x4754))));
IkReal x4757=(x4755*x4756);
j4eval[0]=((IKabs(((((-1.0)*sj0*x4754*x4757))+((sj0*x4757))+((r02*x4753*x4757)))))+(IKabs((((r02*sj0))+(((-1.0)*x4753))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x4761 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4761.valid){
continue;
}
IkReal x4759=((-1.0)*(x4761.value));
IkReal x4760=x4742;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x4759;
IkReal gconst108=x4759;
IkReal gconst109=((-1.0)*r01*x4760);
IkReal gconst110=(r00*x4760);
IkReal x4762=r02*r02;
IkReal x4763=(sj1*sj2);
IkReal x4764=(cj1*cj2);
IkReal x4765=((1.0)+(((-1.0)*x4762)));
CheckValue<IkReal> x4772=IKPowWithIntegerCheck(x4765,-1);
if(!x4772.valid){
continue;
}
IkReal x4766=x4772.value;
CheckValue<IkReal> x4773=IKPowWithIntegerCheck(((-1.0)+x4762),-1);
if(!x4773.valid){
continue;
}
IkReal x4767=x4773.value;
IkReal x4768=((1.0)*x4766);
if((x4765) < -0.00001)
continue;
IkReal x4769=IKsqrt(x4765);
IkReal x4770=(r02*r22*x4767*x4769);
IkReal x4771=((((-1.0)*(r22*r22)))+(((-2.0)*r00*r01*r20*r21*x4766))+(((-1.0)*x4768*(r01*r01)*(r21*r21)))+(((-1.0)*x4768*(r00*r00)*(r20*r20))));
j4eval[0]=x4771;
j4eval[1]=((IKabs(((((-1.0)*x4763*x4770))+((x4764*x4770)))))+(IKabs((((r22*x4763))+(((-1.0)*r22*x4764))))));
j4eval[2]=IKsign(x4771);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4774=(gconst110*r20);
IkReal x4775=(gconst109*r21);
IkReal x4776=(sj1*sj2);
IkReal x4777=(cj1*cj2);
CheckValue<IkReal> x4778 = IKatan2WithCheck(IkReal((((r22*x4776))+(((-1.0)*r22*x4777)))),IkReal(((((-1.0)*x4775*x4777))+((x4775*x4776))+(((-1.0)*x4774*x4776))+((x4774*x4777)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4778.valid){
continue;
}
CheckValue<IkReal> x4779=IKPowWithIntegerCheck(IKsign(((((2.0)*x4774*x4775))+(((-1.0)*(x4775*x4775)))+(((-1.0)*(x4774*x4774)))+(((-1.0)*(r22*r22))))),-1);
if(!x4779.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4778.value)+(((1.5707963267949)*(x4779.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4780=IKsin(j4);
IkReal x4781=IKcos(j4);
IkReal x4782=(gconst109*r21);
IkReal x4783=(cj2*sj1);
IkReal x4784=((1.0)*cj1);
IkReal x4785=((1.0)*cj0);
IkReal x4786=((1.0)*x4781);
IkReal x4787=(gconst109*x4780);
IkReal x4788=(gconst109*x4781);
IkReal x4789=((1.0)*gconst110*x4780);
evalcond[0]=(((x4780*x4782))+(((-1.0)*r20*x4789))+(((-1.0)*r22*x4786)));
evalcond[1]=(((r01*x4787))+(((-1.0)*r00*x4789))+(((-1.0)*r02*x4786))+(((-1.0)*x4785)));
evalcond[2]=((((-1.0)*sj0))+((r11*x4787))+(((-1.0)*r10*x4789))+(((-1.0)*r12*x4786)));
evalcond[3]=((((-1.0)*gconst110*r20*x4786))+((r22*x4780))+((sj1*sj2))+(((-1.0)*cj2*x4784))+((x4781*x4782)));
evalcond[4]=(((sj0*x4783))+((r02*x4780))+((r01*x4788))+(((-1.0)*gconst110*r00*x4786))+((cj1*sj0*sj2)));
evalcond[5]=(((r12*x4780))+(((-1.0)*cj0*sj2*x4784))+(((-1.0)*x4783*x4785))+((r11*x4788))+(((-1.0)*gconst110*r10*x4786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4790=((1.0)*cj0);
IkReal x4791=((1.0)*gconst110);
CheckValue<IkReal> x4792=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst109*r20))+(((-1.0)*r21*x4791)))),-1);
if(!x4792.valid){
continue;
}
CheckValue<IkReal> x4793 = IKatan2WithCheck(IkReal((((r02*sj0))+(((-1.0)*r12*x4790)))),IkReal((((cj0*gconst110*r10))+((gconst109*r01*sj0))+(((-1.0)*gconst109*r11*x4790))+(((-1.0)*r00*sj0*x4791)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4793.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4792.value)))+(x4793.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4794=IKsin(j4);
IkReal x4795=IKcos(j4);
IkReal x4796=(gconst109*r21);
IkReal x4797=(cj2*sj1);
IkReal x4798=((1.0)*cj1);
IkReal x4799=((1.0)*cj0);
IkReal x4800=((1.0)*x4795);
IkReal x4801=(gconst109*x4794);
IkReal x4802=(gconst109*x4795);
IkReal x4803=((1.0)*gconst110*x4794);
evalcond[0]=((((-1.0)*r22*x4800))+(((-1.0)*r20*x4803))+((x4794*x4796)));
evalcond[1]=(((r01*x4801))+(((-1.0)*r00*x4803))+(((-1.0)*x4799))+(((-1.0)*r02*x4800)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r10*x4803))+(((-1.0)*r12*x4800))+((r11*x4801)));
evalcond[3]=(((x4795*x4796))+((sj1*sj2))+(((-1.0)*gconst110*r20*x4800))+(((-1.0)*cj2*x4798))+((r22*x4794)));
evalcond[4]=(((sj0*x4797))+((r01*x4802))+(((-1.0)*gconst110*r00*x4800))+((cj1*sj0*sj2))+((r02*x4794)));
evalcond[5]=((((-1.0)*gconst110*r10*x4800))+(((-1.0)*x4797*x4799))+(((-1.0)*cj0*sj2*x4798))+((r12*x4794))+((r11*x4802)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4804=((1.0)*gconst110);
CheckValue<IkReal> x4805 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst109*r21))+(((-1.0)*cj0*r20*x4804)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4805.valid){
continue;
}
CheckValue<IkReal> x4806=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4804))+(((-1.0)*gconst109*r10)))),-1);
if(!x4806.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4805.value)+(((1.5707963267949)*(x4806.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4807=IKsin(j4);
IkReal x4808=IKcos(j4);
IkReal x4809=(gconst109*r21);
IkReal x4810=(cj2*sj1);
IkReal x4811=((1.0)*cj1);
IkReal x4812=((1.0)*cj0);
IkReal x4813=((1.0)*x4808);
IkReal x4814=(gconst109*x4807);
IkReal x4815=(gconst109*x4808);
IkReal x4816=((1.0)*gconst110*x4807);
evalcond[0]=((((-1.0)*r22*x4813))+(((-1.0)*r20*x4816))+((x4807*x4809)));
evalcond[1]=((((-1.0)*r00*x4816))+(((-1.0)*x4812))+(((-1.0)*r02*x4813))+((r01*x4814)));
evalcond[2]=((((-1.0)*sj0))+((r11*x4814))+(((-1.0)*r10*x4816))+(((-1.0)*r12*x4813)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj2*x4811))+((r22*x4807))+((x4808*x4809))+(((-1.0)*gconst110*r20*x4813)));
evalcond[4]=(((r02*x4807))+((cj1*sj0*sj2))+(((-1.0)*gconst110*r00*x4813))+((sj0*x4810))+((r01*x4815)));
evalcond[5]=(((r11*x4815))+(((-1.0)*cj0*sj2*x4811))+((r12*x4807))+(((-1.0)*gconst110*r10*x4813))+(((-1.0)*x4810*x4812)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4818 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4818)==0){
continue;
}
IkReal x4817=pow(x4818,-0.5);
CheckValue<IkReal> x4819 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4819.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x4819.value))));
IkReal gconst112=((1.0)*r01*x4817);
IkReal gconst113=((-1.0)*r00*x4817);
CheckValue<IkReal> x4820 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4820.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4820.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x4823 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4823.valid){
continue;
}
IkReal x4821=((1.0)*(x4823.value));
IkReal x4822=x4817;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4821)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4821)));
IkReal gconst112=((1.0)*r01*x4822);
IkReal gconst113=((-1.0)*r00*x4822);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=sj0;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x4826 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4826.valid){
continue;
}
IkReal x4824=((1.0)*(x4826.value));
IkReal x4825=x4817;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4824)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4824)));
IkReal gconst112=((1.0)*r01*x4825);
IkReal gconst113=((-1.0)*r00*x4825);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4827=((1.0)*cj0);
IkReal x4828=((1.0)*gconst113);
CheckValue<IkReal> x4829 = IKatan2WithCheck(IkReal((((r02*sj0))+(((-1.0)*r12*x4827)))),IkReal((((cj0*gconst113*r10))+(((-1.0)*r00*sj0*x4828))+((gconst112*r01*sj0))+(((-1.0)*gconst112*r11*x4827)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4829.valid){
continue;
}
CheckValue<IkReal> x4830=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst112*r20))+(((-1.0)*r21*x4828)))),-1);
if(!x4830.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4829.value)+(((1.5707963267949)*(x4830.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4831=IKsin(j4);
IkReal x4832=IKcos(j4);
IkReal x4833=(cj2*sj1);
IkReal x4834=(gconst113*r20);
IkReal x4835=(gconst112*r21);
IkReal x4836=((1.0)*cj1);
IkReal x4837=(gconst113*r00);
IkReal x4838=(gconst112*r11);
IkReal x4839=((1.0)*cj0);
IkReal x4840=(gconst113*r10);
IkReal x4841=(gconst112*r01);
IkReal x4842=((1.0)*x4832);
IkReal x4843=((1.0)*x4831);
evalcond[0]=((((-1.0)*x4834*x4843))+((x4831*x4835))+(((-1.0)*r22*x4842)));
evalcond[1]=((((-1.0)*x4837*x4843))+((x4831*x4841))+(((-1.0)*r02*x4842))+(((-1.0)*x4839)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x4840*x4843))+(((-1.0)*r12*x4842))+((x4831*x4838)));
evalcond[3]=(((sj1*sj2))+((r22*x4831))+(((-1.0)*x4834*x4842))+((x4832*x4835))+(((-1.0)*cj2*x4836)));
evalcond[4]=((((-1.0)*x4837*x4842))+((x4832*x4841))+((cj1*sj0*sj2))+((sj0*x4833))+((r02*x4831)));
evalcond[5]=(((r12*x4831))+(((-1.0)*x4833*x4839))+(((-1.0)*x4840*x4842))+(((-1.0)*cj0*sj2*x4836))+((x4832*x4838)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4844=((1.0)*gconst113);
CheckValue<IkReal> x4845=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst112*r10))+(((-1.0)*r11*x4844)))),-1);
if(!x4845.valid){
continue;
}
CheckValue<IkReal> x4846 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst112*r21))+(((-1.0)*cj0*r20*x4844)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4846.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4845.value)))+(x4846.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4847=IKsin(j4);
IkReal x4848=IKcos(j4);
IkReal x4849=(cj2*sj1);
IkReal x4850=(gconst113*r20);
IkReal x4851=(gconst112*r21);
IkReal x4852=((1.0)*cj1);
IkReal x4853=(gconst113*r00);
IkReal x4854=(gconst112*r11);
IkReal x4855=((1.0)*cj0);
IkReal x4856=(gconst113*r10);
IkReal x4857=(gconst112*r01);
IkReal x4858=((1.0)*x4848);
IkReal x4859=((1.0)*x4847);
evalcond[0]=((((-1.0)*r22*x4858))+(((-1.0)*x4850*x4859))+((x4847*x4851)));
evalcond[1]=((((-1.0)*x4853*x4859))+(((-1.0)*x4855))+(((-1.0)*r02*x4858))+((x4847*x4857)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x4856*x4859))+(((-1.0)*r12*x4858))+((x4847*x4854)));
evalcond[3]=(((x4848*x4851))+((sj1*sj2))+(((-1.0)*cj2*x4852))+((r22*x4847))+(((-1.0)*x4850*x4858)));
evalcond[4]=(((r02*x4847))+(((-1.0)*x4853*x4858))+((x4848*x4857))+((sj0*x4849))+((cj1*sj0*sj2)));
evalcond[5]=((((-1.0)*x4856*x4858))+((x4848*x4854))+(((-1.0)*cj0*sj2*x4852))+((r12*x4847))+(((-1.0)*x4849*x4855)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4860=IKPowWithIntegerCheck(IKsign((((gconst112*r00))+((gconst113*r01)))),-1);
if(!x4860.valid){
continue;
}
CheckValue<IkReal> x4861 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst112*r21*sj0))+(((-1.0)*gconst113*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4861.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4860.value)))+(x4861.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4862=IKsin(j4);
IkReal x4863=IKcos(j4);
IkReal x4864=(cj2*sj1);
IkReal x4865=(gconst113*r20);
IkReal x4866=(gconst112*r21);
IkReal x4867=((1.0)*cj1);
IkReal x4868=(gconst113*r00);
IkReal x4869=(gconst112*r11);
IkReal x4870=((1.0)*cj0);
IkReal x4871=(gconst113*r10);
IkReal x4872=(gconst112*r01);
IkReal x4873=((1.0)*x4863);
IkReal x4874=((1.0)*x4862);
evalcond[0]=((((-1.0)*r22*x4873))+((x4862*x4866))+(((-1.0)*x4865*x4874)));
evalcond[1]=((((-1.0)*x4868*x4874))+(((-1.0)*r02*x4873))+(((-1.0)*x4870))+((x4862*x4872)));
evalcond[2]=((((-1.0)*sj0))+((x4862*x4869))+(((-1.0)*x4871*x4874))+(((-1.0)*r12*x4873)));
evalcond[3]=(((r22*x4862))+((sj1*sj2))+(((-1.0)*cj2*x4867))+((x4863*x4866))+(((-1.0)*x4865*x4873)));
evalcond[4]=(((x4863*x4872))+(((-1.0)*x4868*x4873))+((cj1*sj0*sj2))+((r02*x4862))+((sj0*x4864)));
evalcond[5]=(((r12*x4862))+(((-1.0)*cj0*sj2*x4867))+((x4863*x4869))+(((-1.0)*x4871*x4873))+(((-1.0)*x4864*x4870)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4875=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4875;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4875);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4876=((1.0)*cj5);
IkReal x4877=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4876)));
j4eval[0]=x4877;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x4876)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4877);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4878=cj5*cj5;
IkReal x4879=r01*r01;
IkReal x4880=(cj5*r00);
IkReal x4881=(r01*sj5);
IkReal x4882=((((-2.0)*x4880*x4881))+(r02*r02)+((x4878*(r00*r00)))+x4879+(((-1.0)*x4878*x4879)));
j4eval[0]=x4882;
j4eval[1]=IKsign(x4882);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4880))+x4881))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4883=cj5*cj5;
IkReal x4884=r01*r01;
IkReal x4885=(r01*sj5);
IkReal x4886=(cj5*r00);
CheckValue<IkReal> x4887 = IKatan2WithCheck(IkReal(((((-1.0)*x4886))+x4885)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4887.valid){
continue;
}
CheckValue<IkReal> x4888=IKPowWithIntegerCheck(IKsign((((x4883*(r00*r00)))+(((-1.0)*x4883*x4884))+(r02*r02)+(((-2.0)*x4885*x4886))+x4884)),-1);
if(!x4888.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4887.value)+(((1.5707963267949)*(x4888.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4889=IKcos(j4);
IkReal x4890=IKsin(j4);
IkReal x4891=(cj5*r00);
IkReal x4892=(cj5*r10);
IkReal x4893=(r21*sj5);
IkReal x4894=((1.0)*cj2);
IkReal x4895=(cj5*r20);
IkReal x4896=((1.0)*x4889);
IkReal x4897=((1.0)*x4890);
IkReal x4898=(sj5*x4890);
IkReal x4899=(sj5*x4889);
evalcond[0]=(((r02*x4890))+(((-1.0)*x4891*x4896))+((r01*x4899)));
evalcond[1]=(((x4890*x4893))+(((-1.0)*x4895*x4897))+(((-1.0)*r22*x4896)));
evalcond[2]=(((r11*x4898))+(((-1.0)*r12*x4896))+(((-1.0)*x4892*x4897)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x4896))+(((-1.0)*x4891*x4897))+((r01*x4898)));
evalcond[4]=((((-1.0)*cj1*x4894))+((sj1*sj2))+((x4889*x4893))+((r22*x4890))+(((-1.0)*x4895*x4896)));
evalcond[5]=(((r11*x4899))+(((-1.0)*sj1*x4894))+((r12*x4890))+(((-1.0)*cj1*sj2))+(((-1.0)*x4892*x4896)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4900=((1.0)*cj5);
CheckValue<IkReal> x4901=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4900))+(((-1.0)*r10*sj5)))),-1);
if(!x4901.valid){
continue;
}
CheckValue<IkReal> x4902 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x4900)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4902.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4901.value)))+(x4902.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4903=IKcos(j4);
IkReal x4904=IKsin(j4);
IkReal x4905=(cj5*r00);
IkReal x4906=(cj5*r10);
IkReal x4907=(r21*sj5);
IkReal x4908=((1.0)*cj2);
IkReal x4909=(cj5*r20);
IkReal x4910=((1.0)*x4903);
IkReal x4911=((1.0)*x4904);
IkReal x4912=(sj5*x4904);
IkReal x4913=(sj5*x4903);
evalcond[0]=(((r02*x4904))+(((-1.0)*x4905*x4910))+((r01*x4913)));
evalcond[1]=((((-1.0)*x4909*x4911))+((x4904*x4907))+(((-1.0)*r22*x4910)));
evalcond[2]=((((-1.0)*r12*x4910))+(((-1.0)*x4906*x4911))+((r11*x4912)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x4910))+(((-1.0)*x4905*x4911))+((r01*x4912)));
evalcond[4]=((((-1.0)*x4909*x4910))+((x4903*x4907))+((sj1*sj2))+((r22*x4904))+(((-1.0)*cj1*x4908)));
evalcond[5]=((((-1.0)*sj1*x4908))+(((-1.0)*x4906*x4910))+(((-1.0)*cj1*sj2))+((r11*x4913))+((r12*x4904)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4914=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4914.valid){
continue;
}
CheckValue<IkReal> x4915 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4915.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4914.value)))+(x4915.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4916=IKcos(j4);
IkReal x4917=IKsin(j4);
IkReal x4918=(cj5*r00);
IkReal x4919=(cj5*r10);
IkReal x4920=(r21*sj5);
IkReal x4921=((1.0)*cj2);
IkReal x4922=(cj5*r20);
IkReal x4923=((1.0)*x4916);
IkReal x4924=((1.0)*x4917);
IkReal x4925=(sj5*x4917);
IkReal x4926=(sj5*x4916);
evalcond[0]=(((r02*x4917))+(((-1.0)*x4918*x4923))+((r01*x4926)));
evalcond[1]=(((x4917*x4920))+(((-1.0)*r22*x4923))+(((-1.0)*x4922*x4924)));
evalcond[2]=((((-1.0)*x4919*x4924))+(((-1.0)*r12*x4923))+((r11*x4925)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x4923))+(((-1.0)*x4918*x4924))+((r01*x4925)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x4921))+(((-1.0)*x4922*x4923))+((r22*x4917))+((x4916*x4920)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*x4919*x4923))+((r12*x4917))+(((-1.0)*sj1*x4921))+((r11*x4926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4927=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4927;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4927);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4928=((1.0)*cj5);
IkReal x4929=((((-1.0)*r21*x4928))+(((-1.0)*r20*sj5)));
j4eval[0]=x4929;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x4928)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4929);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4930=cj5*cj5;
IkReal x4931=r01*r01;
IkReal x4932=(r01*sj5);
IkReal x4933=(cj5*r00);
IkReal x4934=((((-1.0)*x4931))+(((-1.0)*x4930*(r00*r00)))+(((-1.0)*(r02*r02)))+((x4930*x4931))+(((2.0)*x4932*x4933)));
j4eval[0]=x4934;
j4eval[1]=IKsign(x4934);
j4eval[2]=((IKabs(r02))+(IKabs((x4932+(((-1.0)*x4933))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4935=cj5*cj5;
IkReal x4936=r01*r01;
IkReal x4937=(r01*sj5);
IkReal x4938=(cj5*r00);
CheckValue<IkReal> x4939=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4936))+((x4935*x4936))+(((-1.0)*x4935*(r00*r00)))+(((-1.0)*(r02*r02)))+(((2.0)*x4937*x4938)))),-1);
if(!x4939.valid){
continue;
}
CheckValue<IkReal> x4940 = IKatan2WithCheck(IkReal((x4937+(((-1.0)*x4938)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4940.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4939.value)))+(x4940.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4941=IKcos(j4);
IkReal x4942=IKsin(j4);
IkReal x4943=(cj5*r00);
IkReal x4944=(cj5*r10);
IkReal x4945=(r21*sj5);
IkReal x4946=(cj5*r20);
IkReal x4947=((1.0)*x4941);
IkReal x4948=((1.0)*x4942);
IkReal x4949=(sj5*x4942);
IkReal x4950=(sj5*x4941);
evalcond[0]=((((-1.0)*x4943*x4947))+((r02*x4942))+((r01*x4950)));
evalcond[1]=((((-1.0)*x4946*x4948))+(((-1.0)*r22*x4947))+((x4942*x4945)));
evalcond[2]=(((r11*x4949))+(((-1.0)*r12*x4947))+(((-1.0)*x4944*x4948)));
evalcond[3]=((1.0)+(((-1.0)*x4943*x4948))+((r01*x4949))+(((-1.0)*r02*x4947)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x4942))+((r11*x4950))+(((-1.0)*x4944*x4947)));
evalcond[5]=((((-1.0)*x4946*x4947))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4941*x4945))+((r22*x4942)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4951=((1.0)*cj5);
CheckValue<IkReal> x4952=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4951))+(((-1.0)*r20*sj5)))),-1);
if(!x4952.valid){
continue;
}
CheckValue<IkReal> x4953 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x4951)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4953.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4952.value)))+(x4953.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4954=IKcos(j4);
IkReal x4955=IKsin(j4);
IkReal x4956=(cj5*r00);
IkReal x4957=(cj5*r10);
IkReal x4958=(r21*sj5);
IkReal x4959=(cj5*r20);
IkReal x4960=((1.0)*x4954);
IkReal x4961=((1.0)*x4955);
IkReal x4962=(sj5*x4955);
IkReal x4963=(sj5*x4954);
evalcond[0]=((((-1.0)*x4956*x4960))+((r02*x4955))+((r01*x4963)));
evalcond[1]=((((-1.0)*x4959*x4961))+(((-1.0)*r22*x4960))+((x4955*x4958)));
evalcond[2]=((((-1.0)*x4957*x4961))+((r11*x4962))+(((-1.0)*r12*x4960)));
evalcond[3]=((1.0)+(((-1.0)*x4956*x4961))+(((-1.0)*r02*x4960))+((r01*x4962)));
evalcond[4]=(((cj2*sj1))+((r12*x4955))+(((-1.0)*x4957*x4960))+((cj1*sj2))+((r11*x4963)));
evalcond[5]=(((r22*x4955))+(((-1.0)*x4959*x4960))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4954*x4958)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4964 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4964.valid){
continue;
}
CheckValue<IkReal> x4965=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4965.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4964.value)+(((1.5707963267949)*(x4965.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4966=IKcos(j4);
IkReal x4967=IKsin(j4);
IkReal x4968=(cj5*r00);
IkReal x4969=(cj5*r10);
IkReal x4970=(r21*sj5);
IkReal x4971=(cj5*r20);
IkReal x4972=((1.0)*x4966);
IkReal x4973=((1.0)*x4967);
IkReal x4974=(sj5*x4967);
IkReal x4975=(sj5*x4966);
evalcond[0]=((((-1.0)*x4968*x4972))+((r02*x4967))+((r01*x4975)));
evalcond[1]=(((x4967*x4970))+(((-1.0)*x4971*x4973))+(((-1.0)*r22*x4972)));
evalcond[2]=(((r11*x4974))+(((-1.0)*r12*x4972))+(((-1.0)*x4969*x4973)));
evalcond[3]=((1.0)+(((-1.0)*x4968*x4973))+(((-1.0)*r02*x4972))+((r01*x4974)));
evalcond[4]=(((cj2*sj1))+((r12*x4967))+((cj1*sj2))+((r11*x4975))+(((-1.0)*x4969*x4972)));
evalcond[5]=(((r22*x4967))+((x4966*x4970))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4971*x4972)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4976=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4976);
rxp1_1=(px*r21);
rxp1_2=(r11*x4976);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4977=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4977);
rxp1_1=(px*r21);
rxp1_2=(r11*x4977);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4978=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4978);
rxp1_1=(px*r21);
rxp1_2=(r11*x4978);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4981=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x4981.valid){
continue;
}
IkReal x4979=x4981.value;
IkReal x4980=(cj0*x4979);
cj4array[0]=(((cj2*sj1*x4980))+((cj1*sj2*x4980)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4982=IKsin(j4);
IkReal x4983=IKcos(j4);
IkReal x4984=(r21*sj5);
IkReal x4985=((1.0)*cj5*r20);
evalcond[0]=(r02*x4982);
evalcond[1]=((((-1.0)*cj0))+(((-1.0)*r02*x4983)));
evalcond[2]=((((-1.0)*x4982*x4985))+((x4982*x4984)));
evalcond[3]=(((r11*sj5*x4982))+(((-1.0)*cj5*r10*x4982)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4983*x4985))+((x4983*x4984)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4987=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x4987.valid){
continue;
}
IkReal x4986=x4987.value;
cj4array[0]=(((cj1*cj2*x4986))+(((-1.0)*sj1*sj2*x4986)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4988=IKsin(j4);
IkReal x4989=IKcos(j4);
IkReal x4990=((1.0)*cj0);
IkReal x4991=((1.0)*cj5);
IkReal x4992=(sj5*x4988);
evalcond[0]=(r02*x4988);
evalcond[1]=((((-1.0)*x4990))+(((-1.0)*r02*x4989)));
evalcond[2]=(((r21*x4992))+(((-1.0)*r20*x4988*x4991)));
evalcond[3]=((((-1.0)*r10*x4988*x4991))+((r11*x4992)));
evalcond[4]=((((-1.0)*r10*x4989*x4991))+(((-1.0)*cj2*sj1*x4990))+((r11*sj5*x4989))+(((-1.0)*cj1*sj2*x4990)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4993=IKPowWithIntegerCheck(r02,-1);
if(!x4993.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x4993.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4994=IKsin(j4);
IkReal x4995=IKcos(j4);
IkReal x4996=((1.0)*cj1);
IkReal x4997=(r21*sj5);
IkReal x4998=((1.0)*cj5);
IkReal x4999=(r11*sj5);
evalcond[0]=(r02*x4994);
evalcond[1]=(((x4994*x4997))+(((-1.0)*r20*x4994*x4998)));
evalcond[2]=(((x4994*x4999))+(((-1.0)*r10*x4994*x4998)));
evalcond[3]=(((x4995*x4997))+((sj1*sj2))+(((-1.0)*cj2*x4996))+(((-1.0)*r20*x4995*x4998)));
evalcond[4]=(((x4995*x4999))+(((-1.0)*cj0*cj2*sj1))+(((-1.0)*cj0*sj2*x4996))+(((-1.0)*r10*x4995*x4998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5000=((1.0)*cj0);
IkReal x5001=((1.0)*cj5);
CheckValue<IkReal> x5002=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5001))+(((-1.0)*r20*sj5)))),-1);
if(!x5002.valid){
continue;
}
CheckValue<IkReal> x5003 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5000))+((r02*sj0)))),IkReal(((((-1.0)*r00*sj0*x5001))+((cj0*cj5*r10))+(((-1.0)*r11*sj5*x5000))+((r01*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5003.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5002.value)))+(x5003.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5004=IKsin(j4);
IkReal x5005=IKcos(j4);
IkReal x5006=(cj5*r00);
IkReal x5007=(cj5*r10);
IkReal x5008=(cj2*sj1);
IkReal x5009=(r21*sj5);
IkReal x5010=((1.0)*cj1);
IkReal x5011=((1.0)*cj0);
IkReal x5012=(cj5*r20);
IkReal x5013=((1.0)*x5005);
IkReal x5014=((1.0)*x5004);
IkReal x5015=(sj5*x5004);
IkReal x5016=(sj5*x5005);
evalcond[0]=((((-1.0)*r22*x5013))+(((-1.0)*x5012*x5014))+((x5004*x5009)));
evalcond[1]=((((-1.0)*r02*x5013))+(((-1.0)*x5006*x5014))+((r01*x5015))+(((-1.0)*x5011)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r12*x5013))+(((-1.0)*x5007*x5014))+((r11*x5015)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj2*x5010))+(((-1.0)*x5012*x5013))+((r22*x5004))+((x5005*x5009)));
evalcond[4]=(((r02*x5004))+((cj1*sj0*sj2))+((sj0*x5008))+(((-1.0)*x5006*x5013))+((r01*x5016)));
evalcond[5]=(((r12*x5004))+(((-1.0)*x5008*x5011))+(((-1.0)*cj0*sj2*x5010))+(((-1.0)*x5007*x5013))+((r11*x5016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5017=((1.0)*cj5);
CheckValue<IkReal> x5018 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5017)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5018.valid){
continue;
}
CheckValue<IkReal> x5019=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5017)))),-1);
if(!x5019.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5018.value)+(((1.5707963267949)*(x5019.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5020=IKsin(j4);
IkReal x5021=IKcos(j4);
IkReal x5022=(cj5*r00);
IkReal x5023=(cj5*r10);
IkReal x5024=(cj2*sj1);
IkReal x5025=(r21*sj5);
IkReal x5026=((1.0)*cj1);
IkReal x5027=((1.0)*cj0);
IkReal x5028=(cj5*r20);
IkReal x5029=((1.0)*x5021);
IkReal x5030=((1.0)*x5020);
IkReal x5031=(sj5*x5020);
IkReal x5032=(sj5*x5021);
evalcond[0]=((((-1.0)*x5028*x5030))+((x5020*x5025))+(((-1.0)*r22*x5029)));
evalcond[1]=((((-1.0)*r02*x5029))+(((-1.0)*x5022*x5030))+((r01*x5031))+(((-1.0)*x5027)));
evalcond[2]=((((-1.0)*sj0))+((r11*x5031))+(((-1.0)*r12*x5029))+(((-1.0)*x5023*x5030)));
evalcond[3]=((((-1.0)*x5028*x5029))+((x5021*x5025))+((sj1*sj2))+((r22*x5020))+(((-1.0)*cj2*x5026)));
evalcond[4]=(((r02*x5020))+((cj1*sj0*sj2))+((r01*x5032))+(((-1.0)*x5022*x5029))+((sj0*x5024)));
evalcond[5]=(((r12*x5020))+((r11*x5032))+(((-1.0)*cj0*sj2*x5026))+(((-1.0)*x5023*x5029))+(((-1.0)*x5024*x5027)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5033=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5033.valid){
continue;
}
CheckValue<IkReal> x5034 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5034.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5033.value)))+(x5034.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5035=IKsin(j4);
IkReal x5036=IKcos(j4);
IkReal x5037=(cj5*r00);
IkReal x5038=(cj5*r10);
IkReal x5039=(cj2*sj1);
IkReal x5040=(r21*sj5);
IkReal x5041=((1.0)*cj1);
IkReal x5042=((1.0)*cj0);
IkReal x5043=(cj5*r20);
IkReal x5044=((1.0)*x5036);
IkReal x5045=((1.0)*x5035);
IkReal x5046=(sj5*x5035);
IkReal x5047=(sj5*x5036);
evalcond[0]=((((-1.0)*x5043*x5045))+((x5035*x5040))+(((-1.0)*r22*x5044)));
evalcond[1]=((((-1.0)*x5042))+(((-1.0)*r02*x5044))+(((-1.0)*x5037*x5045))+((r01*x5046)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5038*x5045))+(((-1.0)*r12*x5044))+((r11*x5046)));
evalcond[3]=((((-1.0)*x5043*x5044))+((sj1*sj2))+((x5036*x5040))+(((-1.0)*cj2*x5041))+((r22*x5035)));
evalcond[4]=(((r02*x5035))+(((-1.0)*x5037*x5044))+((sj0*x5039))+((cj1*sj0*sj2))+((r01*x5047)));
evalcond[5]=(((r12*x5035))+(((-1.0)*cj0*sj2*x5041))+(((-1.0)*x5038*x5044))+(((-1.0)*x5039*x5042))+((r11*x5047)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5048=(((cj2*sj1))+((cj1*sj2)));
j0eval[0]=x5048;
j0eval[1]=((IKabs(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
j0eval[2]=IKsign(x5048);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5049=r21*r21;
IkReal x5050=cj5*cj5;
IkReal x5051=(cj2*sj1);
IkReal x5052=(cj1*sj2);
IkReal x5053=(r21*sj5);
IkReal x5054=((1.0)*cj5*r20);
IkReal x5055=(((x5049*x5050))+(((2.0)*cj5*r20*x5053))+(((-1.0)*x5049))+(((-1.0)*(r22*r22)))+(((-1.0)*x5050*(r20*r20))));
j4eval[0]=x5055;
j4eval[1]=((IKabs((((x5052*x5053))+(((-1.0)*x5052*x5054))+((x5051*x5053))+(((-1.0)*x5051*x5054)))))+(IKabs((((r22*x5051))+((r22*x5052))))));
j4eval[2]=IKsign(x5055);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5056=cj1*cj1;
IkReal x5057=(cj1*sj1);
IkReal x5058=(cj2*sj2);
j0eval[0]=(((cj2*sj1))+((cj1*sj2)));
j0eval[1]=((((1.08349267049076)*cj2*x5057))+(((1.08349267049076)*sj2*x5056))+(((2.0)*x5056*x5058))+(((2.0)*x5057*(cj2*cj2)))+(((-1.0)*x5057))+(((-1.0)*x5058)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.160559264620033)*py))+(((-1.20217186450501)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.160559264620033)*px))+(((1.20217186450501)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.160559264620033)*py))+(((-1.20217186450501)*px))))+IKsqr(((((-0.160559264620033)*px))+(((1.20217186450501)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.160559264620033)*py))+(((-1.20217186450501)*px))), ((((-0.160559264620033)*px))+(((1.20217186450501)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5059=IKcos(j0);
IkReal x5060=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.81725)*x5060))+(((-0.10915)*x5059)));
evalcond[1]=((((0.81725)*x5059))+(((-0.10915)*x5060))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5061=((1.0)*cj5);
IkReal x5062=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5061)));
j4eval[0]=x5062;
j4eval[1]=IKsign(x5062);
j4eval[2]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5061)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5063=((1.0)*cj5);
IkReal x5064=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5063)));
j4eval[0]=x5064;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5063)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5064);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5065=cj5*cj5;
IkReal x5066=((1.0)*r20);
IkReal x5067=(r01*r21);
IkReal x5068=(cj5*sj5);
IkReal x5069=((((-1.0)*r02*r22))+((r00*r21*x5068))+((r01*r20*x5068))+(((-1.0)*r00*x5065*x5066))+(((-1.0)*x5067))+((x5065*x5067)));
j4eval[0]=x5069;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*cj5*sj0*x5066))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x5069);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5070=cj5*cj5;
IkReal x5071=((1.0)*r20);
IkReal x5072=(r01*r21);
IkReal x5073=(cj5*sj5);
CheckValue<IkReal> x5074=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+((r00*r21*x5073))+((x5070*x5072))+(((-1.0)*x5072))+((r01*r20*x5073))+(((-1.0)*r00*x5070*x5071)))),-1);
if(!x5074.valid){
continue;
}
CheckValue<IkReal> x5075 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*sj0*x5071))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5075.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5074.value)))+(x5075.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5076=IKcos(j4);
IkReal x5077=IKsin(j4);
IkReal x5078=((1.0)*cj0);
IkReal x5079=(cj5*r00);
IkReal x5080=(cj5*r10);
IkReal x5081=(cj5*r20);
IkReal x5082=((1.0)*x5076);
IkReal x5083=((1.0)*x5077);
IkReal x5084=(sj5*x5076);
IkReal x5085=(sj5*x5077);
evalcond[0]=(((r21*x5084))+(((-1.0)*x5081*x5082))+((r22*x5077)));
evalcond[1]=(((r21*x5085))+(((-1.0)*x5081*x5083))+(((-1.0)*r22*x5082)));
evalcond[2]=(sj0+((r01*x5084))+(((-1.0)*x5079*x5082))+((r02*x5077)));
evalcond[3]=((((-1.0)*x5078))+(((-1.0)*x5080*x5082))+((r11*x5084))+((r12*x5077)));
evalcond[4]=((((-1.0)*x5078))+((r01*x5085))+(((-1.0)*x5079*x5083))+(((-1.0)*r02*x5082)));
evalcond[5]=((((-1.0)*r12*x5082))+(((-1.0)*sj0))+(((-1.0)*x5080*x5083))+((r11*x5085)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5086=((1.0)*cj5);
CheckValue<IkReal> x5087=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5086))+(((-1.0)*r00*sj5)))),-1);
if(!x5087.valid){
continue;
}
CheckValue<IkReal> x5088 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5086)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5088.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5087.value)))+(x5088.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5089=IKcos(j4);
IkReal x5090=IKsin(j4);
IkReal x5091=((1.0)*cj0);
IkReal x5092=(cj5*r00);
IkReal x5093=(cj5*r10);
IkReal x5094=(cj5*r20);
IkReal x5095=((1.0)*x5089);
IkReal x5096=((1.0)*x5090);
IkReal x5097=(sj5*x5089);
IkReal x5098=(sj5*x5090);
evalcond[0]=(((r21*x5097))+((r22*x5090))+(((-1.0)*x5094*x5095)));
evalcond[1]=((((-1.0)*r22*x5095))+((r21*x5098))+(((-1.0)*x5094*x5096)));
evalcond[2]=(sj0+((r01*x5097))+(((-1.0)*x5092*x5095))+((r02*x5090)));
evalcond[3]=((((-1.0)*x5093*x5095))+((r11*x5097))+((r12*x5090))+(((-1.0)*x5091)));
evalcond[4]=(((r01*x5098))+(((-1.0)*x5091))+(((-1.0)*x5092*x5096))+(((-1.0)*r02*x5095)));
evalcond[5]=((((-1.0)*x5093*x5096))+(((-1.0)*sj0))+((r11*x5098))+(((-1.0)*r12*x5095)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5099=((1.0)*cj5);
CheckValue<IkReal> x5100 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x5099))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5100.valid){
continue;
}
CheckValue<IkReal> x5101=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5099))+(((-1.0)*r10*sj5)))),-1);
if(!x5101.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5100.value)+(((1.5707963267949)*(x5101.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5102=IKcos(j4);
IkReal x5103=IKsin(j4);
IkReal x5104=((1.0)*cj0);
IkReal x5105=(cj5*r00);
IkReal x5106=(cj5*r10);
IkReal x5107=(cj5*r20);
IkReal x5108=((1.0)*x5102);
IkReal x5109=((1.0)*x5103);
IkReal x5110=(sj5*x5102);
IkReal x5111=(sj5*x5103);
evalcond[0]=(((r22*x5103))+((r21*x5110))+(((-1.0)*x5107*x5108)));
evalcond[1]=((((-1.0)*r22*x5108))+((r21*x5111))+(((-1.0)*x5107*x5109)));
evalcond[2]=(((r01*x5110))+sj0+((r02*x5103))+(((-1.0)*x5105*x5108)));
evalcond[3]=(((r12*x5103))+(((-1.0)*x5104))+(((-1.0)*x5106*x5108))+((r11*x5110)));
evalcond[4]=(((r01*x5111))+(((-1.0)*x5104))+(((-1.0)*r02*x5108))+(((-1.0)*x5105*x5109)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5106*x5109))+(((-1.0)*r12*x5108))+((r11*x5111)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.52189136462044)*px))+(((-8.4050211434602)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.52189136462044)*py))+(((-8.4050211434602)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.52189136462044)*px))+(((-8.4050211434602)*py))))+IKsqr(((((2.52189136462044)*py))+(((-8.4050211434602)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.52189136462044)*px))+(((-8.4050211434602)*py))), ((((2.52189136462044)*py))+(((-8.4050211434602)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5112=IKcos(j0);
IkReal x5113=IKsin(j0);
evalcond[0]=((((-0.03275)*x5113))+(((-1.0)*px))+(((-0.10915)*x5112)));
evalcond[1]=((((0.03275)*x5112))+(((-1.0)*py))+(((-0.10915)*x5113)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5114=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5114;
j4eval[1]=IKsign(x5114);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5115=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5115;
j4eval[1]=IKsign(x5115);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5116=cj5*cj5;
IkReal x5117=(r11*r21);
IkReal x5118=((1.0)*r20);
IkReal x5119=(cj5*sj5);
IkReal x5120=(((x5116*x5117))+((r11*r20*x5119))+(((-1.0)*r12*r22))+(((-1.0)*x5117))+(((-1.0)*r10*x5116*x5118))+((r10*r21*x5119)));
j4eval[0]=x5120;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x5118))))));
j4eval[2]=IKsign(x5120);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5121=cj5*cj5;
IkReal x5122=(r11*r21);
IkReal x5123=((1.0)*r20);
IkReal x5124=(cj5*sj5);
CheckValue<IkReal> x5125=IKPowWithIntegerCheck(IKsign((((r11*r20*x5124))+(((-1.0)*r10*x5121*x5123))+(((-1.0)*r12*r22))+((r10*r21*x5124))+(((-1.0)*x5122))+((x5121*x5122)))),-1);
if(!x5125.valid){
continue;
}
CheckValue<IkReal> x5126 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x5123)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5126.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5125.value)))+(x5126.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5127=IKcos(j4);
IkReal x5128=IKsin(j4);
IkReal x5129=((1.0)*sj0);
IkReal x5130=(cj5*r00);
IkReal x5131=(cj5*r10);
IkReal x5132=(cj5*r20);
IkReal x5133=((1.0)*x5127);
IkReal x5134=(sj5*x5127);
IkReal x5135=((1.0)*x5128);
IkReal x5136=(sj5*x5128);
evalcond[0]=(((r22*x5128))+(((-1.0)*x5132*x5133))+((r21*x5134)));
evalcond[1]=((((-1.0)*x5132*x5135))+((r21*x5136))+(((-1.0)*r22*x5133)));
evalcond[2]=((((-1.0)*x5131*x5133))+cj0+((r12*x5128))+((r11*x5134)));
evalcond[3]=(((r01*x5134))+(((-1.0)*x5130*x5133))+(((-1.0)*x5129))+((r02*x5128)));
evalcond[4]=(((r01*x5136))+(((-1.0)*r02*x5133))+(((-1.0)*x5130*x5135))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x5131*x5135))+((r11*x5136))+(((-1.0)*x5129))+(((-1.0)*r12*x5133)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5137 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5137.valid){
continue;
}
CheckValue<IkReal> x5138=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5138.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5137.value)+(((1.5707963267949)*(x5138.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5139=IKcos(j4);
IkReal x5140=IKsin(j4);
IkReal x5141=((1.0)*sj0);
IkReal x5142=(cj5*r00);
IkReal x5143=(cj5*r10);
IkReal x5144=(cj5*r20);
IkReal x5145=((1.0)*x5139);
IkReal x5146=(sj5*x5139);
IkReal x5147=((1.0)*x5140);
IkReal x5148=(sj5*x5140);
evalcond[0]=(((r21*x5146))+((r22*x5140))+(((-1.0)*x5144*x5145)));
evalcond[1]=(((r21*x5148))+(((-1.0)*r22*x5145))+(((-1.0)*x5144*x5147)));
evalcond[2]=(cj0+(((-1.0)*x5143*x5145))+((r12*x5140))+((r11*x5146)));
evalcond[3]=(((r01*x5146))+(((-1.0)*x5142*x5145))+(((-1.0)*x5141))+((r02*x5140)));
evalcond[4]=(((r01*x5148))+(((-1.0)*x5142*x5147))+(((-1.0)*r02*x5145))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x5143*x5147))+(((-1.0)*r12*x5145))+(((-1.0)*x5141))+((r11*x5148)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5149 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5149.valid){
continue;
}
CheckValue<IkReal> x5150=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5150.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5149.value)+(((1.5707963267949)*(x5150.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5151=IKcos(j4);
IkReal x5152=IKsin(j4);
IkReal x5153=((1.0)*sj0);
IkReal x5154=(cj5*r00);
IkReal x5155=(cj5*r10);
IkReal x5156=(cj5*r20);
IkReal x5157=((1.0)*x5151);
IkReal x5158=(sj5*x5151);
IkReal x5159=((1.0)*x5152);
IkReal x5160=(sj5*x5152);
evalcond[0]=(((r21*x5158))+((r22*x5152))+(((-1.0)*x5156*x5157)));
evalcond[1]=(((r21*x5160))+(((-1.0)*r22*x5157))+(((-1.0)*x5156*x5159)));
evalcond[2]=(((r11*x5158))+cj0+((r12*x5152))+(((-1.0)*x5155*x5157)));
evalcond[3]=((((-1.0)*x5154*x5157))+((r01*x5158))+((r02*x5152))+(((-1.0)*x5153)));
evalcond[4]=((((-1.0)*x5154*x5159))+((r01*x5160))+(((-1.0)*cj0))+(((-1.0)*r02*x5157)));
evalcond[5]=((((-1.0)*r12*x5157))+((r11*x5160))+(((-1.0)*x5153))+(((-1.0)*x5155*x5159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.36617629259053)*px))+(((-0.658427386453172)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.658427386453172)*px))+(((-2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.36617629259053)*px))+(((-0.658427386453172)*py))))+IKsqr(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.36617629259053)*px))+(((-0.658427386453172)*py))), ((((-0.658427386453172)*px))+(((-2.36617629259053)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5161=IKsin(j0);
IkReal x5162=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((-0.10915)*x5162))+(((0.39225)*x5161)));
evalcond[1]=((((-0.39225)*x5162))+(((-1.0)*py))+(((-0.10915)*x5161)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5163=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5163;
j4eval[1]=IKsign(x5163);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5164=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5164;
j4eval[1]=IKsign(x5164);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5165=cj5*cj5;
IkReal x5166=(r11*r21);
IkReal x5167=((1.0)*r20);
IkReal x5168=(cj5*sj5);
IkReal x5169=(((x5165*x5166))+(((-1.0)*r12*r22))+(((-1.0)*x5166))+(((-1.0)*r10*x5165*x5167))+((r11*r20*x5168))+((r10*r21*x5168)));
j4eval[0]=x5169;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x5167)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5169);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5170=cj5*cj5;
IkReal x5171=(r11*r21);
IkReal x5172=((1.0)*r20);
IkReal x5173=(cj5*sj5);
CheckValue<IkReal> x5174=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+(((-1.0)*r10*x5170*x5172))+(((-1.0)*x5171))+((x5170*x5171))+((r11*r20*x5173))+((r10*r21*x5173)))),-1);
if(!x5174.valid){
continue;
}
CheckValue<IkReal> x5175 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x5172)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5175.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5174.value)))+(x5175.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5176=IKcos(j4);
IkReal x5177=IKsin(j4);
IkReal x5178=((1.0)*sj0);
IkReal x5179=(cj5*r00);
IkReal x5180=(cj5*r10);
IkReal x5181=(cj5*r20);
IkReal x5182=((1.0)*x5176);
IkReal x5183=(sj5*x5176);
IkReal x5184=((1.0)*x5177);
IkReal x5185=(sj5*x5177);
evalcond[0]=(((r21*x5183))+((r22*x5177))+(((-1.0)*x5181*x5182)));
evalcond[1]=((((-1.0)*r22*x5182))+((r21*x5185))+(((-1.0)*x5181*x5184)));
evalcond[2]=(cj0+((r12*x5177))+((r11*x5183))+(((-1.0)*x5180*x5182)));
evalcond[3]=(((r01*x5183))+(((-1.0)*x5178))+((r02*x5177))+(((-1.0)*x5179*x5182)));
evalcond[4]=((((-1.0)*r02*x5182))+((r01*x5185))+(((-1.0)*x5179*x5184))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x5178))+(((-1.0)*r12*x5182))+((r11*x5185))+(((-1.0)*x5180*x5184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5186 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5186.valid){
continue;
}
CheckValue<IkReal> x5187=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5187.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5186.value)+(((1.5707963267949)*(x5187.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5188=IKcos(j4);
IkReal x5189=IKsin(j4);
IkReal x5190=((1.0)*sj0);
IkReal x5191=(cj5*r00);
IkReal x5192=(cj5*r10);
IkReal x5193=(cj5*r20);
IkReal x5194=((1.0)*x5188);
IkReal x5195=(sj5*x5188);
IkReal x5196=((1.0)*x5189);
IkReal x5197=(sj5*x5189);
evalcond[0]=(((r22*x5189))+((r21*x5195))+(((-1.0)*x5193*x5194)));
evalcond[1]=(((r21*x5197))+(((-1.0)*x5193*x5196))+(((-1.0)*r22*x5194)));
evalcond[2]=(cj0+((r11*x5195))+(((-1.0)*x5192*x5194))+((r12*x5189)));
evalcond[3]=((((-1.0)*x5190))+(((-1.0)*x5191*x5194))+((r02*x5189))+((r01*x5195)));
evalcond[4]=((((-1.0)*x5191*x5196))+(((-1.0)*r02*x5194))+((r01*x5197))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x5194))+((r11*x5197))+(((-1.0)*x5190))+(((-1.0)*x5192*x5196)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5198 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5198.valid){
continue;
}
CheckValue<IkReal> x5199=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5199.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5198.value)+(((1.5707963267949)*(x5199.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5200=IKcos(j4);
IkReal x5201=IKsin(j4);
IkReal x5202=((1.0)*sj0);
IkReal x5203=(cj5*r00);
IkReal x5204=(cj5*r10);
IkReal x5205=(cj5*r20);
IkReal x5206=((1.0)*x5200);
IkReal x5207=(sj5*x5200);
IkReal x5208=((1.0)*x5201);
IkReal x5209=(sj5*x5201);
evalcond[0]=(((r22*x5201))+(((-1.0)*x5205*x5206))+((r21*x5207)));
evalcond[1]=((((-1.0)*r22*x5206))+(((-1.0)*x5205*x5208))+((r21*x5209)));
evalcond[2]=(cj0+((r11*x5207))+((r12*x5201))+(((-1.0)*x5204*x5206)));
evalcond[3]=((((-1.0)*x5202))+(((-1.0)*x5203*x5206))+((r01*x5207))+((r02*x5201)));
evalcond[4]=((((-1.0)*x5203*x5208))+(((-1.0)*r02*x5206))+((r01*x5209))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x5202))+((r11*x5209))+(((-1.0)*x5204*x5208))+(((-1.0)*r12*x5206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.658427386453172)*py))+(((-2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.36617629259053)*py))+(((-0.658427386453172)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.658427386453172)*py))+(((-2.36617629259053)*px))))+IKsqr(((((2.36617629259053)*py))+(((-0.658427386453172)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.658427386453172)*py))+(((-2.36617629259053)*px))), ((((2.36617629259053)*py))+(((-0.658427386453172)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5210=IKcos(j0);
IkReal x5211=IKsin(j0);
evalcond[0]=((((-0.39225)*x5211))+(((-0.10915)*x5210))+(((-1.0)*px)));
evalcond[1]=((((-0.10915)*x5211))+(((-1.0)*py))+(((0.39225)*x5210)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5212=((1.0)*cj5);
IkReal x5213=((((-1.0)*r11*x5212))+(((-1.0)*r10*sj5)));
j4eval[0]=x5213;
j4eval[1]=IKsign(x5213);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x5212))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5214=((1.0)*cj5);
IkReal x5215=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5214)));
j4eval[0]=x5215;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5214)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5215);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5216=cj5*cj5;
IkReal x5217=((1.0)*r20);
IkReal x5218=(r01*r21);
IkReal x5219=(cj5*sj5);
IkReal x5220=(((r01*r20*x5219))+(((-1.0)*r02*r22))+((r00*r21*x5219))+((x5216*x5218))+(((-1.0)*r00*x5216*x5217))+(((-1.0)*x5218)));
j4eval[0]=x5220;
j4eval[1]=((IKabs((((r21*sj0*sj5))+(((-1.0)*cj5*sj0*x5217)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x5220);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5221=cj5*cj5;
IkReal x5222=((1.0)*r20);
IkReal x5223=(r01*r21);
IkReal x5224=(cj5*sj5);
CheckValue<IkReal> x5225=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+((r01*r20*x5224))+((x5221*x5223))+(((-1.0)*r00*x5221*x5222))+((r00*r21*x5224))+(((-1.0)*x5223)))),-1);
if(!x5225.valid){
continue;
}
CheckValue<IkReal> x5226 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*sj0*x5222))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5226.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5225.value)))+(x5226.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5227=IKcos(j4);
IkReal x5228=IKsin(j4);
IkReal x5229=((1.0)*cj0);
IkReal x5230=(cj5*r00);
IkReal x5231=(cj5*r10);
IkReal x5232=(cj5*r20);
IkReal x5233=((1.0)*x5227);
IkReal x5234=((1.0)*x5228);
IkReal x5235=(sj5*x5227);
IkReal x5236=(sj5*x5228);
evalcond[0]=(((r22*x5228))+(((-1.0)*x5232*x5233))+((r21*x5235)));
evalcond[1]=((((-1.0)*r22*x5233))+(((-1.0)*x5232*x5234))+((r21*x5236)));
evalcond[2]=(sj0+((r02*x5228))+((r01*x5235))+(((-1.0)*x5230*x5233)));
evalcond[3]=(((r11*x5235))+(((-1.0)*x5231*x5233))+(((-1.0)*x5229))+((r12*x5228)));
evalcond[4]=((((-1.0)*r02*x5233))+((r01*x5236))+(((-1.0)*x5229))+(((-1.0)*x5230*x5234)));
evalcond[5]=((((-1.0)*sj0))+((r11*x5236))+(((-1.0)*r12*x5233))+(((-1.0)*x5231*x5234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5237=((1.0)*cj5);
CheckValue<IkReal> x5238=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5237)))),-1);
if(!x5238.valid){
continue;
}
CheckValue<IkReal> x5239 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x5237))+((cj0*r21*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5239.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5238.value)))+(x5239.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5240=IKcos(j4);
IkReal x5241=IKsin(j4);
IkReal x5242=((1.0)*cj0);
IkReal x5243=(cj5*r00);
IkReal x5244=(cj5*r10);
IkReal x5245=(cj5*r20);
IkReal x5246=((1.0)*x5240);
IkReal x5247=((1.0)*x5241);
IkReal x5248=(sj5*x5240);
IkReal x5249=(sj5*x5241);
evalcond[0]=((((-1.0)*x5245*x5246))+((r21*x5248))+((r22*x5241)));
evalcond[1]=((((-1.0)*r22*x5246))+(((-1.0)*x5245*x5247))+((r21*x5249)));
evalcond[2]=(sj0+(((-1.0)*x5243*x5246))+((r01*x5248))+((r02*x5241)));
evalcond[3]=(((r11*x5248))+(((-1.0)*x5242))+((r12*x5241))+(((-1.0)*x5244*x5246)));
evalcond[4]=((((-1.0)*x5242))+(((-1.0)*x5243*x5247))+((r01*x5249))+(((-1.0)*r02*x5246)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x5246))+((r11*x5249))+(((-1.0)*x5244*x5247)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5250=((1.0)*cj5);
CheckValue<IkReal> x5251=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5250)))),-1);
if(!x5251.valid){
continue;
}
CheckValue<IkReal> x5252 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x5250))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5252.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5251.value)))+(x5252.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5253=IKcos(j4);
IkReal x5254=IKsin(j4);
IkReal x5255=((1.0)*cj0);
IkReal x5256=(cj5*r00);
IkReal x5257=(cj5*r10);
IkReal x5258=(cj5*r20);
IkReal x5259=((1.0)*x5253);
IkReal x5260=((1.0)*x5254);
IkReal x5261=(sj5*x5253);
IkReal x5262=(sj5*x5254);
evalcond[0]=(((r22*x5254))+(((-1.0)*x5258*x5259))+((r21*x5261)));
evalcond[1]=((((-1.0)*x5258*x5260))+(((-1.0)*r22*x5259))+((r21*x5262)));
evalcond[2]=(sj0+((r01*x5261))+(((-1.0)*x5256*x5259))+((r02*x5254)));
evalcond[3]=(((r12*x5254))+(((-1.0)*x5255))+((r11*x5261))+(((-1.0)*x5257*x5259)));
evalcond[4]=((((-1.0)*r02*x5259))+((r01*x5262))+(((-1.0)*x5255))+(((-1.0)*x5256*x5260)));
evalcond[5]=((((-1.0)*sj0))+((r11*x5262))+(((-1.0)*r12*x5259))+(((-1.0)*x5257*x5260)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.160559264620033)*py))+(((1.20217186450501)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.160559264620033)*px))+(((-1.20217186450501)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.160559264620033)*py))+(((1.20217186450501)*px))))+IKsqr(((((-0.160559264620033)*px))+(((-1.20217186450501)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.160559264620033)*py))+(((1.20217186450501)*px))), ((((-0.160559264620033)*px))+(((-1.20217186450501)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5263=IKsin(j0);
IkReal x5264=IKcos(j0);
evalcond[0]=((((-0.10915)*x5264))+(((0.81725)*x5263))+(((-1.0)*px)));
evalcond[1]=((((-0.10915)*x5263))+(((-1.0)*py))+(((-0.81725)*x5264)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5265=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5265;
j4eval[1]=IKsign(x5265);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5266=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5266;
j4eval[1]=IKsign(x5266);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5267=cj5*cj5;
IkReal x5268=(r11*r21);
IkReal x5269=((1.0)*r20);
IkReal x5270=(cj5*sj5);
IkReal x5271=((((-1.0)*x5268))+(((-1.0)*r12*r22))+(((-1.0)*r10*x5267*x5269))+((r11*r20*x5270))+((r10*r21*x5270))+((x5267*x5268)));
j4eval[0]=x5271;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x5269))))));
j4eval[2]=IKsign(x5271);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5272=cj5*cj5;
IkReal x5273=(r11*r21);
IkReal x5274=((1.0)*r20);
IkReal x5275=(cj5*sj5);
CheckValue<IkReal> x5276 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x5274)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5276.valid){
continue;
}
CheckValue<IkReal> x5277=IKPowWithIntegerCheck(IKsign((((x5272*x5273))+(((-1.0)*r12*r22))+(((-1.0)*r10*x5272*x5274))+(((-1.0)*x5273))+((r11*r20*x5275))+((r10*r21*x5275)))),-1);
if(!x5277.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5276.value)+(((1.5707963267949)*(x5277.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5278=IKcos(j4);
IkReal x5279=IKsin(j4);
IkReal x5280=((1.0)*sj0);
IkReal x5281=(cj5*r00);
IkReal x5282=(cj5*r10);
IkReal x5283=(cj5*r20);
IkReal x5284=((1.0)*x5278);
IkReal x5285=(sj5*x5278);
IkReal x5286=((1.0)*x5279);
IkReal x5287=(sj5*x5279);
evalcond[0]=(((r22*x5279))+((r21*x5285))+(((-1.0)*x5283*x5284)));
evalcond[1]=((((-1.0)*r22*x5284))+((r21*x5287))+(((-1.0)*x5283*x5286)));
evalcond[2]=(cj0+(((-1.0)*x5282*x5284))+((r11*x5285))+((r12*x5279)));
evalcond[3]=((((-1.0)*x5281*x5284))+((r02*x5279))+(((-1.0)*x5280))+((r01*x5285)));
evalcond[4]=((((-1.0)*x5281*x5286))+((r01*x5287))+(((-1.0)*r02*x5284))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x5280))+(((-1.0)*r12*x5284))+(((-1.0)*x5282*x5286))+((r11*x5287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5288 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5288.valid){
continue;
}
CheckValue<IkReal> x5289=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5289.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5288.value)+(((1.5707963267949)*(x5289.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5290=IKcos(j4);
IkReal x5291=IKsin(j4);
IkReal x5292=((1.0)*sj0);
IkReal x5293=(cj5*r00);
IkReal x5294=(cj5*r10);
IkReal x5295=(cj5*r20);
IkReal x5296=((1.0)*x5290);
IkReal x5297=(sj5*x5290);
IkReal x5298=((1.0)*x5291);
IkReal x5299=(sj5*x5291);
evalcond[0]=(((r22*x5291))+((r21*x5297))+(((-1.0)*x5295*x5296)));
evalcond[1]=((((-1.0)*r22*x5296))+((r21*x5299))+(((-1.0)*x5295*x5298)));
evalcond[2]=(((r12*x5291))+cj0+(((-1.0)*x5294*x5296))+((r11*x5297)));
evalcond[3]=(((r02*x5291))+(((-1.0)*x5292))+((r01*x5297))+(((-1.0)*x5293*x5296)));
evalcond[4]=(((r01*x5299))+(((-1.0)*x5293*x5298))+(((-1.0)*r02*x5296))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x5296))+(((-1.0)*x5292))+(((-1.0)*x5294*x5298))+((r11*x5299)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5300 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5300.valid){
continue;
}
CheckValue<IkReal> x5301=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5301.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5300.value)+(((1.5707963267949)*(x5301.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5302=IKcos(j4);
IkReal x5303=IKsin(j4);
IkReal x5304=((1.0)*sj0);
IkReal x5305=(cj5*r00);
IkReal x5306=(cj5*r10);
IkReal x5307=(cj5*r20);
IkReal x5308=((1.0)*x5302);
IkReal x5309=(sj5*x5302);
IkReal x5310=((1.0)*x5303);
IkReal x5311=(sj5*x5303);
evalcond[0]=(((r21*x5309))+((r22*x5303))+(((-1.0)*x5307*x5308)));
evalcond[1]=((((-1.0)*r22*x5308))+((r21*x5311))+(((-1.0)*x5307*x5310)));
evalcond[2]=((((-1.0)*x5306*x5308))+cj0+((r12*x5303))+((r11*x5309)));
evalcond[3]=((((-1.0)*x5305*x5308))+(((-1.0)*x5304))+((r02*x5303))+((r01*x5309)));
evalcond[4]=(((r01*x5311))+(((-1.0)*r02*x5308))+(((-1.0)*x5305*x5310))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x5306*x5310))+(((-1.0)*x5304))+(((-1.0)*r12*x5308))+((r11*x5311)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.52189136462044)*px))+(((-8.4050211434602)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.52189136462044)*py))+(((-8.4050211434602)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.52189136462044)*px))+(((-8.4050211434602)*py))))+IKsqr(((((-2.52189136462044)*py))+(((-8.4050211434602)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.52189136462044)*px))+(((-8.4050211434602)*py))), ((((-2.52189136462044)*py))+(((-8.4050211434602)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5312=IKsin(j0);
IkReal x5313=IKcos(j0);
evalcond[0]=((((-0.10915)*x5313))+(((-1.0)*px))+(((0.03275)*x5312)));
evalcond[1]=((((-0.10915)*x5312))+(((-1.0)*py))+(((-0.03275)*x5313)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5314=((1.0)*cj5);
IkReal x5315=((((-1.0)*r11*x5314))+(((-1.0)*r10*sj5)));
j4eval[0]=x5315;
j4eval[1]=IKsign(x5315);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5314))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5316=((1.0)*cj5);
IkReal x5317=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5316)));
j4eval[0]=x5317;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5316)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5317);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5318=cj5*cj5;
IkReal x5319=((1.0)*r20);
IkReal x5320=(r01*r21);
IkReal x5321=(cj5*sj5);
IkReal x5322=((((-1.0)*x5320))+((x5318*x5320))+(((-1.0)*r02*r22))+((r01*r20*x5321))+((r00*r21*x5321))+(((-1.0)*r00*x5318*x5319)));
j4eval[0]=x5322;
j4eval[1]=((IKabs(((((-1.0)*cj5*sj0*x5319))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x5322);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5323=cj5*cj5;
IkReal x5324=((1.0)*r20);
IkReal x5325=(r01*r21);
IkReal x5326=(cj5*sj5);
CheckValue<IkReal> x5327=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5325))+(((-1.0)*r02*r22))+((r01*r20*x5326))+((x5323*x5325))+((r00*r21*x5326))+(((-1.0)*r00*x5323*x5324)))),-1);
if(!x5327.valid){
continue;
}
CheckValue<IkReal> x5328 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*cj5*sj0*x5324)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5328.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5327.value)))+(x5328.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5329=IKcos(j4);
IkReal x5330=IKsin(j4);
IkReal x5331=((1.0)*cj0);
IkReal x5332=(cj5*r00);
IkReal x5333=(cj5*r10);
IkReal x5334=(cj5*r20);
IkReal x5335=((1.0)*x5329);
IkReal x5336=((1.0)*x5330);
IkReal x5337=(sj5*x5329);
IkReal x5338=(sj5*x5330);
evalcond[0]=(((r21*x5337))+((r22*x5330))+(((-1.0)*x5334*x5335)));
evalcond[1]=((((-1.0)*r22*x5335))+((r21*x5338))+(((-1.0)*x5334*x5336)));
evalcond[2]=(sj0+(((-1.0)*x5332*x5335))+((r01*x5337))+((r02*x5330)));
evalcond[3]=(((r11*x5337))+((r12*x5330))+(((-1.0)*x5331))+(((-1.0)*x5333*x5335)));
evalcond[4]=((((-1.0)*r02*x5335))+(((-1.0)*x5332*x5336))+(((-1.0)*x5331))+((r01*x5338)));
evalcond[5]=((((-1.0)*sj0))+((r11*x5338))+(((-1.0)*r12*x5335))+(((-1.0)*x5333*x5336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5339=((1.0)*cj5);
CheckValue<IkReal> x5340=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5339)))),-1);
if(!x5340.valid){
continue;
}
CheckValue<IkReal> x5341 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5339)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5341.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5340.value)))+(x5341.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5342=IKcos(j4);
IkReal x5343=IKsin(j4);
IkReal x5344=((1.0)*cj0);
IkReal x5345=(cj5*r00);
IkReal x5346=(cj5*r10);
IkReal x5347=(cj5*r20);
IkReal x5348=((1.0)*x5342);
IkReal x5349=((1.0)*x5343);
IkReal x5350=(sj5*x5342);
IkReal x5351=(sj5*x5343);
evalcond[0]=(((r22*x5343))+(((-1.0)*x5347*x5348))+((r21*x5350)));
evalcond[1]=((((-1.0)*r22*x5348))+(((-1.0)*x5347*x5349))+((r21*x5351)));
evalcond[2]=(sj0+((r01*x5350))+(((-1.0)*x5345*x5348))+((r02*x5343)));
evalcond[3]=((((-1.0)*x5346*x5348))+((r12*x5343))+((r11*x5350))+(((-1.0)*x5344)));
evalcond[4]=((((-1.0)*r02*x5348))+((r01*x5351))+(((-1.0)*x5345*x5349))+(((-1.0)*x5344)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5346*x5349))+((r11*x5351))+(((-1.0)*r12*x5348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5352=((1.0)*cj5);
CheckValue<IkReal> x5353 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x5352))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5353.valid){
continue;
}
CheckValue<IkReal> x5354=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5352)))),-1);
if(!x5354.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5353.value)+(((1.5707963267949)*(x5354.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5355=IKcos(j4);
IkReal x5356=IKsin(j4);
IkReal x5357=((1.0)*cj0);
IkReal x5358=(cj5*r00);
IkReal x5359=(cj5*r10);
IkReal x5360=(cj5*r20);
IkReal x5361=((1.0)*x5355);
IkReal x5362=((1.0)*x5356);
IkReal x5363=(sj5*x5355);
IkReal x5364=(sj5*x5356);
evalcond[0]=((((-1.0)*x5360*x5361))+((r22*x5356))+((r21*x5363)));
evalcond[1]=((((-1.0)*r22*x5361))+(((-1.0)*x5360*x5362))+((r21*x5364)));
evalcond[2]=(sj0+(((-1.0)*x5358*x5361))+((r02*x5356))+((r01*x5363)));
evalcond[3]=((((-1.0)*x5357))+((r12*x5356))+(((-1.0)*x5359*x5361))+((r11*x5363)));
evalcond[4]=((((-1.0)*x5357))+(((-1.0)*r02*x5361))+(((-1.0)*x5358*x5362))+((r01*x5364)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5359*x5362))+(((-1.0)*r12*x5361))+((r11*x5364)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.658427386453172)*py))+(((-2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.36617629259053)*py))+(((-0.658427386453172)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.658427386453172)*py))+(((-2.36617629259053)*px))))+IKsqr(((((2.36617629259053)*py))+(((-0.658427386453172)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.658427386453172)*py))+(((-2.36617629259053)*px))), ((((2.36617629259053)*py))+(((-0.658427386453172)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5365=IKcos(j0);
IkReal x5366=IKsin(j0);
evalcond[0]=((((-0.39225)*x5366))+(((-0.10915)*x5365))+(((-1.0)*px)));
evalcond[1]=((((0.39225)*x5365))+(((-0.10915)*x5366))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5367=((1.0)*cj5);
IkReal x5368=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5367)));
j4eval[0]=x5368;
j4eval[1]=IKsign(x5368);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5367))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5369=((1.0)*cj5);
IkReal x5370=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5369)));
j4eval[0]=x5370;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5369)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5370);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5371=cj5*cj5;
IkReal x5372=((1.0)*r20);
IkReal x5373=(r01*r21);
IkReal x5374=(cj5*sj5);
IkReal x5375=((((-1.0)*r02*r22))+(((-1.0)*r00*x5371*x5372))+(((-1.0)*x5373))+((x5371*x5373))+((r01*r20*x5374))+((r00*r21*x5374)));
j4eval[0]=x5375;
j4eval[1]=((IKabs(((((-1.0)*cj5*sj0*x5372))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x5375);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5376=cj5*cj5;
IkReal x5377=((1.0)*r20);
IkReal x5378=(r01*r21);
IkReal x5379=(cj5*sj5);
CheckValue<IkReal> x5380 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*sj0*x5377))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5380.valid){
continue;
}
CheckValue<IkReal> x5381=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x5376*x5377))+(((-1.0)*r02*r22))+(((-1.0)*x5378))+((x5376*x5378))+((r01*r20*x5379))+((r00*r21*x5379)))),-1);
if(!x5381.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5380.value)+(((1.5707963267949)*(x5381.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5382=IKcos(j4);
IkReal x5383=IKsin(j4);
IkReal x5384=((1.0)*cj0);
IkReal x5385=(cj5*r00);
IkReal x5386=(cj5*r10);
IkReal x5387=(cj5*r20);
IkReal x5388=((1.0)*x5382);
IkReal x5389=((1.0)*x5383);
IkReal x5390=(sj5*x5382);
IkReal x5391=(sj5*x5383);
evalcond[0]=((((-1.0)*x5387*x5388))+((r21*x5390))+((r22*x5383)));
evalcond[1]=((((-1.0)*x5387*x5389))+((r21*x5391))+(((-1.0)*r22*x5388)));
evalcond[2]=(sj0+((r02*x5383))+(((-1.0)*x5385*x5388))+((r01*x5390)));
evalcond[3]=(((r11*x5390))+(((-1.0)*x5386*x5388))+((r12*x5383))+(((-1.0)*x5384)));
evalcond[4]=((((-1.0)*x5385*x5389))+(((-1.0)*r02*x5388))+((r01*x5391))+(((-1.0)*x5384)));
evalcond[5]=((((-1.0)*sj0))+((r11*x5391))+(((-1.0)*r12*x5388))+(((-1.0)*x5386*x5389)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5392=((1.0)*cj5);
CheckValue<IkReal> x5393 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5392)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5393.valid){
continue;
}
CheckValue<IkReal> x5394=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5392)))),-1);
if(!x5394.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5393.value)+(((1.5707963267949)*(x5394.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5395=IKcos(j4);
IkReal x5396=IKsin(j4);
IkReal x5397=((1.0)*cj0);
IkReal x5398=(cj5*r00);
IkReal x5399=(cj5*r10);
IkReal x5400=(cj5*r20);
IkReal x5401=((1.0)*x5395);
IkReal x5402=((1.0)*x5396);
IkReal x5403=(sj5*x5395);
IkReal x5404=(sj5*x5396);
evalcond[0]=(((r21*x5403))+((r22*x5396))+(((-1.0)*x5400*x5401)));
evalcond[1]=(((r21*x5404))+(((-1.0)*x5400*x5402))+(((-1.0)*r22*x5401)));
evalcond[2]=(((r02*x5396))+sj0+(((-1.0)*x5398*x5401))+((r01*x5403)));
evalcond[3]=((((-1.0)*x5399*x5401))+((r12*x5396))+(((-1.0)*x5397))+((r11*x5403)));
evalcond[4]=((((-1.0)*x5398*x5402))+(((-1.0)*r02*x5401))+(((-1.0)*x5397))+((r01*x5404)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5399*x5402))+(((-1.0)*r12*x5401))+((r11*x5404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5405=((1.0)*cj5);
CheckValue<IkReal> x5406=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5405)))),-1);
if(!x5406.valid){
continue;
}
CheckValue<IkReal> x5407 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5405)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5407.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5406.value)))+(x5407.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5408=IKcos(j4);
IkReal x5409=IKsin(j4);
IkReal x5410=((1.0)*cj0);
IkReal x5411=(cj5*r00);
IkReal x5412=(cj5*r10);
IkReal x5413=(cj5*r20);
IkReal x5414=((1.0)*x5408);
IkReal x5415=((1.0)*x5409);
IkReal x5416=(sj5*x5408);
IkReal x5417=(sj5*x5409);
evalcond[0]=(((r22*x5409))+((r21*x5416))+(((-1.0)*x5413*x5414)));
evalcond[1]=((((-1.0)*r22*x5414))+((r21*x5417))+(((-1.0)*x5413*x5415)));
evalcond[2]=(sj0+((r02*x5409))+((r01*x5416))+(((-1.0)*x5411*x5414)));
evalcond[3]=(((r12*x5409))+(((-1.0)*x5412*x5414))+((r11*x5416))+(((-1.0)*x5410)));
evalcond[4]=((((-1.0)*r02*x5414))+(((-1.0)*x5410))+((r01*x5417))+(((-1.0)*x5411*x5415)));
evalcond[5]=((((-1.0)*x5412*x5415))+((r11*x5417))+(((-1.0)*sj0))+(((-1.0)*r12*x5414)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.36617629259053)*px))+(((-0.658427386453172)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.658427386453172)*px))+(((-2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.36617629259053)*px))+(((-0.658427386453172)*py))))+IKsqr(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.36617629259053)*px))+(((-0.658427386453172)*py))), ((((-0.658427386453172)*px))+(((-2.36617629259053)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5418=IKsin(j0);
IkReal x5419=IKcos(j0);
evalcond[0]=((((-0.10915)*x5419))+(((-1.0)*px))+(((0.39225)*x5418)));
evalcond[1]=((((-0.10915)*x5418))+(((-1.0)*py))+(((-0.39225)*x5419)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5420=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5420;
j4eval[1]=IKsign(x5420);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5421=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5421;
j4eval[1]=IKsign(x5421);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5422=cj5*cj5;
IkReal x5423=(r11*r21);
IkReal x5424=((1.0)*r20);
IkReal x5425=(cj5*sj5);
IkReal x5426=((((-1.0)*r12*r22))+((x5422*x5423))+(((-1.0)*r10*x5422*x5424))+((r10*r21*x5425))+((r11*r20*x5425))+(((-1.0)*x5423)));
j4eval[0]=x5426;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x5424))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5426);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5427=cj5*cj5;
IkReal x5428=(r11*r21);
IkReal x5429=((1.0)*r20);
IkReal x5430=(cj5*sj5);
CheckValue<IkReal> x5431 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x5429))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5431.valid){
continue;
}
CheckValue<IkReal> x5432=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+((x5427*x5428))+((r10*r21*x5430))+((r11*r20*x5430))+(((-1.0)*x5428))+(((-1.0)*r10*x5427*x5429)))),-1);
if(!x5432.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5431.value)+(((1.5707963267949)*(x5432.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5433=IKcos(j4);
IkReal x5434=IKsin(j4);
IkReal x5435=((1.0)*sj0);
IkReal x5436=(cj5*r00);
IkReal x5437=(cj5*r10);
IkReal x5438=(cj5*r20);
IkReal x5439=((1.0)*x5433);
IkReal x5440=(sj5*x5433);
IkReal x5441=((1.0)*x5434);
IkReal x5442=(sj5*x5434);
evalcond[0]=(((r22*x5434))+(((-1.0)*x5438*x5439))+((r21*x5440)));
evalcond[1]=((((-1.0)*x5438*x5441))+(((-1.0)*r22*x5439))+((r21*x5442)));
evalcond[2]=(cj0+(((-1.0)*x5437*x5439))+((r11*x5440))+((r12*x5434)));
evalcond[3]=(((r02*x5434))+((r01*x5440))+(((-1.0)*x5435))+(((-1.0)*x5436*x5439)));
evalcond[4]=((((-1.0)*x5436*x5441))+(((-1.0)*r02*x5439))+((r01*x5442))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x5437*x5441))+(((-1.0)*r12*x5439))+(((-1.0)*x5435))+((r11*x5442)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5443 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5443.valid){
continue;
}
CheckValue<IkReal> x5444=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5444.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5443.value)+(((1.5707963267949)*(x5444.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5445=IKcos(j4);
IkReal x5446=IKsin(j4);
IkReal x5447=((1.0)*sj0);
IkReal x5448=(cj5*r00);
IkReal x5449=(cj5*r10);
IkReal x5450=(cj5*r20);
IkReal x5451=((1.0)*x5445);
IkReal x5452=(sj5*x5445);
IkReal x5453=((1.0)*x5446);
IkReal x5454=(sj5*x5446);
evalcond[0]=((((-1.0)*x5450*x5451))+((r21*x5452))+((r22*x5446)));
evalcond[1]=((((-1.0)*x5450*x5453))+((r21*x5454))+(((-1.0)*r22*x5451)));
evalcond[2]=(cj0+((r12*x5446))+(((-1.0)*x5449*x5451))+((r11*x5452)));
evalcond[3]=(((r01*x5452))+(((-1.0)*x5447))+(((-1.0)*x5448*x5451))+((r02*x5446)));
evalcond[4]=(((r01*x5454))+(((-1.0)*r02*x5451))+(((-1.0)*x5448*x5453))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x5451))+(((-1.0)*x5447))+(((-1.0)*x5449*x5453))+((r11*x5454)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5455 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5455.valid){
continue;
}
CheckValue<IkReal> x5456=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5456.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5455.value)+(((1.5707963267949)*(x5456.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5457=IKcos(j4);
IkReal x5458=IKsin(j4);
IkReal x5459=((1.0)*sj0);
IkReal x5460=(cj5*r00);
IkReal x5461=(cj5*r10);
IkReal x5462=(cj5*r20);
IkReal x5463=((1.0)*x5457);
IkReal x5464=(sj5*x5457);
IkReal x5465=((1.0)*x5458);
IkReal x5466=(sj5*x5458);
evalcond[0]=(((r22*x5458))+((r21*x5464))+(((-1.0)*x5462*x5463)));
evalcond[1]=(((r21*x5466))+(((-1.0)*x5462*x5465))+(((-1.0)*r22*x5463)));
evalcond[2]=(((r12*x5458))+cj0+((r11*x5464))+(((-1.0)*x5461*x5463)));
evalcond[3]=(((r01*x5464))+((r02*x5458))+(((-1.0)*x5460*x5463))+(((-1.0)*x5459)));
evalcond[4]=(((r01*x5466))+(((-1.0)*r02*x5463))+(((-1.0)*x5460*x5465))+(((-1.0)*cj0)));
evalcond[5]=(((r11*x5466))+(((-1.0)*x5461*x5465))+(((-1.0)*r12*x5463))+(((-1.0)*x5459)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01))))+IKsqr((((cj5*r11))+((r10*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01))), (((cj5*r11))+((r10*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5467=IKcos(j0);
IkReal x5468=IKsin(j0);
IkReal x5469=(r00*sj5);
IkReal x5470=(r10*sj5);
IkReal x5471=(cj5*r11);
IkReal x5472=(cj5*r01);
evalcond[0]=(x5469+x5468+x5472);
evalcond[1]=(x5470+x5471+(((-1.0)*x5467)));
evalcond[2]=((((-0.09465)*x5472))+(((-0.10915)*x5467))+(((-1.0)*px))+(((-0.09465)*x5469)));
evalcond[3]=((((-0.09465)*x5470))+(((-0.09465)*x5471))+(((-0.10915)*x5468))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5473=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5473;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x5473);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5474=((1.0)*cj5);
IkReal x5475=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5474)));
j4eval[0]=x5475;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x5474))+((r11*sj5))))));
j4eval[2]=IKsign(x5475);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5476=r21*r21;
IkReal x5477=cj5*cj5;
IkReal x5478=(r21*sj5);
IkReal x5479=(cj5*r20);
IkReal x5480=((((-1.0)*x5476))+(((2.0)*x5478*x5479))+(((-1.0)*(r22*r22)))+(((-1.0)*x5477*(r20*r20)))+((x5476*x5477)));
j4eval[0]=x5480;
j4eval[1]=((IKabs(((((-1.0)*x5479))+x5478)))+(IKabs(r22)));
j4eval[2]=IKsign(x5480);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5481=r21*r21;
IkReal x5482=cj5*cj5;
IkReal x5483=(r21*sj5);
IkReal x5484=(cj5*r20);
CheckValue<IkReal> x5485 = IKatan2WithCheck(IkReal(r22),IkReal((x5483+(((-1.0)*x5484)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5485.valid){
continue;
}
CheckValue<IkReal> x5486=IKPowWithIntegerCheck(IKsign((((x5481*x5482))+(((-1.0)*x5482*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-1.0)*x5481))+(((2.0)*x5483*x5484)))),-1);
if(!x5486.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5485.value)+(((1.5707963267949)*(x5486.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5487=IKcos(j4);
IkReal x5488=IKsin(j4);
IkReal x5489=(cj5*r00);
IkReal x5490=(r01*sj5);
IkReal x5491=(cj5*r10);
IkReal x5492=(cj5*r20);
IkReal x5493=((1.0)*x5487);
IkReal x5494=((1.0)*x5488);
IkReal x5495=(sj5*x5488);
IkReal x5496=(sj5*x5487);
evalcond[0]=((((-1.0)*x5489*x5493))+((x5487*x5490))+((r02*x5488)));
evalcond[1]=((((-1.0)*x5491*x5493))+((r12*x5488))+((r11*x5496)));
evalcond[2]=(((r21*x5495))+(((-1.0)*r22*x5493))+(((-1.0)*x5492*x5494)));
evalcond[3]=((1.0)+((r21*x5496))+(((-1.0)*x5492*x5493))+((r22*x5488)));
evalcond[4]=((((-1.0)*x5489*x5494))+((x5488*x5490))+(((-1.0)*r02*x5493))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5491*x5494))+(((-1.0)*r12*x5493))+((r11*x5495)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5497=((1.0)*cj5);
CheckValue<IkReal> x5498 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x5497)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5498.valid){
continue;
}
CheckValue<IkReal> x5499=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5497)))),-1);
if(!x5499.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5498.value)+(((1.5707963267949)*(x5499.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5500=IKcos(j4);
IkReal x5501=IKsin(j4);
IkReal x5502=(cj5*r00);
IkReal x5503=(r01*sj5);
IkReal x5504=(cj5*r10);
IkReal x5505=(cj5*r20);
IkReal x5506=((1.0)*x5500);
IkReal x5507=((1.0)*x5501);
IkReal x5508=(sj5*x5501);
IkReal x5509=(sj5*x5500);
evalcond[0]=((((-1.0)*x5502*x5506))+((r02*x5501))+((x5500*x5503)));
evalcond[1]=(((r12*x5501))+(((-1.0)*x5504*x5506))+((r11*x5509)));
evalcond[2]=((((-1.0)*r22*x5506))+((r21*x5508))+(((-1.0)*x5505*x5507)));
evalcond[3]=((1.0)+((r21*x5509))+((r22*x5501))+(((-1.0)*x5505*x5506)));
evalcond[4]=((((-1.0)*x5502*x5507))+(((-1.0)*r02*x5506))+((x5501*x5503))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x5506))+(((-1.0)*x5504*x5507))+((r11*x5508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5510 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5510.valid){
continue;
}
CheckValue<IkReal> x5511=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5511.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5510.value)+(((1.5707963267949)*(x5511.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5512=IKcos(j4);
IkReal x5513=IKsin(j4);
IkReal x5514=(cj5*r00);
IkReal x5515=(r01*sj5);
IkReal x5516=(cj5*r10);
IkReal x5517=(cj5*r20);
IkReal x5518=((1.0)*x5512);
IkReal x5519=((1.0)*x5513);
IkReal x5520=(sj5*x5513);
IkReal x5521=(sj5*x5512);
evalcond[0]=(((x5512*x5515))+((r02*x5513))+(((-1.0)*x5514*x5518)));
evalcond[1]=(((r12*x5513))+((r11*x5521))+(((-1.0)*x5516*x5518)));
evalcond[2]=((((-1.0)*r22*x5518))+((r21*x5520))+(((-1.0)*x5517*x5519)));
evalcond[3]=((1.0)+((r21*x5521))+((r22*x5513))+(((-1.0)*x5517*x5518)));
evalcond[4]=(((x5513*x5515))+(((-1.0)*r02*x5518))+(((-1.0)*x5514*x5519))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x5518))+((r11*x5520))+(((-1.0)*x5516*x5519)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*sj5))+((cj5*r01))))+IKsqr(((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*sj5))+((cj5*r01))), ((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5522=IKcos(j0);
IkReal x5523=IKsin(j0);
IkReal x5524=(r00*sj5);
IkReal x5525=(r10*sj5);
IkReal x5526=(cj5*r11);
IkReal x5527=(cj5*r01);
evalcond[0]=(x5522+x5525+x5526);
evalcond[1]=(x5524+x5527+(((-1.0)*x5523)));
evalcond[2]=((((-0.10915)*x5522))+(((-1.0)*px))+(((-0.09465)*x5524))+(((-0.09465)*x5527)));
evalcond[3]=((((-0.10915)*x5523))+(((-1.0)*py))+(((-0.09465)*x5525))+(((-0.09465)*x5526)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5528=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5528;
j4eval[1]=IKsign(x5528);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5529=((1.0)*cj5);
IkReal x5530=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5529)));
j4eval[0]=x5530;
j4eval[1]=IKsign(x5530);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5529))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5531=cj5*cj5;
IkReal x5532=r21*r21;
IkReal x5533=(r21*sj5);
IkReal x5534=(cj5*r20);
IkReal x5535=(x5532+(r22*r22)+((x5531*(r20*r20)))+(((-2.0)*x5533*x5534))+(((-1.0)*x5531*x5532)));
j4eval[0]=x5535;
j4eval[1]=IKsign(x5535);
j4eval[2]=((IKabs((x5533+(((-1.0)*x5534)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5536=cj5*cj5;
IkReal x5537=r21*r21;
IkReal x5538=(r21*sj5);
IkReal x5539=(cj5*r20);
CheckValue<IkReal> x5540 = IKatan2WithCheck(IkReal(r22),IkReal((x5538+(((-1.0)*x5539)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5540.valid){
continue;
}
CheckValue<IkReal> x5541=IKPowWithIntegerCheck(IKsign((x5537+(r22*r22)+((x5536*(r20*r20)))+(((-2.0)*x5538*x5539))+(((-1.0)*x5536*x5537)))),-1);
if(!x5541.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5540.value)+(((1.5707963267949)*(x5541.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5542=IKcos(j4);
IkReal x5543=IKsin(j4);
IkReal x5544=(cj5*r00);
IkReal x5545=(r01*sj5);
IkReal x5546=(cj5*r10);
IkReal x5547=(cj5*r20);
IkReal x5548=((1.0)*x5542);
IkReal x5549=((1.0)*x5543);
IkReal x5550=(sj5*x5543);
IkReal x5551=(sj5*x5542);
evalcond[0]=(((x5542*x5545))+(((-1.0)*x5544*x5548))+((r02*x5543)));
evalcond[1]=(((r12*x5543))+((r11*x5551))+(((-1.0)*x5546*x5548)));
evalcond[2]=(((r21*x5550))+(((-1.0)*x5547*x5549))+(((-1.0)*r22*x5548)));
evalcond[3]=((-1.0)+((r21*x5551))+(((-1.0)*x5547*x5548))+((r22*x5543)));
evalcond[4]=(((x5543*x5545))+(((-1.0)*x5544*x5549))+(((-1.0)*r02*x5548))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*sj0))+((r11*x5550))+(((-1.0)*r12*x5548))+(((-1.0)*x5546*x5549)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5552=((1.0)*cj5);
CheckValue<IkReal> x5553=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5552)))),-1);
if(!x5553.valid){
continue;
}
CheckValue<IkReal> x5554 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x5552))+((r01*sj5)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5554.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5553.value)))+(x5554.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5555=IKcos(j4);
IkReal x5556=IKsin(j4);
IkReal x5557=(cj5*r00);
IkReal x5558=(r01*sj5);
IkReal x5559=(cj5*r10);
IkReal x5560=(cj5*r20);
IkReal x5561=((1.0)*x5555);
IkReal x5562=((1.0)*x5556);
IkReal x5563=(sj5*x5556);
IkReal x5564=(sj5*x5555);
evalcond[0]=((((-1.0)*x5557*x5561))+((x5555*x5558))+((r02*x5556)));
evalcond[1]=(((r12*x5556))+((r11*x5564))+(((-1.0)*x5559*x5561)));
evalcond[2]=((((-1.0)*r22*x5561))+((r21*x5563))+(((-1.0)*x5560*x5562)));
evalcond[3]=((-1.0)+((r21*x5564))+((r22*x5556))+(((-1.0)*x5560*x5561)));
evalcond[4]=((((-1.0)*x5557*x5562))+(((-1.0)*r02*x5561))+((x5556*x5558))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x5561))+((r11*x5563))+(((-1.0)*x5559*x5562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5565=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5565.valid){
continue;
}
CheckValue<IkReal> x5566 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5566.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5565.value)))+(x5566.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5567=IKcos(j4);
IkReal x5568=IKsin(j4);
IkReal x5569=(cj5*r00);
IkReal x5570=(r01*sj5);
IkReal x5571=(cj5*r10);
IkReal x5572=(cj5*r20);
IkReal x5573=((1.0)*x5567);
IkReal x5574=((1.0)*x5568);
IkReal x5575=(sj5*x5568);
IkReal x5576=(sj5*x5567);
evalcond[0]=(((r02*x5568))+(((-1.0)*x5569*x5573))+((x5567*x5570)));
evalcond[1]=(((r11*x5576))+(((-1.0)*x5571*x5573))+((r12*x5568)));
evalcond[2]=(((r21*x5575))+(((-1.0)*x5572*x5574))+(((-1.0)*r22*x5573)));
evalcond[3]=((-1.0)+((r22*x5568))+((r21*x5576))+(((-1.0)*x5572*x5573)));
evalcond[4]=((((-1.0)*r02*x5573))+(((-1.0)*x5569*x5574))+((x5568*x5570))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x5573))+((r11*x5575))+(((-1.0)*x5571*x5574)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*sj5))+((cj5*r01))))+IKsqr(((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*sj5))+((cj5*r01))), ((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5577=IKcos(j0);
IkReal x5578=IKsin(j0);
IkReal x5579=(r00*sj5);
IkReal x5580=(r10*sj5);
IkReal x5581=(cj5*r11);
IkReal x5582=(cj5*r01);
evalcond[0]=(x5577+x5580+x5581);
evalcond[1]=(x5579+x5582+(((-1.0)*x5578)));
evalcond[2]=((((-0.09465)*x5579))+(((-0.10915)*x5577))+(((-0.09465)*x5582))+(((-1.0)*px)));
evalcond[3]=((((-0.10915)*x5578))+(((-0.09465)*x5580))+(((-0.09465)*x5581))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5583=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5583;
j4eval[1]=IKsign(x5583);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5584=((1.0)*cj5);
IkReal x5585=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5584)));
j4eval[0]=x5585;
j4eval[1]=IKsign(x5585);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5584))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5586=cj5*cj5;
IkReal x5587=r21*r21;
IkReal x5588=(r21*sj5);
IkReal x5589=(cj5*r20);
IkReal x5590=(x5587+(r22*r22)+((x5586*(r20*r20)))+(((-2.0)*x5588*x5589))+(((-1.0)*x5586*x5587)));
j4eval[0]=x5590;
j4eval[1]=IKsign(x5590);
j4eval[2]=((IKabs(r22))+(IKabs((x5588+(((-1.0)*x5589))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5591=cj5*cj5;
IkReal x5592=r21*r21;
IkReal x5593=(r21*sj5);
IkReal x5594=(cj5*r20);
CheckValue<IkReal> x5595 = IKatan2WithCheck(IkReal(r22),IkReal((x5593+(((-1.0)*x5594)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5595.valid){
continue;
}
CheckValue<IkReal> x5596=IKPowWithIntegerCheck(IKsign((x5592+(((-2.0)*x5593*x5594))+(r22*r22)+(((-1.0)*x5591*x5592))+((x5591*(r20*r20))))),-1);
if(!x5596.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5595.value)+(((1.5707963267949)*(x5596.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5597=IKcos(j4);
IkReal x5598=IKsin(j4);
IkReal x5599=(cj5*r00);
IkReal x5600=(r01*sj5);
IkReal x5601=(cj5*r10);
IkReal x5602=(cj5*r20);
IkReal x5603=((1.0)*x5597);
IkReal x5604=((1.0)*x5598);
IkReal x5605=(sj5*x5598);
IkReal x5606=(sj5*x5597);
evalcond[0]=(((r02*x5598))+(((-1.0)*x5599*x5603))+((x5597*x5600)));
evalcond[1]=(((r12*x5598))+(((-1.0)*x5601*x5603))+((r11*x5606)));
evalcond[2]=((((-1.0)*r22*x5603))+(((-1.0)*x5602*x5604))+((r21*x5605)));
evalcond[3]=((-1.0)+(((-1.0)*x5602*x5603))+((r21*x5606))+((r22*x5598)));
evalcond[4]=((((-1.0)*x5599*x5604))+(((-1.0)*r02*x5603))+(((-1.0)*cj0))+((x5598*x5600)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x5603))+(((-1.0)*x5601*x5604))+((r11*x5605)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5607=((1.0)*cj5);
CheckValue<IkReal> x5608=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5607)))),-1);
if(!x5608.valid){
continue;
}
CheckValue<IkReal> x5609 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x5607))+((r01*sj5)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5609.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5608.value)))+(x5609.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5610=IKcos(j4);
IkReal x5611=IKsin(j4);
IkReal x5612=(cj5*r00);
IkReal x5613=(r01*sj5);
IkReal x5614=(cj5*r10);
IkReal x5615=(cj5*r20);
IkReal x5616=((1.0)*x5610);
IkReal x5617=((1.0)*x5611);
IkReal x5618=(sj5*x5611);
IkReal x5619=(sj5*x5610);
evalcond[0]=((((-1.0)*x5612*x5616))+((r02*x5611))+((x5610*x5613)));
evalcond[1]=(((r12*x5611))+((r11*x5619))+(((-1.0)*x5614*x5616)));
evalcond[2]=((((-1.0)*r22*x5616))+((r21*x5618))+(((-1.0)*x5615*x5617)));
evalcond[3]=((-1.0)+((r21*x5619))+(((-1.0)*x5615*x5616))+((r22*x5611)));
evalcond[4]=((((-1.0)*x5612*x5617))+((x5611*x5613))+(((-1.0)*r02*x5616))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x5616))+((r11*x5618))+(((-1.0)*x5614*x5617)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5620=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5620.valid){
continue;
}
CheckValue<IkReal> x5621 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5621.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5620.value)))+(x5621.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5622=IKcos(j4);
IkReal x5623=IKsin(j4);
IkReal x5624=(cj5*r00);
IkReal x5625=(r01*sj5);
IkReal x5626=(cj5*r10);
IkReal x5627=(cj5*r20);
IkReal x5628=((1.0)*x5622);
IkReal x5629=((1.0)*x5623);
IkReal x5630=(sj5*x5623);
IkReal x5631=(sj5*x5622);
evalcond[0]=(((r02*x5623))+((x5622*x5625))+(((-1.0)*x5624*x5628)));
evalcond[1]=(((r11*x5631))+(((-1.0)*x5626*x5628))+((r12*x5623)));
evalcond[2]=((((-1.0)*x5627*x5629))+(((-1.0)*r22*x5628))+((r21*x5630)));
evalcond[3]=((-1.0)+(((-1.0)*x5627*x5628))+((r22*x5623))+((r21*x5631)));
evalcond[4]=(((x5623*x5625))+(((-1.0)*x5624*x5629))+(((-1.0)*r02*x5628))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*sj0))+((r11*x5630))+(((-1.0)*x5626*x5629))+(((-1.0)*r12*x5628)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01))))+IKsqr((((cj5*r11))+((r10*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01))), (((cj5*r11))+((r10*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5632=IKcos(j0);
IkReal x5633=IKsin(j0);
IkReal x5634=(r00*sj5);
IkReal x5635=(r10*sj5);
IkReal x5636=(cj5*r11);
IkReal x5637=(cj5*r01);
evalcond[0]=(x5634+x5637+x5633);
evalcond[1]=(x5635+x5636+(((-1.0)*x5632)));
evalcond[2]=((((-1.0)*px))+(((-0.09465)*x5634))+(((-0.09465)*x5637))+(((-0.10915)*x5632)));
evalcond[3]=((((-1.0)*py))+(((-0.09465)*x5635))+(((-0.09465)*x5636))+(((-0.10915)*x5633)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5638=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5638;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x5638);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5639=((1.0)*cj5);
IkReal x5640=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5639)));
j4eval[0]=x5640;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x5639)))))+(IKabs(r12)));
j4eval[2]=IKsign(x5640);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5641=r21*r21;
IkReal x5642=cj5*cj5;
IkReal x5643=(r21*sj5);
IkReal x5644=(cj5*r20);
IkReal x5645=((((2.0)*x5643*x5644))+((x5641*x5642))+(((-1.0)*x5642*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-1.0)*x5641)));
j4eval[0]=x5645;
j4eval[1]=((IKabs((x5643+(((-1.0)*x5644)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5645);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5646=r21*r21;
IkReal x5647=cj5*cj5;
IkReal x5648=(r21*sj5);
IkReal x5649=(cj5*r20);
CheckValue<IkReal> x5650 = IKatan2WithCheck(IkReal(r22),IkReal((x5648+(((-1.0)*x5649)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5650.valid){
continue;
}
CheckValue<IkReal> x5651=IKPowWithIntegerCheck(IKsign(((((2.0)*x5648*x5649))+((x5646*x5647))+(((-1.0)*(r22*r22)))+(((-1.0)*x5647*(r20*r20)))+(((-1.0)*x5646)))),-1);
if(!x5651.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5650.value)+(((1.5707963267949)*(x5651.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5652=IKcos(j4);
IkReal x5653=IKsin(j4);
IkReal x5654=(cj5*r00);
IkReal x5655=(r01*sj5);
IkReal x5656=(cj5*r10);
IkReal x5657=(cj5*r20);
IkReal x5658=((1.0)*x5652);
IkReal x5659=((1.0)*x5653);
IkReal x5660=(sj5*x5653);
IkReal x5661=(sj5*x5652);
evalcond[0]=((((-1.0)*x5654*x5658))+((x5652*x5655))+((r02*x5653)));
evalcond[1]=(((r12*x5653))+(((-1.0)*x5656*x5658))+((r11*x5661)));
evalcond[2]=((((-1.0)*r22*x5658))+(((-1.0)*x5657*x5659))+((r21*x5660)));
evalcond[3]=((1.0)+((r22*x5653))+(((-1.0)*x5657*x5658))+((r21*x5661)));
evalcond[4]=((((-1.0)*x5654*x5659))+((x5653*x5655))+(((-1.0)*r02*x5658))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x5658))+(((-1.0)*x5656*x5659))+((r11*x5660)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5662=((1.0)*cj5);
CheckValue<IkReal> x5663=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5662))+(((-1.0)*r00*sj5)))),-1);
if(!x5663.valid){
continue;
}
CheckValue<IkReal> x5664 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x5662)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5664.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5663.value)))+(x5664.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5665=IKcos(j4);
IkReal x5666=IKsin(j4);
IkReal x5667=(cj5*r00);
IkReal x5668=(r01*sj5);
IkReal x5669=(cj5*r10);
IkReal x5670=(cj5*r20);
IkReal x5671=((1.0)*x5665);
IkReal x5672=((1.0)*x5666);
IkReal x5673=(sj5*x5666);
IkReal x5674=(sj5*x5665);
evalcond[0]=((((-1.0)*x5667*x5671))+((r02*x5666))+((x5665*x5668)));
evalcond[1]=((((-1.0)*x5669*x5671))+((r11*x5674))+((r12*x5666)));
evalcond[2]=((((-1.0)*x5670*x5672))+(((-1.0)*r22*x5671))+((r21*x5673)));
evalcond[3]=((1.0)+((r22*x5666))+(((-1.0)*x5670*x5671))+((r21*x5674)));
evalcond[4]=((((-1.0)*x5667*x5672))+((x5666*x5668))+(((-1.0)*cj0))+(((-1.0)*r02*x5671)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5669*x5672))+(((-1.0)*r12*x5671))+((r11*x5673)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5675 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5675.valid){
continue;
}
CheckValue<IkReal> x5676=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5676.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5675.value)+(((1.5707963267949)*(x5676.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5677=IKcos(j4);
IkReal x5678=IKsin(j4);
IkReal x5679=(cj5*r00);
IkReal x5680=(r01*sj5);
IkReal x5681=(cj5*r10);
IkReal x5682=(cj5*r20);
IkReal x5683=((1.0)*x5677);
IkReal x5684=((1.0)*x5678);
IkReal x5685=(sj5*x5678);
IkReal x5686=(sj5*x5677);
evalcond[0]=(((r02*x5678))+(((-1.0)*x5679*x5683))+((x5677*x5680)));
evalcond[1]=((((-1.0)*x5681*x5683))+((r12*x5678))+((r11*x5686)));
evalcond[2]=((((-1.0)*r22*x5683))+((r21*x5685))+(((-1.0)*x5682*x5684)));
evalcond[3]=((1.0)+((r22*x5678))+((r21*x5686))+(((-1.0)*x5682*x5683)));
evalcond[4]=((((-1.0)*r02*x5683))+(((-1.0)*x5679*x5684))+((x5678*x5680))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5681*x5684))+((r11*x5685))+(((-1.0)*r12*x5683)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5687=cj1*cj1;
IkReal x5688=(cj1*sj2);
IkReal x5689=(cj5*r01);
IkReal x5690=(cj2*sj1);
IkReal x5691=(r00*sj5);
IkReal x5692=((20000.0)*py);
IkReal x5693=(cj1*sj1);
IkReal x5694=(sj2*x5687);
IkReal x5695=((1893.0)*r10*sj5);
IkReal x5696=((1893.0)*cj5*r11);
CheckValue<IkReal> x5697=IKPowWithIntegerCheck((x5690+x5688),-1);
if(!x5697.valid){
continue;
}
CheckValue<IkReal> x5698=IKPowWithIntegerCheck(((((-7845.0)*cj2*sj2))+(((8500.0)*x5694))+(((-7845.0)*x5693))+(((8500.0)*cj1*x5690))+(((15690.0)*cj2*x5694))+(((15690.0)*cj1*cj2*x5690))),-1);
if(!x5698.valid){
continue;
}
if( IKabs(((x5697.value)*(((((-1.0)*x5691))+(((-1.0)*x5689)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5698.value)*((((x5690*x5696))+((x5690*x5695))+((x5690*x5692))+(((-2183.0)*x5689))+(((-2183.0)*x5691))+((x5688*x5692))+((x5688*x5695))+((x5688*x5696)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5697.value)*(((((-1.0)*x5691))+(((-1.0)*x5689))))))+IKsqr(((x5698.value)*((((x5690*x5696))+((x5690*x5695))+((x5690*x5692))+(((-2183.0)*x5689))+(((-2183.0)*x5691))+((x5688*x5692))+((x5688*x5695))+((x5688*x5696))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x5697.value)*(((((-1.0)*x5691))+(((-1.0)*x5689))))), ((x5698.value)*((((x5690*x5696))+((x5690*x5695))+((x5690*x5692))+(((-2183.0)*x5689))+(((-2183.0)*x5691))+((x5688*x5692))+((x5688*x5695))+((x5688*x5696))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5699=IKsin(j0);
IkReal x5700=IKcos(j0);
IkReal x5701=(cj5*r01);
IkReal x5702=((0.39225)*sj1);
IkReal x5703=(cj5*r11);
IkReal x5704=(cj2*sj1);
IkReal x5705=(r00*sj5);
IkReal x5706=((0.39225)*cj2);
IkReal x5707=(r10*sj5);
IkReal x5708=(sj2*x5700);
IkReal x5709=(sj2*x5699);
IkReal x5710=(cj1*x5700);
IkReal x5711=(cj1*x5699);
evalcond[0]=(((cj1*x5709))+((x5699*x5704))+x5705+x5701);
evalcond[1]=((((-1.0)*cj1*x5708))+(((-1.0)*x5700*x5704))+x5707+x5703);
evalcond[2]=((((-1.0)*px))+(((-1.0)*x5706*x5711))+(((-0.425)*x5711))+(((-0.09465)*x5701))+(((-0.09465)*x5705))+(((-0.10915)*x5700))+((x5702*x5709)));
evalcond[3]=((((0.425)*x5710))+(((-1.0)*x5702*x5708))+(((-0.10915)*x5699))+(((-1.0)*py))+(((-0.09465)*x5703))+(((-0.09465)*x5707))+((x5706*x5710)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5712=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5712;
j4eval[1]=IKsign(x5712);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5713=((1.0)*cj5);
IkReal x5714=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5713)));
j4eval[0]=x5714;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x5713))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5714);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5715=((1.0)*cj0);
IkReal x5716=((1.0)*cj5);
IkReal x5717=((((-1.0)*r21*x5716))+(((-1.0)*r20*sj5)));
j4eval[0]=x5717;
j4eval[1]=((IKabs((((r02*sj0))+(((-1.0)*r12*x5715)))))+(IKabs((((cj0*cj5*r10))+(((-1.0)*r11*sj5*x5715))+(((-1.0)*r00*sj0*x5716))+((r01*sj0*sj5))))));
j4eval[2]=IKsign(x5717);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5718=((-1.0)*r20);
IkReal x5720 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5720)==0){
continue;
}
IkReal x5719=pow(x5720,-0.5);
CheckValue<IkReal> x5721 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5718),IKFAST_ATAN2_MAGTHRESH);
if(!x5721.valid){
continue;
}
IkReal gconst114=((-1.0)*(x5721.value));
IkReal gconst115=(r21*x5719);
IkReal gconst116=(x5718*x5719);
CheckValue<IkReal> x5722 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5722.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5722.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5723=((-1.0)*r20);
IkReal x5724=x5719;
CheckValue<IkReal> x5726 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5723),IKFAST_ATAN2_MAGTHRESH);
if(!x5726.valid){
continue;
}
IkReal x5725=((-1.0)*(x5726.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5725;
IkReal gconst114=x5725;
IkReal gconst115=(r21*x5724);
IkReal gconst116=(x5723*x5724);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5727=((-1.0)*r20);
IkReal x5728=x5719;
CheckValue<IkReal> x5730 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5727),IKFAST_ATAN2_MAGTHRESH);
if(!x5730.valid){
continue;
}
IkReal x5729=((-1.0)*(x5730.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5729;
IkReal gconst114=x5729;
IkReal gconst115=(r21*x5728);
IkReal gconst116=(x5727*x5728);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x5731=((-1.0)*r20);
IkReal x5732=x5719;
CheckValue<IkReal> x5734 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5731),IKFAST_ATAN2_MAGTHRESH);
if(!x5734.valid){
continue;
}
IkReal x5733=((-1.0)*(x5734.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5733;
IkReal gconst114=x5733;
IkReal gconst115=(r21*x5732);
IkReal gconst116=(x5731*x5732);
IkReal x5735=((1.0)*(r22*r22));
CheckValue<IkReal> x5739=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5735))),-1);
if(!x5739.valid){
continue;
}
IkReal x5736=x5739.value;
IkReal x5737=((1.0)*x5736);
IkReal x5738=((((-1.0)*x5735))+(((-2.0)*x5736*(r20*r20)*(r21*r21)))+(((-1.0)*x5737*(r21*r21*r21*r21)))+(((-1.0)*x5737*(r20*r20*r20*r20))));
j4eval[0]=x5738;
j4eval[1]=IKsign(x5738);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5740=(cj2*sj1);
IkReal x5741=(gconst115*r21);
IkReal x5742=(cj1*sj2);
IkReal x5743=((1.0)*gconst116*r20);
CheckValue<IkReal> x5744 = IKatan2WithCheck(IkReal((((r22*x5742))+((r22*x5740)))),IkReal((((x5741*x5742))+(((-1.0)*x5740*x5743))+((x5740*x5741))+(((-1.0)*x5742*x5743)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5744.valid){
continue;
}
CheckValue<IkReal> x5745=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst116*r20*x5743))+(((-1.0)*(r22*r22)))+(((-1.0)*(x5741*x5741)))+(((2.0)*gconst116*r20*x5741)))),-1);
if(!x5745.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5744.value)+(((1.5707963267949)*(x5745.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5746=IKsin(j4);
IkReal x5747=IKcos(j4);
IkReal x5748=(cj1*cj2);
IkReal x5749=(gconst115*r21);
IkReal x5750=(sj1*sj2);
IkReal x5751=((1.0)*cj0);
IkReal x5752=((1.0)*sj0);
IkReal x5753=((1.0)*x5747);
IkReal x5754=(gconst115*x5747);
IkReal x5755=(gconst115*x5746);
IkReal x5756=((1.0)*gconst116*x5746);
evalcond[0]=(((x5746*x5749))+(((-1.0)*r20*x5756))+(((-1.0)*r22*x5753)));
evalcond[1]=((((-1.0)*r00*x5756))+((r01*x5755))+(((-1.0)*x5751))+(((-1.0)*r02*x5753)));
evalcond[2]=((((-1.0)*r12*x5753))+(((-1.0)*r10*x5756))+(((-1.0)*x5752))+((r11*x5755)));
evalcond[3]=(((cj2*sj1))+((r22*x5746))+((cj1*sj2))+(((-1.0)*gconst116*r20*x5753))+((x5747*x5749)));
evalcond[4]=((((-1.0)*gconst116*r00*x5753))+((r01*x5754))+((sj0*x5748))+((r02*x5746))+(((-1.0)*x5750*x5752)));
evalcond[5]=((((-1.0)*gconst116*r10*x5753))+(((-1.0)*x5748*x5751))+((r11*x5754))+((r12*x5746))+((cj0*x5750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5757=((1.0)*gconst116);
CheckValue<IkReal> x5758 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst115*r21))+(((-1.0)*cj0*r20*x5757)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5758.valid){
continue;
}
CheckValue<IkReal> x5759=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r10))+(((-1.0)*r11*x5757)))),-1);
if(!x5759.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5758.value)+(((1.5707963267949)*(x5759.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5760=IKsin(j4);
IkReal x5761=IKcos(j4);
IkReal x5762=(cj1*cj2);
IkReal x5763=(gconst115*r21);
IkReal x5764=(sj1*sj2);
IkReal x5765=((1.0)*cj0);
IkReal x5766=((1.0)*sj0);
IkReal x5767=((1.0)*x5761);
IkReal x5768=(gconst115*x5761);
IkReal x5769=(gconst115*x5760);
IkReal x5770=((1.0)*gconst116*x5760);
evalcond[0]=((((-1.0)*r20*x5770))+(((-1.0)*r22*x5767))+((x5760*x5763)));
evalcond[1]=((((-1.0)*r00*x5770))+((r01*x5769))+(((-1.0)*r02*x5767))+(((-1.0)*x5765)));
evalcond[2]=((((-1.0)*r12*x5767))+(((-1.0)*r10*x5770))+((r11*x5769))+(((-1.0)*x5766)));
evalcond[3]=((((-1.0)*gconst116*r20*x5767))+((cj2*sj1))+((cj1*sj2))+((r22*x5760))+((x5761*x5763)));
evalcond[4]=((((-1.0)*gconst116*r00*x5767))+((r01*x5768))+((r02*x5760))+(((-1.0)*x5764*x5766))+((sj0*x5762)));
evalcond[5]=(((r11*x5768))+(((-1.0)*gconst116*r10*x5767))+(((-1.0)*x5762*x5765))+((cj0*x5764))+((r12*x5760)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5771 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst115*r21*sj0))+(((-1.0)*gconst116*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5771.valid){
continue;
}
CheckValue<IkReal> x5772=IKPowWithIntegerCheck(IKsign((((gconst115*r00))+((gconst116*r01)))),-1);
if(!x5772.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5771.value)+(((1.5707963267949)*(x5772.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5773=IKsin(j4);
IkReal x5774=IKcos(j4);
IkReal x5775=(cj1*cj2);
IkReal x5776=(gconst115*r21);
IkReal x5777=(sj1*sj2);
IkReal x5778=((1.0)*cj0);
IkReal x5779=((1.0)*sj0);
IkReal x5780=((1.0)*x5774);
IkReal x5781=(gconst115*x5774);
IkReal x5782=(gconst115*x5773);
IkReal x5783=((1.0)*gconst116*x5773);
evalcond[0]=((((-1.0)*r20*x5783))+(((-1.0)*r22*x5780))+((x5773*x5776)));
evalcond[1]=((((-1.0)*r00*x5783))+((r01*x5782))+(((-1.0)*x5778))+(((-1.0)*r02*x5780)));
evalcond[2]=((((-1.0)*r10*x5783))+((r11*x5782))+(((-1.0)*r12*x5780))+(((-1.0)*x5779)));
evalcond[3]=(((cj2*sj1))+((x5774*x5776))+((cj1*sj2))+((r22*x5773))+(((-1.0)*gconst116*r20*x5780)));
evalcond[4]=((((-1.0)*x5777*x5779))+(((-1.0)*gconst116*r00*x5780))+((r01*x5781))+((r02*x5773))+((sj0*x5775)));
evalcond[5]=((((-1.0)*gconst116*r10*x5780))+((r11*x5781))+((cj0*x5777))+(((-1.0)*x5775*x5778))+((r12*x5773)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5784=((-1.0)*r21);
IkReal x5786 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5786)==0){
continue;
}
IkReal x5785=pow(x5786,-0.5);
CheckValue<IkReal> x5787 = IKatan2WithCheck(IkReal(x5784),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5787.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x5787.value))));
IkReal gconst118=(x5784*x5785);
IkReal gconst119=((1.0)*r20*x5785);
CheckValue<IkReal> x5788 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5788.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5788.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5789=((-1.0)*r21);
CheckValue<IkReal> x5792 = IKatan2WithCheck(IkReal(x5789),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5792.valid){
continue;
}
IkReal x5790=((1.0)*(x5792.value));
IkReal x5791=x5785;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5790)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5790)));
IkReal gconst118=(x5789*x5791);
IkReal gconst119=((1.0)*r20*x5791);
IkReal x5793=r22*r22;
IkReal x5794=((1.0)*x5793);
CheckValue<IkReal> x5798=IKPowWithIntegerCheck(((-1.0)+x5793),-1);
if(!x5798.valid){
continue;
}
IkReal x5795=x5798.value;
if((((1.0)+(((-1.0)*x5794)))) < -0.00001)
continue;
IkReal x5796=IKsqrt(((1.0)+(((-1.0)*x5794))));
IkReal x5797=(sj0*x5795*x5796);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x5794*x5797))+x5797))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5799=((-1.0)*r21);
CheckValue<IkReal> x5802 = IKatan2WithCheck(IkReal(x5799),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5802.valid){
continue;
}
IkReal x5800=((1.0)*(x5802.value));
IkReal x5801=x5785;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5800)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5800)));
IkReal gconst118=(x5799*x5801);
IkReal gconst119=((1.0)*r20*x5801);
IkReal x5803=r22*r22;
IkReal x5804=((1.0)*x5803);
CheckValue<IkReal> x5808=IKPowWithIntegerCheck(((-1.0)+x5803),-1);
if(!x5808.valid){
continue;
}
IkReal x5805=x5808.value;
if((((1.0)+(((-1.0)*x5804)))) < -0.00001)
continue;
IkReal x5806=IKsqrt(((1.0)+(((-1.0)*x5804))));
IkReal x5807=(cj0*x5805*x5806);
j4eval[0]=((IKabs(((((-1.0)*x5804*x5807))+x5807)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5809=((-1.0)*r21);
CheckValue<IkReal> x5812 = IKatan2WithCheck(IkReal(x5809),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5812.valid){
continue;
}
IkReal x5810=((1.0)*(x5812.value));
IkReal x5811=x5785;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5810)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5810)));
IkReal gconst118=(x5809*x5811);
IkReal gconst119=((1.0)*r20*x5811);
IkReal x5813=r22*r22;
IkReal x5814=(cj0*r12);
IkReal x5815=(r02*sj0);
CheckValue<IkReal> x5819=IKPowWithIntegerCheck(((-1.0)+x5813),-1);
if(!x5819.valid){
continue;
}
IkReal x5816=x5819.value;
if((((1.0)+(((-1.0)*x5813)))) < -0.00001)
continue;
IkReal x5817=IKsqrt(((1.0)+(((-1.0)*x5813))));
IkReal x5818=(r22*x5816*x5817);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x5814))+x5815)))+(IKabs((((x5814*x5818))+(((-1.0)*x5815*x5818))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5820=((1.0)*cj0);
IkReal x5821=((1.0)*gconst119);
CheckValue<IkReal> x5822 = IKatan2WithCheck(IkReal((((r02*sj0))+(((-1.0)*r12*x5820)))),IkReal(((((-1.0)*r00*sj0*x5821))+((gconst118*r01*sj0))+((cj0*gconst119*r10))+(((-1.0)*gconst118*r11*x5820)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5822.valid){
continue;
}
CheckValue<IkReal> x5823=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r20))+(((-1.0)*r21*x5821)))),-1);
if(!x5823.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5822.value)+(((1.5707963267949)*(x5823.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5824=IKsin(j4);
IkReal x5825=IKcos(j4);
IkReal x5826=(cj1*cj2);
IkReal x5827=(gconst118*r01);
IkReal x5828=(sj1*sj2);
IkReal x5829=(gconst119*r20);
IkReal x5830=(gconst119*r10);
IkReal x5831=(gconst119*r00);
IkReal x5832=((1.0)*cj0);
IkReal x5833=(gconst118*r21);
IkReal x5834=((1.0)*sj0);
IkReal x5835=(gconst118*r11);
IkReal x5836=((1.0)*x5825);
IkReal x5837=((1.0)*x5824);
evalcond[0]=((((-1.0)*r22*x5836))+((x5824*x5833))+(((-1.0)*x5829*x5837)));
evalcond[1]=((((-1.0)*x5832))+(((-1.0)*r02*x5836))+(((-1.0)*x5831*x5837))+((x5824*x5827)));
evalcond[2]=((((-1.0)*x5834))+(((-1.0)*x5830*x5837))+((x5824*x5835))+(((-1.0)*r12*x5836)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x5825*x5833))+((r22*x5824))+(((-1.0)*x5829*x5836)));
evalcond[4]=(((r02*x5824))+(((-1.0)*x5831*x5836))+((sj0*x5826))+(((-1.0)*x5828*x5834))+((x5825*x5827)));
evalcond[5]=((((-1.0)*x5830*x5836))+((r12*x5824))+((x5825*x5835))+((cj0*x5828))+(((-1.0)*x5826*x5832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5838=((1.0)*gconst119);
CheckValue<IkReal> x5839 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5838))+((cj0*gconst118*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5839.valid){
continue;
}
CheckValue<IkReal> x5840=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r10))+(((-1.0)*r11*x5838)))),-1);
if(!x5840.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5839.value)+(((1.5707963267949)*(x5840.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5841=IKsin(j4);
IkReal x5842=IKcos(j4);
IkReal x5843=(cj1*cj2);
IkReal x5844=(gconst118*r01);
IkReal x5845=(sj1*sj2);
IkReal x5846=(gconst119*r20);
IkReal x5847=(gconst119*r10);
IkReal x5848=(gconst119*r00);
IkReal x5849=((1.0)*cj0);
IkReal x5850=(gconst118*r21);
IkReal x5851=((1.0)*sj0);
IkReal x5852=(gconst118*r11);
IkReal x5853=((1.0)*x5842);
IkReal x5854=((1.0)*x5841);
evalcond[0]=(((x5841*x5850))+(((-1.0)*x5846*x5854))+(((-1.0)*r22*x5853)));
evalcond[1]=(((x5841*x5844))+(((-1.0)*x5848*x5854))+(((-1.0)*r02*x5853))+(((-1.0)*x5849)));
evalcond[2]=((((-1.0)*x5847*x5854))+((x5841*x5852))+(((-1.0)*r12*x5853))+(((-1.0)*x5851)));
evalcond[3]=(((cj2*sj1))+((x5842*x5850))+((cj1*sj2))+(((-1.0)*x5846*x5853))+((r22*x5841)));
evalcond[4]=(((x5842*x5844))+(((-1.0)*x5845*x5851))+((sj0*x5843))+(((-1.0)*x5848*x5853))+((r02*x5841)));
evalcond[5]=((((-1.0)*x5847*x5853))+((x5842*x5852))+((r12*x5841))+((cj0*x5845))+(((-1.0)*x5843*x5849)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5855 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst119*r20*sj0))+((gconst118*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5855.valid){
continue;
}
CheckValue<IkReal> x5856=IKPowWithIntegerCheck(IKsign((((gconst118*r00))+((gconst119*r01)))),-1);
if(!x5856.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5855.value)+(((1.5707963267949)*(x5856.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5857=IKsin(j4);
IkReal x5858=IKcos(j4);
IkReal x5859=(cj1*cj2);
IkReal x5860=(gconst118*r01);
IkReal x5861=(sj1*sj2);
IkReal x5862=(gconst119*r20);
IkReal x5863=(gconst119*r10);
IkReal x5864=(gconst119*r00);
IkReal x5865=((1.0)*cj0);
IkReal x5866=(gconst118*r21);
IkReal x5867=((1.0)*sj0);
IkReal x5868=(gconst118*r11);
IkReal x5869=((1.0)*x5858);
IkReal x5870=((1.0)*x5857);
evalcond[0]=((((-1.0)*r22*x5869))+(((-1.0)*x5862*x5870))+((x5857*x5866)));
evalcond[1]=((((-1.0)*x5865))+(((-1.0)*r02*x5869))+((x5857*x5860))+(((-1.0)*x5864*x5870)));
evalcond[2]=((((-1.0)*x5867))+(((-1.0)*x5863*x5870))+((x5857*x5868))+(((-1.0)*r12*x5869)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5862*x5869))+((r22*x5857))+((x5858*x5866)));
evalcond[4]=((((-1.0)*x5861*x5867))+((x5858*x5860))+((r02*x5857))+(((-1.0)*x5864*x5869))+((sj0*x5859)));
evalcond[5]=(((r12*x5857))+(((-1.0)*x5863*x5869))+(((-1.0)*x5859*x5865))+((x5858*x5868))+((cj0*x5861)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5871=((-1.0)*r10);
IkReal x5873 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5873)==0){
continue;
}
IkReal x5872=pow(x5873,-0.5);
CheckValue<IkReal> x5874 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5871),IKFAST_ATAN2_MAGTHRESH);
if(!x5874.valid){
continue;
}
IkReal gconst120=((-1.0)*(x5874.value));
IkReal gconst121=(r11*x5872);
IkReal gconst122=(x5871*x5872);
CheckValue<IkReal> x5875 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5875.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5875.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5876=((-1.0)*r10);
IkReal x5877=x5872;
CheckValue<IkReal> x5879 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5876),IKFAST_ATAN2_MAGTHRESH);
if(!x5879.valid){
continue;
}
IkReal x5878=((-1.0)*(x5879.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x5878;
IkReal gconst120=x5878;
IkReal gconst121=(r11*x5877);
IkReal gconst122=(x5876*x5877);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5880=((-1.0)*r10);
IkReal x5881=x5872;
CheckValue<IkReal> x5883 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5880),IKFAST_ATAN2_MAGTHRESH);
if(!x5883.valid){
continue;
}
IkReal x5882=((-1.0)*(x5883.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x5882;
IkReal gconst120=x5882;
IkReal gconst121=(r11*x5881);
IkReal gconst122=(x5880*x5881);
IkReal x5884=r12*r12;
IkReal x5885=((1.0)*cj0);
IkReal x5886=(r02*sj0);
CheckValue<IkReal> x5890=IKPowWithIntegerCheck(((-1.0)+x5884),-1);
if(!x5890.valid){
continue;
}
IkReal x5887=x5890.value;
if((((1.0)+(((-1.0)*x5884)))) < -0.00001)
continue;
IkReal x5888=IKsqrt(((1.0)+(((-1.0)*x5884))));
IkReal x5889=(x5887*x5888);
j4eval[0]=((IKabs((((r12*x5886*x5889))+(((-1.0)*x5884*x5885*x5889))+((cj0*x5889)))))+(IKabs(((((-1.0)*r12*x5885))+x5886))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5891=((-1.0)*r10);
IkReal x5892=x5872;
CheckValue<IkReal> x5894 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5891),IKFAST_ATAN2_MAGTHRESH);
if(!x5894.valid){
continue;
}
IkReal x5893=((-1.0)*(x5894.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x5893;
IkReal gconst120=x5893;
IkReal gconst121=(r11*x5892);
IkReal gconst122=(x5891*x5892);
IkReal x5895=(cj1*sj2);
IkReal x5896=(cj2*sj1);
IkReal x5897=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x5903=IKPowWithIntegerCheck(x5897,-1);
if(!x5903.valid){
continue;
}
IkReal x5898=x5903.value;
IkReal x5899=((1.0)*x5898);
IkReal x5900=x5872;
IkReal x5901=(r12*r22*x5900);
IkReal x5902=((((-1.0)*x5899*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x5898))+(((-1.0)*(r22*r22)))+(((-1.0)*x5899*(r10*r10)*(r20*r20))));
j4eval[0]=x5902;
j4eval[1]=((IKabs((((r22*x5895))+((r22*x5896)))))+(IKabs((((x5896*x5901))+((x5895*x5901))))));
j4eval[2]=IKsign(x5902);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5904=(cj2*sj1);
IkReal x5905=(cj1*sj2);
IkReal x5906=(gconst121*r21);
IkReal x5907=((1.0)*gconst122*r20);
CheckValue<IkReal> x5908=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst122*r20*x5907))+(((-1.0)*(r22*r22)))+(((-1.0)*(x5906*x5906)))+(((2.0)*gconst122*r20*x5906)))),-1);
if(!x5908.valid){
continue;
}
CheckValue<IkReal> x5909 = IKatan2WithCheck(IkReal((((r22*x5904))+((r22*x5905)))),IkReal(((((-1.0)*x5904*x5907))+(((-1.0)*x5905*x5907))+((x5905*x5906))+((x5904*x5906)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5909.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5908.value)))+(x5909.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5910=IKsin(j4);
IkReal x5911=IKcos(j4);
IkReal x5912=(cj1*cj2);
IkReal x5913=(gconst121*r11);
IkReal x5914=(sj1*sj2);
IkReal x5915=(gconst122*r00);
IkReal x5916=((1.0)*cj0);
IkReal x5917=((1.0)*sj0);
IkReal x5918=(gconst122*r10);
IkReal x5919=(gconst122*r20);
IkReal x5920=((1.0)*x5911);
IkReal x5921=((1.0)*x5910);
IkReal x5922=(gconst121*x5910);
IkReal x5923=(gconst121*x5911);
evalcond[0]=((((-1.0)*r22*x5920))+((r21*x5922))+(((-1.0)*x5919*x5921)));
evalcond[1]=((((-1.0)*r02*x5920))+(((-1.0)*x5915*x5921))+((r01*x5922))+(((-1.0)*x5916)));
evalcond[2]=((((-1.0)*x5918*x5921))+((x5910*x5913))+(((-1.0)*r12*x5920))+(((-1.0)*x5917)));
evalcond[3]=(((cj2*sj1))+((r22*x5910))+((cj1*sj2))+((r21*x5923))+(((-1.0)*x5919*x5920)));
evalcond[4]=(((sj0*x5912))+((r02*x5910))+(((-1.0)*x5915*x5920))+((r01*x5923))+(((-1.0)*x5914*x5917)));
evalcond[5]=(((r12*x5910))+((x5911*x5913))+(((-1.0)*x5918*x5920))+(((-1.0)*x5912*x5916))+((cj0*x5914)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5924=((1.0)*cj0);
IkReal x5925=((1.0)*gconst122);
CheckValue<IkReal> x5926 = IKatan2WithCheck(IkReal((((r02*sj0))+(((-1.0)*r12*x5924)))),IkReal((((gconst121*r01*sj0))+(((-1.0)*gconst121*r11*x5924))+((cj0*gconst122*r10))+(((-1.0)*r00*sj0*x5925)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5926.valid){
continue;
}
CheckValue<IkReal> x5927=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r20))+(((-1.0)*r21*x5925)))),-1);
if(!x5927.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5926.value)+(((1.5707963267949)*(x5927.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5928=IKsin(j4);
IkReal x5929=IKcos(j4);
IkReal x5930=(cj1*cj2);
IkReal x5931=(gconst121*r11);
IkReal x5932=(sj1*sj2);
IkReal x5933=(gconst122*r00);
IkReal x5934=((1.0)*cj0);
IkReal x5935=((1.0)*sj0);
IkReal x5936=(gconst122*r10);
IkReal x5937=(gconst122*r20);
IkReal x5938=((1.0)*x5929);
IkReal x5939=((1.0)*x5928);
IkReal x5940=(gconst121*x5928);
IkReal x5941=(gconst121*x5929);
evalcond[0]=(((r21*x5940))+(((-1.0)*x5937*x5939))+(((-1.0)*r22*x5938)));
evalcond[1]=((((-1.0)*r02*x5938))+((r01*x5940))+(((-1.0)*x5934))+(((-1.0)*x5933*x5939)));
evalcond[2]=((((-1.0)*x5935))+(((-1.0)*x5936*x5939))+((x5928*x5931))+(((-1.0)*r12*x5938)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x5928))+((r21*x5941))+(((-1.0)*x5937*x5938)));
evalcond[4]=(((r01*x5941))+(((-1.0)*x5932*x5935))+(((-1.0)*x5933*x5938))+((sj0*x5930))+((r02*x5928)));
evalcond[5]=(((x5929*x5931))+((r12*x5928))+(((-1.0)*x5936*x5938))+((cj0*x5932))+(((-1.0)*x5930*x5934)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5942 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst122*r20*sj0))+((gconst121*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5942.valid){
continue;
}
CheckValue<IkReal> x5943=IKPowWithIntegerCheck(IKsign((((gconst122*r01))+((gconst121*r00)))),-1);
if(!x5943.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5942.value)+(((1.5707963267949)*(x5943.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5944=IKsin(j4);
IkReal x5945=IKcos(j4);
IkReal x5946=(cj1*cj2);
IkReal x5947=(gconst121*r11);
IkReal x5948=(sj1*sj2);
IkReal x5949=(gconst122*r00);
IkReal x5950=((1.0)*cj0);
IkReal x5951=((1.0)*sj0);
IkReal x5952=(gconst122*r10);
IkReal x5953=(gconst122*r20);
IkReal x5954=((1.0)*x5945);
IkReal x5955=((1.0)*x5944);
IkReal x5956=(gconst121*x5944);
IkReal x5957=(gconst121*x5945);
evalcond[0]=(((r21*x5956))+(((-1.0)*r22*x5954))+(((-1.0)*x5953*x5955)));
evalcond[1]=((((-1.0)*r02*x5954))+(((-1.0)*x5949*x5955))+(((-1.0)*x5950))+((r01*x5956)));
evalcond[2]=(((x5944*x5947))+(((-1.0)*x5952*x5955))+(((-1.0)*x5951))+(((-1.0)*r12*x5954)));
evalcond[3]=(((cj2*sj1))+((r21*x5957))+((cj1*sj2))+((r22*x5944))+(((-1.0)*x5953*x5954)));
evalcond[4]=((((-1.0)*x5949*x5954))+(((-1.0)*x5948*x5951))+((sj0*x5946))+((r02*x5944))+((r01*x5957)));
evalcond[5]=(((cj0*x5948))+((x5945*x5947))+(((-1.0)*x5946*x5950))+(((-1.0)*x5952*x5954))+((r12*x5944)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5958=((-1.0)*r11);
IkReal x5960 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5960)==0){
continue;
}
IkReal x5959=pow(x5960,-0.5);
CheckValue<IkReal> x5961 = IKatan2WithCheck(IkReal(x5958),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5961.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x5961.value))));
IkReal gconst124=(x5958*x5959);
IkReal gconst125=((1.0)*r10*x5959);
CheckValue<IkReal> x5962 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5962.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5962.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5963=((-1.0)*r11);
CheckValue<IkReal> x5966 = IKatan2WithCheck(IkReal(x5963),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5966.valid){
continue;
}
IkReal x5964=((1.0)*(x5966.value));
IkReal x5965=x5959;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5964)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5964)));
IkReal gconst124=(x5963*x5965);
IkReal gconst125=((1.0)*r10*x5965);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x5967=((-1.0)*r11);
CheckValue<IkReal> x5970 = IKatan2WithCheck(IkReal(x5967),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5970.valid){
continue;
}
IkReal x5968=((1.0)*(x5970.value));
IkReal x5969=x5959;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5968)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5968)));
IkReal gconst124=(x5967*x5969);
IkReal gconst125=((1.0)*r10*x5969);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r12*r12))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5971=((1.0)*cj0);
IkReal x5972=((1.0)*gconst125);
CheckValue<IkReal> x5973 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5971))+((r02*sj0)))),IkReal((((gconst124*r01*sj0))+(((-1.0)*gconst124*r11*x5971))+(((-1.0)*r00*sj0*x5972))+((cj0*gconst125*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5973.valid){
continue;
}
CheckValue<IkReal> x5974=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*r21*x5972)))),-1);
if(!x5974.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5973.value)+(((1.5707963267949)*(x5974.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5975=IKsin(j4);
IkReal x5976=IKcos(j4);
IkReal x5977=(cj1*cj2);
IkReal x5978=(sj1*sj2);
IkReal x5979=(gconst125*r20);
IkReal x5980=(gconst124*r01);
IkReal x5981=((1.0)*cj0);
IkReal x5982=((1.0)*sj0);
IkReal x5983=(gconst125*r00);
IkReal x5984=(gconst125*r10);
IkReal x5985=((1.0)*x5976);
IkReal x5986=((1.0)*x5975);
IkReal x5987=(gconst124*x5975);
IkReal x5988=(gconst124*x5976);
evalcond[0]=((((-1.0)*x5979*x5986))+((r21*x5987))+(((-1.0)*r22*x5985)));
evalcond[1]=((((-1.0)*x5981))+((x5975*x5980))+(((-1.0)*r02*x5985))+(((-1.0)*x5983*x5986)));
evalcond[2]=((((-1.0)*x5982))+(((-1.0)*r12*x5985))+(((-1.0)*x5984*x5986))+((r11*x5987)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x5979*x5985))+((r21*x5988))+((cj1*sj2))+((r22*x5975)));
evalcond[4]=((((-1.0)*x5978*x5982))+((x5976*x5980))+((sj0*x5977))+((r02*x5975))+(((-1.0)*x5983*x5985)));
evalcond[5]=((((-1.0)*x5977*x5981))+(((-1.0)*x5984*x5985))+((r11*x5988))+((cj0*x5978))+((r12*x5975)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5989=((1.0)*gconst125);
CheckValue<IkReal> x5990 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5989))+((cj0*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5990.valid){
continue;
}
CheckValue<IkReal> x5991=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5989))+(((-1.0)*gconst124*r10)))),-1);
if(!x5991.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5990.value)+(((1.5707963267949)*(x5991.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5992=IKsin(j4);
IkReal x5993=IKcos(j4);
IkReal x5994=(cj1*cj2);
IkReal x5995=(sj1*sj2);
IkReal x5996=(gconst125*r20);
IkReal x5997=(gconst124*r01);
IkReal x5998=((1.0)*cj0);
IkReal x5999=((1.0)*sj0);
IkReal x6000=(gconst125*r00);
IkReal x6001=(gconst125*r10);
IkReal x6002=((1.0)*x5993);
IkReal x6003=((1.0)*x5992);
IkReal x6004=(gconst124*x5992);
IkReal x6005=(gconst124*x5993);
evalcond[0]=(((r21*x6004))+(((-1.0)*x5996*x6003))+(((-1.0)*r22*x6002)));
evalcond[1]=(((x5992*x5997))+(((-1.0)*x6000*x6003))+(((-1.0)*r02*x6002))+(((-1.0)*x5998)));
evalcond[2]=(((r11*x6004))+(((-1.0)*r12*x6002))+(((-1.0)*x5999))+(((-1.0)*x6001*x6003)));
evalcond[3]=(((r21*x6005))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5996*x6002))+((r22*x5992)));
evalcond[4]=(((sj0*x5994))+((r02*x5992))+((x5993*x5997))+(((-1.0)*x6000*x6002))+(((-1.0)*x5995*x5999)));
evalcond[5]=(((r12*x5992))+((r11*x6005))+(((-1.0)*x5994*x5998))+((cj0*x5995))+(((-1.0)*x6001*x6002)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6006 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst124*r21*sj0))+(((-1.0)*gconst125*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6006.valid){
continue;
}
CheckValue<IkReal> x6007=IKPowWithIntegerCheck(IKsign((((gconst124*r00))+((gconst125*r01)))),-1);
if(!x6007.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6006.value)+(((1.5707963267949)*(x6007.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6008=IKsin(j4);
IkReal x6009=IKcos(j4);
IkReal x6010=(cj1*cj2);
IkReal x6011=(sj1*sj2);
IkReal x6012=(gconst125*r20);
IkReal x6013=(gconst124*r01);
IkReal x6014=((1.0)*cj0);
IkReal x6015=((1.0)*sj0);
IkReal x6016=(gconst125*r00);
IkReal x6017=(gconst125*r10);
IkReal x6018=((1.0)*x6009);
IkReal x6019=((1.0)*x6008);
IkReal x6020=(gconst124*x6008);
IkReal x6021=(gconst124*x6009);
evalcond[0]=(((r21*x6020))+(((-1.0)*r22*x6018))+(((-1.0)*x6012*x6019)));
evalcond[1]=(((x6008*x6013))+(((-1.0)*r02*x6018))+(((-1.0)*x6016*x6019))+(((-1.0)*x6014)));
evalcond[2]=((((-1.0)*x6017*x6019))+(((-1.0)*r12*x6018))+((r11*x6020))+(((-1.0)*x6015)));
evalcond[3]=(((cj2*sj1))+((r22*x6008))+((cj1*sj2))+((r21*x6021))+(((-1.0)*x6012*x6018)));
evalcond[4]=(((x6009*x6013))+(((-1.0)*x6011*x6015))+((r02*x6008))+((sj0*x6010))+(((-1.0)*x6016*x6018)));
evalcond[5]=((((-1.0)*x6017*x6018))+((r12*x6008))+(((-1.0)*x6010*x6014))+((cj0*x6011))+((r11*x6021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6022=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6022;
j4eval[1]=IKsign(x6022);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6023=((1.0)*cj5);
IkReal x6024=((((-1.0)*r21*x6023))+(((-1.0)*r20*sj5)));
j4eval[0]=x6024;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x6023))+((r01*sj5))))));
j4eval[2]=IKsign(x6024);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6025=cj5*cj5;
IkReal x6026=r11*r11;
IkReal x6027=(r11*sj5);
IkReal x6028=(cj5*r10);
IkReal x6029=((((-1.0)*x6025*x6026))+(r12*r12)+x6026+((x6025*(r10*r10)))+(((-2.0)*x6027*x6028)));
j4eval[0]=x6029;
j4eval[1]=IKsign(x6029);
j4eval[2]=((IKabs(r12))+(IKabs((x6027+(((-1.0)*x6028))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6030=cj5*cj5;
IkReal x6031=r11*r11;
IkReal x6032=(cj5*r10);
IkReal x6033=(r11*sj5);
CheckValue<IkReal> x6034 = IKatan2WithCheck(IkReal((x6033+(((-1.0)*x6032)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6034.valid){
continue;
}
CheckValue<IkReal> x6035=IKPowWithIntegerCheck(IKsign(((r12*r12)+x6031+((x6030*(r10*r10)))+(((-1.0)*x6030*x6031))+(((-2.0)*x6032*x6033)))),-1);
if(!x6035.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6034.value)+(((1.5707963267949)*(x6035.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6036=IKcos(j4);
IkReal x6037=IKsin(j4);
IkReal x6038=(cj5*r00);
IkReal x6039=(cj5*r10);
IkReal x6040=(r21*sj5);
IkReal x6041=(cj5*r20);
IkReal x6042=((1.0)*x6036);
IkReal x6043=((1.0)*x6037);
IkReal x6044=(sj5*x6037);
IkReal x6045=(sj5*x6036);
evalcond[0]=(((r11*x6045))+((r12*x6037))+(((-1.0)*x6039*x6042)));
evalcond[1]=(((x6037*x6040))+(((-1.0)*r22*x6042))+(((-1.0)*x6041*x6043)));
evalcond[2]=((((-1.0)*r02*x6042))+(((-1.0)*x6038*x6043))+((r01*x6044)));
evalcond[3]=((-1.0)+((r11*x6044))+(((-1.0)*x6039*x6043))+(((-1.0)*r12*x6042)));
evalcond[4]=(((r22*x6037))+((cj2*sj1))+((x6036*x6040))+((cj1*sj2))+(((-1.0)*x6041*x6042)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r02*x6037))+(((-1.0)*x6038*x6042))+((cj1*cj2))+((r01*x6045)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6046=((1.0)*cj5);
CheckValue<IkReal> x6047 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x6046)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6047.valid){
continue;
}
CheckValue<IkReal> x6048=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6046))+(((-1.0)*r20*sj5)))),-1);
if(!x6048.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6047.value)+(((1.5707963267949)*(x6048.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6049=IKcos(j4);
IkReal x6050=IKsin(j4);
IkReal x6051=(cj5*r00);
IkReal x6052=(cj5*r10);
IkReal x6053=(r21*sj5);
IkReal x6054=(cj5*r20);
IkReal x6055=((1.0)*x6049);
IkReal x6056=((1.0)*x6050);
IkReal x6057=(sj5*x6050);
IkReal x6058=(sj5*x6049);
evalcond[0]=(((r12*x6050))+(((-1.0)*x6052*x6055))+((r11*x6058)));
evalcond[1]=((((-1.0)*x6054*x6056))+(((-1.0)*r22*x6055))+((x6050*x6053)));
evalcond[2]=(((r01*x6057))+(((-1.0)*x6051*x6056))+(((-1.0)*r02*x6055)));
evalcond[3]=((-1.0)+(((-1.0)*x6052*x6056))+(((-1.0)*r12*x6055))+((r11*x6057)));
evalcond[4]=(((cj2*sj1))+((r22*x6050))+((cj1*sj2))+(((-1.0)*x6054*x6055))+((x6049*x6053)));
evalcond[5]=(((r01*x6058))+(((-1.0)*x6051*x6055))+(((-1.0)*sj1*sj2))+((r02*x6050))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6059 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6059.valid){
continue;
}
CheckValue<IkReal> x6060=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6060.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6059.value)+(((1.5707963267949)*(x6060.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6061=IKcos(j4);
IkReal x6062=IKsin(j4);
IkReal x6063=(cj5*r00);
IkReal x6064=(cj5*r10);
IkReal x6065=(r21*sj5);
IkReal x6066=(cj5*r20);
IkReal x6067=((1.0)*x6061);
IkReal x6068=((1.0)*x6062);
IkReal x6069=(sj5*x6062);
IkReal x6070=(sj5*x6061);
evalcond[0]=(((r11*x6070))+(((-1.0)*x6064*x6067))+((r12*x6062)));
evalcond[1]=((((-1.0)*r22*x6067))+((x6062*x6065))+(((-1.0)*x6066*x6068)));
evalcond[2]=(((r01*x6069))+(((-1.0)*r02*x6067))+(((-1.0)*x6063*x6068)));
evalcond[3]=((-1.0)+(((-1.0)*x6064*x6068))+((r11*x6069))+(((-1.0)*r12*x6067)));
evalcond[4]=(((cj2*sj1))+((x6061*x6065))+((cj1*sj2))+((r22*x6062))+(((-1.0)*x6066*x6067)));
evalcond[5]=(((r01*x6070))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*x6063*x6067))+((r02*x6062)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6071=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6071;
j4eval[1]=IKsign(x6071);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6072=((1.0)*cj5);
IkReal x6073=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6072)));
j4eval[0]=x6073;
j4eval[1]=((IKabs(((((-1.0)*r20*x6072))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6073);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6074=cj5*cj5;
IkReal x6075=r11*r11;
IkReal x6076=(cj5*r10);
IkReal x6077=(r11*sj5);
IkReal x6078=((((-1.0)*x6074*(r10*r10)))+(((-1.0)*x6075))+(((2.0)*x6076*x6077))+(((-1.0)*(r12*r12)))+((x6074*x6075)));
j4eval[0]=x6078;
j4eval[1]=IKsign(x6078);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x6076))+x6077))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6079=cj5*cj5;
IkReal x6080=r11*r11;
IkReal x6081=(cj5*r10);
IkReal x6082=(r11*sj5);
CheckValue<IkReal> x6083=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6079*(r10*r10)))+((x6079*x6080))+(((-1.0)*x6080))+(((-1.0)*(r12*r12)))+(((2.0)*x6081*x6082)))),-1);
if(!x6083.valid){
continue;
}
CheckValue<IkReal> x6084 = IKatan2WithCheck(IkReal((x6082+(((-1.0)*x6081)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6084.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6083.value)))+(x6084.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6085=IKcos(j4);
IkReal x6086=IKsin(j4);
IkReal x6087=(cj5*r00);
IkReal x6088=(cj5*r10);
IkReal x6089=(r21*sj5);
IkReal x6090=(cj5*r20);
IkReal x6091=((1.0)*x6085);
IkReal x6092=((1.0)*x6086);
IkReal x6093=(sj5*x6086);
IkReal x6094=(sj5*x6085);
evalcond[0]=(((r12*x6086))+((r11*x6094))+(((-1.0)*x6088*x6091)));
evalcond[1]=((((-1.0)*r22*x6091))+((x6086*x6089))+(((-1.0)*x6090*x6092)));
evalcond[2]=((((-1.0)*x6087*x6092))+((r01*x6093))+(((-1.0)*r02*x6091)));
evalcond[3]=((1.0)+((r11*x6093))+(((-1.0)*r12*x6091))+(((-1.0)*x6088*x6092)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6090*x6091))+((x6085*x6089))+((r22*x6086)));
evalcond[5]=((((-1.0)*x6087*x6091))+((r01*x6094))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x6086)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6095=((1.0)*cj5);
CheckValue<IkReal> x6096 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x6095)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6096.valid){
continue;
}
CheckValue<IkReal> x6097=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6095))+(((-1.0)*r00*sj5)))),-1);
if(!x6097.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6096.value)+(((1.5707963267949)*(x6097.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6098=IKcos(j4);
IkReal x6099=IKsin(j4);
IkReal x6100=(cj5*r00);
IkReal x6101=(cj5*r10);
IkReal x6102=(r21*sj5);
IkReal x6103=(cj5*r20);
IkReal x6104=((1.0)*x6098);
IkReal x6105=((1.0)*x6099);
IkReal x6106=(sj5*x6099);
IkReal x6107=(sj5*x6098);
evalcond[0]=(((r11*x6107))+(((-1.0)*x6101*x6104))+((r12*x6099)));
evalcond[1]=((((-1.0)*x6103*x6105))+((x6099*x6102))+(((-1.0)*r22*x6104)));
evalcond[2]=((((-1.0)*r02*x6104))+((r01*x6106))+(((-1.0)*x6100*x6105)));
evalcond[3]=((1.0)+((r11*x6106))+(((-1.0)*x6101*x6105))+(((-1.0)*r12*x6104)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6103*x6104))+((cj1*sj2))+((r22*x6099))+((x6098*x6102)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x6107))+(((-1.0)*x6100*x6104))+((r02*x6099)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6108=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6108.valid){
continue;
}
CheckValue<IkReal> x6109 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6109.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6108.value)))+(x6109.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6110=IKcos(j4);
IkReal x6111=IKsin(j4);
IkReal x6112=(cj5*r00);
IkReal x6113=(cj5*r10);
IkReal x6114=(r21*sj5);
IkReal x6115=(cj5*r20);
IkReal x6116=((1.0)*x6110);
IkReal x6117=((1.0)*x6111);
IkReal x6118=(sj5*x6111);
IkReal x6119=(sj5*x6110);
evalcond[0]=(((r12*x6111))+(((-1.0)*x6113*x6116))+((r11*x6119)));
evalcond[1]=((((-1.0)*r22*x6116))+(((-1.0)*x6115*x6117))+((x6111*x6114)));
evalcond[2]=((((-1.0)*x6112*x6117))+(((-1.0)*r02*x6116))+((r01*x6118)));
evalcond[3]=((1.0)+(((-1.0)*r12*x6116))+(((-1.0)*x6113*x6117))+((r11*x6118)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6115*x6116))+((x6110*x6114))+((cj1*sj2))+((r22*x6111)));
evalcond[5]=(((r02*x6111))+(((-1.0)*x6112*x6116))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x6119)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6121 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6121)==0){
continue;
}
IkReal x6120=pow(x6121,-0.5);
CheckValue<IkReal> x6122 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6122.valid){
continue;
}
IkReal gconst126=((-1.0)*(x6122.value));
IkReal gconst127=((-1.0)*r01*x6120);
IkReal gconst128=(r00*x6120);
CheckValue<IkReal> x6123 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6123.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6123.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x6126 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6126.valid){
continue;
}
IkReal x6124=((-1.0)*(x6126.value));
IkReal x6125=x6120;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x6124;
IkReal gconst126=x6124;
IkReal gconst127=((-1.0)*r01*x6125);
IkReal gconst128=(r00*x6125);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x6129 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6129.valid){
continue;
}
IkReal x6127=((-1.0)*(x6129.value));
IkReal x6128=x6120;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x6127;
IkReal gconst126=x6127;
IkReal gconst127=((-1.0)*r01*x6128);
IkReal gconst128=(r00*x6128);
IkReal x6130=r02*r02;
IkReal x6131=(cj0*r12);
IkReal x6132=((1.0)*x6130);
CheckValue<IkReal> x6136=IKPowWithIntegerCheck(((-1.0)+x6130),-1);
if(!x6136.valid){
continue;
}
IkReal x6133=x6136.value;
if((((1.0)+(((-1.0)*x6132)))) < -0.00001)
continue;
IkReal x6134=IKsqrt(((1.0)+(((-1.0)*x6132))));
IkReal x6135=(x6133*x6134);
j4eval[0]=((IKabs((((r02*x6131*x6135))+(((-1.0)*sj0*x6132*x6135))+((sj0*x6135)))))+(IKabs((((r02*sj0))+(((-1.0)*x6131))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x6139 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6139.valid){
continue;
}
IkReal x6137=((-1.0)*(x6139.value));
IkReal x6138=x6120;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x6137;
IkReal gconst126=x6137;
IkReal gconst127=((-1.0)*r01*x6138);
IkReal gconst128=(r00*x6138);
IkReal x6140=r02*r02;
IkReal x6141=((1.0)+(((-1.0)*x6140)));
IkReal x6142=(cj2*r22*sj1);
IkReal x6143=(cj1*r22*sj2);
CheckValue<IkReal> x6150=IKPowWithIntegerCheck(x6141,-1);
if(!x6150.valid){
continue;
}
IkReal x6144=x6150.value;
CheckValue<IkReal> x6151=IKPowWithIntegerCheck(((-1.0)+x6140),-1);
if(!x6151.valid){
continue;
}
IkReal x6145=x6151.value;
IkReal x6146=((1.0)*x6144);
if((x6141) < -0.00001)
continue;
IkReal x6147=IKsqrt(x6141);
IkReal x6148=((1.0)*r02*x6145*x6147);
IkReal x6149=((((-1.0)*x6146*(r01*r01)*(r21*r21)))+(((-1.0)*x6146*(r00*r00)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-2.0)*r00*r01*r20*r21*x6144)));
j4eval[0]=x6149;
j4eval[1]=IKsign(x6149);
j4eval[2]=((IKabs((x6143+x6142)))+(IKabs(((((-1.0)*x6142*x6148))+(((-1.0)*x6143*x6148))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6152=(gconst127*r21);
IkReal x6153=(gconst128*r20);
IkReal x6154=(cj2*sj1);
IkReal x6155=(cj1*sj2);
CheckValue<IkReal> x6156 = IKatan2WithCheck(IkReal((((r22*x6154))+((r22*x6155)))),IkReal(((((-1.0)*x6153*x6155))+(((-1.0)*x6153*x6154))+((x6152*x6154))+((x6152*x6155)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6156.valid){
continue;
}
CheckValue<IkReal> x6157=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x6152*x6152)))+(((2.0)*x6152*x6153))+(((-1.0)*(x6153*x6153)))+(((-1.0)*(r22*r22))))),-1);
if(!x6157.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6156.value)+(((1.5707963267949)*(x6157.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6158=IKsin(j4);
IkReal x6159=IKcos(j4);
IkReal x6160=(cj1*cj2);
IkReal x6161=(gconst127*r01);
IkReal x6162=(sj1*sj2);
IkReal x6163=(gconst128*r10);
IkReal x6164=((1.0)*cj0);
IkReal x6165=(gconst128*r00);
IkReal x6166=((1.0)*sj0);
IkReal x6167=(gconst128*r20);
IkReal x6168=((1.0)*x6159);
IkReal x6169=((1.0)*x6158);
IkReal x6170=(gconst127*x6159);
IkReal x6171=(gconst127*x6158);
evalcond[0]=((((-1.0)*x6167*x6169))+((r21*x6171))+(((-1.0)*r22*x6168)));
evalcond[1]=(((x6158*x6161))+(((-1.0)*x6164))+(((-1.0)*r02*x6168))+(((-1.0)*x6165*x6169)));
evalcond[2]=(((r11*x6171))+(((-1.0)*x6166))+(((-1.0)*r12*x6168))+(((-1.0)*x6163*x6169)));
evalcond[3]=(((r22*x6158))+((cj2*sj1))+(((-1.0)*x6167*x6168))+((cj1*sj2))+((r21*x6170)));
evalcond[4]=(((x6159*x6161))+((sj0*x6160))+((r02*x6158))+(((-1.0)*x6165*x6168))+(((-1.0)*x6162*x6166)));
evalcond[5]=((((-1.0)*x6160*x6164))+((r12*x6158))+((r11*x6170))+((cj0*x6162))+(((-1.0)*x6163*x6168)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6172=((1.0)*cj0);
IkReal x6173=((1.0)*gconst128);
CheckValue<IkReal> x6174 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6172))+((r02*sj0)))),IkReal(((((-1.0)*gconst127*r11*x6172))+(((-1.0)*r00*sj0*x6173))+((cj0*gconst128*r10))+((gconst127*r01*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6174.valid){
continue;
}
CheckValue<IkReal> x6175=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst127*r20))+(((-1.0)*r21*x6173)))),-1);
if(!x6175.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6174.value)+(((1.5707963267949)*(x6175.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6176=IKsin(j4);
IkReal x6177=IKcos(j4);
IkReal x6178=(cj1*cj2);
IkReal x6179=(gconst127*r01);
IkReal x6180=(sj1*sj2);
IkReal x6181=(gconst128*r10);
IkReal x6182=((1.0)*cj0);
IkReal x6183=(gconst128*r00);
IkReal x6184=((1.0)*sj0);
IkReal x6185=(gconst128*r20);
IkReal x6186=((1.0)*x6177);
IkReal x6187=((1.0)*x6176);
IkReal x6188=(gconst127*x6177);
IkReal x6189=(gconst127*x6176);
evalcond[0]=((((-1.0)*r22*x6186))+((r21*x6189))+(((-1.0)*x6185*x6187)));
evalcond[1]=((((-1.0)*r02*x6186))+((x6176*x6179))+(((-1.0)*x6183*x6187))+(((-1.0)*x6182)));
evalcond[2]=((((-1.0)*r12*x6186))+((r11*x6189))+(((-1.0)*x6184))+(((-1.0)*x6181*x6187)));
evalcond[3]=(((cj2*sj1))+((r21*x6188))+(((-1.0)*x6185*x6186))+((cj1*sj2))+((r22*x6176)));
evalcond[4]=(((sj0*x6178))+((r02*x6176))+((x6177*x6179))+(((-1.0)*x6183*x6186))+(((-1.0)*x6180*x6184)));
evalcond[5]=(((r12*x6176))+(((-1.0)*x6178*x6182))+((cj0*x6180))+((r11*x6188))+(((-1.0)*x6181*x6186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6190=((1.0)*gconst128);
CheckValue<IkReal> x6191=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6190))+(((-1.0)*gconst127*r10)))),-1);
if(!x6191.valid){
continue;
}
CheckValue<IkReal> x6192 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst127*r21))+(((-1.0)*cj0*r20*x6190)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6192.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6191.value)))+(x6192.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6193=IKsin(j4);
IkReal x6194=IKcos(j4);
IkReal x6195=(cj1*cj2);
IkReal x6196=(gconst127*r01);
IkReal x6197=(sj1*sj2);
IkReal x6198=(gconst128*r10);
IkReal x6199=((1.0)*cj0);
IkReal x6200=(gconst128*r00);
IkReal x6201=((1.0)*sj0);
IkReal x6202=(gconst128*r20);
IkReal x6203=((1.0)*x6194);
IkReal x6204=((1.0)*x6193);
IkReal x6205=(gconst127*x6194);
IkReal x6206=(gconst127*x6193);
evalcond[0]=((((-1.0)*x6202*x6204))+((r21*x6206))+(((-1.0)*r22*x6203)));
evalcond[1]=((((-1.0)*x6199))+(((-1.0)*r02*x6203))+((x6193*x6196))+(((-1.0)*x6200*x6204)));
evalcond[2]=((((-1.0)*x6198*x6204))+(((-1.0)*x6201))+(((-1.0)*r12*x6203))+((r11*x6206)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6202*x6203))+((cj1*sj2))+((r21*x6205))+((r22*x6193)));
evalcond[4]=((((-1.0)*x6197*x6201))+((x6194*x6196))+((r02*x6193))+((sj0*x6195))+(((-1.0)*x6200*x6203)));
evalcond[5]=((((-1.0)*x6198*x6203))+((r12*x6193))+(((-1.0)*x6195*x6199))+((r11*x6205))+((cj0*x6197)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6208 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6208)==0){
continue;
}
IkReal x6207=pow(x6208,-0.5);
CheckValue<IkReal> x6209 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6209.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x6209.value))));
IkReal gconst130=((1.0)*r01*x6207);
IkReal gconst131=((-1.0)*r00*x6207);
CheckValue<IkReal> x6210 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6210.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6210.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x6213 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6213.valid){
continue;
}
IkReal x6211=((1.0)*(x6213.value));
IkReal x6212=x6207;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6211)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6211)));
IkReal gconst130=((1.0)*r01*x6212);
IkReal gconst131=((-1.0)*r00*x6212);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=sj0;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x6216 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6216.valid){
continue;
}
IkReal x6214=((1.0)*(x6216.value));
IkReal x6215=x6207;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6214)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6214)));
IkReal gconst130=((1.0)*r01*x6215);
IkReal gconst131=((-1.0)*r00*x6215);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6217=((1.0)*cj0);
IkReal x6218=((1.0)*gconst131);
CheckValue<IkReal> x6219=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6218))+(((-1.0)*gconst130*r20)))),-1);
if(!x6219.valid){
continue;
}
CheckValue<IkReal> x6220 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6217))+((r02*sj0)))),IkReal(((((-1.0)*gconst130*r11*x6217))+((gconst130*r01*sj0))+(((-1.0)*r00*sj0*x6218))+((cj0*gconst131*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6220.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6219.value)))+(x6220.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6221=IKsin(j4);
IkReal x6222=IKcos(j4);
IkReal x6223=(cj1*cj2);
IkReal x6224=(gconst131*r10);
IkReal x6225=(gconst130*r11);
IkReal x6226=(gconst131*r20);
IkReal x6227=((1.0)*cj0);
IkReal x6228=((1.0)*sj0);
IkReal x6229=(gconst131*r00);
IkReal x6230=(sj1*sj2);
IkReal x6231=((1.0)*x6222);
IkReal x6232=((1.0)*x6221);
IkReal x6233=(gconst130*x6222);
IkReal x6234=(gconst130*x6221);
evalcond[0]=((((-1.0)*x6226*x6232))+((r21*x6234))+(((-1.0)*r22*x6231)));
evalcond[1]=((((-1.0)*x6227))+((r01*x6234))+(((-1.0)*r02*x6231))+(((-1.0)*x6229*x6232)));
evalcond[2]=((((-1.0)*r12*x6231))+(((-1.0)*x6224*x6232))+(((-1.0)*x6228))+((x6221*x6225)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6226*x6231))+((cj1*sj2))+((r21*x6233))+((r22*x6221)));
evalcond[4]=(((r02*x6221))+(((-1.0)*x6228*x6230))+((r01*x6233))+(((-1.0)*x6229*x6231))+((sj0*x6223)));
evalcond[5]=((((-1.0)*x6224*x6231))+((x6222*x6225))+(((-1.0)*x6223*x6227))+((cj0*x6230))+((r12*x6221)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6235=((1.0)*gconst131);
CheckValue<IkReal> x6236=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6235))+(((-1.0)*gconst130*r10)))),-1);
if(!x6236.valid){
continue;
}
CheckValue<IkReal> x6237 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*r20*x6235)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6237.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6236.value)))+(x6237.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6238=IKsin(j4);
IkReal x6239=IKcos(j4);
IkReal x6240=(cj1*cj2);
IkReal x6241=(gconst131*r10);
IkReal x6242=(gconst130*r11);
IkReal x6243=(gconst131*r20);
IkReal x6244=((1.0)*cj0);
IkReal x6245=((1.0)*sj0);
IkReal x6246=(gconst131*r00);
IkReal x6247=(sj1*sj2);
IkReal x6248=((1.0)*x6239);
IkReal x6249=((1.0)*x6238);
IkReal x6250=(gconst130*x6239);
IkReal x6251=(gconst130*x6238);
evalcond[0]=(((r21*x6251))+(((-1.0)*r22*x6248))+(((-1.0)*x6243*x6249)));
evalcond[1]=((((-1.0)*r02*x6248))+((r01*x6251))+(((-1.0)*x6244))+(((-1.0)*x6246*x6249)));
evalcond[2]=((((-1.0)*x6245))+((x6238*x6242))+(((-1.0)*r12*x6248))+(((-1.0)*x6241*x6249)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x6250))+((r22*x6238))+(((-1.0)*x6243*x6248)));
evalcond[4]=(((r02*x6238))+((r01*x6250))+((sj0*x6240))+(((-1.0)*x6245*x6247))+(((-1.0)*x6246*x6248)));
evalcond[5]=(((r12*x6238))+((x6239*x6242))+(((-1.0)*x6240*x6244))+((cj0*x6247))+(((-1.0)*x6241*x6248)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6252 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst130*r21*sj0))+(((-1.0)*gconst131*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6252.valid){
continue;
}
CheckValue<IkReal> x6253=IKPowWithIntegerCheck(IKsign((((gconst131*r01))+((gconst130*r00)))),-1);
if(!x6253.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6252.value)+(((1.5707963267949)*(x6253.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6254=IKsin(j4);
IkReal x6255=IKcos(j4);
IkReal x6256=(cj1*cj2);
IkReal x6257=(gconst131*r10);
IkReal x6258=(gconst130*r11);
IkReal x6259=(gconst131*r20);
IkReal x6260=((1.0)*cj0);
IkReal x6261=((1.0)*sj0);
IkReal x6262=(gconst131*r00);
IkReal x6263=(sj1*sj2);
IkReal x6264=((1.0)*x6255);
IkReal x6265=((1.0)*x6254);
IkReal x6266=(gconst130*x6255);
IkReal x6267=(gconst130*x6254);
evalcond[0]=(((r21*x6267))+(((-1.0)*x6259*x6265))+(((-1.0)*r22*x6264)));
evalcond[1]=(((r01*x6267))+(((-1.0)*r02*x6264))+(((-1.0)*x6262*x6265))+(((-1.0)*x6260)));
evalcond[2]=(((x6254*x6258))+(((-1.0)*x6257*x6265))+(((-1.0)*x6261))+(((-1.0)*r12*x6264)));
evalcond[3]=(((cj2*sj1))+((r22*x6254))+((cj1*sj2))+((r21*x6266))+(((-1.0)*x6259*x6264)));
evalcond[4]=(((r01*x6266))+((sj0*x6256))+(((-1.0)*x6261*x6263))+(((-1.0)*x6262*x6264))+((r02*x6254)));
evalcond[5]=(((x6255*x6258))+(((-1.0)*x6257*x6264))+((cj0*x6263))+((r12*x6254))+(((-1.0)*x6256*x6260)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6268=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6268;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6268);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6269=((1.0)*cj5);
IkReal x6270=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6269)));
j4eval[0]=x6270;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x6269))))));
j4eval[2]=IKsign(x6270);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6271=cj5*cj5;
IkReal x6272=r01*r01;
IkReal x6273=(cj5*r00);
IkReal x6274=(r01*sj5);
IkReal x6275=(x6272+(((-2.0)*x6273*x6274))+(r02*r02)+(((-1.0)*x6271*x6272))+((x6271*(r00*r00))));
j4eval[0]=x6275;
j4eval[1]=IKsign(x6275);
j4eval[2]=((IKabs(r02))+(IKabs((x6274+(((-1.0)*x6273))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6276=cj5*cj5;
IkReal x6277=r01*r01;
IkReal x6278=(r01*sj5);
IkReal x6279=(cj5*r00);
CheckValue<IkReal> x6280 = IKatan2WithCheck(IkReal((x6278+(((-1.0)*x6279)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6280.valid){
continue;
}
CheckValue<IkReal> x6281=IKPowWithIntegerCheck(IKsign((x6277+(((-2.0)*x6278*x6279))+(((-1.0)*x6276*x6277))+(r02*r02)+((x6276*(r00*r00))))),-1);
if(!x6281.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6280.value)+(((1.5707963267949)*(x6281.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6282=IKcos(j4);
IkReal x6283=IKsin(j4);
IkReal x6284=(cj5*r00);
IkReal x6285=(cj5*r10);
IkReal x6286=(r21*sj5);
IkReal x6287=(cj5*r20);
IkReal x6288=((1.0)*x6282);
IkReal x6289=((1.0)*x6283);
IkReal x6290=(sj5*x6283);
IkReal x6291=(sj5*x6282);
evalcond[0]=((((-1.0)*x6284*x6288))+((r01*x6291))+((r02*x6283)));
evalcond[1]=((((-1.0)*r22*x6288))+((x6283*x6286))+(((-1.0)*x6287*x6289)));
evalcond[2]=((((-1.0)*x6285*x6289))+((r11*x6290))+(((-1.0)*r12*x6288)));
evalcond[3]=((-1.0)+(((-1.0)*x6284*x6289))+((r01*x6290))+(((-1.0)*r02*x6288)));
evalcond[4]=(((cj2*sj1))+((r22*x6283))+((cj1*sj2))+((x6282*x6286))+(((-1.0)*x6287*x6288)));
evalcond[5]=((((-1.0)*x6285*x6288))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x6291))+((r12*x6283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6292=((1.0)*cj5);
CheckValue<IkReal> x6293 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x6292))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6293.valid){
continue;
}
CheckValue<IkReal> x6294=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6292)))),-1);
if(!x6294.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6293.value)+(((1.5707963267949)*(x6294.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6295=IKcos(j4);
IkReal x6296=IKsin(j4);
IkReal x6297=(cj5*r00);
IkReal x6298=(cj5*r10);
IkReal x6299=(r21*sj5);
IkReal x6300=(cj5*r20);
IkReal x6301=((1.0)*x6295);
IkReal x6302=((1.0)*x6296);
IkReal x6303=(sj5*x6296);
IkReal x6304=(sj5*x6295);
evalcond[0]=(((r01*x6304))+(((-1.0)*x6297*x6301))+((r02*x6296)));
evalcond[1]=((((-1.0)*x6300*x6302))+((x6296*x6299))+(((-1.0)*r22*x6301)));
evalcond[2]=((((-1.0)*x6298*x6302))+(((-1.0)*r12*x6301))+((r11*x6303)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6301))+((r01*x6303))+(((-1.0)*x6297*x6302)));
evalcond[4]=(((cj2*sj1))+((r22*x6296))+((x6295*x6299))+(((-1.0)*x6300*x6301))+((cj1*sj2)));
evalcond[5]=((((-1.0)*x6298*x6301))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x6304))+((r12*x6296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6305=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6305.valid){
continue;
}
CheckValue<IkReal> x6306 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6306.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6305.value)))+(x6306.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6307=IKcos(j4);
IkReal x6308=IKsin(j4);
IkReal x6309=(cj5*r00);
IkReal x6310=(cj5*r10);
IkReal x6311=(r21*sj5);
IkReal x6312=(cj5*r20);
IkReal x6313=((1.0)*x6307);
IkReal x6314=((1.0)*x6308);
IkReal x6315=(sj5*x6308);
IkReal x6316=(sj5*x6307);
evalcond[0]=(((r01*x6316))+((r02*x6308))+(((-1.0)*x6309*x6313)));
evalcond[1]=((((-1.0)*r22*x6313))+(((-1.0)*x6312*x6314))+((x6308*x6311)));
evalcond[2]=((((-1.0)*r12*x6313))+(((-1.0)*x6310*x6314))+((r11*x6315)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6313))+((r01*x6315))+(((-1.0)*x6309*x6314)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6312*x6313))+((cj1*sj2))+((r22*x6308))+((x6307*x6311)));
evalcond[5]=((((-1.0)*x6310*x6313))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x6316))+((r12*x6308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6317=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6317;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6317);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6318=((1.0)*cj5);
IkReal x6319=((((-1.0)*r21*x6318))+(((-1.0)*r20*sj5)));
j4eval[0]=x6319;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x6318))+((r11*sj5))))));
j4eval[2]=IKsign(x6319);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6320=(r01*sj5);
IkReal x6321=(cj1*sj2);
IkReal x6322=(cj2*sj1);
IkReal x6323=((1.0)*r02);
IkReal x6324=((1.0)*cj5*r00);
IkReal x6325=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6325;
j4eval[1]=((IKabs(((((-1.0)*x6321*x6324))+(((-1.0)*x6322*x6324))+((x6320*x6322))+((x6320*x6321)))))+(IKabs(((((-1.0)*x6321*x6323))+(((-1.0)*x6322*x6323))))));
j4eval[2]=IKsign(x6325);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6326=(r01*sj5);
IkReal x6327=(cj1*sj2);
IkReal x6328=(cj2*sj1);
IkReal x6329=((1.0)*r02);
IkReal x6330=((1.0)*cj5*r00);
CheckValue<IkReal> x6331 = IKatan2WithCheck(IkReal(((((-1.0)*x6327*x6330))+((x6326*x6327))+((x6326*x6328))+(((-1.0)*x6328*x6330)))),IkReal(((((-1.0)*x6327*x6329))+(((-1.0)*x6328*x6329)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6331.valid){
continue;
}
CheckValue<IkReal> x6332=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6332.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6331.value)+(((1.5707963267949)*(x6332.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6333=IKcos(j4);
IkReal x6334=IKsin(j4);
IkReal x6335=(cj5*r00);
IkReal x6336=(cj5*r10);
IkReal x6337=(r21*sj5);
IkReal x6338=(cj5*r20);
IkReal x6339=((1.0)*x6333);
IkReal x6340=((1.0)*x6334);
IkReal x6341=(sj5*x6334);
IkReal x6342=(sj5*x6333);
evalcond[0]=(((r02*x6334))+(((-1.0)*x6335*x6339))+((r01*x6342)));
evalcond[1]=(((x6334*x6337))+(((-1.0)*x6338*x6340))+(((-1.0)*r22*x6339)));
evalcond[2]=((((-1.0)*r12*x6339))+((r11*x6341))+(((-1.0)*x6336*x6340)));
evalcond[3]=((1.0)+(((-1.0)*r02*x6339))+((r01*x6341))+(((-1.0)*x6335*x6340)));
evalcond[4]=(((cj2*sj1))+((r22*x6334))+((cj1*sj2))+(((-1.0)*x6338*x6339))+((x6333*x6337)));
evalcond[5]=(((r12*x6334))+(((-1.0)*sj1*sj2))+(((-1.0)*x6336*x6339))+((cj1*cj2))+((r11*x6342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6343=((1.0)*cj5);
CheckValue<IkReal> x6344 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x6343))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6344.valid){
continue;
}
CheckValue<IkReal> x6345=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6343))+(((-1.0)*r20*sj5)))),-1);
if(!x6345.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6344.value)+(((1.5707963267949)*(x6345.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6346=IKcos(j4);
IkReal x6347=IKsin(j4);
IkReal x6348=(cj5*r00);
IkReal x6349=(cj5*r10);
IkReal x6350=(r21*sj5);
IkReal x6351=(cj5*r20);
IkReal x6352=((1.0)*x6346);
IkReal x6353=((1.0)*x6347);
IkReal x6354=(sj5*x6347);
IkReal x6355=(sj5*x6346);
evalcond[0]=(((r02*x6347))+((r01*x6355))+(((-1.0)*x6348*x6352)));
evalcond[1]=((((-1.0)*x6351*x6353))+((x6347*x6350))+(((-1.0)*r22*x6352)));
evalcond[2]=((((-1.0)*x6349*x6353))+((r11*x6354))+(((-1.0)*r12*x6352)));
evalcond[3]=((1.0)+(((-1.0)*r02*x6352))+((r01*x6354))+(((-1.0)*x6348*x6353)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6351*x6352))+((x6346*x6350))+((r22*x6347))+((cj1*sj2)));
evalcond[5]=((((-1.0)*x6349*x6352))+((r12*x6347))+(((-1.0)*sj1*sj2))+((r11*x6355))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6356 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6356.valid){
continue;
}
CheckValue<IkReal> x6357=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6357.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6356.value)+(((1.5707963267949)*(x6357.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6358=IKcos(j4);
IkReal x6359=IKsin(j4);
IkReal x6360=(cj5*r00);
IkReal x6361=(cj5*r10);
IkReal x6362=(r21*sj5);
IkReal x6363=(cj5*r20);
IkReal x6364=((1.0)*x6358);
IkReal x6365=((1.0)*x6359);
IkReal x6366=(sj5*x6359);
IkReal x6367=(sj5*x6358);
evalcond[0]=(((r01*x6367))+(((-1.0)*x6360*x6364))+((r02*x6359)));
evalcond[1]=(((x6359*x6362))+(((-1.0)*x6363*x6365))+(((-1.0)*r22*x6364)));
evalcond[2]=((((-1.0)*x6361*x6365))+((r11*x6366))+(((-1.0)*r12*x6364)));
evalcond[3]=((1.0)+(((-1.0)*r02*x6364))+((r01*x6366))+(((-1.0)*x6360*x6365)));
evalcond[4]=(((cj2*sj1))+((x6358*x6362))+((cj1*sj2))+((r22*x6359))+(((-1.0)*x6363*x6364)));
evalcond[5]=((((-1.0)*x6361*x6364))+(((-1.0)*sj1*sj2))+((r11*x6367))+((r12*x6359))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6368=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6368);
rxp1_1=(px*r21);
rxp1_2=(r11*x6368);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6369=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6369);
rxp1_1=(px*r21);
rxp1_2=(r11*x6369);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6370=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6370);
rxp1_1=(px*r21);
rxp1_2=(r11*x6370);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6373=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x6373.valid){
continue;
}
IkReal x6371=x6373.value;
IkReal x6372=(cj0*x6371);
cj4array[0]=(((cj1*cj2*x6372))+(((-1.0)*sj1*sj2*x6372)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6374=IKsin(j4);
IkReal x6375=IKcos(j4);
IkReal x6376=(r21*sj5);
IkReal x6377=((1.0)*cj5*r20);
evalcond[0]=(r02*x6374);
evalcond[1]=((((-1.0)*r02*x6375))+(((-1.0)*cj0)));
evalcond[2]=(((x6374*x6376))+(((-1.0)*x6374*x6377)));
evalcond[3]=((((-1.0)*cj5*r10*x6374))+((r11*sj5*x6374)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6375*x6376))+(((-1.0)*x6375*x6377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6380=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6380.valid){
continue;
}
IkReal x6378=x6380.value;
IkReal x6379=((1.0)*x6378);
cj4array[0]=((((-1.0)*cj1*sj2*x6379))+(((-1.0)*cj2*sj1*x6379)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6381=IKsin(j4);
IkReal x6382=IKcos(j4);
IkReal x6383=((1.0)*cj0);
IkReal x6384=((1.0)*cj5);
IkReal x6385=(sj5*x6381);
evalcond[0]=(r02*x6381);
evalcond[1]=((((-1.0)*x6383))+(((-1.0)*r02*x6382)));
evalcond[2]=(((r21*x6385))+(((-1.0)*r20*x6381*x6384)));
evalcond[3]=((((-1.0)*r10*x6381*x6384))+((r11*x6385)));
evalcond[4]=((((-1.0)*cj1*cj2*x6383))+((r11*sj5*x6382))+((cj0*sj1*sj2))+(((-1.0)*r10*x6382*x6384)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6386=IKPowWithIntegerCheck(r02,-1);
if(!x6386.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x6386.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6387=IKsin(j4);
IkReal x6388=IKcos(j4);
IkReal x6389=(r21*sj5);
IkReal x6390=((1.0)*cj5);
IkReal x6391=(r11*sj5);
evalcond[0]=(r02*x6387);
evalcond[1]=((((-1.0)*r20*x6387*x6390))+((x6387*x6389)));
evalcond[2]=(((x6387*x6391))+(((-1.0)*r10*x6387*x6390)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r20*x6388*x6390))+((x6388*x6389)));
evalcond[4]=((((-1.0)*r10*x6388*x6390))+(((-1.0)*cj0*cj1*cj2))+((x6388*x6391))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6392=((1.0)*cj0);
IkReal x6393=((1.0)*cj5);
CheckValue<IkReal> x6394=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6393))+(((-1.0)*r20*sj5)))),-1);
if(!x6394.valid){
continue;
}
CheckValue<IkReal> x6395 = IKatan2WithCheck(IkReal((((r02*sj0))+(((-1.0)*r12*x6392)))),IkReal(((((-1.0)*r11*sj5*x6392))+((cj0*cj5*r10))+((r01*sj0*sj5))+(((-1.0)*r00*sj0*x6393)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6395.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6394.value)))+(x6395.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6396=IKsin(j4);
IkReal x6397=IKcos(j4);
IkReal x6398=(cj5*r00);
IkReal x6399=(cj1*cj2);
IkReal x6400=(cj5*r10);
IkReal x6401=(r21*sj5);
IkReal x6402=(sj1*sj2);
IkReal x6403=((1.0)*cj0);
IkReal x6404=((1.0)*sj0);
IkReal x6405=(cj5*r20);
IkReal x6406=((1.0)*x6397);
IkReal x6407=((1.0)*x6396);
IkReal x6408=(sj5*x6396);
IkReal x6409=(sj5*x6397);
evalcond[0]=(((x6396*x6401))+(((-1.0)*r22*x6406))+(((-1.0)*x6405*x6407)));
evalcond[1]=(((r01*x6408))+(((-1.0)*r02*x6406))+(((-1.0)*x6403))+(((-1.0)*x6398*x6407)));
evalcond[2]=((((-1.0)*x6400*x6407))+(((-1.0)*x6404))+(((-1.0)*r12*x6406))+((r11*x6408)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x6397*x6401))+((r22*x6396))+(((-1.0)*x6405*x6406)));
evalcond[4]=((((-1.0)*x6402*x6404))+((r01*x6409))+((sj0*x6399))+(((-1.0)*x6398*x6406))+((r02*x6396)));
evalcond[5]=((((-1.0)*x6400*x6406))+((r12*x6396))+((cj0*x6402))+((r11*x6409))+(((-1.0)*x6399*x6403)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6410=((1.0)*cj5);
CheckValue<IkReal> x6411 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6410)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6411.valid){
continue;
}
CheckValue<IkReal> x6412=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6410)))),-1);
if(!x6412.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6411.value)+(((1.5707963267949)*(x6412.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6413=IKsin(j4);
IkReal x6414=IKcos(j4);
IkReal x6415=(cj5*r00);
IkReal x6416=(cj1*cj2);
IkReal x6417=(cj5*r10);
IkReal x6418=(r21*sj5);
IkReal x6419=(sj1*sj2);
IkReal x6420=((1.0)*cj0);
IkReal x6421=((1.0)*sj0);
IkReal x6422=(cj5*r20);
IkReal x6423=((1.0)*x6414);
IkReal x6424=((1.0)*x6413);
IkReal x6425=(sj5*x6413);
IkReal x6426=(sj5*x6414);
evalcond[0]=((((-1.0)*x6422*x6424))+(((-1.0)*r22*x6423))+((x6413*x6418)));
evalcond[1]=((((-1.0)*x6415*x6424))+((r01*x6425))+(((-1.0)*x6420))+(((-1.0)*r02*x6423)));
evalcond[2]=((((-1.0)*x6417*x6424))+((r11*x6425))+(((-1.0)*x6421))+(((-1.0)*r12*x6423)));
evalcond[3]=((((-1.0)*x6422*x6423))+((cj2*sj1))+((cj1*sj2))+((x6414*x6418))+((r22*x6413)));
evalcond[4]=(((r02*x6413))+((sj0*x6416))+(((-1.0)*x6419*x6421))+(((-1.0)*x6415*x6423))+((r01*x6426)));
evalcond[5]=((((-1.0)*x6417*x6423))+((cj0*x6419))+((r11*x6426))+(((-1.0)*x6416*x6420))+((r12*x6413)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6427=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6427.valid){
continue;
}
CheckValue<IkReal> x6428 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6428.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6427.value)))+(x6428.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6429=IKsin(j4);
IkReal x6430=IKcos(j4);
IkReal x6431=(cj5*r00);
IkReal x6432=(cj1*cj2);
IkReal x6433=(cj5*r10);
IkReal x6434=(r21*sj5);
IkReal x6435=(sj1*sj2);
IkReal x6436=((1.0)*cj0);
IkReal x6437=((1.0)*sj0);
IkReal x6438=(cj5*r20);
IkReal x6439=((1.0)*x6430);
IkReal x6440=((1.0)*x6429);
IkReal x6441=(sj5*x6429);
IkReal x6442=(sj5*x6430);
evalcond[0]=(((x6429*x6434))+(((-1.0)*x6438*x6440))+(((-1.0)*r22*x6439)));
evalcond[1]=((((-1.0)*r02*x6439))+((r01*x6441))+(((-1.0)*x6436))+(((-1.0)*x6431*x6440)));
evalcond[2]=(((r11*x6441))+(((-1.0)*x6433*x6440))+(((-1.0)*x6437))+(((-1.0)*r12*x6439)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6438*x6439))+((cj1*sj2))+((x6430*x6434))+((r22*x6429)));
evalcond[4]=((((-1.0)*x6435*x6437))+((r01*x6442))+((r02*x6429))+(((-1.0)*x6431*x6439))+((sj0*x6432)));
evalcond[5]=(((r11*x6442))+((cj0*x6435))+(((-1.0)*x6433*x6439))+(((-1.0)*x6432*x6436))+((r12*x6429)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6443=r21*r21;
IkReal x6444=cj5*cj5;
IkReal x6445=(cj2*sj1);
IkReal x6446=(cj1*sj2);
IkReal x6447=(r21*sj5);
IkReal x6448=((1.0)*cj5*r20);
CheckValue<IkReal> x6449=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6444*(r20*r20)))+((x6443*x6444))+(((-1.0)*x6443))+(((-1.0)*(r22*r22)))+(((2.0)*cj5*r20*x6447)))),-1);
if(!x6449.valid){
continue;
}
CheckValue<IkReal> x6450 = IKatan2WithCheck(IkReal((((r22*x6446))+((r22*x6445)))),IkReal((((x6445*x6447))+(((-1.0)*x6446*x6448))+((x6446*x6447))+(((-1.0)*x6445*x6448)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6450.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6449.value)))+(x6450.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x6451=IKsin(j4);
IkReal x6452=IKcos(j4);
IkReal x6453=(r21*sj5);
IkReal x6454=(cj5*r20);
IkReal x6455=((1.0)*x6452);
evalcond[0]=(((x6451*x6453))+(((-1.0)*x6451*x6454))+(((-1.0)*r22*x6455)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((x6452*x6453))+((r22*x6451))+(((-1.0)*x6454*x6455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6456=(sj4*sj5);
IkReal x6457=((1.0)*cj4);
IkReal x6458=((1.0)*cj5*sj4);
if( IKabs((((r11*x6456))+(((-1.0)*r12*x6457))+(((-1.0)*r10*x6458)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x6458))+((r01*x6456))+(((-1.0)*r02*x6457)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x6456))+(((-1.0)*r12*x6457))+(((-1.0)*r10*x6458))))+IKsqr(((((-1.0)*r00*x6458))+((r01*x6456))+(((-1.0)*r02*x6457))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r11*x6456))+(((-1.0)*r12*x6457))+(((-1.0)*r10*x6458))), ((((-1.0)*r00*x6458))+((r01*x6456))+(((-1.0)*r02*x6457))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x6459=IKsin(j0);
IkReal x6460=IKcos(j0);
IkReal x6461=(cj5*r01);
IkReal x6462=((1.0)*sj2);
IkReal x6463=((0.39225)*sj2);
IkReal x6464=(r11*sj5);
IkReal x6465=((0.39225)*cj2);
IkReal x6466=((1.0)*cj2);
IkReal x6467=(r00*sj5);
IkReal x6468=(cj5*r11);
IkReal x6469=((1.0)*cj4);
IkReal x6470=(r01*sj5);
IkReal x6471=(r10*sj5);
IkReal x6472=(sj1*x6459);
IkReal x6473=(cj1*x6460);
IkReal x6474=(cj1*x6459);
IkReal x6475=(sj1*x6460);
IkReal x6476=(cj5*x6469);
IkReal x6477=((1.0)*cj5*sj4);
evalcond[0]=((((-1.0)*r00*x6477))+(((-1.0)*r02*x6469))+((sj4*x6470))+(((-1.0)*x6460)));
evalcond[1]=((((-1.0)*r10*x6477))+(((-1.0)*x6459))+((sj4*x6464))+(((-1.0)*r12*x6469)));
evalcond[2]=(((sj2*x6474))+x6461+x6467+((cj2*x6472)));
evalcond[3]=(x6468+x6471+(((-1.0)*x6462*x6473))+(((-1.0)*x6466*x6475)));
evalcond[4]=(((cj4*x6470))+((r02*sj4))+(((-1.0)*r00*x6476))+((cj2*x6474))+(((-1.0)*x6462*x6472)));
evalcond[5]=((((-1.0)*r10*x6476))+((sj2*x6475))+((cj4*x6464))+((r12*sj4))+(((-1.0)*x6466*x6473)));
evalcond[6]=((((-0.09465)*x6461))+(((-0.09465)*x6467))+(((-1.0)*px))+((x6463*x6472))+(((-1.0)*x6465*x6474))+(((-0.10915)*x6460))+(((-0.425)*x6474)));
evalcond[7]=((((-0.09465)*x6468))+((x6465*x6473))+(((-0.09465)*x6471))+(((-0.10915)*x6459))+(((-1.0)*py))+(((0.425)*x6473))+(((-1.0)*x6463*x6475)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x6478=IKPowWithIntegerCheck(IKsign((((cj2*sj1))+((cj1*sj2)))),-1);
if(!x6478.valid){
continue;
}
CheckValue<IkReal> x6479 = IKatan2WithCheck(IkReal(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),IkReal((((cj5*r11))+((r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6479.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6478.value)))+(x6479.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6480=IKsin(j0);
IkReal x6481=IKcos(j0);
IkReal x6482=(cj5*r01);
IkReal x6483=((0.39225)*sj1);
IkReal x6484=(cj5*r11);
IkReal x6485=(cj2*sj1);
IkReal x6486=(r00*sj5);
IkReal x6487=((0.39225)*cj2);
IkReal x6488=(r10*sj5);
IkReal x6489=(sj2*x6481);
IkReal x6490=(sj2*x6480);
IkReal x6491=(cj1*x6481);
IkReal x6492=(cj1*x6480);
evalcond[0]=(x6482+x6486+((x6480*x6485))+((cj1*x6490)));
evalcond[1]=((((-1.0)*cj1*x6489))+x6488+x6484+(((-1.0)*x6481*x6485)));
evalcond[2]=((((-1.0)*x6487*x6492))+(((-0.10915)*x6481))+(((-1.0)*px))+((x6483*x6490))+(((-0.09465)*x6482))+(((-0.09465)*x6486))+(((-0.425)*x6492)));
evalcond[3]=(((x6487*x6491))+(((-0.10915)*x6480))+(((-1.0)*py))+(((0.425)*x6491))+(((-0.09465)*x6488))+(((-0.09465)*x6484))+(((-1.0)*x6483*x6489)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6493=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6493;
j4eval[1]=IKsign(x6493);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6494=((1.0)*cj5);
IkReal x6495=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6494)));
j4eval[0]=x6495;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6494))))));
j4eval[2]=IKsign(x6495);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6496=((1.0)*cj0);
IkReal x6497=((1.0)*cj5);
IkReal x6498=((((-1.0)*r21*x6497))+(((-1.0)*r20*sj5)));
j4eval[0]=x6498;
j4eval[1]=((IKabs(((((-1.0)*r12*x6496))+((r02*sj0)))))+(IKabs(((((-1.0)*r00*sj0*x6497))+((cj0*cj5*r10))+(((-1.0)*r11*sj5*x6496))+((r01*sj0*sj5))))));
j4eval[2]=IKsign(x6498);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x6499=((-1.0)*r20);
IkReal x6501 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6501)==0){
continue;
}
IkReal x6500=pow(x6501,-0.5);
CheckValue<IkReal> x6502 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6499),IKFAST_ATAN2_MAGTHRESH);
if(!x6502.valid){
continue;
}
IkReal gconst114=((-1.0)*(x6502.value));
IkReal gconst115=(r21*x6500);
IkReal gconst116=(x6499*x6500);
CheckValue<IkReal> x6503 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6503.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6503.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6504=((-1.0)*r20);
IkReal x6505=x6500;
CheckValue<IkReal> x6507 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6504),IKFAST_ATAN2_MAGTHRESH);
if(!x6507.valid){
continue;
}
IkReal x6506=((-1.0)*(x6507.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6506;
IkReal gconst114=x6506;
IkReal gconst115=(r21*x6505);
IkReal gconst116=(x6504*x6505);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6508=((-1.0)*r20);
IkReal x6509=x6500;
CheckValue<IkReal> x6511 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6508),IKFAST_ATAN2_MAGTHRESH);
if(!x6511.valid){
continue;
}
IkReal x6510=((-1.0)*(x6511.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6510;
IkReal gconst114=x6510;
IkReal gconst115=(r21*x6509);
IkReal gconst116=(x6508*x6509);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x6512=((-1.0)*r20);
IkReal x6513=x6500;
CheckValue<IkReal> x6515 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6512),IKFAST_ATAN2_MAGTHRESH);
if(!x6515.valid){
continue;
}
IkReal x6514=((-1.0)*(x6515.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6514;
IkReal gconst114=x6514;
IkReal gconst115=(r21*x6513);
IkReal gconst116=(x6512*x6513);
IkReal x6516=((1.0)*(r22*r22));
CheckValue<IkReal> x6520=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x6516))),-1);
if(!x6520.valid){
continue;
}
IkReal x6517=x6520.value;
IkReal x6518=((1.0)*x6517);
IkReal x6519=((((-1.0)*x6518*(r20*r20*r20*r20)))+(((-2.0)*x6517*(r20*r20)*(r21*r21)))+(((-1.0)*x6518*(r21*r21*r21*r21)))+(((-1.0)*x6516)));
j4eval[0]=x6519;
j4eval[1]=IKsign(x6519);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6521=(cj2*sj1);
IkReal x6522=(gconst115*r21);
IkReal x6523=(cj1*sj2);
IkReal x6524=((1.0)*gconst116*r20);
CheckValue<IkReal> x6525=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst116*r20*x6524))+(((-1.0)*(r22*r22)))+(((-1.0)*(x6522*x6522)))+(((2.0)*gconst116*r20*x6522)))),-1);
if(!x6525.valid){
continue;
}
CheckValue<IkReal> x6526 = IKatan2WithCheck(IkReal((((r22*x6521))+((r22*x6523)))),IkReal((((x6521*x6522))+(((-1.0)*x6521*x6524))+((x6522*x6523))+(((-1.0)*x6523*x6524)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6526.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6525.value)))+(x6526.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6527=IKsin(j4);
IkReal x6528=IKcos(j4);
IkReal x6529=(cj1*cj2);
IkReal x6530=(gconst115*r21);
IkReal x6531=(sj1*sj2);
IkReal x6532=((1.0)*cj0);
IkReal x6533=((1.0)*sj0);
IkReal x6534=((1.0)*x6528);
IkReal x6535=(gconst115*x6528);
IkReal x6536=(gconst115*x6527);
IkReal x6537=((1.0)*gconst116*x6527);
evalcond[0]=(((x6527*x6530))+(((-1.0)*r20*x6537))+(((-1.0)*r22*x6534)));
evalcond[1]=((((-1.0)*x6532))+(((-1.0)*r00*x6537))+(((-1.0)*r02*x6534))+((r01*x6536)));
evalcond[2]=((((-1.0)*x6533))+(((-1.0)*r10*x6537))+(((-1.0)*r12*x6534))+((r11*x6536)));
evalcond[3]=(((cj2*sj1))+((x6528*x6530))+((cj1*sj2))+(((-1.0)*gconst116*r20*x6534))+((r22*x6527)));
evalcond[4]=(((r02*x6527))+(((-1.0)*gconst116*r00*x6534))+((sj0*x6529))+((r01*x6535))+(((-1.0)*x6531*x6533)));
evalcond[5]=((((-1.0)*gconst116*r10*x6534))+(((-1.0)*x6529*x6532))+((r12*x6527))+((cj0*x6531))+((r11*x6535)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6538=((1.0)*gconst116);
CheckValue<IkReal> x6539=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6538))+(((-1.0)*gconst115*r10)))),-1);
if(!x6539.valid){
continue;
}
CheckValue<IkReal> x6540 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst115*r21))+(((-1.0)*cj0*r20*x6538)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6540.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6539.value)))+(x6540.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6541=IKsin(j4);
IkReal x6542=IKcos(j4);
IkReal x6543=(cj1*cj2);
IkReal x6544=(gconst115*r21);
IkReal x6545=(sj1*sj2);
IkReal x6546=((1.0)*cj0);
IkReal x6547=((1.0)*sj0);
IkReal x6548=((1.0)*x6542);
IkReal x6549=(gconst115*x6542);
IkReal x6550=(gconst115*x6541);
IkReal x6551=((1.0)*gconst116*x6541);
evalcond[0]=((((-1.0)*r22*x6548))+((x6541*x6544))+(((-1.0)*r20*x6551)));
evalcond[1]=((((-1.0)*r00*x6551))+(((-1.0)*x6546))+(((-1.0)*r02*x6548))+((r01*x6550)));
evalcond[2]=((((-1.0)*x6547))+(((-1.0)*r12*x6548))+((r11*x6550))+(((-1.0)*r10*x6551)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst116*r20*x6548))+((cj1*sj2))+((x6542*x6544))+((r22*x6541)));
evalcond[4]=((((-1.0)*x6545*x6547))+(((-1.0)*gconst116*r00*x6548))+((r02*x6541))+((sj0*x6543))+((r01*x6549)));
evalcond[5]=(((r11*x6549))+((r12*x6541))+(((-1.0)*gconst116*r10*x6548))+(((-1.0)*x6543*x6546))+((cj0*x6545)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6552 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst115*r21*sj0))+(((-1.0)*gconst116*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6552.valid){
continue;
}
CheckValue<IkReal> x6553=IKPowWithIntegerCheck(IKsign((((gconst115*r00))+((gconst116*r01)))),-1);
if(!x6553.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6552.value)+(((1.5707963267949)*(x6553.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6554=IKsin(j4);
IkReal x6555=IKcos(j4);
IkReal x6556=(cj1*cj2);
IkReal x6557=(gconst115*r21);
IkReal x6558=(sj1*sj2);
IkReal x6559=((1.0)*cj0);
IkReal x6560=((1.0)*sj0);
IkReal x6561=((1.0)*x6555);
IkReal x6562=(gconst115*x6555);
IkReal x6563=(gconst115*x6554);
IkReal x6564=((1.0)*gconst116*x6554);
evalcond[0]=((((-1.0)*r22*x6561))+((x6554*x6557))+(((-1.0)*r20*x6564)));
evalcond[1]=((((-1.0)*x6559))+(((-1.0)*r00*x6564))+(((-1.0)*r02*x6561))+((r01*x6563)));
evalcond[2]=((((-1.0)*r10*x6564))+((r11*x6563))+(((-1.0)*x6560))+(((-1.0)*r12*x6561)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst116*r20*x6561))+((cj1*sj2))+((r22*x6554))+((x6555*x6557)));
evalcond[4]=(((r02*x6554))+(((-1.0)*x6558*x6560))+((sj0*x6556))+(((-1.0)*gconst116*r00*x6561))+((r01*x6562)));
evalcond[5]=(((r11*x6562))+(((-1.0)*gconst116*r10*x6561))+((r12*x6554))+((cj0*x6558))+(((-1.0)*x6556*x6559)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6565=((-1.0)*r21);
IkReal x6567 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6567)==0){
continue;
}
IkReal x6566=pow(x6567,-0.5);
CheckValue<IkReal> x6568 = IKatan2WithCheck(IkReal(x6565),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6568.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x6568.value))));
IkReal gconst118=(x6565*x6566);
IkReal gconst119=((1.0)*r20*x6566);
CheckValue<IkReal> x6569 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6569.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6569.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6570=((-1.0)*r21);
CheckValue<IkReal> x6573 = IKatan2WithCheck(IkReal(x6570),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6573.valid){
continue;
}
IkReal x6571=((1.0)*(x6573.value));
IkReal x6572=x6566;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6571)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6571)));
IkReal gconst118=(x6570*x6572);
IkReal gconst119=((1.0)*r20*x6572);
IkReal x6574=r22*r22;
IkReal x6575=((1.0)*x6574);
CheckValue<IkReal> x6579=IKPowWithIntegerCheck(((-1.0)+x6574),-1);
if(!x6579.valid){
continue;
}
IkReal x6576=x6579.value;
if((((1.0)+(((-1.0)*x6575)))) < -0.00001)
continue;
IkReal x6577=IKsqrt(((1.0)+(((-1.0)*x6575))));
IkReal x6578=(sj0*x6576*x6577);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x6578+(((-1.0)*x6575*x6578))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6580=((-1.0)*r21);
CheckValue<IkReal> x6583 = IKatan2WithCheck(IkReal(x6580),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6583.valid){
continue;
}
IkReal x6581=((1.0)*(x6583.value));
IkReal x6582=x6566;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6581)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6581)));
IkReal gconst118=(x6580*x6582);
IkReal gconst119=((1.0)*r20*x6582);
IkReal x6584=r22*r22;
IkReal x6585=((1.0)*x6584);
CheckValue<IkReal> x6589=IKPowWithIntegerCheck(((-1.0)+x6584),-1);
if(!x6589.valid){
continue;
}
IkReal x6586=x6589.value;
if((((1.0)+(((-1.0)*x6585)))) < -0.00001)
continue;
IkReal x6587=IKsqrt(((1.0)+(((-1.0)*x6585))));
IkReal x6588=(cj0*x6586*x6587);
j4eval[0]=((IKabs((x6588+(((-1.0)*x6585*x6588)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6590=((-1.0)*r21);
CheckValue<IkReal> x6593 = IKatan2WithCheck(IkReal(x6590),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6593.valid){
continue;
}
IkReal x6591=((1.0)*(x6593.value));
IkReal x6592=x6566;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6591)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6591)));
IkReal gconst118=(x6590*x6592);
IkReal gconst119=((1.0)*r20*x6592);
IkReal x6594=r22*r22;
IkReal x6595=(cj0*r12);
IkReal x6596=(r02*sj0);
CheckValue<IkReal> x6600=IKPowWithIntegerCheck(((-1.0)+x6594),-1);
if(!x6600.valid){
continue;
}
IkReal x6597=x6600.value;
if((((1.0)+(((-1.0)*x6594)))) < -0.00001)
continue;
IkReal x6598=IKsqrt(((1.0)+(((-1.0)*x6594))));
IkReal x6599=(r22*x6597*x6598);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x6596*x6599))+((x6595*x6599)))))+(IKabs((x6596+(((-1.0)*x6595))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6601=((1.0)*cj0);
IkReal x6602=((1.0)*gconst119);
CheckValue<IkReal> x6603=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r20))+(((-1.0)*r21*x6602)))),-1);
if(!x6603.valid){
continue;
}
CheckValue<IkReal> x6604 = IKatan2WithCheck(IkReal((((r02*sj0))+(((-1.0)*r12*x6601)))),IkReal(((((-1.0)*r00*sj0*x6602))+(((-1.0)*gconst118*r11*x6601))+((gconst118*r01*sj0))+((cj0*gconst119*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6604.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6603.value)))+(x6604.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6605=IKsin(j4);
IkReal x6606=IKcos(j4);
IkReal x6607=(cj1*cj2);
IkReal x6608=(gconst118*r01);
IkReal x6609=(sj1*sj2);
IkReal x6610=(gconst119*r20);
IkReal x6611=(gconst119*r10);
IkReal x6612=(gconst119*r00);
IkReal x6613=((1.0)*cj0);
IkReal x6614=(gconst118*r21);
IkReal x6615=((1.0)*sj0);
IkReal x6616=(gconst118*r11);
IkReal x6617=((1.0)*x6606);
IkReal x6618=((1.0)*x6605);
evalcond[0]=(((x6605*x6614))+(((-1.0)*r22*x6617))+(((-1.0)*x6610*x6618)));
evalcond[1]=(((x6605*x6608))+(((-1.0)*x6613))+(((-1.0)*x6612*x6618))+(((-1.0)*r02*x6617)));
evalcond[2]=((((-1.0)*r12*x6617))+(((-1.0)*x6615))+(((-1.0)*x6611*x6618))+((x6605*x6616)));
evalcond[3]=(((cj2*sj1))+((r22*x6605))+((cj1*sj2))+((x6606*x6614))+(((-1.0)*x6610*x6617)));
evalcond[4]=((((-1.0)*x6612*x6617))+((sj0*x6607))+(((-1.0)*x6609*x6615))+((r02*x6605))+((x6606*x6608)));
evalcond[5]=((((-1.0)*x6607*x6613))+(((-1.0)*x6611*x6617))+((x6606*x6616))+((cj0*x6609))+((r12*x6605)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6619=((1.0)*gconst119);
CheckValue<IkReal> x6620 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*r20*x6619)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6620.valid){
continue;
}
CheckValue<IkReal> x6621=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6619))+(((-1.0)*gconst118*r10)))),-1);
if(!x6621.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6620.value)+(((1.5707963267949)*(x6621.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6622=IKsin(j4);
IkReal x6623=IKcos(j4);
IkReal x6624=(cj1*cj2);
IkReal x6625=(gconst118*r01);
IkReal x6626=(sj1*sj2);
IkReal x6627=(gconst119*r20);
IkReal x6628=(gconst119*r10);
IkReal x6629=(gconst119*r00);
IkReal x6630=((1.0)*cj0);
IkReal x6631=(gconst118*r21);
IkReal x6632=((1.0)*sj0);
IkReal x6633=(gconst118*r11);
IkReal x6634=((1.0)*x6623);
IkReal x6635=((1.0)*x6622);
evalcond[0]=((((-1.0)*r22*x6634))+(((-1.0)*x6627*x6635))+((x6622*x6631)));
evalcond[1]=((((-1.0)*x6629*x6635))+(((-1.0)*r02*x6634))+((x6622*x6625))+(((-1.0)*x6630)));
evalcond[2]=((((-1.0)*x6628*x6635))+((x6622*x6633))+(((-1.0)*r12*x6634))+(((-1.0)*x6632)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6622))+((x6623*x6631))+(((-1.0)*x6627*x6634)));
evalcond[4]=(((r02*x6622))+(((-1.0)*x6629*x6634))+((sj0*x6624))+(((-1.0)*x6626*x6632))+((x6623*x6625)));
evalcond[5]=((((-1.0)*x6628*x6634))+((r12*x6622))+((cj0*x6626))+((x6623*x6633))+(((-1.0)*x6624*x6630)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6636 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst119*r20*sj0))+((gconst118*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6636.valid){
continue;
}
CheckValue<IkReal> x6637=IKPowWithIntegerCheck(IKsign((((gconst118*r00))+((gconst119*r01)))),-1);
if(!x6637.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6636.value)+(((1.5707963267949)*(x6637.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6638=IKsin(j4);
IkReal x6639=IKcos(j4);
IkReal x6640=(cj1*cj2);
IkReal x6641=(gconst118*r01);
IkReal x6642=(sj1*sj2);
IkReal x6643=(gconst119*r20);
IkReal x6644=(gconst119*r10);
IkReal x6645=(gconst119*r00);
IkReal x6646=((1.0)*cj0);
IkReal x6647=(gconst118*r21);
IkReal x6648=((1.0)*sj0);
IkReal x6649=(gconst118*r11);
IkReal x6650=((1.0)*x6639);
IkReal x6651=((1.0)*x6638);
evalcond[0]=((((-1.0)*r22*x6650))+(((-1.0)*x6643*x6651))+((x6638*x6647)));
evalcond[1]=((((-1.0)*x6646))+(((-1.0)*x6645*x6651))+((x6638*x6641))+(((-1.0)*r02*x6650)));
evalcond[2]=((((-1.0)*x6648))+(((-1.0)*x6644*x6651))+((x6638*x6649))+(((-1.0)*r12*x6650)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6643*x6650))+((cj1*sj2))+((x6639*x6647))+((r22*x6638)));
evalcond[4]=(((x6639*x6641))+(((-1.0)*x6645*x6650))+(((-1.0)*x6642*x6648))+((r02*x6638))+((sj0*x6640)));
evalcond[5]=((((-1.0)*x6640*x6646))+(((-1.0)*x6644*x6650))+((x6639*x6649))+((r12*x6638))+((cj0*x6642)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6652=((-1.0)*r10);
IkReal x6654 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6654)==0){
continue;
}
IkReal x6653=pow(x6654,-0.5);
CheckValue<IkReal> x6655 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6652),IKFAST_ATAN2_MAGTHRESH);
if(!x6655.valid){
continue;
}
IkReal gconst120=((-1.0)*(x6655.value));
IkReal gconst121=(r11*x6653);
IkReal gconst122=(x6652*x6653);
CheckValue<IkReal> x6656 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6656.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6656.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6657=((-1.0)*r10);
IkReal x6658=x6653;
CheckValue<IkReal> x6660 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6657),IKFAST_ATAN2_MAGTHRESH);
if(!x6660.valid){
continue;
}
IkReal x6659=((-1.0)*(x6660.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x6659;
IkReal gconst120=x6659;
IkReal gconst121=(r11*x6658);
IkReal gconst122=(x6657*x6658);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6661=((-1.0)*r10);
IkReal x6662=x6653;
CheckValue<IkReal> x6664 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6661),IKFAST_ATAN2_MAGTHRESH);
if(!x6664.valid){
continue;
}
IkReal x6663=((-1.0)*(x6664.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x6663;
IkReal gconst120=x6663;
IkReal gconst121=(r11*x6662);
IkReal gconst122=(x6661*x6662);
IkReal x6665=r12*r12;
IkReal x6666=((1.0)*cj0);
IkReal x6667=(r02*sj0);
CheckValue<IkReal> x6671=IKPowWithIntegerCheck(((-1.0)+x6665),-1);
if(!x6671.valid){
continue;
}
IkReal x6668=x6671.value;
if((((1.0)+(((-1.0)*x6665)))) < -0.00001)
continue;
IkReal x6669=IKsqrt(((1.0)+(((-1.0)*x6665))));
IkReal x6670=(x6668*x6669);
j4eval[0]=((IKabs((((cj0*x6670))+((r12*x6667*x6670))+(((-1.0)*x6665*x6666*x6670)))))+(IKabs((x6667+(((-1.0)*r12*x6666))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6672=((-1.0)*r10);
IkReal x6673=x6653;
CheckValue<IkReal> x6675 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6672),IKFAST_ATAN2_MAGTHRESH);
if(!x6675.valid){
continue;
}
IkReal x6674=((-1.0)*(x6675.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x6674;
IkReal gconst120=x6674;
IkReal gconst121=(r11*x6673);
IkReal gconst122=(x6672*x6673);
IkReal x6676=(cj1*sj2);
IkReal x6677=(cj2*sj1);
IkReal x6678=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x6684=IKPowWithIntegerCheck(x6678,-1);
if(!x6684.valid){
continue;
}
IkReal x6679=x6684.value;
IkReal x6680=((1.0)*x6679);
IkReal x6681=x6653;
IkReal x6682=(r12*r22*x6681);
IkReal x6683=((((-1.0)*x6680*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x6679))+(((-1.0)*x6680*(r11*r11)*(r21*r21)))+(((-1.0)*(r22*r22))));
j4eval[0]=x6683;
j4eval[1]=((IKabs((((x6677*x6682))+((x6676*x6682)))))+(IKabs((((r22*x6677))+((r22*x6676))))));
j4eval[2]=IKsign(x6683);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6685=(cj2*sj1);
IkReal x6686=(cj1*sj2);
IkReal x6687=(gconst121*r21);
IkReal x6688=((1.0)*gconst122*r20);
CheckValue<IkReal> x6689=IKPowWithIntegerCheck(IKsign(((((2.0)*gconst122*r20*x6687))+(((-1.0)*(r22*r22)))+(((-1.0)*gconst122*r20*x6688))+(((-1.0)*(x6687*x6687))))),-1);
if(!x6689.valid){
continue;
}
CheckValue<IkReal> x6690 = IKatan2WithCheck(IkReal((((r22*x6685))+((r22*x6686)))),IkReal((((x6686*x6687))+((x6685*x6687))+(((-1.0)*x6686*x6688))+(((-1.0)*x6685*x6688)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6690.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6689.value)))+(x6690.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6691=IKsin(j4);
IkReal x6692=IKcos(j4);
IkReal x6693=(cj1*cj2);
IkReal x6694=(gconst121*r11);
IkReal x6695=(sj1*sj2);
IkReal x6696=(gconst122*r00);
IkReal x6697=((1.0)*cj0);
IkReal x6698=((1.0)*sj0);
IkReal x6699=(gconst122*r10);
IkReal x6700=(gconst122*r20);
IkReal x6701=((1.0)*x6692);
IkReal x6702=((1.0)*x6691);
IkReal x6703=(gconst121*x6691);
IkReal x6704=(gconst121*x6692);
evalcond[0]=(((r21*x6703))+(((-1.0)*r22*x6701))+(((-1.0)*x6700*x6702)));
evalcond[1]=((((-1.0)*x6696*x6702))+(((-1.0)*r02*x6701))+((r01*x6703))+(((-1.0)*x6697)));
evalcond[2]=((((-1.0)*x6699*x6702))+(((-1.0)*x6698))+((x6691*x6694))+(((-1.0)*r12*x6701)));
evalcond[3]=(((cj2*sj1))+((r21*x6704))+((r22*x6691))+((cj1*sj2))+(((-1.0)*x6700*x6701)));
evalcond[4]=((((-1.0)*x6696*x6701))+((sj0*x6693))+((r01*x6704))+(((-1.0)*x6695*x6698))+((r02*x6691)));
evalcond[5]=(((cj0*x6695))+((r12*x6691))+((x6692*x6694))+(((-1.0)*x6699*x6701))+(((-1.0)*x6693*x6697)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6705=((1.0)*cj0);
IkReal x6706=((1.0)*gconst122);
CheckValue<IkReal> x6707=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r20))+(((-1.0)*r21*x6706)))),-1);
if(!x6707.valid){
continue;
}
CheckValue<IkReal> x6708 = IKatan2WithCheck(IkReal((((r02*sj0))+(((-1.0)*r12*x6705)))),IkReal((((gconst121*r01*sj0))+(((-1.0)*gconst121*r11*x6705))+(((-1.0)*r00*sj0*x6706))+((cj0*gconst122*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6708.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6707.value)))+(x6708.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6709=IKsin(j4);
IkReal x6710=IKcos(j4);
IkReal x6711=(cj1*cj2);
IkReal x6712=(gconst121*r11);
IkReal x6713=(sj1*sj2);
IkReal x6714=(gconst122*r00);
IkReal x6715=((1.0)*cj0);
IkReal x6716=((1.0)*sj0);
IkReal x6717=(gconst122*r10);
IkReal x6718=(gconst122*r20);
IkReal x6719=((1.0)*x6710);
IkReal x6720=((1.0)*x6709);
IkReal x6721=(gconst121*x6709);
IkReal x6722=(gconst121*x6710);
evalcond[0]=((((-1.0)*x6718*x6720))+((r21*x6721))+(((-1.0)*r22*x6719)));
evalcond[1]=((((-1.0)*x6715))+(((-1.0)*x6714*x6720))+(((-1.0)*r02*x6719))+((r01*x6721)));
evalcond[2]=(((x6709*x6712))+(((-1.0)*x6716))+(((-1.0)*x6717*x6720))+(((-1.0)*r12*x6719)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6718*x6719))+((cj1*sj2))+((r21*x6722))+((r22*x6709)));
evalcond[4]=((((-1.0)*x6713*x6716))+(((-1.0)*x6714*x6719))+((sj0*x6711))+((r01*x6722))+((r02*x6709)));
evalcond[5]=(((cj0*x6713))+(((-1.0)*x6711*x6715))+(((-1.0)*x6717*x6719))+((x6710*x6712))+((r12*x6709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6723 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst122*r20*sj0))+((gconst121*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6723.valid){
continue;
}
CheckValue<IkReal> x6724=IKPowWithIntegerCheck(IKsign((((gconst122*r01))+((gconst121*r00)))),-1);
if(!x6724.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6723.value)+(((1.5707963267949)*(x6724.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6725=IKsin(j4);
IkReal x6726=IKcos(j4);
IkReal x6727=(cj1*cj2);
IkReal x6728=(gconst121*r11);
IkReal x6729=(sj1*sj2);
IkReal x6730=(gconst122*r00);
IkReal x6731=((1.0)*cj0);
IkReal x6732=((1.0)*sj0);
IkReal x6733=(gconst122*r10);
IkReal x6734=(gconst122*r20);
IkReal x6735=((1.0)*x6726);
IkReal x6736=((1.0)*x6725);
IkReal x6737=(gconst121*x6725);
IkReal x6738=(gconst121*x6726);
evalcond[0]=(((r21*x6737))+(((-1.0)*r22*x6735))+(((-1.0)*x6734*x6736)));
evalcond[1]=((((-1.0)*x6730*x6736))+(((-1.0)*r02*x6735))+((r01*x6737))+(((-1.0)*x6731)));
evalcond[2]=((((-1.0)*r12*x6735))+(((-1.0)*x6733*x6736))+(((-1.0)*x6732))+((x6725*x6728)));
evalcond[3]=(((cj2*sj1))+((r21*x6738))+((cj1*sj2))+((r22*x6725))+(((-1.0)*x6734*x6735)));
evalcond[4]=((((-1.0)*x6730*x6735))+((r02*x6725))+((r01*x6738))+(((-1.0)*x6729*x6732))+((sj0*x6727)));
evalcond[5]=(((r12*x6725))+((cj0*x6729))+(((-1.0)*x6727*x6731))+(((-1.0)*x6733*x6735))+((x6726*x6728)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6739=((-1.0)*r11);
IkReal x6741 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6741)==0){
continue;
}
IkReal x6740=pow(x6741,-0.5);
CheckValue<IkReal> x6742 = IKatan2WithCheck(IkReal(x6739),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6742.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x6742.value))));
IkReal gconst124=(x6739*x6740);
IkReal gconst125=((1.0)*r10*x6740);
CheckValue<IkReal> x6743 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6743.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6743.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6744=((-1.0)*r11);
CheckValue<IkReal> x6747 = IKatan2WithCheck(IkReal(x6744),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6747.valid){
continue;
}
IkReal x6745=((1.0)*(x6747.value));
IkReal x6746=x6740;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6745)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6745)));
IkReal gconst124=(x6744*x6746);
IkReal gconst125=((1.0)*r10*x6746);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x6748=((-1.0)*r11);
CheckValue<IkReal> x6751 = IKatan2WithCheck(IkReal(x6748),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6751.valid){
continue;
}
IkReal x6749=((1.0)*(x6751.value));
IkReal x6750=x6740;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6749)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6749)));
IkReal gconst124=(x6748*x6750);
IkReal gconst125=((1.0)*r10*x6750);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r12*r12))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6752=((1.0)*cj0);
IkReal x6753=((1.0)*gconst125);
CheckValue<IkReal> x6754 = IKatan2WithCheck(IkReal((((r02*sj0))+(((-1.0)*r12*x6752)))),IkReal(((((-1.0)*r00*sj0*x6753))+((gconst124*r01*sj0))+(((-1.0)*gconst124*r11*x6752))+((cj0*gconst125*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6754.valid){
continue;
}
CheckValue<IkReal> x6755=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*r21*x6753)))),-1);
if(!x6755.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6754.value)+(((1.5707963267949)*(x6755.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6756=IKsin(j4);
IkReal x6757=IKcos(j4);
IkReal x6758=(cj1*cj2);
IkReal x6759=(sj1*sj2);
IkReal x6760=(gconst125*r20);
IkReal x6761=(gconst124*r01);
IkReal x6762=((1.0)*cj0);
IkReal x6763=((1.0)*sj0);
IkReal x6764=(gconst125*r00);
IkReal x6765=(gconst125*r10);
IkReal x6766=((1.0)*x6757);
IkReal x6767=((1.0)*x6756);
IkReal x6768=(gconst124*x6756);
IkReal x6769=(gconst124*x6757);
evalcond[0]=((((-1.0)*x6760*x6767))+(((-1.0)*r22*x6766))+((r21*x6768)));
evalcond[1]=(((x6756*x6761))+(((-1.0)*x6762))+(((-1.0)*r02*x6766))+(((-1.0)*x6764*x6767)));
evalcond[2]=(((r11*x6768))+(((-1.0)*x6765*x6767))+(((-1.0)*x6763))+(((-1.0)*r12*x6766)));
evalcond[3]=((((-1.0)*x6760*x6766))+((cj2*sj1))+((r22*x6756))+((cj1*sj2))+((r21*x6769)));
evalcond[4]=((((-1.0)*x6759*x6763))+((x6757*x6761))+(((-1.0)*x6764*x6766))+((sj0*x6758))+((r02*x6756)));
evalcond[5]=(((cj0*x6759))+(((-1.0)*x6758*x6762))+((r12*x6756))+((r11*x6769))+(((-1.0)*x6765*x6766)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6770=((1.0)*gconst125);
CheckValue<IkReal> x6771=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r10))+(((-1.0)*r11*x6770)))),-1);
if(!x6771.valid){
continue;
}
CheckValue<IkReal> x6772 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6770))+((cj0*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6772.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6771.value)))+(x6772.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6773=IKsin(j4);
IkReal x6774=IKcos(j4);
IkReal x6775=(cj1*cj2);
IkReal x6776=(sj1*sj2);
IkReal x6777=(gconst125*r20);
IkReal x6778=(gconst124*r01);
IkReal x6779=((1.0)*cj0);
IkReal x6780=((1.0)*sj0);
IkReal x6781=(gconst125*r00);
IkReal x6782=(gconst125*r10);
IkReal x6783=((1.0)*x6774);
IkReal x6784=((1.0)*x6773);
IkReal x6785=(gconst124*x6773);
IkReal x6786=(gconst124*x6774);
evalcond[0]=(((r21*x6785))+(((-1.0)*r22*x6783))+(((-1.0)*x6777*x6784)));
evalcond[1]=((((-1.0)*x6779))+((x6773*x6778))+(((-1.0)*r02*x6783))+(((-1.0)*x6781*x6784)));
evalcond[2]=((((-1.0)*x6782*x6784))+(((-1.0)*x6780))+((r11*x6785))+(((-1.0)*r12*x6783)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6773))+((r21*x6786))+(((-1.0)*x6777*x6783)));
evalcond[4]=(((sj0*x6775))+((r02*x6773))+(((-1.0)*x6781*x6783))+(((-1.0)*x6776*x6780))+((x6774*x6778)));
evalcond[5]=((((-1.0)*x6782*x6783))+((r12*x6773))+((r11*x6786))+((cj0*x6776))+(((-1.0)*x6775*x6779)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6787 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst124*r21*sj0))+(((-1.0)*gconst125*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6787.valid){
continue;
}
CheckValue<IkReal> x6788=IKPowWithIntegerCheck(IKsign((((gconst124*r00))+((gconst125*r01)))),-1);
if(!x6788.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6787.value)+(((1.5707963267949)*(x6788.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6789=IKsin(j4);
IkReal x6790=IKcos(j4);
IkReal x6791=(cj1*cj2);
IkReal x6792=(sj1*sj2);
IkReal x6793=(gconst125*r20);
IkReal x6794=(gconst124*r01);
IkReal x6795=((1.0)*cj0);
IkReal x6796=((1.0)*sj0);
IkReal x6797=(gconst125*r00);
IkReal x6798=(gconst125*r10);
IkReal x6799=((1.0)*x6790);
IkReal x6800=((1.0)*x6789);
IkReal x6801=(gconst124*x6789);
IkReal x6802=(gconst124*x6790);
evalcond[0]=(((r21*x6801))+(((-1.0)*x6793*x6800))+(((-1.0)*r22*x6799)));
evalcond[1]=((((-1.0)*x6795))+(((-1.0)*x6797*x6800))+((x6789*x6794))+(((-1.0)*r02*x6799)));
evalcond[2]=(((r11*x6801))+(((-1.0)*x6798*x6800))+(((-1.0)*x6796))+(((-1.0)*r12*x6799)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6793*x6799))+((r21*x6802))+((cj1*sj2))+((r22*x6789)));
evalcond[4]=((((-1.0)*x6792*x6796))+((sj0*x6791))+((r02*x6789))+(((-1.0)*x6797*x6799))+((x6790*x6794)));
evalcond[5]=(((r12*x6789))+(((-1.0)*x6798*x6799))+((r11*x6802))+((cj0*x6792))+(((-1.0)*x6791*x6795)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6803=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6803;
j4eval[1]=IKsign(x6803);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6804=((1.0)*cj5);
IkReal x6805=((((-1.0)*r21*x6804))+(((-1.0)*r20*sj5)));
j4eval[0]=x6805;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x6804))))));
j4eval[2]=IKsign(x6805);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6806=cj5*cj5;
IkReal x6807=r11*r11;
IkReal x6808=(r11*sj5);
IkReal x6809=(cj5*r10);
IkReal x6810=((r12*r12)+((x6806*(r10*r10)))+x6807+(((-1.0)*x6806*x6807))+(((-2.0)*x6808*x6809)));
j4eval[0]=x6810;
j4eval[1]=IKsign(x6810);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x6809))+x6808))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6811=cj5*cj5;
IkReal x6812=r11*r11;
IkReal x6813=(cj5*r10);
IkReal x6814=(r11*sj5);
CheckValue<IkReal> x6815=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x6811*x6812))+((x6811*(r10*r10)))+(((-2.0)*x6813*x6814))+x6812)),-1);
if(!x6815.valid){
continue;
}
CheckValue<IkReal> x6816 = IKatan2WithCheck(IkReal(((((-1.0)*x6813))+x6814)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6816.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6815.value)))+(x6816.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6817=IKcos(j4);
IkReal x6818=IKsin(j4);
IkReal x6819=(cj5*r00);
IkReal x6820=(cj5*r10);
IkReal x6821=(r21*sj5);
IkReal x6822=(cj5*r20);
IkReal x6823=((1.0)*x6817);
IkReal x6824=((1.0)*x6818);
IkReal x6825=(sj5*x6818);
IkReal x6826=(sj5*x6817);
evalcond[0]=(((r12*x6818))+((r11*x6826))+(((-1.0)*x6820*x6823)));
evalcond[1]=(((x6818*x6821))+(((-1.0)*r22*x6823))+(((-1.0)*x6822*x6824)));
evalcond[2]=((((-1.0)*r02*x6823))+((r01*x6825))+(((-1.0)*x6819*x6824)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x6823))+((r11*x6825))+(((-1.0)*x6820*x6824)));
evalcond[4]=(((cj2*sj1))+((x6817*x6821))+((cj1*sj2))+((r22*x6818))+(((-1.0)*x6822*x6823)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r01*x6826))+((r02*x6818))+((cj1*cj2))+(((-1.0)*x6819*x6823)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6827=((1.0)*cj5);
CheckValue<IkReal> x6828 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x6827)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6828.valid){
continue;
}
CheckValue<IkReal> x6829=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6827))+(((-1.0)*r20*sj5)))),-1);
if(!x6829.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6828.value)+(((1.5707963267949)*(x6829.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6830=IKcos(j4);
IkReal x6831=IKsin(j4);
IkReal x6832=(cj5*r00);
IkReal x6833=(cj5*r10);
IkReal x6834=(r21*sj5);
IkReal x6835=(cj5*r20);
IkReal x6836=((1.0)*x6830);
IkReal x6837=((1.0)*x6831);
IkReal x6838=(sj5*x6831);
IkReal x6839=(sj5*x6830);
evalcond[0]=((((-1.0)*x6833*x6836))+((r11*x6839))+((r12*x6831)));
evalcond[1]=(((x6831*x6834))+(((-1.0)*r22*x6836))+(((-1.0)*x6835*x6837)));
evalcond[2]=((((-1.0)*r02*x6836))+((r01*x6838))+(((-1.0)*x6832*x6837)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x6836))+(((-1.0)*x6833*x6837))+((r11*x6838)));
evalcond[4]=(((cj2*sj1))+((r22*x6831))+((cj1*sj2))+((x6830*x6834))+(((-1.0)*x6835*x6836)));
evalcond[5]=(((r02*x6831))+(((-1.0)*sj1*sj2))+((r01*x6839))+(((-1.0)*x6832*x6836))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6840 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6840.valid){
continue;
}
CheckValue<IkReal> x6841=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6841.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6840.value)+(((1.5707963267949)*(x6841.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6842=IKcos(j4);
IkReal x6843=IKsin(j4);
IkReal x6844=(cj5*r00);
IkReal x6845=(cj5*r10);
IkReal x6846=(r21*sj5);
IkReal x6847=(cj5*r20);
IkReal x6848=((1.0)*x6842);
IkReal x6849=((1.0)*x6843);
IkReal x6850=(sj5*x6843);
IkReal x6851=(sj5*x6842);
evalcond[0]=(((r12*x6843))+((r11*x6851))+(((-1.0)*x6845*x6848)));
evalcond[1]=((((-1.0)*r22*x6848))+(((-1.0)*x6847*x6849))+((x6843*x6846)));
evalcond[2]=(((r01*x6850))+(((-1.0)*x6844*x6849))+(((-1.0)*r02*x6848)));
evalcond[3]=((-1.0)+((r11*x6850))+(((-1.0)*r12*x6848))+(((-1.0)*x6845*x6849)));
evalcond[4]=(((cj2*sj1))+((r22*x6843))+((cj1*sj2))+(((-1.0)*x6847*x6848))+((x6842*x6846)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r01*x6851))+(((-1.0)*x6844*x6848))+((cj1*cj2))+((r02*x6843)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6852=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6852;
j4eval[1]=IKsign(x6852);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6853=((1.0)*cj5);
IkReal x6854=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6853)));
j4eval[0]=x6854;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x6853)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6854);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6855=cj5*cj5;
IkReal x6856=r11*r11;
IkReal x6857=(cj5*r10);
IkReal x6858=(r11*sj5);
IkReal x6859=((((-1.0)*x6855*(r10*r10)))+(((2.0)*x6857*x6858))+(((-1.0)*x6856))+((x6855*x6856))+(((-1.0)*(r12*r12))));
j4eval[0]=x6859;
j4eval[1]=IKsign(x6859);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x6857))+x6858))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6860=cj5*cj5;
IkReal x6861=r11*r11;
IkReal x6862=(cj5*r10);
IkReal x6863=(r11*sj5);
CheckValue<IkReal> x6864=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6860*(r10*r10)))+((x6860*x6861))+(((-1.0)*x6861))+(((-1.0)*(r12*r12)))+(((2.0)*x6862*x6863)))),-1);
if(!x6864.valid){
continue;
}
CheckValue<IkReal> x6865 = IKatan2WithCheck(IkReal(((((-1.0)*x6862))+x6863)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6865.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6864.value)))+(x6865.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6866=IKcos(j4);
IkReal x6867=IKsin(j4);
IkReal x6868=(cj5*r00);
IkReal x6869=(cj5*r10);
IkReal x6870=(r21*sj5);
IkReal x6871=(cj5*r20);
IkReal x6872=((1.0)*x6866);
IkReal x6873=((1.0)*x6867);
IkReal x6874=(sj5*x6867);
IkReal x6875=(sj5*x6866);
evalcond[0]=(((r11*x6875))+(((-1.0)*x6869*x6872))+((r12*x6867)));
evalcond[1]=((((-1.0)*x6871*x6873))+(((-1.0)*r22*x6872))+((x6867*x6870)));
evalcond[2]=((((-1.0)*x6868*x6873))+(((-1.0)*r02*x6872))+((r01*x6874)));
evalcond[3]=((1.0)+((r11*x6874))+(((-1.0)*x6869*x6873))+(((-1.0)*r12*x6872)));
evalcond[4]=(((cj2*sj1))+((r22*x6867))+((x6866*x6870))+(((-1.0)*x6871*x6872))+((cj1*sj2)));
evalcond[5]=(((r02*x6867))+(((-1.0)*x6868*x6872))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x6875)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6876=((1.0)*cj5);
CheckValue<IkReal> x6877 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x6876))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6877.valid){
continue;
}
CheckValue<IkReal> x6878=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6876))+(((-1.0)*r00*sj5)))),-1);
if(!x6878.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6877.value)+(((1.5707963267949)*(x6878.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6879=IKcos(j4);
IkReal x6880=IKsin(j4);
IkReal x6881=(cj5*r00);
IkReal x6882=(cj5*r10);
IkReal x6883=(r21*sj5);
IkReal x6884=(cj5*r20);
IkReal x6885=((1.0)*x6879);
IkReal x6886=((1.0)*x6880);
IkReal x6887=(sj5*x6880);
IkReal x6888=(sj5*x6879);
evalcond[0]=(((r11*x6888))+(((-1.0)*x6882*x6885))+((r12*x6880)));
evalcond[1]=(((x6880*x6883))+(((-1.0)*x6884*x6886))+(((-1.0)*r22*x6885)));
evalcond[2]=((((-1.0)*x6881*x6886))+(((-1.0)*r02*x6885))+((r01*x6887)));
evalcond[3]=((1.0)+((r11*x6887))+(((-1.0)*x6882*x6886))+(((-1.0)*r12*x6885)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6884*x6885))+((cj1*sj2))+((x6879*x6883))+((r22*x6880)));
evalcond[5]=((((-1.0)*x6881*x6885))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x6880))+((r01*x6888)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6889=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6889.valid){
continue;
}
CheckValue<IkReal> x6890 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6890.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6889.value)))+(x6890.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6891=IKcos(j4);
IkReal x6892=IKsin(j4);
IkReal x6893=(cj5*r00);
IkReal x6894=(cj5*r10);
IkReal x6895=(r21*sj5);
IkReal x6896=(cj5*r20);
IkReal x6897=((1.0)*x6891);
IkReal x6898=((1.0)*x6892);
IkReal x6899=(sj5*x6892);
IkReal x6900=(sj5*x6891);
evalcond[0]=(((r12*x6892))+(((-1.0)*x6894*x6897))+((r11*x6900)));
evalcond[1]=((((-1.0)*x6896*x6898))+((x6892*x6895))+(((-1.0)*r22*x6897)));
evalcond[2]=((((-1.0)*x6893*x6898))+(((-1.0)*r02*x6897))+((r01*x6899)));
evalcond[3]=((1.0)+(((-1.0)*x6894*x6898))+(((-1.0)*r12*x6897))+((r11*x6899)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6896*x6897))+((x6891*x6895))+((cj1*sj2))+((r22*x6892)));
evalcond[5]=(((r01*x6900))+(((-1.0)*cj1*cj2))+((r02*x6892))+((sj1*sj2))+(((-1.0)*x6893*x6897)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6902 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6902)==0){
continue;
}
IkReal x6901=pow(x6902,-0.5);
CheckValue<IkReal> x6903 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6903.valid){
continue;
}
IkReal gconst126=((-1.0)*(x6903.value));
IkReal gconst127=((-1.0)*r01*x6901);
IkReal gconst128=(r00*x6901);
CheckValue<IkReal> x6904 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6904.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6904.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x6907 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6907.valid){
continue;
}
IkReal x6905=((-1.0)*(x6907.value));
IkReal x6906=x6901;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x6905;
IkReal gconst126=x6905;
IkReal gconst127=((-1.0)*r01*x6906);
IkReal gconst128=(r00*x6906);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x6910 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6910.valid){
continue;
}
IkReal x6908=((-1.0)*(x6910.value));
IkReal x6909=x6901;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x6908;
IkReal gconst126=x6908;
IkReal gconst127=((-1.0)*r01*x6909);
IkReal gconst128=(r00*x6909);
IkReal x6911=r02*r02;
IkReal x6912=(cj0*r12);
IkReal x6913=((1.0)*x6911);
CheckValue<IkReal> x6917=IKPowWithIntegerCheck(((-1.0)+x6911),-1);
if(!x6917.valid){
continue;
}
IkReal x6914=x6917.value;
if((((1.0)+(((-1.0)*x6913)))) < -0.00001)
continue;
IkReal x6915=IKsqrt(((1.0)+(((-1.0)*x6913))));
IkReal x6916=(x6914*x6915);
j4eval[0]=((IKabs((((r02*x6912*x6916))+((sj0*x6916))+(((-1.0)*sj0*x6913*x6916)))))+(IKabs((((r02*sj0))+(((-1.0)*x6912))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x6920 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6920.valid){
continue;
}
IkReal x6918=((-1.0)*(x6920.value));
IkReal x6919=x6901;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x6918;
IkReal gconst126=x6918;
IkReal gconst127=((-1.0)*r01*x6919);
IkReal gconst128=(r00*x6919);
IkReal x6921=r02*r02;
IkReal x6922=((1.0)+(((-1.0)*x6921)));
IkReal x6923=(cj2*r22*sj1);
IkReal x6924=(cj1*r22*sj2);
CheckValue<IkReal> x6931=IKPowWithIntegerCheck(x6922,-1);
if(!x6931.valid){
continue;
}
IkReal x6925=x6931.value;
CheckValue<IkReal> x6932=IKPowWithIntegerCheck(((-1.0)+x6921),-1);
if(!x6932.valid){
continue;
}
IkReal x6926=x6932.value;
IkReal x6927=((1.0)*x6925);
if((x6922) < -0.00001)
continue;
IkReal x6928=IKsqrt(x6922);
IkReal x6929=((1.0)*r02*x6926*x6928);
IkReal x6930=((((-1.0)*x6927*(r01*r01)*(r21*r21)))+(((-1.0)*(r22*r22)))+(((-2.0)*r00*r01*r20*r21*x6925))+(((-1.0)*x6927*(r00*r00)*(r20*r20))));
j4eval[0]=x6930;
j4eval[1]=IKsign(x6930);
j4eval[2]=((IKabs(((((-1.0)*x6924*x6929))+(((-1.0)*x6923*x6929)))))+(IKabs((x6924+x6923))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6933=(gconst127*r21);
IkReal x6934=(gconst128*r20);
IkReal x6935=(cj2*sj1);
IkReal x6936=(cj1*sj2);
CheckValue<IkReal> x6937=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x6933*x6933)))+(((-1.0)*(x6934*x6934)))+(((-1.0)*(r22*r22)))+(((2.0)*x6933*x6934)))),-1);
if(!x6937.valid){
continue;
}
CheckValue<IkReal> x6938 = IKatan2WithCheck(IkReal((((r22*x6936))+((r22*x6935)))),IkReal((((x6933*x6935))+((x6933*x6936))+(((-1.0)*x6934*x6936))+(((-1.0)*x6934*x6935)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6938.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6937.value)))+(x6938.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6939=IKsin(j4);
IkReal x6940=IKcos(j4);
IkReal x6941=(cj1*cj2);
IkReal x6942=(gconst127*r01);
IkReal x6943=(sj1*sj2);
IkReal x6944=(gconst128*r10);
IkReal x6945=((1.0)*cj0);
IkReal x6946=(gconst128*r00);
IkReal x6947=((1.0)*sj0);
IkReal x6948=(gconst128*r20);
IkReal x6949=((1.0)*x6940);
IkReal x6950=((1.0)*x6939);
IkReal x6951=(gconst127*x6940);
IkReal x6952=(gconst127*x6939);
evalcond[0]=((((-1.0)*x6948*x6950))+(((-1.0)*r22*x6949))+((r21*x6952)));
evalcond[1]=((((-1.0)*x6945))+((x6939*x6942))+(((-1.0)*r02*x6949))+(((-1.0)*x6946*x6950)));
evalcond[2]=((((-1.0)*r12*x6949))+(((-1.0)*x6947))+(((-1.0)*x6944*x6950))+((r11*x6952)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6948*x6949))+((cj1*sj2))+((r22*x6939))+((r21*x6951)));
evalcond[4]=((((-1.0)*x6943*x6947))+((x6940*x6942))+(((-1.0)*x6946*x6949))+((r02*x6939))+((sj0*x6941)));
evalcond[5]=(((cj0*x6943))+(((-1.0)*x6941*x6945))+(((-1.0)*x6944*x6949))+((r12*x6939))+((r11*x6951)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6953=((1.0)*cj0);
IkReal x6954=((1.0)*gconst128);
CheckValue<IkReal> x6955 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6953))+((r02*sj0)))),IkReal(((((-1.0)*r00*sj0*x6954))+((cj0*gconst128*r10))+(((-1.0)*gconst127*r11*x6953))+((gconst127*r01*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6955.valid){
continue;
}
CheckValue<IkReal> x6956=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6954))+(((-1.0)*gconst127*r20)))),-1);
if(!x6956.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6955.value)+(((1.5707963267949)*(x6956.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6957=IKsin(j4);
IkReal x6958=IKcos(j4);
IkReal x6959=(cj1*cj2);
IkReal x6960=(gconst127*r01);
IkReal x6961=(sj1*sj2);
IkReal x6962=(gconst128*r10);
IkReal x6963=((1.0)*cj0);
IkReal x6964=(gconst128*r00);
IkReal x6965=((1.0)*sj0);
IkReal x6966=(gconst128*r20);
IkReal x6967=((1.0)*x6958);
IkReal x6968=((1.0)*x6957);
IkReal x6969=(gconst127*x6958);
IkReal x6970=(gconst127*x6957);
evalcond[0]=(((r21*x6970))+(((-1.0)*x6966*x6968))+(((-1.0)*r22*x6967)));
evalcond[1]=((((-1.0)*x6964*x6968))+(((-1.0)*r02*x6967))+(((-1.0)*x6963))+((x6957*x6960)));
evalcond[2]=((((-1.0)*r12*x6967))+(((-1.0)*x6965))+(((-1.0)*x6962*x6968))+((r11*x6970)));
evalcond[3]=(((cj2*sj1))+((r21*x6969))+((r22*x6957))+((cj1*sj2))+(((-1.0)*x6966*x6967)));
evalcond[4]=((((-1.0)*x6964*x6967))+(((-1.0)*x6961*x6965))+((r02*x6957))+((x6958*x6960))+((sj0*x6959)));
evalcond[5]=((((-1.0)*x6959*x6963))+((cj0*x6961))+((r12*x6957))+(((-1.0)*x6962*x6967))+((r11*x6969)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6971=((1.0)*gconst128);
CheckValue<IkReal> x6972 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6971))+((cj0*gconst127*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6972.valid){
continue;
}
CheckValue<IkReal> x6973=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6971))+(((-1.0)*gconst127*r10)))),-1);
if(!x6973.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6972.value)+(((1.5707963267949)*(x6973.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6974=IKsin(j4);
IkReal x6975=IKcos(j4);
IkReal x6976=(cj1*cj2);
IkReal x6977=(gconst127*r01);
IkReal x6978=(sj1*sj2);
IkReal x6979=(gconst128*r10);
IkReal x6980=((1.0)*cj0);
IkReal x6981=(gconst128*r00);
IkReal x6982=((1.0)*sj0);
IkReal x6983=(gconst128*r20);
IkReal x6984=((1.0)*x6975);
IkReal x6985=((1.0)*x6974);
IkReal x6986=(gconst127*x6975);
IkReal x6987=(gconst127*x6974);
evalcond[0]=((((-1.0)*r22*x6984))+((r21*x6987))+(((-1.0)*x6983*x6985)));
evalcond[1]=(((x6974*x6977))+(((-1.0)*x6980))+(((-1.0)*x6981*x6985))+(((-1.0)*r02*x6984)));
evalcond[2]=((((-1.0)*x6982))+(((-1.0)*r12*x6984))+(((-1.0)*x6979*x6985))+((r11*x6987)));
evalcond[3]=(((cj2*sj1))+((r22*x6974))+((cj1*sj2))+((r21*x6986))+(((-1.0)*x6983*x6984)));
evalcond[4]=(((x6975*x6977))+(((-1.0)*x6978*x6982))+((sj0*x6976))+((r02*x6974))+(((-1.0)*x6981*x6984)));
evalcond[5]=(((r12*x6974))+((cj0*x6978))+(((-1.0)*x6979*x6984))+(((-1.0)*x6976*x6980))+((r11*x6986)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6989 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6989)==0){
continue;
}
IkReal x6988=pow(x6989,-0.5);
CheckValue<IkReal> x6990 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6990.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x6990.value))));
IkReal gconst130=((1.0)*r01*x6988);
IkReal gconst131=((-1.0)*r00*x6988);
CheckValue<IkReal> x6991 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6991.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6991.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x6994 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6994.valid){
continue;
}
IkReal x6992=((1.0)*(x6994.value));
IkReal x6993=x6988;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6992)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6992)));
IkReal gconst130=((1.0)*r01*x6993);
IkReal gconst131=((-1.0)*r00*x6993);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=sj0;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x6997 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6997.valid){
continue;
}
IkReal x6995=((1.0)*(x6997.value));
IkReal x6996=x6988;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6995)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6995)));
IkReal gconst130=((1.0)*r01*x6996);
IkReal gconst131=((-1.0)*r00*x6996);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6998=((1.0)*cj0);
IkReal x6999=((1.0)*gconst131);
CheckValue<IkReal> x7000 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6998))+((r02*sj0)))),IkReal(((((-1.0)*gconst130*r11*x6998))+((gconst130*r01*sj0))+(((-1.0)*r00*sj0*x6999))+((cj0*gconst131*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7000.valid){
continue;
}
CheckValue<IkReal> x7001=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst130*r20))+(((-1.0)*r21*x6999)))),-1);
if(!x7001.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7000.value)+(((1.5707963267949)*(x7001.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7002=IKsin(j4);
IkReal x7003=IKcos(j4);
IkReal x7004=(cj1*cj2);
IkReal x7005=(gconst131*r10);
IkReal x7006=(gconst130*r11);
IkReal x7007=(gconst131*r20);
IkReal x7008=((1.0)*cj0);
IkReal x7009=((1.0)*sj0);
IkReal x7010=(gconst131*r00);
IkReal x7011=(sj1*sj2);
IkReal x7012=((1.0)*x7003);
IkReal x7013=((1.0)*x7002);
IkReal x7014=(gconst130*x7003);
IkReal x7015=(gconst130*x7002);
evalcond[0]=((((-1.0)*r22*x7012))+((r21*x7015))+(((-1.0)*x7007*x7013)));
evalcond[1]=((((-1.0)*x7010*x7013))+(((-1.0)*x7008))+((r01*x7015))+(((-1.0)*r02*x7012)));
evalcond[2]=(((x7002*x7006))+(((-1.0)*x7009))+(((-1.0)*r12*x7012))+(((-1.0)*x7005*x7013)));
evalcond[3]=(((cj2*sj1))+((r21*x7014))+((cj1*sj2))+((r22*x7002))+(((-1.0)*x7007*x7012)));
evalcond[4]=((((-1.0)*x7009*x7011))+(((-1.0)*x7010*x7012))+((sj0*x7004))+((r02*x7002))+((r01*x7014)));
evalcond[5]=(((cj0*x7011))+((x7003*x7006))+(((-1.0)*x7004*x7008))+((r12*x7002))+(((-1.0)*x7005*x7012)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7016=((1.0)*gconst131);
CheckValue<IkReal> x7017 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*r20*x7016)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7017.valid){
continue;
}
CheckValue<IkReal> x7018=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7016))+(((-1.0)*gconst130*r10)))),-1);
if(!x7018.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7017.value)+(((1.5707963267949)*(x7018.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7019=IKsin(j4);
IkReal x7020=IKcos(j4);
IkReal x7021=(cj1*cj2);
IkReal x7022=(gconst131*r10);
IkReal x7023=(gconst130*r11);
IkReal x7024=(gconst131*r20);
IkReal x7025=((1.0)*cj0);
IkReal x7026=((1.0)*sj0);
IkReal x7027=(gconst131*r00);
IkReal x7028=(sj1*sj2);
IkReal x7029=((1.0)*x7020);
IkReal x7030=((1.0)*x7019);
IkReal x7031=(gconst130*x7020);
IkReal x7032=(gconst130*x7019);
evalcond[0]=((((-1.0)*r22*x7029))+((r21*x7032))+(((-1.0)*x7024*x7030)));
evalcond[1]=(((r01*x7032))+(((-1.0)*r02*x7029))+(((-1.0)*x7027*x7030))+(((-1.0)*x7025)));
evalcond[2]=((((-1.0)*r12*x7029))+((x7019*x7023))+(((-1.0)*x7026))+(((-1.0)*x7022*x7030)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x7024*x7029))+((cj1*sj2))+((r22*x7019))+((r21*x7031)));
evalcond[4]=(((r01*x7031))+((r02*x7019))+((sj0*x7021))+(((-1.0)*x7027*x7029))+(((-1.0)*x7026*x7028)));
evalcond[5]=((((-1.0)*x7021*x7025))+((x7020*x7023))+(((-1.0)*x7022*x7029))+((r12*x7019))+((cj0*x7028)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7033 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst130*r21*sj0))+(((-1.0)*gconst131*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7033.valid){
continue;
}
CheckValue<IkReal> x7034=IKPowWithIntegerCheck(IKsign((((gconst131*r01))+((gconst130*r00)))),-1);
if(!x7034.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7033.value)+(((1.5707963267949)*(x7034.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7035=IKsin(j4);
IkReal x7036=IKcos(j4);
IkReal x7037=(cj1*cj2);
IkReal x7038=(gconst131*r10);
IkReal x7039=(gconst130*r11);
IkReal x7040=(gconst131*r20);
IkReal x7041=((1.0)*cj0);
IkReal x7042=((1.0)*sj0);
IkReal x7043=(gconst131*r00);
IkReal x7044=(sj1*sj2);
IkReal x7045=((1.0)*x7036);
IkReal x7046=((1.0)*x7035);
IkReal x7047=(gconst130*x7036);
IkReal x7048=(gconst130*x7035);
evalcond[0]=((((-1.0)*r22*x7045))+(((-1.0)*x7040*x7046))+((r21*x7048)));
evalcond[1]=((((-1.0)*x7041))+((r01*x7048))+(((-1.0)*r02*x7045))+(((-1.0)*x7043*x7046)));
evalcond[2]=((((-1.0)*x7042))+(((-1.0)*r12*x7045))+((x7035*x7039))+(((-1.0)*x7038*x7046)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x7040*x7045))+((cj1*sj2))+((r21*x7047))+((r22*x7035)));
evalcond[4]=(((sj0*x7037))+((r01*x7047))+(((-1.0)*x7043*x7045))+(((-1.0)*x7042*x7044))+((r02*x7035)));
evalcond[5]=(((r12*x7035))+(((-1.0)*x7037*x7041))+((x7036*x7039))+((cj0*x7044))+(((-1.0)*x7038*x7045)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7049=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7049;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x7049);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7050=((1.0)*cj5);
IkReal x7051=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7050)));
j4eval[0]=x7051;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x7050)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7051);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7052=cj5*cj5;
IkReal x7053=r01*r01;
IkReal x7054=(cj5*r00);
IkReal x7055=(r01*sj5);
IkReal x7056=(x7053+(((-1.0)*x7052*x7053))+(((-2.0)*x7054*x7055))+((x7052*(r00*r00)))+(r02*r02));
j4eval[0]=x7056;
j4eval[1]=IKsign(x7056);
j4eval[2]=((IKabs(r02))+(IKabs((x7055+(((-1.0)*x7054))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7057=cj5*cj5;
IkReal x7058=r01*r01;
IkReal x7059=(r01*sj5);
IkReal x7060=(cj5*r00);
CheckValue<IkReal> x7061 = IKatan2WithCheck(IkReal((x7059+(((-1.0)*x7060)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x7061.valid){
continue;
}
CheckValue<IkReal> x7062=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7057*x7058))+x7058+(((-2.0)*x7059*x7060))+((x7057*(r00*r00)))+(r02*r02))),-1);
if(!x7062.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7061.value)+(((1.5707963267949)*(x7062.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7063=IKcos(j4);
IkReal x7064=IKsin(j4);
IkReal x7065=(cj5*r00);
IkReal x7066=(cj5*r10);
IkReal x7067=(r21*sj5);
IkReal x7068=(cj5*r20);
IkReal x7069=((1.0)*x7063);
IkReal x7070=((1.0)*x7064);
IkReal x7071=(sj5*x7064);
IkReal x7072=(sj5*x7063);
evalcond[0]=((((-1.0)*x7065*x7069))+((r01*x7072))+((r02*x7064)));
evalcond[1]=((((-1.0)*x7068*x7070))+((x7064*x7067))+(((-1.0)*r22*x7069)));
evalcond[2]=(((r11*x7071))+(((-1.0)*x7066*x7070))+(((-1.0)*r12*x7069)));
evalcond[3]=((-1.0)+((r01*x7071))+(((-1.0)*x7065*x7070))+(((-1.0)*r02*x7069)));
evalcond[4]=(((cj2*sj1))+((r22*x7064))+((x7063*x7067))+((cj1*sj2))+(((-1.0)*x7068*x7069)));
evalcond[5]=(((r12*x7064))+((r11*x7072))+(((-1.0)*x7066*x7069))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7073=((1.0)*cj5);
CheckValue<IkReal> x7074=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7073)))),-1);
if(!x7074.valid){
continue;
}
CheckValue<IkReal> x7075 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x7073))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7075.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7074.value)))+(x7075.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7076=IKcos(j4);
IkReal x7077=IKsin(j4);
IkReal x7078=(cj5*r00);
IkReal x7079=(cj5*r10);
IkReal x7080=(r21*sj5);
IkReal x7081=(cj5*r20);
IkReal x7082=((1.0)*x7076);
IkReal x7083=((1.0)*x7077);
IkReal x7084=(sj5*x7077);
IkReal x7085=(sj5*x7076);
evalcond[0]=(((r01*x7085))+((r02*x7077))+(((-1.0)*x7078*x7082)));
evalcond[1]=(((x7077*x7080))+(((-1.0)*r22*x7082))+(((-1.0)*x7081*x7083)));
evalcond[2]=(((r11*x7084))+(((-1.0)*x7079*x7083))+(((-1.0)*r12*x7082)));
evalcond[3]=((-1.0)+((r01*x7084))+(((-1.0)*r02*x7082))+(((-1.0)*x7078*x7083)));
evalcond[4]=(((cj2*sj1))+((r22*x7077))+((cj1*sj2))+((x7076*x7080))+(((-1.0)*x7081*x7082)));
evalcond[5]=(((r11*x7085))+(((-1.0)*x7079*x7082))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x7077)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7086=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7086.valid){
continue;
}
CheckValue<IkReal> x7087 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7087.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7086.value)))+(x7087.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7088=IKcos(j4);
IkReal x7089=IKsin(j4);
IkReal x7090=(cj5*r00);
IkReal x7091=(cj5*r10);
IkReal x7092=(r21*sj5);
IkReal x7093=(cj5*r20);
IkReal x7094=((1.0)*x7088);
IkReal x7095=((1.0)*x7089);
IkReal x7096=(sj5*x7089);
IkReal x7097=(sj5*x7088);
evalcond[0]=(((r01*x7097))+((r02*x7089))+(((-1.0)*x7090*x7094)));
evalcond[1]=((((-1.0)*x7093*x7095))+(((-1.0)*r22*x7094))+((x7089*x7092)));
evalcond[2]=(((r11*x7096))+(((-1.0)*r12*x7094))+(((-1.0)*x7091*x7095)));
evalcond[3]=((-1.0)+((r01*x7096))+(((-1.0)*x7090*x7095))+(((-1.0)*r02*x7094)));
evalcond[4]=((((-1.0)*x7093*x7094))+((cj2*sj1))+((cj1*sj2))+((r22*x7089))+((x7088*x7092)));
evalcond[5]=(((r11*x7097))+((r12*x7089))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x7091*x7094)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7098=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7098;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7098);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7099=((1.0)*cj5);
IkReal x7100=((((-1.0)*r21*x7099))+(((-1.0)*r20*sj5)));
j4eval[0]=x7100;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x7099))))));
j4eval[2]=IKsign(x7100);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7101=(r01*sj5);
IkReal x7102=(cj1*sj2);
IkReal x7103=(cj2*sj1);
IkReal x7104=((1.0)*r02);
IkReal x7105=((1.0)*cj5*r00);
IkReal x7106=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7106;
j4eval[1]=((IKabs(((((-1.0)*x7102*x7104))+(((-1.0)*x7103*x7104)))))+(IKabs(((((-1.0)*x7102*x7105))+(((-1.0)*x7103*x7105))+((x7101*x7103))+((x7101*x7102))))));
j4eval[2]=IKsign(x7106);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7107=(r01*sj5);
IkReal x7108=(cj1*sj2);
IkReal x7109=(cj2*sj1);
IkReal x7110=((1.0)*r02);
IkReal x7111=((1.0)*cj5*r00);
CheckValue<IkReal> x7112 = IKatan2WithCheck(IkReal(((((-1.0)*x7109*x7111))+((x7107*x7108))+((x7107*x7109))+(((-1.0)*x7108*x7111)))),IkReal(((((-1.0)*x7109*x7110))+(((-1.0)*x7108*x7110)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7112.valid){
continue;
}
CheckValue<IkReal> x7113=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7113.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7112.value)+(((1.5707963267949)*(x7113.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7114=IKcos(j4);
IkReal x7115=IKsin(j4);
IkReal x7116=(cj5*r00);
IkReal x7117=(cj5*r10);
IkReal x7118=(r21*sj5);
IkReal x7119=(cj5*r20);
IkReal x7120=((1.0)*x7114);
IkReal x7121=((1.0)*x7115);
IkReal x7122=(sj5*x7115);
IkReal x7123=(sj5*x7114);
evalcond[0]=((((-1.0)*x7116*x7120))+((r01*x7123))+((r02*x7115)));
evalcond[1]=((((-1.0)*x7119*x7121))+(((-1.0)*r22*x7120))+((x7115*x7118)));
evalcond[2]=((((-1.0)*r12*x7120))+((r11*x7122))+(((-1.0)*x7117*x7121)));
evalcond[3]=((1.0)+(((-1.0)*x7116*x7121))+((r01*x7122))+(((-1.0)*r02*x7120)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x7119*x7120))+((cj1*sj2))+((r22*x7115))+((x7114*x7118)));
evalcond[5]=(((r12*x7115))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r11*x7123))+(((-1.0)*x7117*x7120)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7124=((1.0)*cj5);
CheckValue<IkReal> x7125 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x7124)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7125.valid){
continue;
}
CheckValue<IkReal> x7126=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7124))+(((-1.0)*r20*sj5)))),-1);
if(!x7126.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7125.value)+(((1.5707963267949)*(x7126.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7127=IKcos(j4);
IkReal x7128=IKsin(j4);
IkReal x7129=(cj5*r00);
IkReal x7130=(cj5*r10);
IkReal x7131=(r21*sj5);
IkReal x7132=(cj5*r20);
IkReal x7133=((1.0)*x7127);
IkReal x7134=((1.0)*x7128);
IkReal x7135=(sj5*x7128);
IkReal x7136=(sj5*x7127);
evalcond[0]=(((r01*x7136))+((r02*x7128))+(((-1.0)*x7129*x7133)));
evalcond[1]=((((-1.0)*x7132*x7134))+(((-1.0)*r22*x7133))+((x7128*x7131)));
evalcond[2]=(((r11*x7135))+(((-1.0)*x7130*x7134))+(((-1.0)*r12*x7133)));
evalcond[3]=((1.0)+((r01*x7135))+(((-1.0)*x7129*x7134))+(((-1.0)*r02*x7133)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x7132*x7133))+((x7127*x7131))+((cj1*sj2))+((r22*x7128)));
evalcond[5]=(((r11*x7136))+(((-1.0)*x7130*x7133))+(((-1.0)*sj1*sj2))+((r12*x7128))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7137 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7137.valid){
continue;
}
CheckValue<IkReal> x7138=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7138.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7137.value)+(((1.5707963267949)*(x7138.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7139=IKcos(j4);
IkReal x7140=IKsin(j4);
IkReal x7141=(cj5*r00);
IkReal x7142=(cj5*r10);
IkReal x7143=(r21*sj5);
IkReal x7144=(cj5*r20);
IkReal x7145=((1.0)*x7139);
IkReal x7146=((1.0)*x7140);
IkReal x7147=(sj5*x7140);
IkReal x7148=(sj5*x7139);
evalcond[0]=(((r01*x7148))+(((-1.0)*x7141*x7145))+((r02*x7140)));
evalcond[1]=(((x7140*x7143))+(((-1.0)*r22*x7145))+(((-1.0)*x7144*x7146)));
evalcond[2]=((((-1.0)*x7142*x7146))+(((-1.0)*r12*x7145))+((r11*x7147)));
evalcond[3]=((1.0)+((r01*x7147))+(((-1.0)*x7141*x7146))+(((-1.0)*r02*x7145)));
evalcond[4]=(((cj2*sj1))+((x7139*x7143))+((cj1*sj2))+(((-1.0)*x7144*x7145))+((r22*x7140)));
evalcond[5]=((((-1.0)*x7142*x7145))+(((-1.0)*sj1*sj2))+((r11*x7148))+((cj1*cj2))+((r12*x7140)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7149=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x7149);
rxp1_1=(px*r21);
rxp1_2=(r11*x7149);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7150=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x7150);
rxp1_1=(px*r21);
rxp1_2=(r11*x7150);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7151=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x7151);
rxp1_1=(px*r21);
rxp1_2=(r11*x7151);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7154=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x7154.valid){
continue;
}
IkReal x7152=x7154.value;
IkReal x7153=(cj0*x7152);
cj4array[0]=(((cj1*cj2*x7153))+(((-1.0)*sj1*sj2*x7153)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7155=IKsin(j4);
IkReal x7156=IKcos(j4);
IkReal x7157=(r21*sj5);
IkReal x7158=((1.0)*cj5*r20);
evalcond[0]=(r02*x7155);
evalcond[1]=((((-1.0)*r02*x7156))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*x7155*x7158))+((x7155*x7157)));
evalcond[3]=((((-1.0)*cj5*r10*x7155))+((r11*sj5*x7155)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x7156*x7158))+((cj1*sj2))+((x7156*x7157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7161=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x7161.valid){
continue;
}
IkReal x7159=x7161.value;
IkReal x7160=((1.0)*x7159);
cj4array[0]=((((-1.0)*cj1*sj2*x7160))+(((-1.0)*cj2*sj1*x7160)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7162=IKsin(j4);
IkReal x7163=IKcos(j4);
IkReal x7164=((1.0)*cj0);
IkReal x7165=((1.0)*cj5);
IkReal x7166=(sj5*x7162);
evalcond[0]=(r02*x7162);
evalcond[1]=((((-1.0)*x7164))+(((-1.0)*r02*x7163)));
evalcond[2]=((((-1.0)*r20*x7162*x7165))+((r21*x7166)));
evalcond[3]=(((r11*x7166))+(((-1.0)*r10*x7162*x7165)));
evalcond[4]=(((r11*sj5*x7163))+(((-1.0)*cj1*cj2*x7164))+((cj0*sj1*sj2))+(((-1.0)*r10*x7163*x7165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7167=IKPowWithIntegerCheck(r02,-1);
if(!x7167.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x7167.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7168=IKsin(j4);
IkReal x7169=IKcos(j4);
IkReal x7170=(r21*sj5);
IkReal x7171=((1.0)*cj5);
IkReal x7172=(r11*sj5);
evalcond[0]=(r02*x7168);
evalcond[1]=((((-1.0)*r20*x7168*x7171))+((x7168*x7170)));
evalcond[2]=((((-1.0)*r10*x7168*x7171))+((x7168*x7172)));
evalcond[3]=(((cj2*sj1))+((x7169*x7170))+((cj1*sj2))+(((-1.0)*r20*x7169*x7171)));
evalcond[4]=((((-1.0)*cj0*cj1*cj2))+((x7169*x7172))+(((-1.0)*r10*x7169*x7171))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7173=((1.0)*cj0);
IkReal x7174=((1.0)*cj5);
CheckValue<IkReal> x7175 = IKatan2WithCheck(IkReal((((r02*sj0))+(((-1.0)*r12*x7173)))),IkReal(((((-1.0)*r11*sj5*x7173))+((cj0*cj5*r10))+(((-1.0)*r00*sj0*x7174))+((r01*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7175.valid){
continue;
}
CheckValue<IkReal> x7176=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7174))+(((-1.0)*r20*sj5)))),-1);
if(!x7176.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7175.value)+(((1.5707963267949)*(x7176.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7177=IKsin(j4);
IkReal x7178=IKcos(j4);
IkReal x7179=(cj5*r00);
IkReal x7180=(cj1*cj2);
IkReal x7181=(cj5*r10);
IkReal x7182=(r21*sj5);
IkReal x7183=(sj1*sj2);
IkReal x7184=((1.0)*cj0);
IkReal x7185=((1.0)*sj0);
IkReal x7186=(cj5*r20);
IkReal x7187=((1.0)*x7178);
IkReal x7188=((1.0)*x7177);
IkReal x7189=(sj5*x7177);
IkReal x7190=(sj5*x7178);
evalcond[0]=((((-1.0)*x7186*x7188))+(((-1.0)*r22*x7187))+((x7177*x7182)));
evalcond[1]=(((r01*x7189))+(((-1.0)*x7179*x7188))+(((-1.0)*x7184))+(((-1.0)*r02*x7187)));
evalcond[2]=(((r11*x7189))+(((-1.0)*x7185))+(((-1.0)*x7181*x7188))+(((-1.0)*r12*x7187)));
evalcond[3]=(((cj2*sj1))+((x7178*x7182))+(((-1.0)*x7186*x7187))+((cj1*sj2))+((r22*x7177)));
evalcond[4]=(((r01*x7190))+(((-1.0)*x7179*x7187))+((r02*x7177))+((sj0*x7180))+(((-1.0)*x7183*x7185)));
evalcond[5]=(((r11*x7190))+(((-1.0)*x7181*x7187))+((cj0*x7183))+(((-1.0)*x7180*x7184))+((r12*x7177)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7191=((1.0)*cj5);
CheckValue<IkReal> x7192=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7191)))),-1);
if(!x7192.valid){
continue;
}
CheckValue<IkReal> x7193 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7191)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7193.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7192.value)))+(x7193.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7194=IKsin(j4);
IkReal x7195=IKcos(j4);
IkReal x7196=(cj5*r00);
IkReal x7197=(cj1*cj2);
IkReal x7198=(cj5*r10);
IkReal x7199=(r21*sj5);
IkReal x7200=(sj1*sj2);
IkReal x7201=((1.0)*cj0);
IkReal x7202=((1.0)*sj0);
IkReal x7203=(cj5*r20);
IkReal x7204=((1.0)*x7195);
IkReal x7205=((1.0)*x7194);
IkReal x7206=(sj5*x7194);
IkReal x7207=(sj5*x7195);
evalcond[0]=((((-1.0)*x7203*x7205))+(((-1.0)*r22*x7204))+((x7194*x7199)));
evalcond[1]=(((r01*x7206))+(((-1.0)*x7196*x7205))+(((-1.0)*x7201))+(((-1.0)*r02*x7204)));
evalcond[2]=((((-1.0)*x7198*x7205))+((r11*x7206))+(((-1.0)*r12*x7204))+(((-1.0)*x7202)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x7195*x7199))+(((-1.0)*x7203*x7204))+((r22*x7194)));
evalcond[4]=(((r01*x7207))+((r02*x7194))+((sj0*x7197))+(((-1.0)*x7196*x7204))+(((-1.0)*x7200*x7202)));
evalcond[5]=(((r12*x7194))+(((-1.0)*x7198*x7204))+((cj0*x7200))+(((-1.0)*x7197*x7201))+((r11*x7207)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7208=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7208.valid){
continue;
}
CheckValue<IkReal> x7209 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7209.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7208.value)))+(x7209.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7210=IKsin(j4);
IkReal x7211=IKcos(j4);
IkReal x7212=(cj5*r00);
IkReal x7213=(cj1*cj2);
IkReal x7214=(cj5*r10);
IkReal x7215=(r21*sj5);
IkReal x7216=(sj1*sj2);
IkReal x7217=((1.0)*cj0);
IkReal x7218=((1.0)*sj0);
IkReal x7219=(cj5*r20);
IkReal x7220=((1.0)*x7211);
IkReal x7221=((1.0)*x7210);
IkReal x7222=(sj5*x7210);
IkReal x7223=(sj5*x7211);
evalcond[0]=(((x7210*x7215))+(((-1.0)*r22*x7220))+(((-1.0)*x7219*x7221)));
evalcond[1]=((((-1.0)*r02*x7220))+((r01*x7222))+(((-1.0)*x7212*x7221))+(((-1.0)*x7217)));
evalcond[2]=((((-1.0)*x7218))+(((-1.0)*r12*x7220))+((r11*x7222))+(((-1.0)*x7214*x7221)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x7211*x7215))+((r22*x7210))+(((-1.0)*x7219*x7220)));
evalcond[4]=(((sj0*x7213))+((r01*x7223))+((r02*x7210))+(((-1.0)*x7212*x7220))+(((-1.0)*x7216*x7218)));
evalcond[5]=(((r12*x7210))+(((-1.0)*x7213*x7217))+((cj0*x7216))+((r11*x7223))+(((-1.0)*x7214*x7220)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7224=(((cj2*sj1))+((cj1*sj2)));
j0eval[0]=x7224;
j0eval[1]=IKsign(x7224);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs(((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7225=cj5*cj5;
IkReal x7226=r21*r21;
IkReal x7227=(cj2*sj1);
IkReal x7228=(cj1*sj2);
IkReal x7229=(r21*sj5);
IkReal x7230=((1.0)*cj5*r20);
IkReal x7231=(x7226+(r22*r22)+((x7225*(r20*r20)))+(((-2.0)*cj5*r20*x7229))+(((-1.0)*x7225*x7226)));
j4eval[0]=x7231;
j4eval[1]=IKsign(x7231);
j4eval[2]=((IKabs((((r22*x7227))+((r22*x7228)))))+(IKabs(((((-1.0)*x7228*x7230))+(((-1.0)*x7227*x7230))+((x7227*x7229))+((x7228*x7229))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7232=cj1*cj1;
IkReal x7233=(cj1*sj1);
IkReal x7234=(cj2*sj2);
j0eval[0]=(((cj2*sj1))+((cj1*sj2)));
j0eval[1]=((((2.0)*x7233*(cj2*cj2)))+(((2.0)*x7232*x7234))+(((-1.0)*x7233))+(((-1.0)*x7234))+(((1.08349267049076)*cj2*x7233))+(((1.08349267049076)*sj2*x7232)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.160559264620033)*py))+(((-1.20217186450501)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.160559264620033)*px))+(((1.20217186450501)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.160559264620033)*py))+(((-1.20217186450501)*px))))+IKsqr(((((-0.160559264620033)*px))+(((1.20217186450501)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.160559264620033)*py))+(((-1.20217186450501)*px))), ((((-0.160559264620033)*px))+(((1.20217186450501)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7235=IKcos(j0);
IkReal x7236=IKsin(j0);
evalcond[0]=((((-0.10915)*x7235))+(((-1.0)*px))+(((-0.81725)*x7236)));
evalcond[1]=((((-0.10915)*x7236))+(((-1.0)*py))+(((0.81725)*x7235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7237=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7237;
j4eval[1]=IKsign(x7237);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7238=((1.0)*sj5);
IkReal x7239=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7238)));
j4eval[0]=x7239;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x7238))))));
j4eval[2]=IKsign(x7239);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7240=((1.0)*cj5);
IkReal x7241=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7240)));
j4eval[0]=x7241;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7240))))));
j4eval[2]=IKsign(x7241);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7242=((1.0)*cj5);
CheckValue<IkReal> x7243=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7242)))),-1);
if(!x7243.valid){
continue;
}
CheckValue<IkReal> x7244 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7242)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7244.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7243.value)))+(x7244.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7245=IKsin(j4);
IkReal x7246=IKcos(j4);
IkReal x7247=((1.0)*cj0);
IkReal x7248=(cj5*r00);
IkReal x7249=(r11*sj5);
IkReal x7250=(cj5*r10);
IkReal x7251=(r21*sj5);
IkReal x7252=(cj5*r20);
IkReal x7253=(r01*sj5);
IkReal x7254=((1.0)*x7246);
IkReal x7255=((1.0)*x7245);
evalcond[0]=(((x7245*x7251))+(((-1.0)*x7252*x7255))+(((-1.0)*r22*x7254)));
evalcond[1]=((((-1.0)*x7251*x7254))+(((-1.0)*r22*x7255))+((x7246*x7252)));
evalcond[2]=(sj0+(((-1.0)*r02*x7255))+((x7246*x7248))+(((-1.0)*x7253*x7254)));
evalcond[3]=(((x7245*x7253))+(((-1.0)*r02*x7254))+(((-1.0)*x7248*x7255))+(((-1.0)*x7247)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*r12*x7254))+((x7245*x7249))+(((-1.0)*x7250*x7255)));
evalcond[5]=((((-1.0)*r12*x7255))+(((-1.0)*x7249*x7254))+((x7246*x7250))+(((-1.0)*x7247)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7256=((1.0)*sj5);
CheckValue<IkReal> x7257 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj0*x7256))+((cj5*r20*sj0)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x7257.valid){
continue;
}
CheckValue<IkReal> x7258=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7256)))),-1);
if(!x7258.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7257.value)+(((1.5707963267949)*(x7258.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7259=IKsin(j4);
IkReal x7260=IKcos(j4);
IkReal x7261=((1.0)*cj0);
IkReal x7262=(cj5*r00);
IkReal x7263=(r11*sj5);
IkReal x7264=(cj5*r10);
IkReal x7265=(r21*sj5);
IkReal x7266=(cj5*r20);
IkReal x7267=(r01*sj5);
IkReal x7268=((1.0)*x7260);
IkReal x7269=((1.0)*x7259);
evalcond[0]=((((-1.0)*r22*x7268))+(((-1.0)*x7266*x7269))+((x7259*x7265)));
evalcond[1]=((((-1.0)*r22*x7269))+((x7260*x7266))+(((-1.0)*x7265*x7268)));
evalcond[2]=(sj0+(((-1.0)*x7267*x7268))+((x7260*x7262))+(((-1.0)*r02*x7269)));
evalcond[3]=((((-1.0)*x7261))+(((-1.0)*x7262*x7269))+((x7259*x7267))+(((-1.0)*r02*x7268)));
evalcond[4]=((((-1.0)*x7264*x7269))+(((-1.0)*sj0))+((x7259*x7263))+(((-1.0)*r12*x7268)));
evalcond[5]=((((-1.0)*x7261))+(((-1.0)*x7263*x7268))+((x7260*x7264))+(((-1.0)*r12*x7269)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7270=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7270.valid){
continue;
}
CheckValue<IkReal> x7271 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7271.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7270.value)))+(x7271.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7272=IKsin(j4);
IkReal x7273=IKcos(j4);
IkReal x7274=((1.0)*cj0);
IkReal x7275=(cj5*r00);
IkReal x7276=(r11*sj5);
IkReal x7277=(cj5*r10);
IkReal x7278=(r21*sj5);
IkReal x7279=(cj5*r20);
IkReal x7280=(r01*sj5);
IkReal x7281=((1.0)*x7273);
IkReal x7282=((1.0)*x7272);
evalcond[0]=(((x7272*x7278))+(((-1.0)*x7279*x7282))+(((-1.0)*r22*x7281)));
evalcond[1]=((((-1.0)*x7278*x7281))+((x7273*x7279))+(((-1.0)*r22*x7282)));
evalcond[2]=(sj0+((x7273*x7275))+(((-1.0)*x7280*x7281))+(((-1.0)*r02*x7282)));
evalcond[3]=((((-1.0)*x7275*x7282))+(((-1.0)*r02*x7281))+(((-1.0)*x7274))+((x7272*x7280)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x7277*x7282))+(((-1.0)*r12*x7281))+((x7272*x7276)));
evalcond[5]=((((-1.0)*x7276*x7281))+(((-1.0)*r12*x7282))+((x7273*x7277))+(((-1.0)*x7274)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.52189136462044)*px))+(((-8.4050211434602)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.52189136462044)*py))+(((-8.4050211434602)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.52189136462044)*px))+(((-8.4050211434602)*py))))+IKsqr(((((2.52189136462044)*py))+(((-8.4050211434602)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.52189136462044)*px))+(((-8.4050211434602)*py))), ((((2.52189136462044)*py))+(((-8.4050211434602)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7283=IKcos(j0);
IkReal x7284=IKsin(j0);
evalcond[0]=((((-0.03275)*x7284))+(((-1.0)*px))+(((-0.10915)*x7283)));
evalcond[1]=((((-1.0)*py))+(((-0.10915)*x7284))+(((0.03275)*x7283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7285=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7285;
j4eval[1]=IKsign(x7285);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7286=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7286;
j4eval[1]=IKsign(x7286);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7287=((1.0)*cj5);
IkReal x7288=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7287)));
j4eval[0]=x7288;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x7287))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7288);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7289=((1.0)*cj5);
CheckValue<IkReal> x7290=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7289)))),-1);
if(!x7290.valid){
continue;
}
CheckValue<IkReal> x7291 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7289))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7291.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7290.value)))+(x7291.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7292=IKsin(j4);
IkReal x7293=IKcos(j4);
IkReal x7294=((1.0)*sj0);
IkReal x7295=(r11*sj5);
IkReal x7296=(cj5*r00);
IkReal x7297=(cj5*r10);
IkReal x7298=(r21*sj5);
IkReal x7299=(cj5*r20);
IkReal x7300=(r01*sj5);
IkReal x7301=((1.0)*x7293);
IkReal x7302=((1.0)*x7292);
evalcond[0]=(((x7292*x7298))+(((-1.0)*x7299*x7302))+(((-1.0)*r22*x7301)));
evalcond[1]=(((x7293*x7299))+(((-1.0)*r22*x7302))+(((-1.0)*x7298*x7301)));
evalcond[2]=(cj0+((x7293*x7297))+(((-1.0)*x7295*x7301))+(((-1.0)*r12*x7302)));
evalcond[3]=((((-1.0)*r02*x7301))+((x7292*x7300))+(((-1.0)*x7296*x7302))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x7297*x7302))+(((-1.0)*x7294))+(((-1.0)*r12*x7301))+((x7292*x7295)));
evalcond[5]=((((-1.0)*r02*x7302))+(((-1.0)*x7294))+((x7293*x7296))+(((-1.0)*x7300*x7301)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7303=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7303.valid){
continue;
}
CheckValue<IkReal> x7304 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7304.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7303.value)))+(x7304.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7305=IKsin(j4);
IkReal x7306=IKcos(j4);
IkReal x7307=((1.0)*sj0);
IkReal x7308=(r11*sj5);
IkReal x7309=(cj5*r00);
IkReal x7310=(cj5*r10);
IkReal x7311=(r21*sj5);
IkReal x7312=(cj5*r20);
IkReal x7313=(r01*sj5);
IkReal x7314=((1.0)*x7306);
IkReal x7315=((1.0)*x7305);
evalcond[0]=((((-1.0)*x7312*x7315))+((x7305*x7311))+(((-1.0)*r22*x7314)));
evalcond[1]=((((-1.0)*x7311*x7314))+((x7306*x7312))+(((-1.0)*r22*x7315)));
evalcond[2]=(cj0+(((-1.0)*r12*x7315))+((x7306*x7310))+(((-1.0)*x7308*x7314)));
evalcond[3]=((((-1.0)*x7309*x7315))+((x7305*x7313))+(((-1.0)*cj0))+(((-1.0)*r02*x7314)));
evalcond[4]=((((-1.0)*r12*x7314))+((x7305*x7308))+(((-1.0)*x7307))+(((-1.0)*x7310*x7315)));
evalcond[5]=(((x7306*x7309))+(((-1.0)*x7313*x7314))+(((-1.0)*x7307))+(((-1.0)*r02*x7315)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7316=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7316.valid){
continue;
}
CheckValue<IkReal> x7317 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7317.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7316.value)))+(x7317.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7318=IKsin(j4);
IkReal x7319=IKcos(j4);
IkReal x7320=((1.0)*sj0);
IkReal x7321=(r11*sj5);
IkReal x7322=(cj5*r00);
IkReal x7323=(cj5*r10);
IkReal x7324=(r21*sj5);
IkReal x7325=(cj5*r20);
IkReal x7326=(r01*sj5);
IkReal x7327=((1.0)*x7319);
IkReal x7328=((1.0)*x7318);
evalcond[0]=((((-1.0)*r22*x7327))+(((-1.0)*x7325*x7328))+((x7318*x7324)));
evalcond[1]=((((-1.0)*x7324*x7327))+(((-1.0)*r22*x7328))+((x7319*x7325)));
evalcond[2]=(cj0+((x7319*x7323))+(((-1.0)*x7321*x7327))+(((-1.0)*r12*x7328)));
evalcond[3]=((((-1.0)*x7322*x7328))+((x7318*x7326))+(((-1.0)*cj0))+(((-1.0)*r02*x7327)));
evalcond[4]=((((-1.0)*x7323*x7328))+(((-1.0)*x7320))+(((-1.0)*r12*x7327))+((x7318*x7321)));
evalcond[5]=((((-1.0)*x7326*x7327))+(((-1.0)*x7320))+((x7319*x7322))+(((-1.0)*r02*x7328)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.36617629259053)*px))+(((-0.658427386453172)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.658427386453172)*px))+(((-2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.36617629259053)*px))+(((-0.658427386453172)*py))))+IKsqr(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.36617629259053)*px))+(((-0.658427386453172)*py))), ((((-0.658427386453172)*px))+(((-2.36617629259053)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7329=IKsin(j0);
IkReal x7330=IKcos(j0);
evalcond[0]=((((-0.10915)*x7330))+(((-1.0)*px))+(((0.39225)*x7329)));
evalcond[1]=((((-0.10915)*x7329))+(((-1.0)*py))+(((-0.39225)*x7330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7331=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7331;
j4eval[1]=IKsign(x7331);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7332=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7332;
j4eval[1]=IKsign(x7332);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7333=((1.0)*cj5);
IkReal x7334=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7333)));
j4eval[0]=x7334;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7333))))));
j4eval[2]=IKsign(x7334);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7335=((1.0)*cj5);
CheckValue<IkReal> x7336=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7335)))),-1);
if(!x7336.valid){
continue;
}
CheckValue<IkReal> x7337 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7335)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7337.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7336.value)))+(x7337.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7338=IKsin(j4);
IkReal x7339=IKcos(j4);
IkReal x7340=((1.0)*sj0);
IkReal x7341=(r11*sj5);
IkReal x7342=(cj5*r00);
IkReal x7343=(cj5*r10);
IkReal x7344=(r21*sj5);
IkReal x7345=(cj5*r20);
IkReal x7346=(r01*sj5);
IkReal x7347=((1.0)*x7339);
IkReal x7348=((1.0)*x7338);
evalcond[0]=((((-1.0)*r22*x7347))+(((-1.0)*x7345*x7348))+((x7338*x7344)));
evalcond[1]=(((x7339*x7345))+(((-1.0)*r22*x7348))+(((-1.0)*x7344*x7347)));
evalcond[2]=(((x7339*x7343))+cj0+(((-1.0)*r12*x7348))+(((-1.0)*x7341*x7347)));
evalcond[3]=((((-1.0)*x7342*x7348))+(((-1.0)*r02*x7347))+((x7338*x7346))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*r12*x7347))+(((-1.0)*x7340))+(((-1.0)*x7343*x7348))+((x7338*x7341)));
evalcond[5]=(((x7339*x7342))+(((-1.0)*x7340))+(((-1.0)*r02*x7348))+(((-1.0)*x7346*x7347)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7349=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7349.valid){
continue;
}
CheckValue<IkReal> x7350 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7350.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7349.value)))+(x7350.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7351=IKsin(j4);
IkReal x7352=IKcos(j4);
IkReal x7353=((1.0)*sj0);
IkReal x7354=(r11*sj5);
IkReal x7355=(cj5*r00);
IkReal x7356=(cj5*r10);
IkReal x7357=(r21*sj5);
IkReal x7358=(cj5*r20);
IkReal x7359=(r01*sj5);
IkReal x7360=((1.0)*x7352);
IkReal x7361=((1.0)*x7351);
evalcond[0]=((((-1.0)*r22*x7360))+((x7351*x7357))+(((-1.0)*x7358*x7361)));
evalcond[1]=(((x7352*x7358))+(((-1.0)*r22*x7361))+(((-1.0)*x7357*x7360)));
evalcond[2]=(((x7352*x7356))+cj0+(((-1.0)*r12*x7361))+(((-1.0)*x7354*x7360)));
evalcond[3]=((((-1.0)*r02*x7360))+((x7351*x7359))+(((-1.0)*cj0))+(((-1.0)*x7355*x7361)));
evalcond[4]=((((-1.0)*x7353))+(((-1.0)*r12*x7360))+(((-1.0)*x7356*x7361))+((x7351*x7354)));
evalcond[5]=(((x7352*x7355))+(((-1.0)*x7353))+(((-1.0)*r02*x7361))+(((-1.0)*x7359*x7360)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7362=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7362.valid){
continue;
}
CheckValue<IkReal> x7363 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7363.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7362.value)))+(x7363.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7364=IKsin(j4);
IkReal x7365=IKcos(j4);
IkReal x7366=((1.0)*sj0);
IkReal x7367=(r11*sj5);
IkReal x7368=(cj5*r00);
IkReal x7369=(cj5*r10);
IkReal x7370=(r21*sj5);
IkReal x7371=(cj5*r20);
IkReal x7372=(r01*sj5);
IkReal x7373=((1.0)*x7365);
IkReal x7374=((1.0)*x7364);
evalcond[0]=(((x7364*x7370))+(((-1.0)*r22*x7373))+(((-1.0)*x7371*x7374)));
evalcond[1]=((((-1.0)*r22*x7374))+((x7365*x7371))+(((-1.0)*x7370*x7373)));
evalcond[2]=(cj0+(((-1.0)*r12*x7374))+((x7365*x7369))+(((-1.0)*x7367*x7373)));
evalcond[3]=(((x7364*x7372))+(((-1.0)*x7368*x7374))+(((-1.0)*r02*x7373))+(((-1.0)*cj0)));
evalcond[4]=(((x7364*x7367))+(((-1.0)*r12*x7373))+(((-1.0)*x7366))+(((-1.0)*x7369*x7374)));
evalcond[5]=((((-1.0)*x7366))+((x7365*x7368))+(((-1.0)*r02*x7374))+(((-1.0)*x7372*x7373)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.658427386453172)*py))+(((-2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.36617629259053)*py))+(((-0.658427386453172)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.658427386453172)*py))+(((-2.36617629259053)*px))))+IKsqr(((((2.36617629259053)*py))+(((-0.658427386453172)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.658427386453172)*py))+(((-2.36617629259053)*px))), ((((2.36617629259053)*py))+(((-0.658427386453172)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7375=IKcos(j0);
IkReal x7376=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.39225)*x7376))+(((-0.10915)*x7375)));
evalcond[1]=((((-1.0)*py))+(((-0.10915)*x7376))+(((0.39225)*x7375)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7377=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7377;
j4eval[1]=IKsign(x7377);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7378=((1.0)*sj5);
IkReal x7379=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7378)));
j4eval[0]=x7379;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x7378))+((cj5*r20*sj0))))));
j4eval[2]=IKsign(x7379);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7380=((1.0)*cj5);
IkReal x7381=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7380)));
j4eval[0]=x7381;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7380)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7381);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7382=((1.0)*cj5);
CheckValue<IkReal> x7383=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7382)))),-1);
if(!x7383.valid){
continue;
}
CheckValue<IkReal> x7384 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7382)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7384.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7383.value)))+(x7384.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7385=IKsin(j4);
IkReal x7386=IKcos(j4);
IkReal x7387=((1.0)*cj0);
IkReal x7388=(cj5*r00);
IkReal x7389=(r11*sj5);
IkReal x7390=(cj5*r10);
IkReal x7391=(r21*sj5);
IkReal x7392=(cj5*r20);
IkReal x7393=(r01*sj5);
IkReal x7394=((1.0)*x7386);
IkReal x7395=((1.0)*x7385);
evalcond[0]=((((-1.0)*r22*x7394))+((x7385*x7391))+(((-1.0)*x7392*x7395)));
evalcond[1]=((((-1.0)*r22*x7395))+((x7386*x7392))+(((-1.0)*x7391*x7394)));
evalcond[2]=(sj0+((x7386*x7388))+(((-1.0)*x7393*x7394))+(((-1.0)*r02*x7395)));
evalcond[3]=(((x7385*x7393))+(((-1.0)*r02*x7394))+(((-1.0)*x7387))+(((-1.0)*x7388*x7395)));
evalcond[4]=((((-1.0)*r12*x7394))+(((-1.0)*sj0))+(((-1.0)*x7390*x7395))+((x7385*x7389)));
evalcond[5]=((((-1.0)*r12*x7395))+(((-1.0)*x7387))+((x7386*x7390))+(((-1.0)*x7389*x7394)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7396=((1.0)*sj5);
CheckValue<IkReal> x7397 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x7396)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x7397.valid){
continue;
}
CheckValue<IkReal> x7398=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7396)))),-1);
if(!x7398.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7397.value)+(((1.5707963267949)*(x7398.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7399=IKsin(j4);
IkReal x7400=IKcos(j4);
IkReal x7401=((1.0)*cj0);
IkReal x7402=(cj5*r00);
IkReal x7403=(r11*sj5);
IkReal x7404=(cj5*r10);
IkReal x7405=(r21*sj5);
IkReal x7406=(cj5*r20);
IkReal x7407=(r01*sj5);
IkReal x7408=((1.0)*x7400);
IkReal x7409=((1.0)*x7399);
evalcond[0]=(((x7399*x7405))+(((-1.0)*r22*x7408))+(((-1.0)*x7406*x7409)));
evalcond[1]=((((-1.0)*x7405*x7408))+((x7400*x7406))+(((-1.0)*r22*x7409)));
evalcond[2]=(sj0+((x7400*x7402))+(((-1.0)*x7407*x7408))+(((-1.0)*r02*x7409)));
evalcond[3]=((((-1.0)*x7401))+((x7399*x7407))+(((-1.0)*x7402*x7409))+(((-1.0)*r02*x7408)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*r12*x7408))+((x7399*x7403))+(((-1.0)*x7404*x7409)));
evalcond[5]=((((-1.0)*x7403*x7408))+(((-1.0)*r12*x7409))+(((-1.0)*x7401))+((x7400*x7404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7410=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7410.valid){
continue;
}
CheckValue<IkReal> x7411 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7411.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7410.value)))+(x7411.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7412=IKsin(j4);
IkReal x7413=IKcos(j4);
IkReal x7414=((1.0)*cj0);
IkReal x7415=(cj5*r00);
IkReal x7416=(r11*sj5);
IkReal x7417=(cj5*r10);
IkReal x7418=(r21*sj5);
IkReal x7419=(cj5*r20);
IkReal x7420=(r01*sj5);
IkReal x7421=((1.0)*x7413);
IkReal x7422=((1.0)*x7412);
evalcond[0]=((((-1.0)*r22*x7421))+(((-1.0)*x7419*x7422))+((x7412*x7418)));
evalcond[1]=(((x7413*x7419))+(((-1.0)*r22*x7422))+(((-1.0)*x7418*x7421)));
evalcond[2]=(((x7413*x7415))+sj0+(((-1.0)*r02*x7422))+(((-1.0)*x7420*x7421)));
evalcond[3]=((((-1.0)*x7415*x7422))+(((-1.0)*r02*x7421))+(((-1.0)*x7414))+((x7412*x7420)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*r12*x7421))+(((-1.0)*x7417*x7422))+((x7412*x7416)));
evalcond[5]=(((x7413*x7417))+(((-1.0)*x7416*x7421))+(((-1.0)*r12*x7422))+(((-1.0)*x7414)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.160559264620033)*py))+(((1.20217186450501)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.160559264620033)*px))+(((-1.20217186450501)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.160559264620033)*py))+(((1.20217186450501)*px))))+IKsqr(((((-0.160559264620033)*px))+(((-1.20217186450501)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.160559264620033)*py))+(((1.20217186450501)*px))), ((((-0.160559264620033)*px))+(((-1.20217186450501)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7423=IKsin(j0);
IkReal x7424=IKcos(j0);
evalcond[0]=((((0.81725)*x7423))+(((-1.0)*px))+(((-0.10915)*x7424)));
evalcond[1]=((((-0.81725)*x7424))+(((-1.0)*py))+(((-0.10915)*x7423)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7425=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7425;
j4eval[1]=IKsign(x7425);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7426=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7426;
j4eval[1]=IKsign(x7426);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7427=((1.0)*cj5);
IkReal x7428=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7427)));
j4eval[0]=x7428;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7427)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7428);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7429=((1.0)*cj5);
CheckValue<IkReal> x7430 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7429)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7430.valid){
continue;
}
CheckValue<IkReal> x7431=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7429)))),-1);
if(!x7431.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7430.value)+(((1.5707963267949)*(x7431.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7432=IKsin(j4);
IkReal x7433=IKcos(j4);
IkReal x7434=((1.0)*sj0);
IkReal x7435=(r11*sj5);
IkReal x7436=(cj5*r00);
IkReal x7437=(cj5*r10);
IkReal x7438=(r21*sj5);
IkReal x7439=(cj5*r20);
IkReal x7440=(r01*sj5);
IkReal x7441=((1.0)*x7433);
IkReal x7442=((1.0)*x7432);
evalcond[0]=(((x7432*x7438))+(((-1.0)*r22*x7441))+(((-1.0)*x7439*x7442)));
evalcond[1]=((((-1.0)*x7438*x7441))+((x7433*x7439))+(((-1.0)*r22*x7442)));
evalcond[2]=((((-1.0)*x7435*x7441))+cj0+((x7433*x7437))+(((-1.0)*r12*x7442)));
evalcond[3]=((((-1.0)*x7436*x7442))+(((-1.0)*r02*x7441))+((x7432*x7440))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x7437*x7442))+(((-1.0)*x7434))+((x7432*x7435))+(((-1.0)*r12*x7441)));
evalcond[5]=((((-1.0)*x7440*x7441))+(((-1.0)*x7434))+((x7433*x7436))+(((-1.0)*r02*x7442)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7443=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7443.valid){
continue;
}
CheckValue<IkReal> x7444 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7444.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7443.value)))+(x7444.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7445=IKsin(j4);
IkReal x7446=IKcos(j4);
IkReal x7447=((1.0)*sj0);
IkReal x7448=(r11*sj5);
IkReal x7449=(cj5*r00);
IkReal x7450=(cj5*r10);
IkReal x7451=(r21*sj5);
IkReal x7452=(cj5*r20);
IkReal x7453=(r01*sj5);
IkReal x7454=((1.0)*x7446);
IkReal x7455=((1.0)*x7445);
evalcond[0]=((((-1.0)*x7452*x7455))+((x7445*x7451))+(((-1.0)*r22*x7454)));
evalcond[1]=((((-1.0)*x7451*x7454))+((x7446*x7452))+(((-1.0)*r22*x7455)));
evalcond[2]=(cj0+((x7446*x7450))+(((-1.0)*r12*x7455))+(((-1.0)*x7448*x7454)));
evalcond[3]=(((x7445*x7453))+(((-1.0)*r02*x7454))+(((-1.0)*x7449*x7455))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x7447))+(((-1.0)*x7450*x7455))+((x7445*x7448))+(((-1.0)*r12*x7454)));
evalcond[5]=((((-1.0)*x7447))+(((-1.0)*x7453*x7454))+((x7446*x7449))+(((-1.0)*r02*x7455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7456=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7456.valid){
continue;
}
CheckValue<IkReal> x7457 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7457.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7456.value)))+(x7457.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7458=IKsin(j4);
IkReal x7459=IKcos(j4);
IkReal x7460=((1.0)*sj0);
IkReal x7461=(r11*sj5);
IkReal x7462=(cj5*r00);
IkReal x7463=(cj5*r10);
IkReal x7464=(r21*sj5);
IkReal x7465=(cj5*r20);
IkReal x7466=(r01*sj5);
IkReal x7467=((1.0)*x7459);
IkReal x7468=((1.0)*x7458);
evalcond[0]=(((x7458*x7464))+(((-1.0)*r22*x7467))+(((-1.0)*x7465*x7468)));
evalcond[1]=((((-1.0)*x7464*x7467))+(((-1.0)*r22*x7468))+((x7459*x7465)));
evalcond[2]=(cj0+(((-1.0)*r12*x7468))+(((-1.0)*x7461*x7467))+((x7459*x7463)));
evalcond[3]=(((x7458*x7466))+(((-1.0)*r02*x7467))+(((-1.0)*x7462*x7468))+(((-1.0)*cj0)));
evalcond[4]=(((x7458*x7461))+(((-1.0)*r12*x7467))+(((-1.0)*x7460))+(((-1.0)*x7463*x7468)));
evalcond[5]=((((-1.0)*r02*x7468))+(((-1.0)*x7466*x7467))+((x7459*x7462))+(((-1.0)*x7460)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.52189136462044)*px))+(((-8.4050211434602)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.52189136462044)*py))+(((-8.4050211434602)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.52189136462044)*px))+(((-8.4050211434602)*py))))+IKsqr(((((-2.52189136462044)*py))+(((-8.4050211434602)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.52189136462044)*px))+(((-8.4050211434602)*py))), ((((-2.52189136462044)*py))+(((-8.4050211434602)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7469=IKsin(j0);
IkReal x7470=IKcos(j0);
evalcond[0]=((((-0.10915)*x7470))+(((-1.0)*px))+(((0.03275)*x7469)));
evalcond[1]=((((-0.10915)*x7469))+(((-1.0)*py))+(((-0.03275)*x7470)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7471=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7471;
j4eval[1]=IKsign(x7471);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7472=((1.0)*sj5);
IkReal x7473=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7472)));
j4eval[0]=x7473;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x7472))+((cj5*r20*sj0))))));
j4eval[2]=IKsign(x7473);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7474=((1.0)*cj5);
IkReal x7475=((((-1.0)*r11*x7474))+(((-1.0)*r10*sj5)));
j4eval[0]=x7475;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7474)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7475);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7476=((1.0)*cj5);
CheckValue<IkReal> x7477=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7476))+(((-1.0)*r10*sj5)))),-1);
if(!x7477.valid){
continue;
}
CheckValue<IkReal> x7478 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7476)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7478.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7477.value)))+(x7478.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7479=IKsin(j4);
IkReal x7480=IKcos(j4);
IkReal x7481=((1.0)*cj0);
IkReal x7482=(cj5*r00);
IkReal x7483=(r11*sj5);
IkReal x7484=(cj5*r10);
IkReal x7485=(r21*sj5);
IkReal x7486=(cj5*r20);
IkReal x7487=(r01*sj5);
IkReal x7488=((1.0)*x7480);
IkReal x7489=((1.0)*x7479);
evalcond[0]=((((-1.0)*x7486*x7489))+(((-1.0)*r22*x7488))+((x7479*x7485)));
evalcond[1]=(((x7480*x7486))+(((-1.0)*r22*x7489))+(((-1.0)*x7485*x7488)));
evalcond[2]=(((x7480*x7482))+sj0+(((-1.0)*x7487*x7488))+(((-1.0)*r02*x7489)));
evalcond[3]=((((-1.0)*x7482*x7489))+(((-1.0)*x7481))+(((-1.0)*r02*x7488))+((x7479*x7487)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*r12*x7488))+(((-1.0)*x7484*x7489))+((x7479*x7483)));
evalcond[5]=(((x7480*x7484))+(((-1.0)*x7481))+(((-1.0)*r12*x7489))+(((-1.0)*x7483*x7488)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7490=((1.0)*sj5);
CheckValue<IkReal> x7491 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x7490)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x7491.valid){
continue;
}
CheckValue<IkReal> x7492=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7490)))),-1);
if(!x7492.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7491.value)+(((1.5707963267949)*(x7492.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7493=IKsin(j4);
IkReal x7494=IKcos(j4);
IkReal x7495=((1.0)*cj0);
IkReal x7496=(cj5*r00);
IkReal x7497=(r11*sj5);
IkReal x7498=(cj5*r10);
IkReal x7499=(r21*sj5);
IkReal x7500=(cj5*r20);
IkReal x7501=(r01*sj5);
IkReal x7502=((1.0)*x7494);
IkReal x7503=((1.0)*x7493);
evalcond[0]=((((-1.0)*r22*x7502))+(((-1.0)*x7500*x7503))+((x7493*x7499)));
evalcond[1]=((((-1.0)*r22*x7503))+(((-1.0)*x7499*x7502))+((x7494*x7500)));
evalcond[2]=((((-1.0)*x7501*x7502))+sj0+(((-1.0)*r02*x7503))+((x7494*x7496)));
evalcond[3]=(((x7493*x7501))+(((-1.0)*x7496*x7503))+(((-1.0)*r02*x7502))+(((-1.0)*x7495)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x7498*x7503))+((x7493*x7497))+(((-1.0)*r12*x7502)));
evalcond[5]=((((-1.0)*x7497*x7502))+(((-1.0)*x7495))+((x7494*x7498))+(((-1.0)*r12*x7503)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7504=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7504.valid){
continue;
}
CheckValue<IkReal> x7505 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7505.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7504.value)))+(x7505.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7506=IKsin(j4);
IkReal x7507=IKcos(j4);
IkReal x7508=((1.0)*cj0);
IkReal x7509=(cj5*r00);
IkReal x7510=(r11*sj5);
IkReal x7511=(cj5*r10);
IkReal x7512=(r21*sj5);
IkReal x7513=(cj5*r20);
IkReal x7514=(r01*sj5);
IkReal x7515=((1.0)*x7507);
IkReal x7516=((1.0)*x7506);
evalcond[0]=(((x7506*x7512))+(((-1.0)*x7513*x7516))+(((-1.0)*r22*x7515)));
evalcond[1]=((((-1.0)*x7512*x7515))+((x7507*x7513))+(((-1.0)*r22*x7516)));
evalcond[2]=(sj0+(((-1.0)*r02*x7516))+((x7507*x7509))+(((-1.0)*x7514*x7515)));
evalcond[3]=(((x7506*x7514))+(((-1.0)*x7509*x7516))+(((-1.0)*r02*x7515))+(((-1.0)*x7508)));
evalcond[4]=((((-1.0)*sj0))+((x7506*x7510))+(((-1.0)*x7511*x7516))+(((-1.0)*r12*x7515)));
evalcond[5]=((((-1.0)*x7510*x7515))+((x7507*x7511))+(((-1.0)*r12*x7516))+(((-1.0)*x7508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.658427386453172)*py))+(((-2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.36617629259053)*py))+(((-0.658427386453172)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.658427386453172)*py))+(((-2.36617629259053)*px))))+IKsqr(((((2.36617629259053)*py))+(((-0.658427386453172)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.658427386453172)*py))+(((-2.36617629259053)*px))), ((((2.36617629259053)*py))+(((-0.658427386453172)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7517=IKcos(j0);
IkReal x7518=IKsin(j0);
evalcond[0]=((((-0.39225)*x7518))+(((-0.10915)*x7517))+(((-1.0)*px)));
evalcond[1]=((((-0.10915)*x7518))+(((-1.0)*py))+(((0.39225)*x7517)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7519=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7519;
j4eval[1]=IKsign(x7519);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7520=((1.0)*sj5);
IkReal x7521=((((-1.0)*r10*x7520))+(((-1.0)*cj5*r11)));
j4eval[0]=x7521;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x7520))))));
j4eval[2]=IKsign(x7521);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7522=((1.0)*cj5);
IkReal x7523=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7522)));
j4eval[0]=x7523;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7522)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7523);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7524=((1.0)*cj5);
CheckValue<IkReal> x7525=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7524)))),-1);
if(!x7525.valid){
continue;
}
CheckValue<IkReal> x7526 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7524)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7526.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7525.value)))+(x7526.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7527=IKsin(j4);
IkReal x7528=IKcos(j4);
IkReal x7529=((1.0)*cj0);
IkReal x7530=(cj5*r00);
IkReal x7531=(r11*sj5);
IkReal x7532=(cj5*r10);
IkReal x7533=(r21*sj5);
IkReal x7534=(cj5*r20);
IkReal x7535=(r01*sj5);
IkReal x7536=((1.0)*x7528);
IkReal x7537=((1.0)*x7527);
evalcond[0]=((((-1.0)*r22*x7536))+(((-1.0)*x7534*x7537))+((x7527*x7533)));
evalcond[1]=(((x7528*x7534))+(((-1.0)*r22*x7537))+(((-1.0)*x7533*x7536)));
evalcond[2]=(sj0+((x7528*x7530))+(((-1.0)*x7535*x7536))+(((-1.0)*r02*x7537)));
evalcond[3]=((((-1.0)*x7530*x7537))+((x7527*x7535))+(((-1.0)*x7529))+(((-1.0)*r02*x7536)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x7532*x7537))+(((-1.0)*r12*x7536))+((x7527*x7531)));
evalcond[5]=((((-1.0)*r12*x7537))+((x7528*x7532))+(((-1.0)*x7531*x7536))+(((-1.0)*x7529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7538=((1.0)*sj5);
CheckValue<IkReal> x7539 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x7538)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x7539.valid){
continue;
}
CheckValue<IkReal> x7540=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7538)))),-1);
if(!x7540.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7539.value)+(((1.5707963267949)*(x7540.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7541=IKsin(j4);
IkReal x7542=IKcos(j4);
IkReal x7543=((1.0)*cj0);
IkReal x7544=(cj5*r00);
IkReal x7545=(r11*sj5);
IkReal x7546=(cj5*r10);
IkReal x7547=(r21*sj5);
IkReal x7548=(cj5*r20);
IkReal x7549=(r01*sj5);
IkReal x7550=((1.0)*x7542);
IkReal x7551=((1.0)*x7541);
evalcond[0]=((((-1.0)*r22*x7550))+((x7541*x7547))+(((-1.0)*x7548*x7551)));
evalcond[1]=((((-1.0)*r22*x7551))+((x7542*x7548))+(((-1.0)*x7547*x7550)));
evalcond[2]=(sj0+((x7542*x7544))+(((-1.0)*r02*x7551))+(((-1.0)*x7549*x7550)));
evalcond[3]=((((-1.0)*x7544*x7551))+((x7541*x7549))+(((-1.0)*x7543))+(((-1.0)*r02*x7550)));
evalcond[4]=((((-1.0)*sj0))+((x7541*x7545))+(((-1.0)*r12*x7550))+(((-1.0)*x7546*x7551)));
evalcond[5]=(((x7542*x7546))+(((-1.0)*x7543))+(((-1.0)*r12*x7551))+(((-1.0)*x7545*x7550)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7552=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7552.valid){
continue;
}
CheckValue<IkReal> x7553 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7553.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7552.value)))+(x7553.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7554=IKsin(j4);
IkReal x7555=IKcos(j4);
IkReal x7556=((1.0)*cj0);
IkReal x7557=(cj5*r00);
IkReal x7558=(r11*sj5);
IkReal x7559=(cj5*r10);
IkReal x7560=(r21*sj5);
IkReal x7561=(cj5*r20);
IkReal x7562=(r01*sj5);
IkReal x7563=((1.0)*x7555);
IkReal x7564=((1.0)*x7554);
evalcond[0]=((((-1.0)*r22*x7563))+((x7554*x7560))+(((-1.0)*x7561*x7564)));
evalcond[1]=((((-1.0)*r22*x7564))+(((-1.0)*x7560*x7563))+((x7555*x7561)));
evalcond[2]=((((-1.0)*x7562*x7563))+sj0+(((-1.0)*r02*x7564))+((x7555*x7557)));
evalcond[3]=((((-1.0)*r02*x7563))+(((-1.0)*x7557*x7564))+(((-1.0)*x7556))+((x7554*x7562)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x7559*x7564))+(((-1.0)*r12*x7563))+((x7554*x7558)));
evalcond[5]=((((-1.0)*r12*x7564))+(((-1.0)*x7556))+(((-1.0)*x7558*x7563))+((x7555*x7559)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.36617629259053)*px))+(((-0.658427386453172)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.658427386453172)*px))+(((-2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.36617629259053)*px))+(((-0.658427386453172)*py))))+IKsqr(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.36617629259053)*px))+(((-0.658427386453172)*py))), ((((-0.658427386453172)*px))+(((-2.36617629259053)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7565=IKsin(j0);
IkReal x7566=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((-0.10915)*x7566))+(((0.39225)*x7565)));
evalcond[1]=((((-1.0)*py))+(((-0.10915)*x7565))+(((-0.39225)*x7566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7567=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7567;
j4eval[1]=IKsign(x7567);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7568=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7568;
j4eval[1]=IKsign(x7568);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7569=((1.0)*cj5);
IkReal x7570=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7569)));
j4eval[0]=x7570;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x7569))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7570);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7571=((1.0)*cj5);
CheckValue<IkReal> x7572 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7571)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7572.valid){
continue;
}
CheckValue<IkReal> x7573=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7571)))),-1);
if(!x7573.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7572.value)+(((1.5707963267949)*(x7573.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7574=IKsin(j4);
IkReal x7575=IKcos(j4);
IkReal x7576=((1.0)*sj0);
IkReal x7577=(r11*sj5);
IkReal x7578=(cj5*r00);
IkReal x7579=(cj5*r10);
IkReal x7580=(r21*sj5);
IkReal x7581=(cj5*r20);
IkReal x7582=(r01*sj5);
IkReal x7583=((1.0)*x7575);
IkReal x7584=((1.0)*x7574);
evalcond[0]=((((-1.0)*r22*x7583))+(((-1.0)*x7581*x7584))+((x7574*x7580)));
evalcond[1]=((((-1.0)*r22*x7584))+(((-1.0)*x7580*x7583))+((x7575*x7581)));
evalcond[2]=(cj0+(((-1.0)*x7577*x7583))+((x7575*x7579))+(((-1.0)*r12*x7584)));
evalcond[3]=((((-1.0)*r02*x7583))+((x7574*x7582))+(((-1.0)*x7578*x7584))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x7576))+((x7574*x7577))+(((-1.0)*r12*x7583))+(((-1.0)*x7579*x7584)));
evalcond[5]=((((-1.0)*x7576))+(((-1.0)*r02*x7584))+(((-1.0)*x7582*x7583))+((x7575*x7578)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7585=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7585.valid){
continue;
}
CheckValue<IkReal> x7586 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7586.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7585.value)))+(x7586.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7587=IKsin(j4);
IkReal x7588=IKcos(j4);
IkReal x7589=((1.0)*sj0);
IkReal x7590=(r11*sj5);
IkReal x7591=(cj5*r00);
IkReal x7592=(cj5*r10);
IkReal x7593=(r21*sj5);
IkReal x7594=(cj5*r20);
IkReal x7595=(r01*sj5);
IkReal x7596=((1.0)*x7588);
IkReal x7597=((1.0)*x7587);
evalcond[0]=((((-1.0)*r22*x7596))+(((-1.0)*x7594*x7597))+((x7587*x7593)));
evalcond[1]=(((x7588*x7594))+(((-1.0)*r22*x7597))+(((-1.0)*x7593*x7596)));
evalcond[2]=(((x7588*x7592))+cj0+(((-1.0)*x7590*x7596))+(((-1.0)*r12*x7597)));
evalcond[3]=((((-1.0)*x7591*x7597))+(((-1.0)*r02*x7596))+((x7587*x7595))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x7592*x7597))+(((-1.0)*r12*x7596))+(((-1.0)*x7589))+((x7587*x7590)));
evalcond[5]=(((x7588*x7591))+(((-1.0)*x7595*x7596))+(((-1.0)*x7589))+(((-1.0)*r02*x7597)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7598=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7598.valid){
continue;
}
CheckValue<IkReal> x7599 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7599.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7598.value)))+(x7599.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7600=IKsin(j4);
IkReal x7601=IKcos(j4);
IkReal x7602=((1.0)*sj0);
IkReal x7603=(r11*sj5);
IkReal x7604=(cj5*r00);
IkReal x7605=(cj5*r10);
IkReal x7606=(r21*sj5);
IkReal x7607=(cj5*r20);
IkReal x7608=(r01*sj5);
IkReal x7609=((1.0)*x7601);
IkReal x7610=((1.0)*x7600);
evalcond[0]=((((-1.0)*r22*x7609))+((x7600*x7606))+(((-1.0)*x7607*x7610)));
evalcond[1]=((((-1.0)*x7606*x7609))+(((-1.0)*r22*x7610))+((x7601*x7607)));
evalcond[2]=((((-1.0)*r12*x7610))+cj0+((x7601*x7605))+(((-1.0)*x7603*x7609)));
evalcond[3]=(((x7600*x7608))+(((-1.0)*x7604*x7610))+(((-1.0)*r02*x7609))+(((-1.0)*cj0)));
evalcond[4]=(((x7600*x7603))+(((-1.0)*x7602))+(((-1.0)*x7605*x7610))+(((-1.0)*r12*x7609)));
evalcond[5]=((((-1.0)*x7608*x7609))+(((-1.0)*x7602))+((x7601*x7604))+(((-1.0)*r02*x7610)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*sj5))+((cj5*r01))))+IKsqr(((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*sj5))+((cj5*r01))), ((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7611=IKcos(j0);
IkReal x7612=IKsin(j0);
IkReal x7613=((1.0)*cj5);
IkReal x7614=((1.0)*sj5);
IkReal x7615=((0.09465)*cj5);
IkReal x7616=((0.09465)*sj5);
evalcond[0]=((((-1.0)*r01*x7613))+(((-1.0)*r00*x7614))+x7612);
evalcond[1]=((((-1.0)*r11*x7613))+(((-1.0)*x7611))+(((-1.0)*r10*x7614)));
evalcond[2]=((((-0.10915)*x7611))+(((-1.0)*r01*x7615))+(((-1.0)*px))+(((-1.0)*r00*x7616)));
evalcond[3]=((((-1.0)*r11*x7615))+(((-0.10915)*x7612))+(((-1.0)*py))+(((-1.0)*r10*x7616)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7617=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7617;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x7617);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7618=((1.0)*sj5);
IkReal x7619=((((-1.0)*r00*x7618))+(((-1.0)*cj5*r01)));
j4eval[0]=x7619;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x7618))))));
j4eval[2]=IKsign(x7619);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7620=((1.0)*cj5);
IkReal x7621=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7620)));
j4eval[0]=x7621;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7620)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7621);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7622=((1.0)*cj5);
CheckValue<IkReal> x7623 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7622)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7623.valid){
continue;
}
CheckValue<IkReal> x7624=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7622)))),-1);
if(!x7624.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7623.value)+(((1.5707963267949)*(x7624.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7625=IKsin(j4);
IkReal x7626=IKcos(j4);
IkReal x7627=(r11*sj5);
IkReal x7628=(r21*sj5);
IkReal x7629=(cj5*r00);
IkReal x7630=(cj5*r10);
IkReal x7631=(cj5*r20);
IkReal x7632=(r01*sj5);
IkReal x7633=((1.0)*x7626);
IkReal x7634=((1.0)*x7625);
evalcond[0]=(((x7625*x7628))+(((-1.0)*r22*x7633))+(((-1.0)*x7631*x7634)));
evalcond[1]=(((x7626*x7629))+(((-1.0)*r02*x7634))+(((-1.0)*x7632*x7633)));
evalcond[2]=(((x7626*x7630))+(((-1.0)*x7627*x7633))+(((-1.0)*r12*x7634)));
evalcond[3]=((1.0)+(((-1.0)*r22*x7634))+(((-1.0)*x7628*x7633))+((x7626*x7631)));
evalcond[4]=((((-1.0)*x7629*x7634))+(((-1.0)*r02*x7633))+((x7625*x7632))+(((-1.0)*cj0)));
evalcond[5]=(((x7625*x7627))+(((-1.0)*sj0))+(((-1.0)*x7630*x7634))+(((-1.0)*r12*x7633)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7635=((1.0)*sj5);
CheckValue<IkReal> x7636=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7635))+(((-1.0)*cj5*r01)))),-1);
if(!x7636.valid){
continue;
}
CheckValue<IkReal> x7637 = IKatan2WithCheck(IkReal((((cj5*r10))+(((-1.0)*r11*x7635)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7637.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7636.value)))+(x7637.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7638=IKsin(j4);
IkReal x7639=IKcos(j4);
IkReal x7640=(r11*sj5);
IkReal x7641=(r21*sj5);
IkReal x7642=(cj5*r00);
IkReal x7643=(cj5*r10);
IkReal x7644=(cj5*r20);
IkReal x7645=(r01*sj5);
IkReal x7646=((1.0)*x7639);
IkReal x7647=((1.0)*x7638);
evalcond[0]=((((-1.0)*r22*x7646))+(((-1.0)*x7644*x7647))+((x7638*x7641)));
evalcond[1]=((((-1.0)*r02*x7647))+((x7639*x7642))+(((-1.0)*x7645*x7646)));
evalcond[2]=(((x7639*x7643))+(((-1.0)*r12*x7647))+(((-1.0)*x7640*x7646)));
evalcond[3]=((1.0)+(((-1.0)*r22*x7647))+((x7639*x7644))+(((-1.0)*x7641*x7646)));
evalcond[4]=(((x7638*x7645))+(((-1.0)*r02*x7646))+(((-1.0)*x7642*x7647))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*sj0))+((x7638*x7640))+(((-1.0)*r12*x7646))+(((-1.0)*x7643*x7647)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7648 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7648.valid){
continue;
}
CheckValue<IkReal> x7649=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7649.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7648.value)+(((1.5707963267949)*(x7649.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7650=IKsin(j4);
IkReal x7651=IKcos(j4);
IkReal x7652=(r11*sj5);
IkReal x7653=(r21*sj5);
IkReal x7654=(cj5*r00);
IkReal x7655=(cj5*r10);
IkReal x7656=(cj5*r20);
IkReal x7657=(r01*sj5);
IkReal x7658=((1.0)*x7651);
IkReal x7659=((1.0)*x7650);
evalcond[0]=((((-1.0)*r22*x7658))+(((-1.0)*x7656*x7659))+((x7650*x7653)));
evalcond[1]=((((-1.0)*r02*x7659))+((x7651*x7654))+(((-1.0)*x7657*x7658)));
evalcond[2]=(((x7651*x7655))+(((-1.0)*r12*x7659))+(((-1.0)*x7652*x7658)));
evalcond[3]=((1.0)+(((-1.0)*r22*x7659))+((x7651*x7656))+(((-1.0)*x7653*x7658)));
evalcond[4]=((((-1.0)*r02*x7658))+((x7650*x7657))+(((-1.0)*x7654*x7659))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7655*x7659))+((x7650*x7652))+(((-1.0)*r12*x7658)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01))))+IKsqr((((cj5*r11))+((r10*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01))), (((cj5*r11))+((r10*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7660=IKcos(j0);
IkReal x7661=IKsin(j0);
IkReal x7662=((1.0)*cj5);
IkReal x7663=((1.0)*sj5);
IkReal x7664=((0.09465)*cj5);
IkReal x7665=((0.09465)*sj5);
evalcond[0]=((((-1.0)*r11*x7662))+(((-1.0)*r10*x7663))+x7660);
evalcond[1]=((((-1.0)*r00*x7663))+(((-1.0)*r01*x7662))+(((-1.0)*x7661)));
evalcond[2]=((((-0.10915)*x7660))+(((-1.0)*r00*x7665))+(((-1.0)*px))+(((-1.0)*r01*x7664)));
evalcond[3]=((((-0.10915)*x7661))+(((-1.0)*r11*x7664))+(((-1.0)*py))+(((-1.0)*r10*x7665)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7666=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7666;
j4eval[1]=IKsign(x7666);
j4eval[2]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7667=((1.0)*sj5);
IkReal x7668=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7667)));
j4eval[0]=x7668;
j4eval[1]=IKsign(x7668);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x7667))+((cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7669=((1.0)*cj5);
IkReal x7670=((((-1.0)*r11*x7669))+(((-1.0)*r10*sj5)));
j4eval[0]=x7670;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7669)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7670);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7671=((1.0)*cj5);
CheckValue<IkReal> x7672=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7671)))),-1);
if(!x7672.valid){
continue;
}
CheckValue<IkReal> x7673 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7671))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7673.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7672.value)))+(x7673.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7674=IKsin(j4);
IkReal x7675=IKcos(j4);
IkReal x7676=(r11*sj5);
IkReal x7677=(r21*sj5);
IkReal x7678=(cj5*r00);
IkReal x7679=(cj5*r10);
IkReal x7680=(cj5*r20);
IkReal x7681=(r01*sj5);
IkReal x7682=((1.0)*x7675);
IkReal x7683=((1.0)*x7674);
evalcond[0]=((((-1.0)*r22*x7682))+(((-1.0)*x7680*x7683))+((x7674*x7677)));
evalcond[1]=(((x7675*x7678))+(((-1.0)*x7681*x7682))+(((-1.0)*r02*x7683)));
evalcond[2]=((((-1.0)*x7676*x7682))+((x7675*x7679))+(((-1.0)*r12*x7683)));
evalcond[3]=((-1.0)+(((-1.0)*x7677*x7682))+(((-1.0)*r22*x7683))+((x7675*x7680)));
evalcond[4]=(((x7674*x7681))+(((-1.0)*x7678*x7683))+(((-1.0)*cj0))+(((-1.0)*r02*x7682)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x7682))+((x7674*x7676))+(((-1.0)*x7679*x7683)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7684=((1.0)*sj5);
CheckValue<IkReal> x7685=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x7684))+(((-1.0)*cj5*r11)))),-1);
if(!x7685.valid){
continue;
}
CheckValue<IkReal> x7686 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x7684))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7686.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7685.value)))+(x7686.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7687=IKsin(j4);
IkReal x7688=IKcos(j4);
IkReal x7689=(r11*sj5);
IkReal x7690=(r21*sj5);
IkReal x7691=(cj5*r00);
IkReal x7692=(cj5*r10);
IkReal x7693=(cj5*r20);
IkReal x7694=(r01*sj5);
IkReal x7695=((1.0)*x7688);
IkReal x7696=((1.0)*x7687);
evalcond[0]=((((-1.0)*x7693*x7696))+((x7687*x7690))+(((-1.0)*r22*x7695)));
evalcond[1]=((((-1.0)*r02*x7696))+(((-1.0)*x7694*x7695))+((x7688*x7691)));
evalcond[2]=((((-1.0)*r12*x7696))+(((-1.0)*x7689*x7695))+((x7688*x7692)));
evalcond[3]=((-1.0)+(((-1.0)*r22*x7696))+(((-1.0)*x7690*x7695))+((x7688*x7693)));
evalcond[4]=((((-1.0)*x7691*x7696))+(((-1.0)*r02*x7695))+((x7687*x7694))+(((-1.0)*cj0)));
evalcond[5]=(((x7687*x7689))+(((-1.0)*sj0))+(((-1.0)*r12*x7695))+(((-1.0)*x7692*x7696)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7697=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7697.valid){
continue;
}
CheckValue<IkReal> x7698 = IKatan2WithCheck(IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7698.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7697.value)))+(x7698.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7699=IKsin(j4);
IkReal x7700=IKcos(j4);
IkReal x7701=(r11*sj5);
IkReal x7702=(r21*sj5);
IkReal x7703=(cj5*r00);
IkReal x7704=(cj5*r10);
IkReal x7705=(cj5*r20);
IkReal x7706=(r01*sj5);
IkReal x7707=((1.0)*x7700);
IkReal x7708=((1.0)*x7699);
evalcond[0]=((((-1.0)*r22*x7707))+(((-1.0)*x7705*x7708))+((x7699*x7702)));
evalcond[1]=(((x7700*x7703))+(((-1.0)*x7706*x7707))+(((-1.0)*r02*x7708)));
evalcond[2]=(((x7700*x7704))+(((-1.0)*r12*x7708))+(((-1.0)*x7701*x7707)));
evalcond[3]=((-1.0)+((x7700*x7705))+(((-1.0)*r22*x7708))+(((-1.0)*x7702*x7707)));
evalcond[4]=((((-1.0)*x7703*x7708))+(((-1.0)*r02*x7707))+(((-1.0)*cj0))+((x7699*x7706)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x7707))+(((-1.0)*x7704*x7708))+((x7699*x7701)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01))))+IKsqr((((cj5*r11))+((r10*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01))), (((cj5*r11))+((r10*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7709=IKcos(j0);
IkReal x7710=IKsin(j0);
IkReal x7711=((1.0)*cj5);
IkReal x7712=((1.0)*sj5);
IkReal x7713=((0.09465)*cj5);
IkReal x7714=((0.09465)*sj5);
evalcond[0]=((((-1.0)*r11*x7711))+(((-1.0)*r10*x7712))+x7709);
evalcond[1]=((((-1.0)*x7710))+(((-1.0)*r01*x7711))+(((-1.0)*r00*x7712)));
evalcond[2]=((((-1.0)*px))+(((-1.0)*r01*x7713))+(((-1.0)*r00*x7714))+(((-0.10915)*x7709)));
evalcond[3]=((((-1.0)*r11*x7713))+(((-1.0)*py))+(((-0.10915)*x7710))+(((-1.0)*r10*x7714)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7715=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7715;
j4eval[1]=IKsign(x7715);
j4eval[2]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7716=((1.0)*sj5);
IkReal x7717=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7716)));
j4eval[0]=x7717;
j4eval[1]=IKsign(x7717);
j4eval[2]=((IKabs(((((-1.0)*r01*x7716))+((cj5*r00)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7718=((1.0)*cj5);
IkReal x7719=((((-1.0)*r11*x7718))+(((-1.0)*r10*sj5)));
j4eval[0]=x7719;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7718))))));
j4eval[2]=IKsign(x7719);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7720=((1.0)*cj5);
CheckValue<IkReal> x7721=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7720)))),-1);
if(!x7721.valid){
continue;
}
CheckValue<IkReal> x7722 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7720))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7722.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7721.value)))+(x7722.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7723=IKsin(j4);
IkReal x7724=IKcos(j4);
IkReal x7725=(r11*sj5);
IkReal x7726=(r21*sj5);
IkReal x7727=(cj5*r00);
IkReal x7728=(cj5*r10);
IkReal x7729=(cj5*r20);
IkReal x7730=(r01*sj5);
IkReal x7731=((1.0)*x7724);
IkReal x7732=((1.0)*x7723);
evalcond[0]=((((-1.0)*r22*x7731))+((x7723*x7726))+(((-1.0)*x7729*x7732)));
evalcond[1]=(((x7724*x7727))+(((-1.0)*x7730*x7731))+(((-1.0)*r02*x7732)));
evalcond[2]=(((x7724*x7728))+(((-1.0)*r12*x7732))+(((-1.0)*x7725*x7731)));
evalcond[3]=((-1.0)+((x7724*x7729))+(((-1.0)*r22*x7732))+(((-1.0)*x7726*x7731)));
evalcond[4]=((((-1.0)*r02*x7731))+((x7723*x7730))+(((-1.0)*x7727*x7732))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7728*x7732))+(((-1.0)*sj0))+(((-1.0)*r12*x7731))+((x7723*x7725)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7733=((1.0)*sj5);
CheckValue<IkReal> x7734 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x7733))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7734.valid){
continue;
}
CheckValue<IkReal> x7735=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7733)))),-1);
if(!x7735.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7734.value)+(((1.5707963267949)*(x7735.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7736=IKsin(j4);
IkReal x7737=IKcos(j4);
IkReal x7738=(r11*sj5);
IkReal x7739=(r21*sj5);
IkReal x7740=(cj5*r00);
IkReal x7741=(cj5*r10);
IkReal x7742=(cj5*r20);
IkReal x7743=(r01*sj5);
IkReal x7744=((1.0)*x7737);
IkReal x7745=((1.0)*x7736);
evalcond[0]=((((-1.0)*x7742*x7745))+(((-1.0)*r22*x7744))+((x7736*x7739)));
evalcond[1]=((((-1.0)*r02*x7745))+((x7737*x7740))+(((-1.0)*x7743*x7744)));
evalcond[2]=(((x7737*x7741))+(((-1.0)*r12*x7745))+(((-1.0)*x7738*x7744)));
evalcond[3]=((-1.0)+(((-1.0)*r22*x7745))+((x7737*x7742))+(((-1.0)*x7739*x7744)));
evalcond[4]=((((-1.0)*r02*x7744))+(((-1.0)*x7740*x7745))+((x7736*x7743))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7741*x7745))+((x7736*x7738))+(((-1.0)*r12*x7744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7746=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7746.valid){
continue;
}
CheckValue<IkReal> x7747 = IKatan2WithCheck(IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7747.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7746.value)))+(x7747.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7748=IKsin(j4);
IkReal x7749=IKcos(j4);
IkReal x7750=(r11*sj5);
IkReal x7751=(r21*sj5);
IkReal x7752=(cj5*r00);
IkReal x7753=(cj5*r10);
IkReal x7754=(cj5*r20);
IkReal x7755=(r01*sj5);
IkReal x7756=((1.0)*x7749);
IkReal x7757=((1.0)*x7748);
evalcond[0]=((((-1.0)*r22*x7756))+(((-1.0)*x7754*x7757))+((x7748*x7751)));
evalcond[1]=((((-1.0)*x7755*x7756))+(((-1.0)*r02*x7757))+((x7749*x7752)));
evalcond[2]=((((-1.0)*r12*x7757))+((x7749*x7753))+(((-1.0)*x7750*x7756)));
evalcond[3]=((-1.0)+(((-1.0)*r22*x7757))+((x7749*x7754))+(((-1.0)*x7751*x7756)));
evalcond[4]=((((-1.0)*r02*x7756))+(((-1.0)*x7752*x7757))+((x7748*x7755))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x7756))+(((-1.0)*x7753*x7757))+((x7748*x7750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*sj5))+((cj5*r01))))+IKsqr(((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*sj5))+((cj5*r01))), ((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7758=IKcos(j0);
IkReal x7759=IKsin(j0);
IkReal x7760=((1.0)*cj5);
IkReal x7761=((1.0)*sj5);
IkReal x7762=((0.09465)*cj5);
IkReal x7763=((0.09465)*sj5);
evalcond[0]=((((-1.0)*r00*x7761))+(((-1.0)*r01*x7760))+x7759);
evalcond[1]=((((-1.0)*r10*x7761))+(((-1.0)*x7758))+(((-1.0)*r11*x7760)));
evalcond[2]=((((-1.0)*r00*x7763))+(((-0.10915)*x7758))+(((-1.0)*r01*x7762))+(((-1.0)*px)));
evalcond[3]=((((-1.0)*r10*x7763))+(((-0.10915)*x7759))+(((-1.0)*py))+(((-1.0)*r11*x7762)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7764=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7764;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x7764);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7765=((1.0)*sj5);
IkReal x7766=((((-1.0)*r00*x7765))+(((-1.0)*cj5*r01)));
j4eval[0]=x7766;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x7765))))));
j4eval[2]=IKsign(x7766);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7767=((1.0)*cj5);
IkReal x7768=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7767)));
j4eval[0]=x7768;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7767)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7768);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7769=((1.0)*cj5);
CheckValue<IkReal> x7770 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7769)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7770.valid){
continue;
}
CheckValue<IkReal> x7771=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7769)))),-1);
if(!x7771.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7770.value)+(((1.5707963267949)*(x7771.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7772=IKsin(j4);
IkReal x7773=IKcos(j4);
IkReal x7774=(r11*sj5);
IkReal x7775=(r21*sj5);
IkReal x7776=(cj5*r00);
IkReal x7777=(cj5*r10);
IkReal x7778=(cj5*r20);
IkReal x7779=(r01*sj5);
IkReal x7780=((1.0)*x7773);
IkReal x7781=((1.0)*x7772);
evalcond[0]=(((x7772*x7775))+(((-1.0)*r22*x7780))+(((-1.0)*x7778*x7781)));
evalcond[1]=((((-1.0)*x7779*x7780))+(((-1.0)*r02*x7781))+((x7773*x7776)));
evalcond[2]=((((-1.0)*x7774*x7780))+((x7773*x7777))+(((-1.0)*r12*x7781)));
evalcond[3]=((1.0)+(((-1.0)*r22*x7781))+((x7773*x7778))+(((-1.0)*x7775*x7780)));
evalcond[4]=(((x7772*x7779))+(((-1.0)*r02*x7780))+(((-1.0)*x7776*x7781))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*sj0))+((x7772*x7774))+(((-1.0)*r12*x7780))+(((-1.0)*x7777*x7781)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7782=((1.0)*sj5);
CheckValue<IkReal> x7783=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7782))+(((-1.0)*cj5*r01)))),-1);
if(!x7783.valid){
continue;
}
CheckValue<IkReal> x7784 = IKatan2WithCheck(IkReal((((cj5*r10))+(((-1.0)*r11*x7782)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7784.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7783.value)))+(x7784.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7785=IKsin(j4);
IkReal x7786=IKcos(j4);
IkReal x7787=(r11*sj5);
IkReal x7788=(r21*sj5);
IkReal x7789=(cj5*r00);
IkReal x7790=(cj5*r10);
IkReal x7791=(cj5*r20);
IkReal x7792=(r01*sj5);
IkReal x7793=((1.0)*x7786);
IkReal x7794=((1.0)*x7785);
evalcond[0]=((((-1.0)*r22*x7793))+((x7785*x7788))+(((-1.0)*x7791*x7794)));
evalcond[1]=((((-1.0)*x7792*x7793))+(((-1.0)*r02*x7794))+((x7786*x7789)));
evalcond[2]=((((-1.0)*r12*x7794))+((x7786*x7790))+(((-1.0)*x7787*x7793)));
evalcond[3]=((1.0)+(((-1.0)*r22*x7794))+((x7786*x7791))+(((-1.0)*x7788*x7793)));
evalcond[4]=((((-1.0)*r02*x7793))+((x7785*x7792))+(((-1.0)*x7789*x7794))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*sj0))+((x7785*x7787))+(((-1.0)*r12*x7793))+(((-1.0)*x7790*x7794)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7795 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7795.valid){
continue;
}
CheckValue<IkReal> x7796=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7796.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7795.value)+(((1.5707963267949)*(x7796.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7797=IKsin(j4);
IkReal x7798=IKcos(j4);
IkReal x7799=(r11*sj5);
IkReal x7800=(r21*sj5);
IkReal x7801=(cj5*r00);
IkReal x7802=(cj5*r10);
IkReal x7803=(cj5*r20);
IkReal x7804=(r01*sj5);
IkReal x7805=((1.0)*x7798);
IkReal x7806=((1.0)*x7797);
evalcond[0]=((((-1.0)*r22*x7805))+(((-1.0)*x7803*x7806))+((x7797*x7800)));
evalcond[1]=((((-1.0)*r02*x7806))+((x7798*x7801))+(((-1.0)*x7804*x7805)));
evalcond[2]=((((-1.0)*r12*x7806))+((x7798*x7802))+(((-1.0)*x7799*x7805)));
evalcond[3]=((1.0)+((x7798*x7803))+(((-1.0)*r22*x7806))+(((-1.0)*x7800*x7805)));
evalcond[4]=((((-1.0)*x7801*x7806))+(((-1.0)*r02*x7805))+((x7797*x7804))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x7805))+(((-1.0)*x7802*x7806))+((x7797*x7799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7807=cj1*cj1;
IkReal x7808=(cj1*sj2);
IkReal x7809=(cj1*sj1);
IkReal x7810=(r00*sj5);
IkReal x7811=(r10*sj5);
IkReal x7812=(cj5*r11);
IkReal x7813=(cj5*r01);
IkReal x7814=((20000.0)*py);
IkReal x7815=(cj2*sj1);
IkReal x7816=(sj2*x7807);
IkReal x7817=((1893.0)*x7815);
CheckValue<IkReal> x7818=IKPowWithIntegerCheck((x7808+x7815),-1);
if(!x7818.valid){
continue;
}
CheckValue<IkReal> x7819=IKPowWithIntegerCheck(((((-7845.0)*cj2*sj2))+(((-7845.0)*x7809))+(((15690.0)*x7809*(cj2*cj2)))+(((15690.0)*cj2*x7816))+(((8500.0)*x7816))+(((8500.0)*cj2*x7809))),-1);
if(!x7819.valid){
continue;
}
if( IKabs(((x7818.value)*((x7813+x7810)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7819.value)*((((x7812*x7817))+((x7814*x7815))+(((1893.0)*x7808*x7811))+(((1893.0)*x7808*x7812))+((x7808*x7814))+((x7811*x7817))+(((2183.0)*x7810))+(((2183.0)*x7813)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7818.value)*((x7813+x7810))))+IKsqr(((x7819.value)*((((x7812*x7817))+((x7814*x7815))+(((1893.0)*x7808*x7811))+(((1893.0)*x7808*x7812))+((x7808*x7814))+((x7811*x7817))+(((2183.0)*x7810))+(((2183.0)*x7813))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x7818.value)*((x7813+x7810))), ((x7819.value)*((((x7812*x7817))+((x7814*x7815))+(((1893.0)*x7808*x7811))+(((1893.0)*x7808*x7812))+((x7808*x7814))+((x7811*x7817))+(((2183.0)*x7810))+(((2183.0)*x7813))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7820=IKsin(j0);
IkReal x7821=IKcos(j0);
IkReal x7822=((0.39225)*sj1);
IkReal x7823=(cj5*r11);
IkReal x7824=(cj5*r01);
IkReal x7825=((1.0)*sj5);
IkReal x7826=((0.09465)*sj5);
IkReal x7827=((0.39225)*cj1);
IkReal x7828=((0.425)*cj1);
IkReal x7829=(sj2*x7821);
IkReal x7830=(sj2*x7820);
IkReal x7831=(cj2*x7821);
IkReal x7832=(cj2*x7820);
evalcond[0]=((((-1.0)*x7824))+(((-1.0)*r00*x7825))+((cj1*x7830))+((sj1*x7832)));
evalcond[1]=((((-1.0)*x7823))+(((-1.0)*sj1*x7831))+(((-1.0)*cj1*x7829))+(((-1.0)*r10*x7825)));
evalcond[2]=((((-1.0)*x7820*x7828))+((x7822*x7830))+(((-1.0)*r00*x7826))+(((-1.0)*px))+(((-0.09465)*x7824))+(((-0.10915)*x7821))+(((-1.0)*x7827*x7832)));
evalcond[3]=((((-1.0)*py))+(((-0.09465)*x7823))+(((-1.0)*r10*x7826))+(((-1.0)*x7822*x7829))+((x7827*x7831))+((x7821*x7828))+(((-0.10915)*x7820)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7833=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7833;
j4eval[1]=IKsign(x7833);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7834=((1.0)*cj5);
IkReal x7835=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7834)));
j4eval[0]=x7835;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7834)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7835);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7836=((1.0)*cj0);
IkReal x7837=((1.0)*cj5);
IkReal x7838=((((-1.0)*r21*x7837))+(((-1.0)*r20*sj5)));
j4eval[0]=x7838;
j4eval[1]=((IKabs((((cj0*cj5*r10))+(((-1.0)*r11*sj5*x7836))+((r01*sj0*sj5))+(((-1.0)*r00*sj0*x7837)))))+(IKabs((((r02*sj0))+(((-1.0)*r12*x7836))))));
j4eval[2]=IKsign(x7838);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7839=((-1.0)*r20);
IkReal x7841 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7841)==0){
continue;
}
IkReal x7840=pow(x7841,-0.5);
CheckValue<IkReal> x7842 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7839),IKFAST_ATAN2_MAGTHRESH);
if(!x7842.valid){
continue;
}
IkReal gconst132=((-1.0)*(x7842.value));
IkReal gconst133=(r21*x7840);
IkReal gconst134=(x7839*x7840);
CheckValue<IkReal> x7843 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7843.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7843.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7844=((-1.0)*r20);
IkReal x7845=x7840;
CheckValue<IkReal> x7847 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7844),IKFAST_ATAN2_MAGTHRESH);
if(!x7847.valid){
continue;
}
IkReal x7846=((-1.0)*(x7847.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7846;
IkReal gconst132=x7846;
IkReal gconst133=(r21*x7845);
IkReal gconst134=(x7844*x7845);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7848=((-1.0)*r20);
IkReal x7849=x7840;
CheckValue<IkReal> x7851 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7848),IKFAST_ATAN2_MAGTHRESH);
if(!x7851.valid){
continue;
}
IkReal x7850=((-1.0)*(x7851.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7850;
IkReal gconst132=x7850;
IkReal gconst133=(r21*x7849);
IkReal gconst134=(x7848*x7849);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7852=((-1.0)*r20);
IkReal x7853=x7840;
CheckValue<IkReal> x7855 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7852),IKFAST_ATAN2_MAGTHRESH);
if(!x7855.valid){
continue;
}
IkReal x7854=((-1.0)*(x7855.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7854;
IkReal gconst132=x7854;
IkReal gconst133=(r21*x7853);
IkReal gconst134=(x7852*x7853);
IkReal x7856=r22*r22;
CheckValue<IkReal> x7859=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7856))),-1);
if(!x7859.valid){
continue;
}
IkReal x7857=x7859.value;
IkReal x7858=(((x7857*(r21*r21*r21*r21)))+(((2.0)*x7857*(r20*r20)*(r21*r21)))+x7856+((x7857*(r20*r20*r20*r20))));
j4eval[0]=x7858;
j4eval[1]=IKsign(x7858);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7860=(gconst133*r21);
IkReal x7861=(cj1*sj2);
IkReal x7862=(gconst134*r20);
IkReal x7863=(cj2*sj1);
CheckValue<IkReal> x7864=IKPowWithIntegerCheck(IKsign(((((-2.0)*x7860*x7862))+(r22*r22)+(x7862*x7862)+(x7860*x7860))),-1);
if(!x7864.valid){
continue;
}
CheckValue<IkReal> x7865 = IKatan2WithCheck(IkReal((((r22*x7863))+((r22*x7861)))),IkReal((((x7860*x7861))+((x7860*x7863))+(((-1.0)*x7861*x7862))+(((-1.0)*x7862*x7863)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7865.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7864.value)))+(x7865.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7866=IKsin(j4);
IkReal x7867=IKcos(j4);
IkReal x7868=(cj1*cj2);
IkReal x7869=(sj1*sj2);
IkReal x7870=(gconst133*r11);
IkReal x7871=(gconst133*r21);
IkReal x7872=((1.0)*cj0);
IkReal x7873=((1.0)*sj0);
IkReal x7874=(gconst133*r01);
IkReal x7875=((1.0)*x7867);
IkReal x7876=(gconst134*x7867);
IkReal x7877=((1.0)*x7866);
evalcond[0]=((((-1.0)*r22*x7875))+((x7866*x7871))+(((-1.0)*gconst134*r20*x7877)));
evalcond[1]=(((x7866*x7874))+(((-1.0)*x7872))+(((-1.0)*r02*x7875))+(((-1.0)*gconst134*r00*x7877)));
evalcond[2]=(((x7866*x7870))+(((-1.0)*gconst134*r10*x7877))+(((-1.0)*r12*x7875))+(((-1.0)*x7873)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7877))+((cj1*sj2))+((r20*x7876))+(((-1.0)*x7871*x7875)));
evalcond[4]=((((-1.0)*x7874*x7875))+((r00*x7876))+((sj0*x7868))+(((-1.0)*x7869*x7873))+(((-1.0)*r02*x7877)));
evalcond[5]=(((cj0*x7869))+(((-1.0)*x7870*x7875))+(((-1.0)*x7868*x7872))+((r10*x7876))+(((-1.0)*r12*x7877)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7878=((1.0)*gconst134);
CheckValue<IkReal> x7879 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7878))+((cj0*gconst133*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7879.valid){
continue;
}
CheckValue<IkReal> x7880=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r10))+(((-1.0)*r11*x7878)))),-1);
if(!x7880.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7879.value)+(((1.5707963267949)*(x7880.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7881=IKsin(j4);
IkReal x7882=IKcos(j4);
IkReal x7883=(cj1*cj2);
IkReal x7884=(sj1*sj2);
IkReal x7885=(gconst133*r11);
IkReal x7886=(gconst133*r21);
IkReal x7887=((1.0)*cj0);
IkReal x7888=((1.0)*sj0);
IkReal x7889=(gconst133*r01);
IkReal x7890=((1.0)*x7882);
IkReal x7891=(gconst134*x7882);
IkReal x7892=((1.0)*x7881);
evalcond[0]=((((-1.0)*gconst134*r20*x7892))+((x7881*x7886))+(((-1.0)*r22*x7890)));
evalcond[1]=((((-1.0)*gconst134*r00*x7892))+((x7881*x7889))+(((-1.0)*x7887))+(((-1.0)*r02*x7890)));
evalcond[2]=((((-1.0)*r12*x7890))+(((-1.0)*gconst134*r10*x7892))+((x7881*x7885))+(((-1.0)*x7888)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x7886*x7890))+((cj1*sj2))+(((-1.0)*r22*x7892))+((r20*x7891)));
evalcond[4]=(((sj0*x7883))+(((-1.0)*x7884*x7888))+(((-1.0)*x7889*x7890))+((r00*x7891))+(((-1.0)*r02*x7892)));
evalcond[5]=(((cj0*x7884))+(((-1.0)*x7885*x7890))+(((-1.0)*r12*x7892))+((r10*x7891))+(((-1.0)*x7883*x7887)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7893 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst134*r20*sj0))+((gconst133*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7893.valid){
continue;
}
CheckValue<IkReal> x7894=IKPowWithIntegerCheck(IKsign((((gconst134*r01))+((gconst133*r00)))),-1);
if(!x7894.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7893.value)+(((1.5707963267949)*(x7894.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7895=IKsin(j4);
IkReal x7896=IKcos(j4);
IkReal x7897=(cj1*cj2);
IkReal x7898=(sj1*sj2);
IkReal x7899=(gconst133*r11);
IkReal x7900=(gconst133*r21);
IkReal x7901=((1.0)*cj0);
IkReal x7902=((1.0)*sj0);
IkReal x7903=(gconst133*r01);
IkReal x7904=((1.0)*x7896);
IkReal x7905=(gconst134*x7896);
IkReal x7906=((1.0)*x7895);
evalcond[0]=((((-1.0)*gconst134*r20*x7906))+(((-1.0)*r22*x7904))+((x7895*x7900)));
evalcond[1]=((((-1.0)*gconst134*r00*x7906))+(((-1.0)*x7901))+((x7895*x7903))+(((-1.0)*r02*x7904)));
evalcond[2]=((((-1.0)*r12*x7904))+((x7895*x7899))+(((-1.0)*x7902))+(((-1.0)*gconst134*r10*x7906)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7906))+(((-1.0)*x7900*x7904))+((r20*x7905)));
evalcond[4]=((((-1.0)*x7898*x7902))+((r00*x7905))+(((-1.0)*x7903*x7904))+((sj0*x7897))+(((-1.0)*r02*x7906)));
evalcond[5]=((((-1.0)*r12*x7906))+((r10*x7905))+(((-1.0)*x7899*x7904))+((cj0*x7898))+(((-1.0)*x7897*x7901)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7907=((-1.0)*r21);
IkReal x7909 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7909)==0){
continue;
}
IkReal x7908=pow(x7909,-0.5);
CheckValue<IkReal> x7910 = IKatan2WithCheck(IkReal(x7907),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7910.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x7910.value))));
IkReal gconst136=(x7907*x7908);
IkReal gconst137=((1.0)*r20*x7908);
CheckValue<IkReal> x7911 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7911.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7911.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7912=((-1.0)*r21);
CheckValue<IkReal> x7915 = IKatan2WithCheck(IkReal(x7912),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7915.valid){
continue;
}
IkReal x7913=((1.0)*(x7915.value));
IkReal x7914=x7908;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7913)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7913)));
IkReal gconst136=(x7912*x7914);
IkReal gconst137=((1.0)*r20*x7914);
IkReal x7916=r22*r22;
IkReal x7917=((1.0)*x7916);
CheckValue<IkReal> x7921=IKPowWithIntegerCheck(((-1.0)+x7916),-1);
if(!x7921.valid){
continue;
}
IkReal x7918=x7921.value;
if((((1.0)+(((-1.0)*x7917)))) < -0.00001)
continue;
IkReal x7919=IKsqrt(((1.0)+(((-1.0)*x7917))));
IkReal x7920=(sj0*x7918*x7919);
j4eval[0]=((IKabs((x7920+(((-1.0)*x7917*x7920)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7922=((-1.0)*r21);
CheckValue<IkReal> x7925 = IKatan2WithCheck(IkReal(x7922),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7925.valid){
continue;
}
IkReal x7923=((1.0)*(x7925.value));
IkReal x7924=x7908;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7923)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7923)));
IkReal gconst136=(x7922*x7924);
IkReal gconst137=((1.0)*r20*x7924);
IkReal x7926=r22*r22;
IkReal x7927=((1.0)*x7926);
CheckValue<IkReal> x7931=IKPowWithIntegerCheck(((-1.0)+x7926),-1);
if(!x7931.valid){
continue;
}
IkReal x7928=x7931.value;
if((((1.0)+(((-1.0)*x7927)))) < -0.00001)
continue;
IkReal x7929=IKsqrt(((1.0)+(((-1.0)*x7927))));
IkReal x7930=(cj0*x7928*x7929);
j4eval[0]=((IKabs(((((-1.0)*x7927*x7930))+x7930)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7932=((-1.0)*r21);
CheckValue<IkReal> x7935 = IKatan2WithCheck(IkReal(x7932),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7935.valid){
continue;
}
IkReal x7933=((1.0)*(x7935.value));
IkReal x7934=x7908;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7933)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7933)));
IkReal gconst136=(x7932*x7934);
IkReal gconst137=((1.0)*r20*x7934);
IkReal x7936=r22*r22;
IkReal x7937=(cj0*r12);
IkReal x7938=(r02*sj0);
CheckValue<IkReal> x7942=IKPowWithIntegerCheck(((-1.0)+x7936),-1);
if(!x7942.valid){
continue;
}
IkReal x7939=x7942.value;
if((((1.0)+(((-1.0)*x7936)))) < -0.00001)
continue;
IkReal x7940=IKsqrt(((1.0)+(((-1.0)*x7936))));
IkReal x7941=(r22*x7939*x7940);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x7938*x7941))+((x7937*x7941)))))+(IKabs(((((-1.0)*x7937))+x7938))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7943=((1.0)*cj0);
IkReal x7944=((1.0)*gconst137);
CheckValue<IkReal> x7945 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7943))+((r02*sj0)))),IkReal(((((-1.0)*gconst136*r11*x7943))+((gconst136*r01*sj0))+(((-1.0)*r00*sj0*x7944))+((cj0*gconst137*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7945.valid){
continue;
}
CheckValue<IkReal> x7946=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*r21*x7944)))),-1);
if(!x7946.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7945.value)+(((1.5707963267949)*(x7946.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7947=IKsin(j4);
IkReal x7948=IKcos(j4);
IkReal x7949=(gconst136*r01);
IkReal x7950=(gconst137*r10);
IkReal x7951=(cj1*cj2);
IkReal x7952=(sj1*sj2);
IkReal x7953=(gconst137*r20);
IkReal x7954=(gconst136*r11);
IkReal x7955=((1.0)*cj0);
IkReal x7956=(gconst136*r21);
IkReal x7957=(gconst137*r00);
IkReal x7958=((1.0)*sj0);
IkReal x7959=((1.0)*x7948);
IkReal x7960=((1.0)*x7947);
evalcond[0]=((((-1.0)*x7953*x7960))+(((-1.0)*r22*x7959))+((x7947*x7956)));
evalcond[1]=((((-1.0)*x7957*x7960))+((x7947*x7949))+(((-1.0)*r02*x7959))+(((-1.0)*x7955)));
evalcond[2]=((((-1.0)*x7958))+(((-1.0)*x7950*x7960))+(((-1.0)*r12*x7959))+((x7947*x7954)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x7956*x7959))+(((-1.0)*r22*x7960))+((cj1*sj2))+((x7948*x7953)));
evalcond[4]=((((-1.0)*x7952*x7958))+(((-1.0)*x7949*x7959))+((x7948*x7957))+(((-1.0)*r02*x7960))+((sj0*x7951)));
evalcond[5]=((((-1.0)*x7954*x7959))+((cj0*x7952))+(((-1.0)*r12*x7960))+((x7948*x7950))+(((-1.0)*x7951*x7955)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7961=((1.0)*gconst137);
CheckValue<IkReal> x7962 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7961))+((cj0*gconst136*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7962.valid){
continue;
}
CheckValue<IkReal> x7963=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r10))+(((-1.0)*r11*x7961)))),-1);
if(!x7963.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7962.value)+(((1.5707963267949)*(x7963.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7964=IKsin(j4);
IkReal x7965=IKcos(j4);
IkReal x7966=(gconst136*r01);
IkReal x7967=(gconst137*r10);
IkReal x7968=(cj1*cj2);
IkReal x7969=(sj1*sj2);
IkReal x7970=(gconst137*r20);
IkReal x7971=(gconst136*r11);
IkReal x7972=((1.0)*cj0);
IkReal x7973=(gconst136*r21);
IkReal x7974=(gconst137*r00);
IkReal x7975=((1.0)*sj0);
IkReal x7976=((1.0)*x7965);
IkReal x7977=((1.0)*x7964);
evalcond[0]=(((x7964*x7973))+(((-1.0)*r22*x7976))+(((-1.0)*x7970*x7977)));
evalcond[1]=(((x7964*x7966))+(((-1.0)*x7972))+(((-1.0)*r02*x7976))+(((-1.0)*x7974*x7977)));
evalcond[2]=(((x7964*x7971))+(((-1.0)*x7975))+(((-1.0)*x7967*x7977))+(((-1.0)*r12*x7976)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7977))+((cj1*sj2))+(((-1.0)*x7973*x7976))+((x7965*x7970)));
evalcond[4]=((((-1.0)*x7966*x7976))+(((-1.0)*r02*x7977))+(((-1.0)*x7969*x7975))+((sj0*x7968))+((x7965*x7974)));
evalcond[5]=(((x7965*x7967))+(((-1.0)*x7968*x7972))+((cj0*x7969))+(((-1.0)*r12*x7977))+(((-1.0)*x7971*x7976)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7978=IKPowWithIntegerCheck(IKsign((((gconst136*r00))+((gconst137*r01)))),-1);
if(!x7978.valid){
continue;
}
CheckValue<IkReal> x7979 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst136*r21*sj0))+(((-1.0)*gconst137*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7979.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7978.value)))+(x7979.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7980=IKsin(j4);
IkReal x7981=IKcos(j4);
IkReal x7982=(gconst136*r01);
IkReal x7983=(gconst137*r10);
IkReal x7984=(cj1*cj2);
IkReal x7985=(sj1*sj2);
IkReal x7986=(gconst137*r20);
IkReal x7987=(gconst136*r11);
IkReal x7988=((1.0)*cj0);
IkReal x7989=(gconst136*r21);
IkReal x7990=(gconst137*r00);
IkReal x7991=((1.0)*sj0);
IkReal x7992=((1.0)*x7981);
IkReal x7993=((1.0)*x7980);
evalcond[0]=(((x7980*x7989))+(((-1.0)*x7986*x7993))+(((-1.0)*r22*x7992)));
evalcond[1]=((((-1.0)*x7990*x7993))+((x7980*x7982))+(((-1.0)*r02*x7992))+(((-1.0)*x7988)));
evalcond[2]=((((-1.0)*r12*x7992))+(((-1.0)*x7983*x7993))+((x7980*x7987))+(((-1.0)*x7991)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x7981*x7986))+(((-1.0)*x7989*x7992))+(((-1.0)*r22*x7993)));
evalcond[4]=((((-1.0)*x7982*x7992))+((x7981*x7990))+((sj0*x7984))+(((-1.0)*x7985*x7991))+(((-1.0)*r02*x7993)));
evalcond[5]=((((-1.0)*r12*x7993))+(((-1.0)*x7984*x7988))+((x7981*x7983))+((cj0*x7985))+(((-1.0)*x7987*x7992)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7994=((-1.0)*r10);
IkReal x7996 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7996)==0){
continue;
}
IkReal x7995=pow(x7996,-0.5);
CheckValue<IkReal> x7997 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7994),IKFAST_ATAN2_MAGTHRESH);
if(!x7997.valid){
continue;
}
IkReal gconst138=((-1.0)*(x7997.value));
IkReal gconst139=(r11*x7995);
IkReal gconst140=(x7994*x7995);
CheckValue<IkReal> x7998 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7998.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7998.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7999=((-1.0)*r10);
IkReal x8000=x7995;
CheckValue<IkReal> x8002 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7999),IKFAST_ATAN2_MAGTHRESH);
if(!x8002.valid){
continue;
}
IkReal x8001=((-1.0)*(x8002.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x8001;
IkReal gconst138=x8001;
IkReal gconst139=(r11*x8000);
IkReal gconst140=(x7999*x8000);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8003=((-1.0)*r10);
IkReal x8004=x7995;
CheckValue<IkReal> x8006 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8003),IKFAST_ATAN2_MAGTHRESH);
if(!x8006.valid){
continue;
}
IkReal x8005=((-1.0)*(x8006.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x8005;
IkReal gconst138=x8005;
IkReal gconst139=(r11*x8004);
IkReal gconst140=(x8003*x8004);
IkReal x8007=r12*r12;
IkReal x8008=((1.0)*cj0);
IkReal x8009=(r02*sj0);
CheckValue<IkReal> x8013=IKPowWithIntegerCheck(((-1.0)+x8007),-1);
if(!x8013.valid){
continue;
}
IkReal x8010=x8013.value;
if((((1.0)+(((-1.0)*x8007)))) < -0.00001)
continue;
IkReal x8011=IKsqrt(((1.0)+(((-1.0)*x8007))));
IkReal x8012=(x8010*x8011);
j4eval[0]=((IKabs((((cj0*x8012))+((r12*x8009*x8012))+(((-1.0)*x8007*x8008*x8012)))))+(IKabs(((((-1.0)*r12*x8008))+x8009))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8014=((-1.0)*r10);
IkReal x8015=x7995;
CheckValue<IkReal> x8017 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8014),IKFAST_ATAN2_MAGTHRESH);
if(!x8017.valid){
continue;
}
IkReal x8016=((-1.0)*(x8017.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x8016;
IkReal gconst138=x8016;
IkReal gconst139=(r11*x8015);
IkReal gconst140=(x8014*x8015);
IkReal x8018=(cj1*r22*sj2);
IkReal x8019=(cj2*r22*sj1);
IkReal x8020=x7995;
IkReal x8021=(r12*x8020);
j4eval[0]=((IKabs((((x8018*x8021))+((x8019*x8021)))))+(IKabs((x8019+x8018))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8022=(cj1*sj2);
IkReal x8023=(cj2*sj1);
IkReal x8024=(gconst139*r21);
IkReal x8025=((1.0)*gconst140*r20);
CheckValue<IkReal> x8026=IKPowWithIntegerCheck(IKsign(((((-2.0)*gconst140*r20*x8024))+(r22*r22)+(((gconst140*gconst140)*(r20*r20)))+(x8024*x8024))),-1);
if(!x8026.valid){
continue;
}
CheckValue<IkReal> x8027 = IKatan2WithCheck(IkReal((((r22*x8022))+((r22*x8023)))),IkReal((((x8022*x8024))+(((-1.0)*x8022*x8025))+(((-1.0)*x8023*x8025))+((x8023*x8024)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8027.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8026.value)))+(x8027.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8028=IKsin(j4);
IkReal x8029=IKcos(j4);
IkReal x8030=(gconst140*r00);
IkReal x8031=(cj1*cj2);
IkReal x8032=(sj1*sj2);
IkReal x8033=(gconst139*r11);
IkReal x8034=((1.0)*cj0);
IkReal x8035=(gconst139*r01);
IkReal x8036=(gconst139*r21);
IkReal x8037=((1.0)*sj0);
IkReal x8038=((1.0)*x8029);
IkReal x8039=((1.0)*x8028);
IkReal x8040=(gconst140*x8029);
evalcond[0]=((((-1.0)*gconst140*r20*x8039))+(((-1.0)*r22*x8038))+((x8028*x8036)));
evalcond[1]=((((-1.0)*r02*x8038))+(((-1.0)*x8034))+((x8028*x8035))+(((-1.0)*x8030*x8039)));
evalcond[2]=((((-1.0)*r12*x8038))+(((-1.0)*x8037))+((x8028*x8033))+(((-1.0)*gconst140*r10*x8039)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x8040))+(((-1.0)*r22*x8039))+(((-1.0)*x8036*x8038)));
evalcond[4]=(((x8029*x8030))+((sj0*x8031))+(((-1.0)*x8035*x8038))+(((-1.0)*r02*x8039))+(((-1.0)*x8032*x8037)));
evalcond[5]=((((-1.0)*x8033*x8038))+((r10*x8040))+(((-1.0)*r12*x8039))+((cj0*x8032))+(((-1.0)*x8031*x8034)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8041=((1.0)*gconst140);
IkReal x8042=((1.0)*cj0);
CheckValue<IkReal> x8043=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8041))+(((-1.0)*gconst139*r20)))),-1);
if(!x8043.valid){
continue;
}
CheckValue<IkReal> x8044 = IKatan2WithCheck(IkReal((((r02*sj0))+(((-1.0)*r12*x8042)))),IkReal(((((-1.0)*r00*sj0*x8041))+(((-1.0)*gconst139*r11*x8042))+((cj0*gconst140*r10))+((gconst139*r01*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8044.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8043.value)))+(x8044.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8045=IKsin(j4);
IkReal x8046=IKcos(j4);
IkReal x8047=(gconst140*r00);
IkReal x8048=(cj1*cj2);
IkReal x8049=(sj1*sj2);
IkReal x8050=(gconst139*r11);
IkReal x8051=((1.0)*cj0);
IkReal x8052=(gconst139*r01);
IkReal x8053=(gconst139*r21);
IkReal x8054=((1.0)*sj0);
IkReal x8055=((1.0)*x8046);
IkReal x8056=((1.0)*x8045);
IkReal x8057=(gconst140*x8046);
evalcond[0]=(((x8045*x8053))+(((-1.0)*gconst140*r20*x8056))+(((-1.0)*r22*x8055)));
evalcond[1]=(((x8045*x8052))+(((-1.0)*x8047*x8056))+(((-1.0)*r02*x8055))+(((-1.0)*x8051)));
evalcond[2]=((((-1.0)*r12*x8055))+((x8045*x8050))+(((-1.0)*x8054))+(((-1.0)*gconst140*r10*x8056)));
evalcond[3]=(((cj2*sj1))+((r20*x8057))+((cj1*sj2))+(((-1.0)*r22*x8056))+(((-1.0)*x8053*x8055)));
evalcond[4]=(((sj0*x8048))+(((-1.0)*x8052*x8055))+(((-1.0)*r02*x8056))+((x8046*x8047))+(((-1.0)*x8049*x8054)));
evalcond[5]=((((-1.0)*r12*x8056))+((r10*x8057))+(((-1.0)*x8050*x8055))+((cj0*x8049))+(((-1.0)*x8048*x8051)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8058=IKPowWithIntegerCheck(IKsign((((gconst140*r01))+((gconst139*r00)))),-1);
if(!x8058.valid){
continue;
}
CheckValue<IkReal> x8059 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst139*r21*sj0))+(((-1.0)*gconst140*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8059.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8058.value)))+(x8059.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8060=IKsin(j4);
IkReal x8061=IKcos(j4);
IkReal x8062=(gconst140*r00);
IkReal x8063=(cj1*cj2);
IkReal x8064=(sj1*sj2);
IkReal x8065=(gconst139*r11);
IkReal x8066=((1.0)*cj0);
IkReal x8067=(gconst139*r01);
IkReal x8068=(gconst139*r21);
IkReal x8069=((1.0)*sj0);
IkReal x8070=((1.0)*x8061);
IkReal x8071=((1.0)*x8060);
IkReal x8072=(gconst140*x8061);
evalcond[0]=((((-1.0)*gconst140*r20*x8071))+((x8060*x8068))+(((-1.0)*r22*x8070)));
evalcond[1]=((((-1.0)*x8066))+(((-1.0)*r02*x8070))+((x8060*x8067))+(((-1.0)*x8062*x8071)));
evalcond[2]=((((-1.0)*x8069))+((x8060*x8065))+(((-1.0)*gconst140*r10*x8071))+(((-1.0)*r12*x8070)));
evalcond[3]=(((cj2*sj1))+((r20*x8072))+(((-1.0)*x8068*x8070))+((cj1*sj2))+(((-1.0)*r22*x8071)));
evalcond[4]=((((-1.0)*x8064*x8069))+((x8061*x8062))+(((-1.0)*r02*x8071))+(((-1.0)*x8067*x8070))+((sj0*x8063)));
evalcond[5]=(((r10*x8072))+((cj0*x8064))+(((-1.0)*x8065*x8070))+(((-1.0)*x8063*x8066))+(((-1.0)*r12*x8071)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8073=((-1.0)*r11);
IkReal x8075 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8075)==0){
continue;
}
IkReal x8074=pow(x8075,-0.5);
CheckValue<IkReal> x8076 = IKatan2WithCheck(IkReal(x8073),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8076.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x8076.value))));
IkReal gconst142=(x8073*x8074);
IkReal gconst143=((1.0)*r10*x8074);
CheckValue<IkReal> x8077 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8077.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8077.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8078=((-1.0)*r11);
CheckValue<IkReal> x8081 = IKatan2WithCheck(IkReal(x8078),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8081.valid){
continue;
}
IkReal x8079=((1.0)*(x8081.value));
IkReal x8080=x8074;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8079)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8079)));
IkReal gconst142=(x8078*x8080);
IkReal gconst143=((1.0)*r10*x8080);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x8082=((-1.0)*r11);
CheckValue<IkReal> x8085 = IKatan2WithCheck(IkReal(x8082),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8085.valid){
continue;
}
IkReal x8083=((1.0)*(x8085.value));
IkReal x8084=x8074;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8083)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8083)));
IkReal gconst142=(x8082*x8084);
IkReal gconst143=((1.0)*r10*x8084);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8086=((1.0)*cj0);
IkReal x8087=((1.0)*gconst143);
CheckValue<IkReal> x8088=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8087))+(((-1.0)*gconst142*r20)))),-1);
if(!x8088.valid){
continue;
}
CheckValue<IkReal> x8089 = IKatan2WithCheck(IkReal((((r02*sj0))+(((-1.0)*r12*x8086)))),IkReal(((((-1.0)*r00*sj0*x8087))+((gconst142*r01*sj0))+((cj0*gconst143*r10))+(((-1.0)*gconst142*r11*x8086)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8089.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8088.value)))+(x8089.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8090=IKsin(j4);
IkReal x8091=IKcos(j4);
IkReal x8092=(cj1*cj2);
IkReal x8093=(sj1*sj2);
IkReal x8094=(gconst143*r20);
IkReal x8095=((1.0)*cj0);
IkReal x8096=((1.0)*sj0);
IkReal x8097=((1.0)*x8091);
IkReal x8098=((1.0)*x8090);
IkReal x8099=(gconst142*x8090);
IkReal x8100=(gconst143*x8091);
evalcond[0]=((((-1.0)*x8094*x8098))+(((-1.0)*r22*x8097))+((r21*x8099)));
evalcond[1]=((((-1.0)*r02*x8097))+(((-1.0)*x8095))+(((-1.0)*gconst143*r00*x8098))+((r01*x8099)));
evalcond[2]=((((-1.0)*x8096))+((r11*x8099))+(((-1.0)*r12*x8097))+(((-1.0)*gconst143*r10*x8098)));
evalcond[3]=(((cj2*sj1))+((x8091*x8094))+((cj1*sj2))+(((-1.0)*r22*x8098))+(((-1.0)*gconst142*r21*x8097)));
evalcond[4]=((((-1.0)*x8093*x8096))+(((-1.0)*r02*x8098))+((sj0*x8092))+((r00*x8100))+(((-1.0)*gconst142*r01*x8097)));
evalcond[5]=((((-1.0)*x8092*x8095))+((r10*x8100))+(((-1.0)*r12*x8098))+((cj0*x8093))+(((-1.0)*gconst142*r11*x8097)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8101=((1.0)*gconst143);
CheckValue<IkReal> x8102 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8101))+((cj0*gconst142*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8102.valid){
continue;
}
CheckValue<IkReal> x8103=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8101))+(((-1.0)*gconst142*r10)))),-1);
if(!x8103.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8102.value)+(((1.5707963267949)*(x8103.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8104=IKsin(j4);
IkReal x8105=IKcos(j4);
IkReal x8106=(cj1*cj2);
IkReal x8107=(sj1*sj2);
IkReal x8108=(gconst143*r20);
IkReal x8109=((1.0)*cj0);
IkReal x8110=((1.0)*sj0);
IkReal x8111=((1.0)*x8105);
IkReal x8112=((1.0)*x8104);
IkReal x8113=(gconst142*x8104);
IkReal x8114=(gconst143*x8105);
evalcond[0]=((((-1.0)*x8108*x8112))+((r21*x8113))+(((-1.0)*r22*x8111)));
evalcond[1]=((((-1.0)*gconst143*r00*x8112))+(((-1.0)*x8109))+(((-1.0)*r02*x8111))+((r01*x8113)));
evalcond[2]=((((-1.0)*x8110))+(((-1.0)*r12*x8111))+(((-1.0)*gconst143*r10*x8112))+((r11*x8113)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x8105*x8108))+(((-1.0)*r22*x8112))+(((-1.0)*gconst142*r21*x8111)));
evalcond[4]=(((sj0*x8106))+(((-1.0)*gconst142*r01*x8111))+(((-1.0)*r02*x8112))+((r00*x8114))+(((-1.0)*x8107*x8110)));
evalcond[5]=((((-1.0)*r12*x8112))+((r10*x8114))+(((-1.0)*x8106*x8109))+((cj0*x8107))+(((-1.0)*gconst142*r11*x8111)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8115=IKPowWithIntegerCheck(IKsign((((gconst143*r01))+((gconst142*r00)))),-1);
if(!x8115.valid){
continue;
}
CheckValue<IkReal> x8116 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst142*r21*sj0))+(((-1.0)*gconst143*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8116.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8115.value)))+(x8116.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8117=IKsin(j4);
IkReal x8118=IKcos(j4);
IkReal x8119=(cj1*cj2);
IkReal x8120=(sj1*sj2);
IkReal x8121=(gconst143*r20);
IkReal x8122=((1.0)*cj0);
IkReal x8123=((1.0)*sj0);
IkReal x8124=((1.0)*x8118);
IkReal x8125=((1.0)*x8117);
IkReal x8126=(gconst142*x8117);
IkReal x8127=(gconst143*x8118);
evalcond[0]=((((-1.0)*x8121*x8125))+((r21*x8126))+(((-1.0)*r22*x8124)));
evalcond[1]=((((-1.0)*x8122))+((r01*x8126))+(((-1.0)*r02*x8124))+(((-1.0)*gconst143*r00*x8125)));
evalcond[2]=((((-1.0)*r12*x8124))+(((-1.0)*x8123))+(((-1.0)*gconst143*r10*x8125))+((r11*x8126)));
evalcond[3]=(((cj2*sj1))+((x8118*x8121))+((cj1*sj2))+(((-1.0)*r22*x8125))+(((-1.0)*gconst142*r21*x8124)));
evalcond[4]=(((r00*x8127))+(((-1.0)*gconst142*r01*x8124))+(((-1.0)*r02*x8125))+((sj0*x8119))+(((-1.0)*x8120*x8123)));
evalcond[5]=((((-1.0)*r12*x8125))+((cj0*x8120))+((r10*x8127))+(((-1.0)*gconst142*r11*x8124))+(((-1.0)*x8119*x8122)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8128=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x8128;
j4eval[1]=IKsign(x8128);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8129=((1.0)*cj5);
IkReal x8130=((((-1.0)*r21*x8129))+(((-1.0)*r20*sj5)));
j4eval[0]=x8130;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x8129))))));
j4eval[2]=IKsign(x8130);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8131=cj5*cj5;
IkReal x8132=r11*r11;
IkReal x8133=(cj5*r10);
IkReal x8134=(r11*sj5);
IkReal x8135=(((x8131*x8132))+(((-1.0)*x8132))+(((-1.0)*(r12*r12)))+(((2.0)*x8133*x8134))+(((-1.0)*x8131*(r10*r10))));
j4eval[0]=x8135;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x8134))+x8133))));
j4eval[2]=IKsign(x8135);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8136=cj5*cj5;
IkReal x8137=r11*r11;
IkReal x8138=(cj5*r10);
IkReal x8139=(r11*sj5);
CheckValue<IkReal> x8140=IKPowWithIntegerCheck(IKsign((((x8136*x8137))+(((-1.0)*x8137))+(((-1.0)*x8136*(r10*r10)))+(((-1.0)*(r12*r12)))+(((2.0)*x8138*x8139)))),-1);
if(!x8140.valid){
continue;
}
CheckValue<IkReal> x8141 = IKatan2WithCheck(IkReal(((((-1.0)*x8139))+x8138)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8141.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8140.value)))+(x8141.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8142=IKsin(j4);
IkReal x8143=IKcos(j4);
IkReal x8144=(cj5*r10);
IkReal x8145=(r01*sj5);
IkReal x8146=(cj5*r00);
IkReal x8147=(cj5*r20);
IkReal x8148=((1.0)*x8143);
IkReal x8149=((1.0)*x8142);
IkReal x8150=(sj5*x8142);
evalcond[0]=((((-1.0)*r22*x8148))+((r21*x8150))+(((-1.0)*x8147*x8149)));
evalcond[1]=((((-1.0)*r02*x8148))+(((-1.0)*x8146*x8149))+((x8142*x8145)));
evalcond[2]=((((-1.0)*r11*sj5*x8148))+((x8143*x8144))+(((-1.0)*r12*x8149)));
evalcond[3]=((-1.0)+(((-1.0)*x8144*x8149))+(((-1.0)*r12*x8148))+((r11*x8150)));
evalcond[4]=(((cj2*sj1))+((x8143*x8147))+((cj1*sj2))+(((-1.0)*r22*x8149))+(((-1.0)*r21*sj5*x8148)));
evalcond[5]=(((x8143*x8146))+(((-1.0)*sj1*sj2))+(((-1.0)*r02*x8149))+(((-1.0)*x8145*x8148))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8151=((1.0)*cj5);
CheckValue<IkReal> x8152=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8151))+(((-1.0)*r20*sj5)))),-1);
if(!x8152.valid){
continue;
}
CheckValue<IkReal> x8153 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x8151)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8153.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8152.value)))+(x8153.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8154=IKsin(j4);
IkReal x8155=IKcos(j4);
IkReal x8156=(cj5*r10);
IkReal x8157=(r01*sj5);
IkReal x8158=(cj5*r00);
IkReal x8159=(cj5*r20);
IkReal x8160=((1.0)*x8155);
IkReal x8161=((1.0)*x8154);
IkReal x8162=(sj5*x8154);
evalcond[0]=((((-1.0)*x8159*x8161))+((r21*x8162))+(((-1.0)*r22*x8160)));
evalcond[1]=((((-1.0)*r02*x8160))+(((-1.0)*x8158*x8161))+((x8154*x8157)));
evalcond[2]=((((-1.0)*r12*x8161))+(((-1.0)*r11*sj5*x8160))+((x8155*x8156)));
evalcond[3]=((-1.0)+((r11*x8162))+(((-1.0)*r12*x8160))+(((-1.0)*x8156*x8161)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8160))+((cj1*sj2))+((x8155*x8159))+(((-1.0)*r22*x8161)));
evalcond[5]=((((-1.0)*r02*x8161))+(((-1.0)*x8157*x8160))+(((-1.0)*sj1*sj2))+((x8155*x8158))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8163 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8163.valid){
continue;
}
CheckValue<IkReal> x8164=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x8164.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8163.value)+(((1.5707963267949)*(x8164.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8165=IKsin(j4);
IkReal x8166=IKcos(j4);
IkReal x8167=(cj5*r10);
IkReal x8168=(r01*sj5);
IkReal x8169=(cj5*r00);
IkReal x8170=(cj5*r20);
IkReal x8171=((1.0)*x8166);
IkReal x8172=((1.0)*x8165);
IkReal x8173=(sj5*x8165);
evalcond[0]=((((-1.0)*x8170*x8172))+(((-1.0)*r22*x8171))+((r21*x8173)));
evalcond[1]=((((-1.0)*x8169*x8172))+(((-1.0)*r02*x8171))+((x8165*x8168)));
evalcond[2]=((((-1.0)*r12*x8172))+(((-1.0)*r11*sj5*x8171))+((x8166*x8167)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8171))+((r11*x8173))+(((-1.0)*x8167*x8172)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8166*x8170))+(((-1.0)*r22*x8172))+(((-1.0)*r21*sj5*x8171)));
evalcond[5]=((((-1.0)*x8168*x8171))+(((-1.0)*sj1*sj2))+(((-1.0)*r02*x8172))+((cj1*cj2))+((x8166*x8169)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8174=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8174;
j4eval[1]=IKsign(x8174);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8175=((1.0)*cj5);
IkReal x8176=((((-1.0)*r01*x8175))+(((-1.0)*r00*sj5)));
j4eval[0]=x8176;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x8175))))));
j4eval[2]=IKsign(x8176);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8177=cj5*cj5;
IkReal x8178=r11*r11;
IkReal x8179=(r11*sj5);
IkReal x8180=(cj5*r10);
IkReal x8181=((r12*r12)+(((-1.0)*x8177*x8178))+(((-2.0)*x8179*x8180))+((x8177*(r10*r10)))+x8178);
j4eval[0]=x8181;
j4eval[1]=IKsign(x8181);
j4eval[2]=((IKabs(((((-1.0)*x8179))+x8180)))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8182=cj5*cj5;
IkReal x8183=r11*r11;
IkReal x8184=(cj5*r10);
IkReal x8185=(r11*sj5);
CheckValue<IkReal> x8186=IKPowWithIntegerCheck(IKsign(((((-2.0)*x8184*x8185))+(r12*r12)+((x8182*(r10*r10)))+(((-1.0)*x8182*x8183))+x8183)),-1);
if(!x8186.valid){
continue;
}
CheckValue<IkReal> x8187 = IKatan2WithCheck(IkReal(((((-1.0)*x8185))+x8184)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8187.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8186.value)))+(x8187.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8188=IKsin(j4);
IkReal x8189=IKcos(j4);
IkReal x8190=(cj5*r10);
IkReal x8191=(r01*sj5);
IkReal x8192=(cj5*r00);
IkReal x8193=(cj5*r20);
IkReal x8194=((1.0)*x8189);
IkReal x8195=((1.0)*x8188);
IkReal x8196=(sj5*x8188);
evalcond[0]=(((r21*x8196))+(((-1.0)*r22*x8194))+(((-1.0)*x8193*x8195)));
evalcond[1]=((((-1.0)*r02*x8194))+(((-1.0)*x8192*x8195))+((x8188*x8191)));
evalcond[2]=((((-1.0)*r12*x8195))+(((-1.0)*r11*sj5*x8194))+((x8189*x8190)));
evalcond[3]=((1.0)+((r11*x8196))+(((-1.0)*r12*x8194))+(((-1.0)*x8190*x8195)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8195))+((cj1*sj2))+(((-1.0)*r21*sj5*x8194))+((x8189*x8193)));
evalcond[5]=((((-1.0)*r02*x8195))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8189*x8192))+(((-1.0)*x8191*x8194)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8197=((1.0)*cj5);
CheckValue<IkReal> x8198 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8197)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8198.valid){
continue;
}
CheckValue<IkReal> x8199=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8197))+(((-1.0)*r00*sj5)))),-1);
if(!x8199.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8198.value)+(((1.5707963267949)*(x8199.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8200=IKsin(j4);
IkReal x8201=IKcos(j4);
IkReal x8202=(cj5*r10);
IkReal x8203=(r01*sj5);
IkReal x8204=(cj5*r00);
IkReal x8205=(cj5*r20);
IkReal x8206=((1.0)*x8201);
IkReal x8207=((1.0)*x8200);
IkReal x8208=(sj5*x8200);
evalcond[0]=((((-1.0)*x8205*x8207))+(((-1.0)*r22*x8206))+((r21*x8208)));
evalcond[1]=((((-1.0)*x8204*x8207))+(((-1.0)*r02*x8206))+((x8200*x8203)));
evalcond[2]=(((x8201*x8202))+(((-1.0)*r12*x8207))+(((-1.0)*r11*sj5*x8206)));
evalcond[3]=((1.0)+((r11*x8208))+(((-1.0)*x8202*x8207))+(((-1.0)*r12*x8206)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8201*x8205))+(((-1.0)*r21*sj5*x8206))+(((-1.0)*r22*x8207)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x8201*x8204))+(((-1.0)*r02*x8207))+(((-1.0)*x8203*x8206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8209=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8209.valid){
continue;
}
CheckValue<IkReal> x8210 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8210.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8209.value)))+(x8210.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8211=IKsin(j4);
IkReal x8212=IKcos(j4);
IkReal x8213=(cj5*r10);
IkReal x8214=(r01*sj5);
IkReal x8215=(cj5*r00);
IkReal x8216=(cj5*r20);
IkReal x8217=((1.0)*x8212);
IkReal x8218=((1.0)*x8211);
IkReal x8219=(sj5*x8211);
evalcond[0]=((((-1.0)*r22*x8217))+(((-1.0)*x8216*x8218))+((r21*x8219)));
evalcond[1]=((((-1.0)*r02*x8217))+((x8211*x8214))+(((-1.0)*x8215*x8218)));
evalcond[2]=((((-1.0)*r12*x8218))+((x8212*x8213))+(((-1.0)*r11*sj5*x8217)));
evalcond[3]=((1.0)+((r11*x8219))+(((-1.0)*r12*x8217))+(((-1.0)*x8213*x8218)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8217))+(((-1.0)*r22*x8218))+((x8212*x8216)));
evalcond[5]=((((-1.0)*r02*x8218))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8214*x8217))+((x8212*x8215)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8221 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8221)==0){
continue;
}
IkReal x8220=pow(x8221,-0.5);
CheckValue<IkReal> x8222 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8222.valid){
continue;
}
IkReal gconst144=((-1.0)*(x8222.value));
IkReal gconst145=((-1.0)*r01*x8220);
IkReal gconst146=(r00*x8220);
CheckValue<IkReal> x8223 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8223.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8223.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x8226 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8226.valid){
continue;
}
IkReal x8224=((-1.0)*(x8226.value));
IkReal x8225=x8220;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x8224;
IkReal gconst144=x8224;
IkReal gconst145=((-1.0)*r01*x8225);
IkReal gconst146=(r00*x8225);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8229 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8229.valid){
continue;
}
IkReal x8227=((-1.0)*(x8229.value));
IkReal x8228=x8220;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x8227;
IkReal gconst144=x8227;
IkReal gconst145=((-1.0)*r01*x8228);
IkReal gconst146=(r00*x8228);
IkReal x8230=r02*r02;
IkReal x8231=(cj0*r12);
IkReal x8232=((1.0)*x8230);
CheckValue<IkReal> x8236=IKPowWithIntegerCheck(((-1.0)+x8230),-1);
if(!x8236.valid){
continue;
}
IkReal x8233=x8236.value;
if((((1.0)+(((-1.0)*x8232)))) < -0.00001)
continue;
IkReal x8234=IKsqrt(((1.0)+(((-1.0)*x8232))));
IkReal x8235=(x8233*x8234);
j4eval[0]=((IKabs(((((-1.0)*sj0*x8232*x8235))+((r02*x8231*x8235))+((sj0*x8235)))))+(IKabs((((r02*sj0))+(((-1.0)*x8231))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8239 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8239.valid){
continue;
}
IkReal x8237=((-1.0)*(x8239.value));
IkReal x8238=x8220;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x8237;
IkReal gconst144=x8237;
IkReal gconst145=((-1.0)*r01*x8238);
IkReal gconst146=(r00*x8238);
IkReal x8240=r02*r02;
IkReal x8241=(cj1*r22*sj2);
IkReal x8242=(cj2*r22*sj1);
CheckValue<IkReal> x8246=IKPowWithIntegerCheck(((-1.0)+x8240),-1);
if(!x8246.valid){
continue;
}
IkReal x8243=x8246.value;
if((((1.0)+(((-1.0)*x8240)))) < -0.00001)
continue;
IkReal x8244=IKsqrt(((1.0)+(((-1.0)*x8240))));
IkReal x8245=((1.0)*r02*x8243*x8244);
j4eval[0]=((IKabs((x8242+x8241)))+(IKabs(((((-1.0)*x8241*x8245))+(((-1.0)*x8242*x8245))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8247=(cj2*sj1);
IkReal x8248=(gconst145*r21);
IkReal x8249=(cj1*sj2);
IkReal x8250=((1.0)*gconst146*r20);
CheckValue<IkReal> x8251=IKPowWithIntegerCheck(IKsign(((x8248*x8248)+(r22*r22)+(((gconst146*gconst146)*(r20*r20)))+(((-2.0)*gconst146*r20*x8248)))),-1);
if(!x8251.valid){
continue;
}
CheckValue<IkReal> x8252 = IKatan2WithCheck(IkReal((((r22*x8249))+((r22*x8247)))),IkReal(((((-1.0)*x8249*x8250))+((x8248*x8249))+(((-1.0)*x8247*x8250))+((x8247*x8248)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8252.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8251.value)))+(x8252.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8253=IKsin(j4);
IkReal x8254=IKcos(j4);
IkReal x8255=(gconst146*r10);
IkReal x8256=(cj1*cj2);
IkReal x8257=(gconst145*r11);
IkReal x8258=(sj1*sj2);
IkReal x8259=(gconst146*r20);
IkReal x8260=((1.0)*cj0);
IkReal x8261=((1.0)*sj0);
IkReal x8262=(gconst146*r00);
IkReal x8263=((1.0)*x8254);
IkReal x8264=((1.0)*x8253);
IkReal x8265=(gconst145*x8253);
evalcond[0]=(((r21*x8265))+(((-1.0)*r22*x8263))+(((-1.0)*x8259*x8264)));
evalcond[1]=((((-1.0)*x8262*x8264))+(((-1.0)*r02*x8263))+(((-1.0)*x8260))+((r01*x8265)));
evalcond[2]=((((-1.0)*r12*x8263))+(((-1.0)*x8261))+(((-1.0)*x8255*x8264))+((x8253*x8257)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst145*r21*x8263))+((cj1*sj2))+((x8254*x8259))+(((-1.0)*r22*x8264)));
evalcond[4]=(((x8254*x8262))+(((-1.0)*x8258*x8261))+(((-1.0)*gconst145*r01*x8263))+((sj0*x8256))+(((-1.0)*r02*x8264)));
evalcond[5]=((((-1.0)*r12*x8264))+((x8254*x8255))+(((-1.0)*x8256*x8260))+(((-1.0)*x8257*x8263))+((cj0*x8258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8266=((1.0)*cj0);
IkReal x8267=((1.0)*gconst146);
CheckValue<IkReal> x8268=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8267))+(((-1.0)*gconst145*r20)))),-1);
if(!x8268.valid){
continue;
}
CheckValue<IkReal> x8269 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8266))+((r02*sj0)))),IkReal(((((-1.0)*r00*sj0*x8267))+((cj0*gconst146*r10))+((gconst145*r01*sj0))+(((-1.0)*gconst145*r11*x8266)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8269.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8268.value)))+(x8269.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8270=IKsin(j4);
IkReal x8271=IKcos(j4);
IkReal x8272=(gconst146*r10);
IkReal x8273=(cj1*cj2);
IkReal x8274=(gconst145*r11);
IkReal x8275=(sj1*sj2);
IkReal x8276=(gconst146*r20);
IkReal x8277=((1.0)*cj0);
IkReal x8278=((1.0)*sj0);
IkReal x8279=(gconst146*r00);
IkReal x8280=((1.0)*x8271);
IkReal x8281=((1.0)*x8270);
IkReal x8282=(gconst145*x8270);
evalcond[0]=(((r21*x8282))+(((-1.0)*x8276*x8281))+(((-1.0)*r22*x8280)));
evalcond[1]=((((-1.0)*r02*x8280))+((r01*x8282))+(((-1.0)*x8279*x8281))+(((-1.0)*x8277)));
evalcond[2]=((((-1.0)*r12*x8280))+(((-1.0)*x8278))+((x8270*x8274))+(((-1.0)*x8272*x8281)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst145*r21*x8280))+(((-1.0)*r22*x8281))+((x8271*x8276)));
evalcond[4]=((((-1.0)*r02*x8281))+(((-1.0)*x8275*x8278))+((x8271*x8279))+((sj0*x8273))+(((-1.0)*gconst145*r01*x8280)));
evalcond[5]=((((-1.0)*r12*x8281))+(((-1.0)*x8273*x8277))+((cj0*x8275))+((x8271*x8272))+(((-1.0)*x8274*x8280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8283=((1.0)*gconst146);
CheckValue<IkReal> x8284=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8283))+(((-1.0)*gconst145*r10)))),-1);
if(!x8284.valid){
continue;
}
CheckValue<IkReal> x8285 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8283))+((cj0*gconst145*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8285.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8284.value)))+(x8285.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8286=IKsin(j4);
IkReal x8287=IKcos(j4);
IkReal x8288=(gconst146*r10);
IkReal x8289=(cj1*cj2);
IkReal x8290=(gconst145*r11);
IkReal x8291=(sj1*sj2);
IkReal x8292=(gconst146*r20);
IkReal x8293=((1.0)*cj0);
IkReal x8294=((1.0)*sj0);
IkReal x8295=(gconst146*r00);
IkReal x8296=((1.0)*x8287);
IkReal x8297=((1.0)*x8286);
IkReal x8298=(gconst145*x8286);
evalcond[0]=(((r21*x8298))+(((-1.0)*r22*x8296))+(((-1.0)*x8292*x8297)));
evalcond[1]=(((r01*x8298))+(((-1.0)*x8295*x8297))+(((-1.0)*x8293))+(((-1.0)*r02*x8296)));
evalcond[2]=((((-1.0)*r12*x8296))+((x8286*x8290))+(((-1.0)*x8294))+(((-1.0)*x8288*x8297)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x8287*x8292))+(((-1.0)*r22*x8297))+(((-1.0)*gconst145*r21*x8296)));
evalcond[4]=((((-1.0)*gconst145*r01*x8296))+((sj0*x8289))+((x8287*x8295))+(((-1.0)*x8291*x8294))+(((-1.0)*r02*x8297)));
evalcond[5]=((((-1.0)*r12*x8297))+(((-1.0)*x8290*x8296))+((x8287*x8288))+((cj0*x8291))+(((-1.0)*x8289*x8293)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8300 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8300)==0){
continue;
}
IkReal x8299=pow(x8300,-0.5);
CheckValue<IkReal> x8301 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8301.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x8301.value))));
IkReal gconst148=((1.0)*r01*x8299);
IkReal gconst149=((-1.0)*r00*x8299);
CheckValue<IkReal> x8302 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8302.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8302.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x8305 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8305.valid){
continue;
}
IkReal x8303=((1.0)*(x8305.value));
IkReal x8304=x8299;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8303)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8303)));
IkReal gconst148=((1.0)*r01*x8304);
IkReal gconst149=((-1.0)*r00*x8304);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=sj0;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x8308 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8308.valid){
continue;
}
IkReal x8306=((1.0)*(x8308.value));
IkReal x8307=x8299;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8306)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8306)));
IkReal gconst148=((1.0)*r01*x8307);
IkReal gconst149=((-1.0)*r00*x8307);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8309=((1.0)*cj0);
IkReal x8310=((1.0)*gconst149);
CheckValue<IkReal> x8311=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8310))+(((-1.0)*gconst148*r20)))),-1);
if(!x8311.valid){
continue;
}
CheckValue<IkReal> x8312 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8309))+((r02*sj0)))),IkReal((((cj0*gconst149*r10))+(((-1.0)*r00*sj0*x8310))+(((-1.0)*gconst148*r11*x8309))+((gconst148*r01*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8312.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8311.value)))+(x8312.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8313=IKsin(j4);
IkReal x8314=IKcos(j4);
IkReal x8315=(gconst148*r11);
IkReal x8316=(sj1*sj2);
IkReal x8317=(cj1*cj2);
IkReal x8318=((1.0)*cj0);
IkReal x8319=((1.0)*sj0);
IkReal x8320=((1.0)*x8314);
IkReal x8321=(gconst149*x8314);
IkReal x8322=((1.0)*x8313);
IkReal x8323=(gconst148*x8313);
evalcond[0]=((((-1.0)*r22*x8320))+((r21*x8323))+(((-1.0)*gconst149*r20*x8322)));
evalcond[1]=((((-1.0)*x8318))+((r01*x8323))+(((-1.0)*gconst149*r00*x8322))+(((-1.0)*r02*x8320)));
evalcond[2]=(((x8313*x8315))+(((-1.0)*x8319))+(((-1.0)*gconst149*r10*x8322))+(((-1.0)*r12*x8320)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8322))+((cj1*sj2))+(((-1.0)*gconst148*r21*x8320))+((r20*x8321)));
evalcond[4]=((((-1.0)*x8316*x8319))+(((-1.0)*gconst148*r01*x8320))+((sj0*x8317))+((r00*x8321))+(((-1.0)*r02*x8322)));
evalcond[5]=(((r10*x8321))+(((-1.0)*x8317*x8318))+((cj0*x8316))+(((-1.0)*x8315*x8320))+(((-1.0)*r12*x8322)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8324=((1.0)*gconst149);
CheckValue<IkReal> x8325=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8324))+(((-1.0)*gconst148*r10)))),-1);
if(!x8325.valid){
continue;
}
CheckValue<IkReal> x8326 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst148*r21))+(((-1.0)*cj0*r20*x8324)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8326.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8325.value)))+(x8326.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8327=IKsin(j4);
IkReal x8328=IKcos(j4);
IkReal x8329=(gconst148*r11);
IkReal x8330=(sj1*sj2);
IkReal x8331=(cj1*cj2);
IkReal x8332=((1.0)*cj0);
IkReal x8333=((1.0)*sj0);
IkReal x8334=((1.0)*x8328);
IkReal x8335=(gconst149*x8328);
IkReal x8336=((1.0)*x8327);
IkReal x8337=(gconst148*x8327);
evalcond[0]=(((r21*x8337))+(((-1.0)*r22*x8334))+(((-1.0)*gconst149*r20*x8336)));
evalcond[1]=(((r01*x8337))+(((-1.0)*r02*x8334))+(((-1.0)*gconst149*r00*x8336))+(((-1.0)*x8332)));
evalcond[2]=((((-1.0)*r12*x8334))+(((-1.0)*gconst149*r10*x8336))+((x8327*x8329))+(((-1.0)*x8333)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8336))+((cj1*sj2))+((r20*x8335))+(((-1.0)*gconst148*r21*x8334)));
evalcond[4]=((((-1.0)*gconst148*r01*x8334))+((r00*x8335))+(((-1.0)*x8330*x8333))+(((-1.0)*r02*x8336))+((sj0*x8331)));
evalcond[5]=((((-1.0)*r12*x8336))+((r10*x8335))+((cj0*x8330))+(((-1.0)*x8329*x8334))+(((-1.0)*x8331*x8332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8338=IKPowWithIntegerCheck(IKsign((((gconst148*r00))+((gconst149*r01)))),-1);
if(!x8338.valid){
continue;
}
CheckValue<IkReal> x8339 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst149*r20*sj0))+((gconst148*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8339.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8338.value)))+(x8339.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8340=IKsin(j4);
IkReal x8341=IKcos(j4);
IkReal x8342=(gconst148*r11);
IkReal x8343=(sj1*sj2);
IkReal x8344=(cj1*cj2);
IkReal x8345=((1.0)*cj0);
IkReal x8346=((1.0)*sj0);
IkReal x8347=((1.0)*x8341);
IkReal x8348=(gconst149*x8341);
IkReal x8349=((1.0)*x8340);
IkReal x8350=(gconst148*x8340);
evalcond[0]=((((-1.0)*gconst149*r20*x8349))+(((-1.0)*r22*x8347))+((r21*x8350)));
evalcond[1]=((((-1.0)*r02*x8347))+(((-1.0)*gconst149*r00*x8349))+(((-1.0)*x8345))+((r01*x8350)));
evalcond[2]=(((x8340*x8342))+(((-1.0)*x8346))+(((-1.0)*gconst149*r10*x8349))+(((-1.0)*r12*x8347)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x8348))+(((-1.0)*r22*x8349))+(((-1.0)*gconst148*r21*x8347)));
evalcond[4]=(((sj0*x8344))+(((-1.0)*r02*x8349))+(((-1.0)*x8343*x8346))+(((-1.0)*gconst148*r01*x8347))+((r00*x8348)));
evalcond[5]=((((-1.0)*x8342*x8347))+((cj0*x8343))+(((-1.0)*r12*x8349))+(((-1.0)*x8344*x8345))+((r10*x8348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8351=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8351;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8351);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8352=((1.0)*cj5);
IkReal x8353=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8352)));
j4eval[0]=x8353;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x8352))))));
j4eval[2]=IKsign(x8353);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8354=cj5*cj5;
IkReal x8355=r01*r01;
IkReal x8356=(r01*sj5);
IkReal x8357=(cj5*r00);
IkReal x8358=((((-1.0)*(r02*r02)))+((x8354*x8355))+(((-1.0)*x8355))+(((-1.0)*x8354*(r00*r00)))+(((2.0)*x8356*x8357)));
j4eval[0]=x8358;
j4eval[1]=IKsign(x8358);
j4eval[2]=((IKabs(r02))+(IKabs((x8357+(((-1.0)*x8356))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8359=cj5*cj5;
IkReal x8360=r01*r01;
IkReal x8361=(r01*sj5);
IkReal x8362=(cj5*r00);
CheckValue<IkReal> x8363 = IKatan2WithCheck(IkReal((x8362+(((-1.0)*x8361)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8363.valid){
continue;
}
CheckValue<IkReal> x8364=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8359*(r00*r00)))+(((-1.0)*(r02*r02)))+(((-1.0)*x8360))+((x8359*x8360))+(((2.0)*x8361*x8362)))),-1);
if(!x8364.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8363.value)+(((1.5707963267949)*(x8364.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8365=IKsin(j4);
IkReal x8366=IKcos(j4);
IkReal x8367=(cj5*r10);
IkReal x8368=(r01*sj5);
IkReal x8369=(cj5*r00);
IkReal x8370=(cj5*r20);
IkReal x8371=((1.0)*x8366);
IkReal x8372=((1.0)*x8365);
IkReal x8373=(sj5*x8365);
evalcond[0]=((((-1.0)*r22*x8371))+((r21*x8373))+(((-1.0)*x8370*x8372)));
evalcond[1]=((((-1.0)*r12*x8371))+(((-1.0)*x8367*x8372))+((r11*x8373)));
evalcond[2]=((((-1.0)*x8368*x8371))+(((-1.0)*r02*x8372))+((x8366*x8369)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8371))+(((-1.0)*x8369*x8372))+((x8365*x8368)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8371))+((cj1*sj2))+(((-1.0)*r22*x8372))+((x8366*x8370)));
evalcond[5]=((((-1.0)*r12*x8372))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8366*x8367))+(((-1.0)*r11*sj5*x8371)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8374=((1.0)*cj5);
CheckValue<IkReal> x8375 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x8374))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8375.valid){
continue;
}
CheckValue<IkReal> x8376=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8374)))),-1);
if(!x8376.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8375.value)+(((1.5707963267949)*(x8376.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8377=IKsin(j4);
IkReal x8378=IKcos(j4);
IkReal x8379=(cj5*r10);
IkReal x8380=(r01*sj5);
IkReal x8381=(cj5*r00);
IkReal x8382=(cj5*r20);
IkReal x8383=((1.0)*x8378);
IkReal x8384=((1.0)*x8377);
IkReal x8385=(sj5*x8377);
evalcond[0]=((((-1.0)*x8382*x8384))+((r21*x8385))+(((-1.0)*r22*x8383)));
evalcond[1]=((((-1.0)*x8379*x8384))+(((-1.0)*r12*x8383))+((r11*x8385)));
evalcond[2]=((((-1.0)*r02*x8384))+(((-1.0)*x8380*x8383))+((x8378*x8381)));
evalcond[3]=((-1.0)+(((-1.0)*x8381*x8384))+(((-1.0)*r02*x8383))+((x8377*x8380)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8383))+((cj1*sj2))+((x8378*x8382))+(((-1.0)*r22*x8384)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x8378*x8379))+(((-1.0)*r12*x8384))+(((-1.0)*r11*sj5*x8383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8386=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8386.valid){
continue;
}
CheckValue<IkReal> x8387 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8387.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8386.value)))+(x8387.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8388=IKsin(j4);
IkReal x8389=IKcos(j4);
IkReal x8390=(cj5*r10);
IkReal x8391=(r01*sj5);
IkReal x8392=(cj5*r00);
IkReal x8393=(cj5*r20);
IkReal x8394=((1.0)*x8389);
IkReal x8395=((1.0)*x8388);
IkReal x8396=(sj5*x8388);
evalcond[0]=((((-1.0)*x8393*x8395))+((r21*x8396))+(((-1.0)*r22*x8394)));
evalcond[1]=((((-1.0)*x8390*x8395))+(((-1.0)*r12*x8394))+((r11*x8396)));
evalcond[2]=((((-1.0)*r02*x8395))+((x8389*x8392))+(((-1.0)*x8391*x8394)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8394))+(((-1.0)*x8392*x8395))+((x8388*x8391)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8394))+((cj1*sj2))+((x8389*x8393))+(((-1.0)*r22*x8395)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x8389*x8390))+(((-1.0)*r11*sj5*x8394))+(((-1.0)*r12*x8395)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8397=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8397;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8397);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8398=((1.0)*cj5);
IkReal x8399=((((-1.0)*r21*x8398))+(((-1.0)*r20*sj5)));
j4eval[0]=x8399;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x8398))))));
j4eval[2]=IKsign(x8399);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8400=cj5*cj5;
IkReal x8401=r01*r01;
IkReal x8402=(cj5*r00);
IkReal x8403=(r01*sj5);
IkReal x8404=(x8401+(((-2.0)*x8402*x8403))+(r02*r02)+((x8400*(r00*r00)))+(((-1.0)*x8400*x8401)));
j4eval[0]=x8404;
j4eval[1]=((IKabs(r02))+(IKabs((x8402+(((-1.0)*x8403))))));
j4eval[2]=IKsign(x8404);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8405=cj5*cj5;
IkReal x8406=r01*r01;
IkReal x8407=(r01*sj5);
IkReal x8408=(cj5*r00);
CheckValue<IkReal> x8409 = IKatan2WithCheck(IkReal((x8408+(((-1.0)*x8407)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8409.valid){
continue;
}
CheckValue<IkReal> x8410=IKPowWithIntegerCheck(IKsign((x8406+(((-1.0)*x8405*x8406))+((x8405*(r00*r00)))+(((-2.0)*x8407*x8408))+(r02*r02))),-1);
if(!x8410.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8409.value)+(((1.5707963267949)*(x8410.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8411=IKsin(j4);
IkReal x8412=IKcos(j4);
IkReal x8413=(cj5*r10);
IkReal x8414=(r01*sj5);
IkReal x8415=(cj5*r00);
IkReal x8416=(cj5*r20);
IkReal x8417=((1.0)*x8412);
IkReal x8418=((1.0)*x8411);
IkReal x8419=(sj5*x8411);
evalcond[0]=(((r21*x8419))+(((-1.0)*x8416*x8418))+(((-1.0)*r22*x8417)));
evalcond[1]=((((-1.0)*r12*x8417))+((r11*x8419))+(((-1.0)*x8413*x8418)));
evalcond[2]=(((x8412*x8415))+(((-1.0)*x8414*x8417))+(((-1.0)*r02*x8418)));
evalcond[3]=((1.0)+((x8411*x8414))+(((-1.0)*x8415*x8418))+(((-1.0)*r02*x8417)));
evalcond[4]=(((cj2*sj1))+((x8412*x8416))+((cj1*sj2))+(((-1.0)*r21*sj5*x8417))+(((-1.0)*r22*x8418)));
evalcond[5]=((((-1.0)*r12*x8418))+(((-1.0)*r11*sj5*x8417))+((x8412*x8413))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8420=((1.0)*cj5);
CheckValue<IkReal> x8421=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8420))+(((-1.0)*r20*sj5)))),-1);
if(!x8421.valid){
continue;
}
CheckValue<IkReal> x8422 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x8420))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8422.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8421.value)))+(x8422.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8423=IKsin(j4);
IkReal x8424=IKcos(j4);
IkReal x8425=(cj5*r10);
IkReal x8426=(r01*sj5);
IkReal x8427=(cj5*r00);
IkReal x8428=(cj5*r20);
IkReal x8429=((1.0)*x8424);
IkReal x8430=((1.0)*x8423);
IkReal x8431=(sj5*x8423);
evalcond[0]=(((r21*x8431))+(((-1.0)*r22*x8429))+(((-1.0)*x8428*x8430)));
evalcond[1]=((((-1.0)*x8425*x8430))+((r11*x8431))+(((-1.0)*r12*x8429)));
evalcond[2]=((((-1.0)*x8426*x8429))+((x8424*x8427))+(((-1.0)*r02*x8430)));
evalcond[3]=((1.0)+(((-1.0)*x8427*x8430))+(((-1.0)*r02*x8429))+((x8423*x8426)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8429))+((x8424*x8428))+((cj1*sj2))+(((-1.0)*r22*x8430)));
evalcond[5]=((((-1.0)*r11*sj5*x8429))+((x8424*x8425))+(((-1.0)*r12*x8430))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8432 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8432.valid){
continue;
}
CheckValue<IkReal> x8433=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8433.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8432.value)+(((1.5707963267949)*(x8433.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8434=IKsin(j4);
IkReal x8435=IKcos(j4);
IkReal x8436=(cj5*r10);
IkReal x8437=(r01*sj5);
IkReal x8438=(cj5*r00);
IkReal x8439=(cj5*r20);
IkReal x8440=((1.0)*x8435);
IkReal x8441=((1.0)*x8434);
IkReal x8442=(sj5*x8434);
evalcond[0]=(((r21*x8442))+(((-1.0)*r22*x8440))+(((-1.0)*x8439*x8441)));
evalcond[1]=(((r11*x8442))+(((-1.0)*r12*x8440))+(((-1.0)*x8436*x8441)));
evalcond[2]=((((-1.0)*x8437*x8440))+((x8435*x8438))+(((-1.0)*r02*x8441)));
evalcond[3]=((1.0)+(((-1.0)*x8438*x8441))+((x8434*x8437))+(((-1.0)*r02*x8440)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8440))+((cj1*sj2))+(((-1.0)*r22*x8441))+((x8435*x8439)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r12*x8441))+((x8435*x8436))+((cj1*cj2))+(((-1.0)*r11*sj5*x8440)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8443=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8443);
rxp1_1=(px*r21);
rxp1_2=(r11*x8443);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8444=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8444);
rxp1_1=(px*r21);
rxp1_2=(r11*x8444);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8445=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8445);
rxp1_1=(px*r21);
rxp1_2=(r11*x8445);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8448=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x8448.valid){
continue;
}
IkReal x8446=x8448.value;
IkReal x8447=(cj0*x8446);
cj4array[0]=(((cj1*cj2*x8447))+(((-1.0)*sj1*sj2*x8447)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8449=IKsin(j4);
IkReal x8450=IKcos(j4);
IkReal x8451=(r21*sj5);
IkReal x8452=(cj5*r20);
IkReal x8453=((1.0)*x8449);
IkReal x8454=((1.0)*x8450);
evalcond[0]=((-1.0)*r02*x8449);
evalcond[1]=((((-1.0)*r02*x8454))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*x8452*x8453))+((x8449*x8451)));
evalcond[3]=((((-1.0)*cj5*r10*x8453))+((r11*sj5*x8449)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8450*x8452))+(((-1.0)*x8451*x8454)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8457=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x8457.valid){
continue;
}
IkReal x8455=x8457.value;
IkReal x8456=((1.0)*x8455);
cj4array[0]=((((-1.0)*cj1*sj2*x8456))+(((-1.0)*cj2*sj1*x8456)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8458=IKsin(j4);
IkReal x8459=IKcos(j4);
IkReal x8460=(r11*sj5);
IkReal x8461=((1.0)*cj0);
IkReal x8462=((1.0)*x8459);
IkReal x8463=((1.0)*cj5*x8458);
evalcond[0]=((-1.0)*r02*x8458);
evalcond[1]=((((-1.0)*r02*x8462))+(((-1.0)*x8461)));
evalcond[2]=(((r21*sj5*x8458))+(((-1.0)*r20*x8463)));
evalcond[3]=(((x8458*x8460))+(((-1.0)*r10*x8463)));
evalcond[4]=((((-1.0)*cj1*cj2*x8461))+((cj5*r10*x8459))+(((-1.0)*x8460*x8462))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8464=IKPowWithIntegerCheck(r02,-1);
if(!x8464.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x8464.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8465=IKsin(j4);
IkReal x8466=IKcos(j4);
IkReal x8467=(r21*sj5);
IkReal x8468=(r11*sj5);
IkReal x8469=(cj5*x8466);
IkReal x8470=((1.0)*x8466);
IkReal x8471=((1.0)*cj5*x8465);
evalcond[0]=((-1.0)*r02*x8465);
evalcond[1]=(((x8465*x8467))+(((-1.0)*r20*x8471)));
evalcond[2]=(((x8465*x8468))+(((-1.0)*r10*x8471)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x8467*x8470))+((cj1*sj2))+((r20*x8469)));
evalcond[4]=((((-1.0)*cj0*cj1*cj2))+((r10*x8469))+(((-1.0)*x8468*x8470))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8472=((1.0)*cj0);
IkReal x8473=((1.0)*cj5);
CheckValue<IkReal> x8474=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8473))+(((-1.0)*r20*sj5)))),-1);
if(!x8474.valid){
continue;
}
CheckValue<IkReal> x8475 = IKatan2WithCheck(IkReal((((r02*sj0))+(((-1.0)*r12*x8472)))),IkReal(((((-1.0)*r11*sj5*x8472))+((cj0*cj5*r10))+(((-1.0)*r00*sj0*x8473))+((r01*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8475.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8474.value)))+(x8475.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8476=IKsin(j4);
IkReal x8477=IKcos(j4);
IkReal x8478=(cj1*cj2);
IkReal x8479=(cj5*r10);
IkReal x8480=(sj1*sj2);
IkReal x8481=(r01*sj5);
IkReal x8482=(cj5*r00);
IkReal x8483=((1.0)*cj0);
IkReal x8484=((1.0)*sj0);
IkReal x8485=(cj5*r20);
IkReal x8486=((1.0)*x8477);
IkReal x8487=((1.0)*x8476);
IkReal x8488=(sj5*x8476);
evalcond[0]=((((-1.0)*x8485*x8487))+(((-1.0)*r22*x8486))+((r21*x8488)));
evalcond[1]=((((-1.0)*x8483))+(((-1.0)*r02*x8486))+(((-1.0)*x8482*x8487))+((x8476*x8481)));
evalcond[2]=((((-1.0)*x8484))+(((-1.0)*r12*x8486))+(((-1.0)*x8479*x8487))+((r11*x8488)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8487))+(((-1.0)*r21*sj5*x8486))+((x8477*x8485)));
evalcond[4]=((((-1.0)*r02*x8487))+(((-1.0)*x8480*x8484))+(((-1.0)*x8481*x8486))+((x8477*x8482))+((sj0*x8478)));
evalcond[5]=(((cj0*x8480))+((x8477*x8479))+(((-1.0)*r11*sj5*x8486))+(((-1.0)*r12*x8487))+(((-1.0)*x8478*x8483)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8489=((1.0)*cj5);
CheckValue<IkReal> x8490=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8489)))),-1);
if(!x8490.valid){
continue;
}
CheckValue<IkReal> x8491 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8489))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8491.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8490.value)))+(x8491.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8492=IKsin(j4);
IkReal x8493=IKcos(j4);
IkReal x8494=(cj1*cj2);
IkReal x8495=(cj5*r10);
IkReal x8496=(sj1*sj2);
IkReal x8497=(r01*sj5);
IkReal x8498=(cj5*r00);
IkReal x8499=((1.0)*cj0);
IkReal x8500=((1.0)*sj0);
IkReal x8501=(cj5*r20);
IkReal x8502=((1.0)*x8493);
IkReal x8503=((1.0)*x8492);
IkReal x8504=(sj5*x8492);
evalcond[0]=((((-1.0)*x8501*x8503))+((r21*x8504))+(((-1.0)*r22*x8502)));
evalcond[1]=((((-1.0)*x8498*x8503))+((x8492*x8497))+(((-1.0)*r02*x8502))+(((-1.0)*x8499)));
evalcond[2]=((((-1.0)*x8495*x8503))+((r11*x8504))+(((-1.0)*x8500))+(((-1.0)*r12*x8502)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x8493*x8501))+(((-1.0)*r22*x8503))+(((-1.0)*r21*sj5*x8502)));
evalcond[4]=(((sj0*x8494))+((x8493*x8498))+(((-1.0)*x8497*x8502))+(((-1.0)*r02*x8503))+(((-1.0)*x8496*x8500)));
evalcond[5]=(((x8493*x8495))+(((-1.0)*x8494*x8499))+(((-1.0)*r12*x8503))+(((-1.0)*r11*sj5*x8502))+((cj0*x8496)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8505=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x8505.valid){
continue;
}
CheckValue<IkReal> x8506 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8506.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8505.value)))+(x8506.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8507=IKsin(j4);
IkReal x8508=IKcos(j4);
IkReal x8509=(cj1*cj2);
IkReal x8510=(cj5*r10);
IkReal x8511=(sj1*sj2);
IkReal x8512=(r01*sj5);
IkReal x8513=(cj5*r00);
IkReal x8514=((1.0)*cj0);
IkReal x8515=((1.0)*sj0);
IkReal x8516=(cj5*r20);
IkReal x8517=((1.0)*x8508);
IkReal x8518=((1.0)*x8507);
IkReal x8519=(sj5*x8507);
evalcond[0]=(((r21*x8519))+(((-1.0)*r22*x8517))+(((-1.0)*x8516*x8518)));
evalcond[1]=((((-1.0)*x8513*x8518))+(((-1.0)*x8514))+(((-1.0)*r02*x8517))+((x8507*x8512)));
evalcond[2]=(((r11*x8519))+(((-1.0)*x8515))+(((-1.0)*r12*x8517))+(((-1.0)*x8510*x8518)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8518))+((x8508*x8516))+(((-1.0)*r21*sj5*x8517)));
evalcond[4]=((((-1.0)*x8512*x8517))+((sj0*x8509))+(((-1.0)*r02*x8518))+((x8508*x8513))+(((-1.0)*x8511*x8515)));
evalcond[5]=(((cj0*x8511))+(((-1.0)*x8509*x8514))+(((-1.0)*r12*x8518))+((x8508*x8510))+(((-1.0)*r11*sj5*x8517)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8520=cj5*cj5;
IkReal x8521=r21*r21;
IkReal x8522=(cj2*sj1);
IkReal x8523=(cj1*sj2);
IkReal x8524=(r21*sj5);
IkReal x8525=((1.0)*cj5*r20);
CheckValue<IkReal> x8526=IKPowWithIntegerCheck(IKsign((x8521+(r22*r22)+(((-2.0)*cj5*r20*x8524))+(((-1.0)*x8520*x8521))+((x8520*(r20*r20))))),-1);
if(!x8526.valid){
continue;
}
CheckValue<IkReal> x8527 = IKatan2WithCheck(IkReal((((r22*x8523))+((r22*x8522)))),IkReal(((((-1.0)*x8523*x8525))+((x8522*x8524))+((x8523*x8524))+(((-1.0)*x8522*x8525)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8527.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8526.value)))+(x8527.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x8528=IKsin(j4);
IkReal x8529=IKcos(j4);
IkReal x8530=(r21*sj5);
IkReal x8531=(cj5*r20);
IkReal x8532=((1.0)*x8529);
IkReal x8533=((1.0)*x8528);
evalcond[0]=((((-1.0)*x8531*x8533))+(((-1.0)*r22*x8532))+((x8528*x8530)));
evalcond[1]=(((cj2*sj1))+(((-1.0)*r22*x8533))+((cj1*sj2))+((x8529*x8531))+(((-1.0)*x8530*x8532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8534=(sj4*sj5);
IkReal x8535=((1.0)*cj4);
IkReal x8536=((1.0)*cj5*sj4);
if( IKabs(((((-1.0)*r12*x8535))+((r11*x8534))+(((-1.0)*r10*x8536)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*x8535))+(((-1.0)*r00*x8536))+((r01*x8534)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*x8535))+((r11*x8534))+(((-1.0)*r10*x8536))))+IKsqr(((((-1.0)*r02*x8535))+(((-1.0)*r00*x8536))+((r01*x8534))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r12*x8535))+((r11*x8534))+(((-1.0)*r10*x8536))), ((((-1.0)*r02*x8535))+(((-1.0)*r00*x8536))+((r01*x8534))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x8537=IKsin(j0);
IkReal x8538=IKcos(j0);
IkReal x8539=(cj4*cj5);
IkReal x8540=((1.0)*sj2);
IkReal x8541=((0.39225)*sj2);
IkReal x8542=(r11*sj5);
IkReal x8543=(cj5*r11);
IkReal x8544=((1.0)*sj5);
IkReal x8545=((1.0)*sj4);
IkReal x8546=((0.39225)*cj2);
IkReal x8547=((1.0)*cj2);
IkReal x8548=((0.09465)*sj5);
IkReal x8549=(cj5*r01);
IkReal x8550=((1.0)*cj4);
IkReal x8551=(sj1*x8537);
IkReal x8552=(cj1*x8538);
IkReal x8553=(cj1*x8537);
IkReal x8554=(sj1*x8538);
evalcond[0]=((((-1.0)*x8538))+(((-1.0)*cj5*r00*x8545))+((r01*sj4*sj5))+(((-1.0)*r02*x8550)));
evalcond[1]=((((-1.0)*r12*x8550))+(((-1.0)*x8537))+((sj4*x8542))+(((-1.0)*cj5*r10*x8545)));
evalcond[2]=((((-1.0)*r00*x8544))+((sj2*x8553))+((cj2*x8551))+(((-1.0)*x8549)));
evalcond[3]=((((-1.0)*x8547*x8554))+(((-1.0)*r10*x8544))+(((-1.0)*x8540*x8552))+(((-1.0)*x8543)));
evalcond[4]=((((-1.0)*r02*x8545))+((r00*x8539))+(((-1.0)*x8540*x8551))+((cj2*x8553))+(((-1.0)*cj4*r01*x8544)));
evalcond[5]=((((-1.0)*x8547*x8552))+((sj2*x8554))+((r10*x8539))+(((-1.0)*r12*x8545))+(((-1.0)*x8542*x8550)));
evalcond[6]=((((-1.0)*r00*x8548))+(((-1.0)*x8546*x8553))+((x8541*x8551))+(((-0.10915)*x8538))+(((-1.0)*px))+(((-0.09465)*x8549))+(((-0.425)*x8553)));
evalcond[7]=((((-1.0)*r10*x8548))+(((0.425)*x8552))+((x8546*x8552))+(((-0.10915)*x8537))+(((-1.0)*py))+(((-0.09465)*x8543))+(((-1.0)*x8541*x8554)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x8555 = IKatan2WithCheck(IkReal((((r00*sj5))+((cj5*r01)))),IkReal(((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8555.valid){
continue;
}
CheckValue<IkReal> x8556=IKPowWithIntegerCheck(IKsign((((cj2*sj1))+((cj1*sj2)))),-1);
if(!x8556.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x8555.value)+(((1.5707963267949)*(x8556.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x8557=IKsin(j0);
IkReal x8558=IKcos(j0);
IkReal x8559=((0.39225)*sj1);
IkReal x8560=(cj5*r11);
IkReal x8561=(cj5*r01);
IkReal x8562=((1.0)*sj5);
IkReal x8563=((0.09465)*sj5);
IkReal x8564=((0.39225)*cj1);
IkReal x8565=((0.425)*cj1);
IkReal x8566=(sj2*x8558);
IkReal x8567=(sj2*x8557);
IkReal x8568=(cj2*x8558);
IkReal x8569=(cj2*x8557);
evalcond[0]=(((sj1*x8569))+(((-1.0)*r00*x8562))+((cj1*x8567))+(((-1.0)*x8561)));
evalcond[1]=((((-1.0)*r10*x8562))+(((-1.0)*cj1*x8566))+(((-1.0)*sj1*x8568))+(((-1.0)*x8560)));
evalcond[2]=((((-1.0)*x8564*x8569))+(((-1.0)*r00*x8563))+(((-0.09465)*x8561))+((x8559*x8567))+(((-1.0)*x8557*x8565))+(((-1.0)*px))+(((-0.10915)*x8558)));
evalcond[3]=((((-1.0)*r10*x8563))+(((-0.09465)*x8560))+(((-1.0)*x8559*x8566))+((x8564*x8568))+(((-1.0)*py))+(((-0.10915)*x8557))+((x8558*x8565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8570=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x8570;
j4eval[1]=IKsign(x8570);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8571=((1.0)*cj5);
IkReal x8572=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8571)));
j4eval[0]=x8572;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8571)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x8572);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8573=((1.0)*cj0);
IkReal x8574=((1.0)*cj5);
IkReal x8575=((((-1.0)*r21*x8574))+(((-1.0)*r20*sj5)));
j4eval[0]=x8575;
j4eval[1]=((IKabs((((r02*sj0))+(((-1.0)*r12*x8573)))))+(IKabs(((((-1.0)*r11*sj5*x8573))+(((-1.0)*r00*sj0*x8574))+((cj0*cj5*r10))+((r01*sj0*sj5))))));
j4eval[2]=IKsign(x8575);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8576=((-1.0)*r20);
IkReal x8578 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8578)==0){
continue;
}
IkReal x8577=pow(x8578,-0.5);
CheckValue<IkReal> x8579 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8576),IKFAST_ATAN2_MAGTHRESH);
if(!x8579.valid){
continue;
}
IkReal gconst132=((-1.0)*(x8579.value));
IkReal gconst133=(r21*x8577);
IkReal gconst134=(x8576*x8577);
CheckValue<IkReal> x8580 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8580.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8580.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8581=((-1.0)*r20);
IkReal x8582=x8577;
CheckValue<IkReal> x8584 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8581),IKFAST_ATAN2_MAGTHRESH);
if(!x8584.valid){
continue;
}
IkReal x8583=((-1.0)*(x8584.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8583;
IkReal gconst132=x8583;
IkReal gconst133=(r21*x8582);
IkReal gconst134=(x8581*x8582);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8585=((-1.0)*r20);
IkReal x8586=x8577;
CheckValue<IkReal> x8588 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8585),IKFAST_ATAN2_MAGTHRESH);
if(!x8588.valid){
continue;
}
IkReal x8587=((-1.0)*(x8588.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8587;
IkReal gconst132=x8587;
IkReal gconst133=(r21*x8586);
IkReal gconst134=(x8585*x8586);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8589=((-1.0)*r20);
IkReal x8590=x8577;
CheckValue<IkReal> x8592 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8589),IKFAST_ATAN2_MAGTHRESH);
if(!x8592.valid){
continue;
}
IkReal x8591=((-1.0)*(x8592.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8591;
IkReal gconst132=x8591;
IkReal gconst133=(r21*x8590);
IkReal gconst134=(x8589*x8590);
IkReal x8593=r22*r22;
CheckValue<IkReal> x8596=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8593))),-1);
if(!x8596.valid){
continue;
}
IkReal x8594=x8596.value;
IkReal x8595=(((x8594*(r21*r21*r21*r21)))+x8593+(((2.0)*x8594*(r20*r20)*(r21*r21)))+((x8594*(r20*r20*r20*r20))));
j4eval[0]=x8595;
j4eval[1]=IKsign(x8595);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8597=(gconst133*r21);
IkReal x8598=(cj1*sj2);
IkReal x8599=(gconst134*r20);
IkReal x8600=(cj2*sj1);
CheckValue<IkReal> x8601 = IKatan2WithCheck(IkReal((((r22*x8600))+((r22*x8598)))),IkReal((((x8597*x8600))+(((-1.0)*x8598*x8599))+(((-1.0)*x8599*x8600))+((x8597*x8598)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8601.valid){
continue;
}
CheckValue<IkReal> x8602=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x8597*x8599))+(x8597*x8597)+(x8599*x8599))),-1);
if(!x8602.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8601.value)+(((1.5707963267949)*(x8602.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8603=IKsin(j4);
IkReal x8604=IKcos(j4);
IkReal x8605=(cj1*cj2);
IkReal x8606=(sj1*sj2);
IkReal x8607=(gconst133*r11);
IkReal x8608=(gconst133*r21);
IkReal x8609=((1.0)*cj0);
IkReal x8610=((1.0)*sj0);
IkReal x8611=(gconst133*r01);
IkReal x8612=((1.0)*x8604);
IkReal x8613=(gconst134*x8604);
IkReal x8614=((1.0)*x8603);
evalcond[0]=((((-1.0)*r22*x8612))+(((-1.0)*gconst134*r20*x8614))+((x8603*x8608)));
evalcond[1]=((((-1.0)*r02*x8612))+(((-1.0)*gconst134*r00*x8614))+(((-1.0)*x8609))+((x8603*x8611)));
evalcond[2]=((((-1.0)*r12*x8612))+(((-1.0)*x8610))+(((-1.0)*gconst134*r10*x8614))+((x8603*x8607)));
evalcond[3]=(((cj2*sj1))+((r20*x8613))+(((-1.0)*x8608*x8612))+((cj1*sj2))+(((-1.0)*r22*x8614)));
evalcond[4]=((((-1.0)*x8606*x8610))+(((-1.0)*r02*x8614))+((r00*x8613))+(((-1.0)*x8611*x8612))+((sj0*x8605)));
evalcond[5]=((((-1.0)*x8607*x8612))+((r10*x8613))+(((-1.0)*r12*x8614))+(((-1.0)*x8605*x8609))+((cj0*x8606)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8615=((1.0)*gconst134);
CheckValue<IkReal> x8616=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r10))+(((-1.0)*r11*x8615)))),-1);
if(!x8616.valid){
continue;
}
CheckValue<IkReal> x8617 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8615))+((cj0*gconst133*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8617.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8616.value)))+(x8617.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8618=IKsin(j4);
IkReal x8619=IKcos(j4);
IkReal x8620=(cj1*cj2);
IkReal x8621=(sj1*sj2);
IkReal x8622=(gconst133*r11);
IkReal x8623=(gconst133*r21);
IkReal x8624=((1.0)*cj0);
IkReal x8625=((1.0)*sj0);
IkReal x8626=(gconst133*r01);
IkReal x8627=((1.0)*x8619);
IkReal x8628=(gconst134*x8619);
IkReal x8629=((1.0)*x8618);
evalcond[0]=((((-1.0)*gconst134*r20*x8629))+(((-1.0)*r22*x8627))+((x8618*x8623)));
evalcond[1]=((((-1.0)*x8624))+(((-1.0)*gconst134*r00*x8629))+((x8618*x8626))+(((-1.0)*r02*x8627)));
evalcond[2]=((((-1.0)*x8625))+(((-1.0)*r12*x8627))+(((-1.0)*gconst134*r10*x8629))+((x8618*x8622)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8623*x8627))+((r20*x8628))+(((-1.0)*r22*x8629)));
evalcond[4]=(((sj0*x8620))+(((-1.0)*x8626*x8627))+(((-1.0)*x8621*x8625))+((r00*x8628))+(((-1.0)*r02*x8629)));
evalcond[5]=((((-1.0)*r12*x8629))+((cj0*x8621))+(((-1.0)*x8620*x8624))+(((-1.0)*x8622*x8627))+((r10*x8628)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8630 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst134*r20*sj0))+((gconst133*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8630.valid){
continue;
}
CheckValue<IkReal> x8631=IKPowWithIntegerCheck(IKsign((((gconst134*r01))+((gconst133*r00)))),-1);
if(!x8631.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8630.value)+(((1.5707963267949)*(x8631.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8632=IKsin(j4);
IkReal x8633=IKcos(j4);
IkReal x8634=(cj1*cj2);
IkReal x8635=(sj1*sj2);
IkReal x8636=(gconst133*r11);
IkReal x8637=(gconst133*r21);
IkReal x8638=((1.0)*cj0);
IkReal x8639=((1.0)*sj0);
IkReal x8640=(gconst133*r01);
IkReal x8641=((1.0)*x8633);
IkReal x8642=(gconst134*x8633);
IkReal x8643=((1.0)*x8632);
evalcond[0]=((((-1.0)*r22*x8641))+(((-1.0)*gconst134*r20*x8643))+((x8632*x8637)));
evalcond[1]=(((x8632*x8640))+(((-1.0)*x8638))+(((-1.0)*r02*x8641))+(((-1.0)*gconst134*r00*x8643)));
evalcond[2]=((((-1.0)*x8639))+(((-1.0)*r12*x8641))+(((-1.0)*gconst134*r10*x8643))+((x8632*x8636)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x8637*x8641))+((cj1*sj2))+(((-1.0)*r22*x8643))+((r20*x8642)));
evalcond[4]=(((sj0*x8634))+((r00*x8642))+(((-1.0)*r02*x8643))+(((-1.0)*x8635*x8639))+(((-1.0)*x8640*x8641)));
evalcond[5]=((((-1.0)*x8634*x8638))+((cj0*x8635))+((r10*x8642))+(((-1.0)*x8636*x8641))+(((-1.0)*r12*x8643)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8644=((-1.0)*r21);
IkReal x8646 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8646)==0){
continue;
}
IkReal x8645=pow(x8646,-0.5);
CheckValue<IkReal> x8647 = IKatan2WithCheck(IkReal(x8644),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8647.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x8647.value))));
IkReal gconst136=(x8644*x8645);
IkReal gconst137=((1.0)*r20*x8645);
CheckValue<IkReal> x8648 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8648.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8648.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8649=((-1.0)*r21);
CheckValue<IkReal> x8652 = IKatan2WithCheck(IkReal(x8649),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8652.valid){
continue;
}
IkReal x8650=((1.0)*(x8652.value));
IkReal x8651=x8645;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8650)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8650)));
IkReal gconst136=(x8649*x8651);
IkReal gconst137=((1.0)*r20*x8651);
IkReal x8653=r22*r22;
IkReal x8654=((1.0)*x8653);
CheckValue<IkReal> x8658=IKPowWithIntegerCheck(((-1.0)+x8653),-1);
if(!x8658.valid){
continue;
}
IkReal x8655=x8658.value;
if((((1.0)+(((-1.0)*x8654)))) < -0.00001)
continue;
IkReal x8656=IKsqrt(((1.0)+(((-1.0)*x8654))));
IkReal x8657=(sj0*x8655*x8656);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x8657+(((-1.0)*x8654*x8657))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8659=((-1.0)*r21);
CheckValue<IkReal> x8662 = IKatan2WithCheck(IkReal(x8659),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8662.valid){
continue;
}
IkReal x8660=((1.0)*(x8662.value));
IkReal x8661=x8645;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8660)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8660)));
IkReal gconst136=(x8659*x8661);
IkReal gconst137=((1.0)*r20*x8661);
IkReal x8663=r22*r22;
IkReal x8664=((1.0)*x8663);
CheckValue<IkReal> x8668=IKPowWithIntegerCheck(((-1.0)+x8663),-1);
if(!x8668.valid){
continue;
}
IkReal x8665=x8668.value;
if((((1.0)+(((-1.0)*x8664)))) < -0.00001)
continue;
IkReal x8666=IKsqrt(((1.0)+(((-1.0)*x8664))));
IkReal x8667=(cj0*x8665*x8666);
j4eval[0]=((IKabs((x8667+(((-1.0)*x8664*x8667)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8669=((-1.0)*r21);
CheckValue<IkReal> x8672 = IKatan2WithCheck(IkReal(x8669),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8672.valid){
continue;
}
IkReal x8670=((1.0)*(x8672.value));
IkReal x8671=x8645;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8670)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8670)));
IkReal gconst136=(x8669*x8671);
IkReal gconst137=((1.0)*r20*x8671);
IkReal x8673=r22*r22;
IkReal x8674=(cj0*r12);
IkReal x8675=(r02*sj0);
CheckValue<IkReal> x8679=IKPowWithIntegerCheck(((-1.0)+x8673),-1);
if(!x8679.valid){
continue;
}
IkReal x8676=x8679.value;
if((((1.0)+(((-1.0)*x8673)))) < -0.00001)
continue;
IkReal x8677=IKsqrt(((1.0)+(((-1.0)*x8673))));
IkReal x8678=(r22*x8676*x8677);
j4eval[0]=0;
j4eval[1]=((IKabs((x8675+(((-1.0)*x8674)))))+(IKabs(((((-1.0)*x8675*x8678))+((x8674*x8678))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8680=((1.0)*cj0);
IkReal x8681=((1.0)*gconst137);
CheckValue<IkReal> x8682 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8680))+((r02*sj0)))),IkReal(((((-1.0)*r00*sj0*x8681))+((gconst136*r01*sj0))+(((-1.0)*gconst136*r11*x8680))+((cj0*gconst137*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8682.valid){
continue;
}
CheckValue<IkReal> x8683=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*r21*x8681)))),-1);
if(!x8683.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8682.value)+(((1.5707963267949)*(x8683.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8684=IKsin(j4);
IkReal x8685=IKcos(j4);
IkReal x8686=(gconst136*r01);
IkReal x8687=(gconst137*r10);
IkReal x8688=(cj1*cj2);
IkReal x8689=(sj1*sj2);
IkReal x8690=(gconst137*r20);
IkReal x8691=(gconst136*r11);
IkReal x8692=((1.0)*cj0);
IkReal x8693=(gconst136*r21);
IkReal x8694=(gconst137*r00);
IkReal x8695=((1.0)*sj0);
IkReal x8696=((1.0)*x8685);
IkReal x8697=((1.0)*x8684);
evalcond[0]=(((x8684*x8693))+(((-1.0)*x8690*x8697))+(((-1.0)*r22*x8696)));
evalcond[1]=((((-1.0)*x8692))+(((-1.0)*r02*x8696))+((x8684*x8686))+(((-1.0)*x8694*x8697)));
evalcond[2]=((((-1.0)*x8695))+((x8684*x8691))+(((-1.0)*x8687*x8697))+(((-1.0)*r12*x8696)));
evalcond[3]=(((cj2*sj1))+((x8685*x8690))+((cj1*sj2))+(((-1.0)*r22*x8697))+(((-1.0)*x8693*x8696)));
evalcond[4]=(((x8685*x8694))+(((-1.0)*x8689*x8695))+(((-1.0)*r02*x8697))+((sj0*x8688))+(((-1.0)*x8686*x8696)));
evalcond[5]=((((-1.0)*x8691*x8696))+(((-1.0)*x8688*x8692))+(((-1.0)*r12*x8697))+((x8685*x8687))+((cj0*x8689)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8698=((1.0)*gconst137);
CheckValue<IkReal> x8699=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r10))+(((-1.0)*r11*x8698)))),-1);
if(!x8699.valid){
continue;
}
CheckValue<IkReal> x8700 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8698))+((cj0*gconst136*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8700.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8699.value)))+(x8700.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8701=IKsin(j4);
IkReal x8702=IKcos(j4);
IkReal x8703=(gconst136*r01);
IkReal x8704=(gconst137*r10);
IkReal x8705=(cj1*cj2);
IkReal x8706=(sj1*sj2);
IkReal x8707=(gconst137*r20);
IkReal x8708=(gconst136*r11);
IkReal x8709=((1.0)*cj0);
IkReal x8710=(gconst136*r21);
IkReal x8711=(gconst137*r00);
IkReal x8712=((1.0)*sj0);
IkReal x8713=((1.0)*x8702);
IkReal x8714=((1.0)*x8701);
evalcond[0]=((((-1.0)*x8707*x8714))+((x8701*x8710))+(((-1.0)*r22*x8713)));
evalcond[1]=((((-1.0)*r02*x8713))+(((-1.0)*x8711*x8714))+(((-1.0)*x8709))+((x8701*x8703)));
evalcond[2]=((((-1.0)*x8712))+(((-1.0)*r12*x8713))+((x8701*x8708))+(((-1.0)*x8704*x8714)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8714))+(((-1.0)*x8710*x8713))+((x8702*x8707)));
evalcond[4]=((((-1.0)*x8703*x8713))+(((-1.0)*x8706*x8712))+((x8702*x8711))+(((-1.0)*r02*x8714))+((sj0*x8705)));
evalcond[5]=((((-1.0)*x8705*x8709))+(((-1.0)*x8708*x8713))+((cj0*x8706))+(((-1.0)*r12*x8714))+((x8702*x8704)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8715=IKPowWithIntegerCheck(IKsign((((gconst136*r00))+((gconst137*r01)))),-1);
if(!x8715.valid){
continue;
}
CheckValue<IkReal> x8716 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst136*r21*sj0))+(((-1.0)*gconst137*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8716.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8715.value)))+(x8716.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8717=IKsin(j4);
IkReal x8718=IKcos(j4);
IkReal x8719=(gconst136*r01);
IkReal x8720=(gconst137*r10);
IkReal x8721=(cj1*cj2);
IkReal x8722=(sj1*sj2);
IkReal x8723=(gconst137*r20);
IkReal x8724=(gconst136*r11);
IkReal x8725=((1.0)*cj0);
IkReal x8726=(gconst136*r21);
IkReal x8727=(gconst137*r00);
IkReal x8728=((1.0)*sj0);
IkReal x8729=((1.0)*x8718);
IkReal x8730=((1.0)*x8717);
evalcond[0]=(((x8717*x8726))+(((-1.0)*x8723*x8730))+(((-1.0)*r22*x8729)));
evalcond[1]=((((-1.0)*x8725))+(((-1.0)*r02*x8729))+(((-1.0)*x8727*x8730))+((x8717*x8719)));
evalcond[2]=((((-1.0)*x8720*x8730))+((x8717*x8724))+(((-1.0)*x8728))+(((-1.0)*r12*x8729)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8726*x8729))+((x8718*x8723))+(((-1.0)*r22*x8730)));
evalcond[4]=(((x8718*x8727))+(((-1.0)*x8719*x8729))+(((-1.0)*r02*x8730))+(((-1.0)*x8722*x8728))+((sj0*x8721)));
evalcond[5]=((((-1.0)*x8721*x8725))+((cj0*x8722))+(((-1.0)*x8724*x8729))+((x8718*x8720))+(((-1.0)*r12*x8730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8731=((-1.0)*r10);
IkReal x8733 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8733)==0){
continue;
}
IkReal x8732=pow(x8733,-0.5);
CheckValue<IkReal> x8734 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8731),IKFAST_ATAN2_MAGTHRESH);
if(!x8734.valid){
continue;
}
IkReal gconst138=((-1.0)*(x8734.value));
IkReal gconst139=(r11*x8732);
IkReal gconst140=(x8731*x8732);
CheckValue<IkReal> x8735 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8735.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8735.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8736=((-1.0)*r10);
IkReal x8737=x8732;
CheckValue<IkReal> x8739 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8736),IKFAST_ATAN2_MAGTHRESH);
if(!x8739.valid){
continue;
}
IkReal x8738=((-1.0)*(x8739.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x8738;
IkReal gconst138=x8738;
IkReal gconst139=(r11*x8737);
IkReal gconst140=(x8736*x8737);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8740=((-1.0)*r10);
IkReal x8741=x8732;
CheckValue<IkReal> x8743 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8740),IKFAST_ATAN2_MAGTHRESH);
if(!x8743.valid){
continue;
}
IkReal x8742=((-1.0)*(x8743.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x8742;
IkReal gconst138=x8742;
IkReal gconst139=(r11*x8741);
IkReal gconst140=(x8740*x8741);
IkReal x8744=r12*r12;
IkReal x8745=((1.0)*cj0);
IkReal x8746=(r02*sj0);
CheckValue<IkReal> x8750=IKPowWithIntegerCheck(((-1.0)+x8744),-1);
if(!x8750.valid){
continue;
}
IkReal x8747=x8750.value;
if((((1.0)+(((-1.0)*x8744)))) < -0.00001)
continue;
IkReal x8748=IKsqrt(((1.0)+(((-1.0)*x8744))));
IkReal x8749=(x8747*x8748);
j4eval[0]=((IKabs((x8746+(((-1.0)*r12*x8745)))))+(IKabs(((((-1.0)*x8744*x8745*x8749))+((cj0*x8749))+((r12*x8746*x8749))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8751=((-1.0)*r10);
IkReal x8752=x8732;
CheckValue<IkReal> x8754 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8751),IKFAST_ATAN2_MAGTHRESH);
if(!x8754.valid){
continue;
}
IkReal x8753=((-1.0)*(x8754.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x8753;
IkReal gconst138=x8753;
IkReal gconst139=(r11*x8752);
IkReal gconst140=(x8751*x8752);
IkReal x8755=(cj1*r22*sj2);
IkReal x8756=(cj2*r22*sj1);
IkReal x8757=x8732;
IkReal x8758=(r12*x8757);
j4eval[0]=((IKabs((x8755+x8756)))+(IKabs((((x8756*x8758))+((x8755*x8758))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8759=(cj1*sj2);
IkReal x8760=(cj2*sj1);
IkReal x8761=(gconst139*r21);
IkReal x8762=((1.0)*gconst140*r20);
CheckValue<IkReal> x8763=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((gconst140*gconst140)*(r20*r20)))+(((-2.0)*gconst140*r20*x8761))+(x8761*x8761))),-1);
if(!x8763.valid){
continue;
}
CheckValue<IkReal> x8764 = IKatan2WithCheck(IkReal((((r22*x8759))+((r22*x8760)))),IkReal(((((-1.0)*x8759*x8762))+((x8760*x8761))+(((-1.0)*x8760*x8762))+((x8759*x8761)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8764.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8763.value)))+(x8764.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8765=IKsin(j4);
IkReal x8766=IKcos(j4);
IkReal x8767=(gconst140*r00);
IkReal x8768=(cj1*cj2);
IkReal x8769=(sj1*sj2);
IkReal x8770=(gconst139*r11);
IkReal x8771=((1.0)*cj0);
IkReal x8772=(gconst139*r01);
IkReal x8773=(gconst139*r21);
IkReal x8774=((1.0)*sj0);
IkReal x8775=((1.0)*x8766);
IkReal x8776=((1.0)*x8765);
IkReal x8777=(gconst140*x8766);
evalcond[0]=(((x8765*x8773))+(((-1.0)*gconst140*r20*x8776))+(((-1.0)*r22*x8775)));
evalcond[1]=(((x8765*x8772))+(((-1.0)*r02*x8775))+(((-1.0)*x8767*x8776))+(((-1.0)*x8771)));
evalcond[2]=(((x8765*x8770))+(((-1.0)*gconst140*r10*x8776))+(((-1.0)*x8774))+(((-1.0)*r12*x8775)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8773*x8775))+(((-1.0)*r22*x8776))+((r20*x8777)));
evalcond[4]=((((-1.0)*r02*x8776))+((x8766*x8767))+((sj0*x8768))+(((-1.0)*x8772*x8775))+(((-1.0)*x8769*x8774)));
evalcond[5]=((((-1.0)*x8768*x8771))+(((-1.0)*r12*x8776))+((r10*x8777))+(((-1.0)*x8770*x8775))+((cj0*x8769)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8778=((1.0)*gconst140);
IkReal x8779=((1.0)*cj0);
CheckValue<IkReal> x8780=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8778))+(((-1.0)*gconst139*r20)))),-1);
if(!x8780.valid){
continue;
}
CheckValue<IkReal> x8781 = IKatan2WithCheck(IkReal((((r02*sj0))+(((-1.0)*r12*x8779)))),IkReal(((((-1.0)*r00*sj0*x8778))+((cj0*gconst140*r10))+(((-1.0)*gconst139*r11*x8779))+((gconst139*r01*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8781.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8780.value)))+(x8781.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8782=IKsin(j4);
IkReal x8783=IKcos(j4);
IkReal x8784=(gconst140*r00);
IkReal x8785=(cj1*cj2);
IkReal x8786=(sj1*sj2);
IkReal x8787=(gconst139*r11);
IkReal x8788=((1.0)*cj0);
IkReal x8789=(gconst139*r01);
IkReal x8790=(gconst139*r21);
IkReal x8791=((1.0)*sj0);
IkReal x8792=((1.0)*x8783);
IkReal x8793=((1.0)*x8782);
IkReal x8794=(gconst140*x8783);
evalcond[0]=((((-1.0)*gconst140*r20*x8793))+((x8782*x8790))+(((-1.0)*r22*x8792)));
evalcond[1]=((((-1.0)*x8784*x8793))+(((-1.0)*r02*x8792))+(((-1.0)*x8788))+((x8782*x8789)));
evalcond[2]=((((-1.0)*r12*x8792))+(((-1.0)*gconst140*r10*x8793))+((x8782*x8787))+(((-1.0)*x8791)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8790*x8792))+((r20*x8794))+(((-1.0)*r22*x8793)));
evalcond[4]=((((-1.0)*x8789*x8792))+(((-1.0)*x8786*x8791))+((x8783*x8784))+(((-1.0)*r02*x8793))+((sj0*x8785)));
evalcond[5]=(((r10*x8794))+(((-1.0)*r12*x8793))+(((-1.0)*x8785*x8788))+((cj0*x8786))+(((-1.0)*x8787*x8792)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8795=IKPowWithIntegerCheck(IKsign((((gconst140*r01))+((gconst139*r00)))),-1);
if(!x8795.valid){
continue;
}
CheckValue<IkReal> x8796 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst139*r21*sj0))+(((-1.0)*gconst140*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8796.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8795.value)))+(x8796.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8797=IKsin(j4);
IkReal x8798=IKcos(j4);
IkReal x8799=(gconst140*r00);
IkReal x8800=(cj1*cj2);
IkReal x8801=(sj1*sj2);
IkReal x8802=(gconst139*r11);
IkReal x8803=((1.0)*cj0);
IkReal x8804=(gconst139*r01);
IkReal x8805=(gconst139*r21);
IkReal x8806=((1.0)*sj0);
IkReal x8807=((1.0)*x8798);
IkReal x8808=((1.0)*x8797);
IkReal x8809=(gconst140*x8798);
evalcond[0]=((((-1.0)*r22*x8807))+((x8797*x8805))+(((-1.0)*gconst140*r20*x8808)));
evalcond[1]=(((x8797*x8804))+(((-1.0)*r02*x8807))+(((-1.0)*x8803))+(((-1.0)*x8799*x8808)));
evalcond[2]=((((-1.0)*r12*x8807))+(((-1.0)*gconst140*r10*x8808))+((x8797*x8802))+(((-1.0)*x8806)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8808))+((cj1*sj2))+((r20*x8809))+(((-1.0)*x8805*x8807)));
evalcond[4]=((((-1.0)*r02*x8808))+((sj0*x8800))+((x8798*x8799))+(((-1.0)*x8801*x8806))+(((-1.0)*x8804*x8807)));
evalcond[5]=((((-1.0)*r12*x8808))+((cj0*x8801))+((r10*x8809))+(((-1.0)*x8800*x8803))+(((-1.0)*x8802*x8807)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8810=((-1.0)*r11);
IkReal x8812 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8812)==0){
continue;
}
IkReal x8811=pow(x8812,-0.5);
CheckValue<IkReal> x8813 = IKatan2WithCheck(IkReal(x8810),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8813.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x8813.value))));
IkReal gconst142=(x8810*x8811);
IkReal gconst143=((1.0)*r10*x8811);
CheckValue<IkReal> x8814 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8814.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8814.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8815=((-1.0)*r11);
CheckValue<IkReal> x8818 = IKatan2WithCheck(IkReal(x8815),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8818.valid){
continue;
}
IkReal x8816=((1.0)*(x8818.value));
IkReal x8817=x8811;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8816)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8816)));
IkReal gconst142=(x8815*x8817);
IkReal gconst143=((1.0)*r10*x8817);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x8819=((-1.0)*r11);
CheckValue<IkReal> x8822 = IKatan2WithCheck(IkReal(x8819),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8822.valid){
continue;
}
IkReal x8820=((1.0)*(x8822.value));
IkReal x8821=x8811;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8820)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8820)));
IkReal gconst142=(x8819*x8821);
IkReal gconst143=((1.0)*r10*x8821);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8823=((1.0)*cj0);
IkReal x8824=((1.0)*gconst143);
CheckValue<IkReal> x8825 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8823))+((r02*sj0)))),IkReal(((((-1.0)*r00*sj0*x8824))+((gconst142*r01*sj0))+((cj0*gconst143*r10))+(((-1.0)*gconst142*r11*x8823)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8825.valid){
continue;
}
CheckValue<IkReal> x8826=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8824))+(((-1.0)*gconst142*r20)))),-1);
if(!x8826.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8825.value)+(((1.5707963267949)*(x8826.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8827=IKsin(j4);
IkReal x8828=IKcos(j4);
IkReal x8829=(cj1*cj2);
IkReal x8830=(sj1*sj2);
IkReal x8831=(gconst143*r20);
IkReal x8832=((1.0)*cj0);
IkReal x8833=((1.0)*sj0);
IkReal x8834=((1.0)*x8828);
IkReal x8835=((1.0)*x8827);
IkReal x8836=(gconst142*x8827);
IkReal x8837=(gconst143*x8828);
evalcond[0]=(((r21*x8836))+(((-1.0)*x8831*x8835))+(((-1.0)*r22*x8834)));
evalcond[1]=((((-1.0)*r02*x8834))+(((-1.0)*x8832))+((r01*x8836))+(((-1.0)*gconst143*r00*x8835)));
evalcond[2]=(((r11*x8836))+(((-1.0)*x8833))+(((-1.0)*gconst143*r10*x8835))+(((-1.0)*r12*x8834)));
evalcond[3]=(((cj2*sj1))+((x8828*x8831))+((cj1*sj2))+(((-1.0)*gconst142*r21*x8834))+(((-1.0)*r22*x8835)));
evalcond[4]=((((-1.0)*x8830*x8833))+((sj0*x8829))+(((-1.0)*r02*x8835))+(((-1.0)*gconst142*r01*x8834))+((r00*x8837)));
evalcond[5]=((((-1.0)*gconst142*r11*x8834))+((cj0*x8830))+((r10*x8837))+(((-1.0)*x8829*x8832))+(((-1.0)*r12*x8835)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8838=((1.0)*gconst143);
CheckValue<IkReal> x8839=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst142*r10))+(((-1.0)*r11*x8838)))),-1);
if(!x8839.valid){
continue;
}
CheckValue<IkReal> x8840 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst142*r21))+(((-1.0)*cj0*r20*x8838)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8840.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8839.value)))+(x8840.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8841=IKsin(j4);
IkReal x8842=IKcos(j4);
IkReal x8843=(cj1*cj2);
IkReal x8844=(sj1*sj2);
IkReal x8845=(gconst143*r20);
IkReal x8846=((1.0)*cj0);
IkReal x8847=((1.0)*sj0);
IkReal x8848=((1.0)*x8842);
IkReal x8849=((1.0)*x8841);
IkReal x8850=(gconst142*x8841);
IkReal x8851=(gconst143*x8842);
evalcond[0]=((((-1.0)*x8845*x8849))+((r21*x8850))+(((-1.0)*r22*x8848)));
evalcond[1]=((((-1.0)*gconst143*r00*x8849))+((r01*x8850))+(((-1.0)*r02*x8848))+(((-1.0)*x8846)));
evalcond[2]=((((-1.0)*x8847))+(((-1.0)*gconst143*r10*x8849))+((r11*x8850))+(((-1.0)*r12*x8848)));
evalcond[3]=(((cj2*sj1))+((x8842*x8845))+((cj1*sj2))+(((-1.0)*gconst142*r21*x8848))+(((-1.0)*r22*x8849)));
evalcond[4]=(((r00*x8851))+(((-1.0)*gconst142*r01*x8848))+(((-1.0)*r02*x8849))+(((-1.0)*x8844*x8847))+((sj0*x8843)));
evalcond[5]=(((cj0*x8844))+(((-1.0)*x8843*x8846))+(((-1.0)*gconst142*r11*x8848))+(((-1.0)*r12*x8849))+((r10*x8851)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8852=IKPowWithIntegerCheck(IKsign((((gconst143*r01))+((gconst142*r00)))),-1);
if(!x8852.valid){
continue;
}
CheckValue<IkReal> x8853 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst142*r21*sj0))+(((-1.0)*gconst143*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8853.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8852.value)))+(x8853.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8854=IKsin(j4);
IkReal x8855=IKcos(j4);
IkReal x8856=(cj1*cj2);
IkReal x8857=(sj1*sj2);
IkReal x8858=(gconst143*r20);
IkReal x8859=((1.0)*cj0);
IkReal x8860=((1.0)*sj0);
IkReal x8861=((1.0)*x8855);
IkReal x8862=((1.0)*x8854);
IkReal x8863=(gconst142*x8854);
IkReal x8864=(gconst143*x8855);
evalcond[0]=(((r21*x8863))+(((-1.0)*r22*x8861))+(((-1.0)*x8858*x8862)));
evalcond[1]=((((-1.0)*x8859))+((r01*x8863))+(((-1.0)*gconst143*r00*x8862))+(((-1.0)*r02*x8861)));
evalcond[2]=((((-1.0)*x8860))+(((-1.0)*gconst143*r10*x8862))+((r11*x8863))+(((-1.0)*r12*x8861)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst142*r21*x8861))+((cj1*sj2))+(((-1.0)*r22*x8862))+((x8855*x8858)));
evalcond[4]=(((sj0*x8856))+(((-1.0)*x8857*x8860))+((r00*x8864))+(((-1.0)*gconst142*r01*x8861))+(((-1.0)*r02*x8862)));
evalcond[5]=((((-1.0)*gconst142*r11*x8861))+(((-1.0)*x8856*x8859))+((cj0*x8857))+(((-1.0)*r12*x8862))+((r10*x8864)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8865=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x8865;
j4eval[1]=IKsign(x8865);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8866=((1.0)*cj5);
IkReal x8867=((((-1.0)*r21*x8866))+(((-1.0)*r20*sj5)));
j4eval[0]=x8867;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x8866))))));
j4eval[2]=IKsign(x8867);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8868=cj5*cj5;
IkReal x8869=r11*r11;
IkReal x8870=(cj5*r10);
IkReal x8871=(r11*sj5);
IkReal x8872=((((2.0)*x8870*x8871))+(((-1.0)*x8868*(r10*r10)))+(((-1.0)*(r12*r12)))+((x8868*x8869))+(((-1.0)*x8869)));
j4eval[0]=x8872;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x8871))+x8870))));
j4eval[2]=IKsign(x8872);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8873=cj5*cj5;
IkReal x8874=r11*r11;
IkReal x8875=(cj5*r10);
IkReal x8876=(r11*sj5);
CheckValue<IkReal> x8877=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8874))+((x8873*x8874))+(((2.0)*x8875*x8876))+(((-1.0)*(r12*r12)))+(((-1.0)*x8873*(r10*r10))))),-1);
if(!x8877.valid){
continue;
}
CheckValue<IkReal> x8878 = IKatan2WithCheck(IkReal(((((-1.0)*x8876))+x8875)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8878.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8877.value)))+(x8878.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8879=IKsin(j4);
IkReal x8880=IKcos(j4);
IkReal x8881=(cj5*r10);
IkReal x8882=(r01*sj5);
IkReal x8883=(cj5*r00);
IkReal x8884=(cj5*r20);
IkReal x8885=((1.0)*x8880);
IkReal x8886=((1.0)*x8879);
IkReal x8887=(sj5*x8879);
evalcond[0]=((((-1.0)*r22*x8885))+((r21*x8887))+(((-1.0)*x8884*x8886)));
evalcond[1]=((((-1.0)*x8883*x8886))+((x8879*x8882))+(((-1.0)*r02*x8885)));
evalcond[2]=((((-1.0)*r12*x8886))+((x8880*x8881))+(((-1.0)*r11*sj5*x8885)));
evalcond[3]=((-1.0)+(((-1.0)*x8881*x8886))+(((-1.0)*r12*x8885))+((r11*x8887)));
evalcond[4]=((((-1.0)*r22*x8886))+((cj2*sj1))+((cj1*sj2))+((x8880*x8884))+(((-1.0)*r21*sj5*x8885)));
evalcond[5]=((((-1.0)*x8882*x8885))+(((-1.0)*sj1*sj2))+(((-1.0)*r02*x8886))+((x8880*x8883))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8888=((1.0)*cj5);
CheckValue<IkReal> x8889=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8888))+(((-1.0)*r20*sj5)))),-1);
if(!x8889.valid){
continue;
}
CheckValue<IkReal> x8890 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x8888)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8890.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8889.value)))+(x8890.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8891=IKsin(j4);
IkReal x8892=IKcos(j4);
IkReal x8893=(cj5*r10);
IkReal x8894=(r01*sj5);
IkReal x8895=(cj5*r00);
IkReal x8896=(cj5*r20);
IkReal x8897=((1.0)*x8892);
IkReal x8898=((1.0)*x8891);
IkReal x8899=(sj5*x8891);
evalcond[0]=((((-1.0)*x8896*x8898))+((r21*x8899))+(((-1.0)*r22*x8897)));
evalcond[1]=((((-1.0)*x8895*x8898))+(((-1.0)*r02*x8897))+((x8891*x8894)));
evalcond[2]=((((-1.0)*r11*sj5*x8897))+(((-1.0)*r12*x8898))+((x8892*x8893)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8897))+(((-1.0)*x8893*x8898))+((r11*x8899)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8897))+(((-1.0)*r22*x8898))+((x8892*x8896)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x8894*x8897))+(((-1.0)*r02*x8898))+((cj1*cj2))+((x8892*x8895)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8900 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8900.valid){
continue;
}
CheckValue<IkReal> x8901=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x8901.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8900.value)+(((1.5707963267949)*(x8901.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8902=IKsin(j4);
IkReal x8903=IKcos(j4);
IkReal x8904=(cj5*r10);
IkReal x8905=(r01*sj5);
IkReal x8906=(cj5*r00);
IkReal x8907=(cj5*r20);
IkReal x8908=((1.0)*x8903);
IkReal x8909=((1.0)*x8902);
IkReal x8910=(sj5*x8902);
evalcond[0]=((((-1.0)*r22*x8908))+(((-1.0)*x8907*x8909))+((r21*x8910)));
evalcond[1]=(((x8902*x8905))+(((-1.0)*x8906*x8909))+(((-1.0)*r02*x8908)));
evalcond[2]=((((-1.0)*r11*sj5*x8908))+((x8903*x8904))+(((-1.0)*r12*x8909)));
evalcond[3]=((-1.0)+((r11*x8910))+(((-1.0)*x8904*x8909))+(((-1.0)*r12*x8908)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8908))+((x8903*x8907))+((cj1*sj2))+(((-1.0)*r22*x8909)));
evalcond[5]=(((x8903*x8906))+(((-1.0)*sj1*sj2))+(((-1.0)*r02*x8909))+(((-1.0)*x8905*x8908))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8911=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8911;
j4eval[1]=IKsign(x8911);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8912=((1.0)*cj5);
IkReal x8913=((((-1.0)*r01*x8912))+(((-1.0)*r00*sj5)));
j4eval[0]=x8913;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x8912)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8913);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8914=cj5*cj5;
IkReal x8915=r11*r11;
IkReal x8916=(r11*sj5);
IkReal x8917=(cj5*r10);
IkReal x8918=((r12*r12)+(((-1.0)*x8914*x8915))+x8915+(((-2.0)*x8916*x8917))+((x8914*(r10*r10))));
j4eval[0]=x8918;
j4eval[1]=IKsign(x8918);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x8916))+x8917))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8919=cj5*cj5;
IkReal x8920=r11*r11;
IkReal x8921=(cj5*r10);
IkReal x8922=(r11*sj5);
CheckValue<IkReal> x8923=IKPowWithIntegerCheck(IKsign(((r12*r12)+x8920+(((-1.0)*x8919*x8920))+((x8919*(r10*r10)))+(((-2.0)*x8921*x8922)))),-1);
if(!x8923.valid){
continue;
}
CheckValue<IkReal> x8924 = IKatan2WithCheck(IkReal((x8921+(((-1.0)*x8922)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8924.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8923.value)))+(x8924.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8925=IKsin(j4);
IkReal x8926=IKcos(j4);
IkReal x8927=(cj5*r10);
IkReal x8928=(r01*sj5);
IkReal x8929=(cj5*r00);
IkReal x8930=(cj5*r20);
IkReal x8931=((1.0)*x8926);
IkReal x8932=((1.0)*x8925);
IkReal x8933=(sj5*x8925);
evalcond[0]=((((-1.0)*r22*x8931))+(((-1.0)*x8930*x8932))+((r21*x8933)));
evalcond[1]=(((x8925*x8928))+(((-1.0)*x8929*x8932))+(((-1.0)*r02*x8931)));
evalcond[2]=((((-1.0)*r12*x8932))+(((-1.0)*r11*sj5*x8931))+((x8926*x8927)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8931))+(((-1.0)*x8927*x8932))+((r11*x8933)));
evalcond[4]=(((cj2*sj1))+((x8926*x8930))+(((-1.0)*r22*x8932))+(((-1.0)*r21*sj5*x8931))+((cj1*sj2)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8928*x8931))+(((-1.0)*r02*x8932))+((x8926*x8929)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8934=((1.0)*cj5);
CheckValue<IkReal> x8935 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x8934))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8935.valid){
continue;
}
CheckValue<IkReal> x8936=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8934))+(((-1.0)*r00*sj5)))),-1);
if(!x8936.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8935.value)+(((1.5707963267949)*(x8936.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8937=IKsin(j4);
IkReal x8938=IKcos(j4);
IkReal x8939=(cj5*r10);
IkReal x8940=(r01*sj5);
IkReal x8941=(cj5*r00);
IkReal x8942=(cj5*r20);
IkReal x8943=((1.0)*x8938);
IkReal x8944=((1.0)*x8937);
IkReal x8945=(sj5*x8937);
evalcond[0]=((((-1.0)*r22*x8943))+(((-1.0)*x8942*x8944))+((r21*x8945)));
evalcond[1]=(((x8937*x8940))+(((-1.0)*x8941*x8944))+(((-1.0)*r02*x8943)));
evalcond[2]=((((-1.0)*r12*x8944))+(((-1.0)*r11*sj5*x8943))+((x8938*x8939)));
evalcond[3]=((1.0)+((r11*x8945))+(((-1.0)*x8939*x8944))+(((-1.0)*r12*x8943)));
evalcond[4]=(((x8938*x8942))+((cj2*sj1))+(((-1.0)*r22*x8944))+((cj1*sj2))+(((-1.0)*r21*sj5*x8943)));
evalcond[5]=(((x8938*x8941))+(((-1.0)*x8940*x8943))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x8944)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8946=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8946.valid){
continue;
}
CheckValue<IkReal> x8947 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8947.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8946.value)))+(x8947.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8948=IKsin(j4);
IkReal x8949=IKcos(j4);
IkReal x8950=(cj5*r10);
IkReal x8951=(r01*sj5);
IkReal x8952=(cj5*r00);
IkReal x8953=(cj5*r20);
IkReal x8954=((1.0)*x8949);
IkReal x8955=((1.0)*x8948);
IkReal x8956=(sj5*x8948);
evalcond[0]=((((-1.0)*r22*x8954))+(((-1.0)*x8953*x8955))+((r21*x8956)));
evalcond[1]=((((-1.0)*x8952*x8955))+(((-1.0)*r02*x8954))+((x8948*x8951)));
evalcond[2]=((((-1.0)*r12*x8955))+(((-1.0)*r11*sj5*x8954))+((x8949*x8950)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8954))+(((-1.0)*x8950*x8955))+((r11*x8956)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8955))+(((-1.0)*r21*sj5*x8954))+((x8949*x8953)));
evalcond[5]=((((-1.0)*x8951*x8954))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x8955))+((x8949*x8952)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8958 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8958)==0){
continue;
}
IkReal x8957=pow(x8958,-0.5);
CheckValue<IkReal> x8959 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8959.valid){
continue;
}
IkReal gconst144=((-1.0)*(x8959.value));
IkReal gconst145=((-1.0)*r01*x8957);
IkReal gconst146=(r00*x8957);
CheckValue<IkReal> x8960 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8960.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8960.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x8963 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8963.valid){
continue;
}
IkReal x8961=((-1.0)*(x8963.value));
IkReal x8962=x8957;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x8961;
IkReal gconst144=x8961;
IkReal gconst145=((-1.0)*r01*x8962);
IkReal gconst146=(r00*x8962);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8966 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8966.valid){
continue;
}
IkReal x8964=((-1.0)*(x8966.value));
IkReal x8965=x8957;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x8964;
IkReal gconst144=x8964;
IkReal gconst145=((-1.0)*r01*x8965);
IkReal gconst146=(r00*x8965);
IkReal x8967=r02*r02;
IkReal x8968=(cj0*r12);
IkReal x8969=((1.0)*x8967);
CheckValue<IkReal> x8973=IKPowWithIntegerCheck(((-1.0)+x8967),-1);
if(!x8973.valid){
continue;
}
IkReal x8970=x8973.value;
if((((1.0)+(((-1.0)*x8969)))) < -0.00001)
continue;
IkReal x8971=IKsqrt(((1.0)+(((-1.0)*x8969))));
IkReal x8972=(x8970*x8971);
j4eval[0]=((IKabs((((r02*sj0))+(((-1.0)*x8968)))))+(IKabs((((sj0*x8972))+(((-1.0)*sj0*x8969*x8972))+((r02*x8968*x8972))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8976 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8976.valid){
continue;
}
IkReal x8974=((-1.0)*(x8976.value));
IkReal x8975=x8957;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x8974;
IkReal gconst144=x8974;
IkReal gconst145=((-1.0)*r01*x8975);
IkReal gconst146=(r00*x8975);
IkReal x8977=r02*r02;
IkReal x8978=(cj1*r22*sj2);
IkReal x8979=(cj2*r22*sj1);
CheckValue<IkReal> x8983=IKPowWithIntegerCheck(((-1.0)+x8977),-1);
if(!x8983.valid){
continue;
}
IkReal x8980=x8983.value;
if((((1.0)+(((-1.0)*x8977)))) < -0.00001)
continue;
IkReal x8981=IKsqrt(((1.0)+(((-1.0)*x8977))));
IkReal x8982=((1.0)*r02*x8980*x8981);
j4eval[0]=((IKabs(((((-1.0)*x8979*x8982))+(((-1.0)*x8978*x8982)))))+(IKabs((x8978+x8979))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8984=(cj2*sj1);
IkReal x8985=(gconst145*r21);
IkReal x8986=(cj1*sj2);
IkReal x8987=((1.0)*gconst146*r20);
CheckValue<IkReal> x8988=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((gconst146*gconst146)*(r20*r20)))+(x8985*x8985)+(((-2.0)*gconst146*r20*x8985)))),-1);
if(!x8988.valid){
continue;
}
CheckValue<IkReal> x8989 = IKatan2WithCheck(IkReal((((r22*x8984))+((r22*x8986)))),IkReal(((((-1.0)*x8984*x8987))+((x8984*x8985))+(((-1.0)*x8986*x8987))+((x8985*x8986)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8989.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8988.value)))+(x8989.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8990=IKsin(j4);
IkReal x8991=IKcos(j4);
IkReal x8992=(gconst146*r10);
IkReal x8993=(cj1*cj2);
IkReal x8994=(gconst145*r11);
IkReal x8995=(sj1*sj2);
IkReal x8996=(gconst146*r20);
IkReal x8997=((1.0)*cj0);
IkReal x8998=((1.0)*sj0);
IkReal x8999=(gconst146*r00);
IkReal x9000=((1.0)*x8991);
IkReal x9001=((1.0)*x8990);
IkReal x9002=(gconst145*x8990);
evalcond[0]=((((-1.0)*x8996*x9001))+(((-1.0)*r22*x9000))+((r21*x9002)));
evalcond[1]=((((-1.0)*r02*x9000))+(((-1.0)*x8999*x9001))+(((-1.0)*x8997))+((r01*x9002)));
evalcond[2]=((((-1.0)*r12*x9000))+((x8990*x8994))+(((-1.0)*x8998))+(((-1.0)*x8992*x9001)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x9001))+((x8991*x8996))+((cj1*sj2))+(((-1.0)*gconst145*r21*x9000)));
evalcond[4]=((((-1.0)*r02*x9001))+(((-1.0)*x8995*x8998))+((x8991*x8999))+((sj0*x8993))+(((-1.0)*gconst145*r01*x9000)));
evalcond[5]=((((-1.0)*x8993*x8997))+(((-1.0)*r12*x9001))+((x8991*x8992))+(((-1.0)*x8994*x9000))+((cj0*x8995)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9003=((1.0)*cj0);
IkReal x9004=((1.0)*gconst146);
CheckValue<IkReal> x9005 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x9003))+((r02*sj0)))),IkReal((((cj0*gconst146*r10))+((gconst145*r01*sj0))+(((-1.0)*r00*sj0*x9004))+(((-1.0)*gconst145*r11*x9003)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9005.valid){
continue;
}
CheckValue<IkReal> x9006=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9004))+(((-1.0)*gconst145*r20)))),-1);
if(!x9006.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9005.value)+(((1.5707963267949)*(x9006.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9007=IKsin(j4);
IkReal x9008=IKcos(j4);
IkReal x9009=(gconst146*r10);
IkReal x9010=(cj1*cj2);
IkReal x9011=(gconst145*r11);
IkReal x9012=(sj1*sj2);
IkReal x9013=(gconst146*r20);
IkReal x9014=((1.0)*cj0);
IkReal x9015=((1.0)*sj0);
IkReal x9016=(gconst146*r00);
IkReal x9017=((1.0)*x9008);
IkReal x9018=((1.0)*x9007);
IkReal x9019=(gconst145*x9007);
evalcond[0]=((((-1.0)*r22*x9017))+(((-1.0)*x9013*x9018))+((r21*x9019)));
evalcond[1]=((((-1.0)*x9014))+(((-1.0)*r02*x9017))+((r01*x9019))+(((-1.0)*x9016*x9018)));
evalcond[2]=((((-1.0)*x9015))+((x9007*x9011))+(((-1.0)*r12*x9017))+(((-1.0)*x9009*x9018)));
evalcond[3]=(((cj2*sj1))+((x9008*x9013))+(((-1.0)*r22*x9018))+((cj1*sj2))+(((-1.0)*gconst145*r21*x9017)));
evalcond[4]=((((-1.0)*gconst145*r01*x9017))+((x9008*x9016))+((sj0*x9010))+(((-1.0)*x9012*x9015))+(((-1.0)*r02*x9018)));
evalcond[5]=(((x9008*x9009))+(((-1.0)*x9011*x9017))+(((-1.0)*r12*x9018))+((cj0*x9012))+(((-1.0)*x9010*x9014)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9020=((1.0)*gconst146);
CheckValue<IkReal> x9021=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9020))+(((-1.0)*gconst145*r10)))),-1);
if(!x9021.valid){
continue;
}
CheckValue<IkReal> x9022 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x9020))+((cj0*gconst145*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9022.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9021.value)))+(x9022.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9023=IKsin(j4);
IkReal x9024=IKcos(j4);
IkReal x9025=(gconst146*r10);
IkReal x9026=(cj1*cj2);
IkReal x9027=(gconst145*r11);
IkReal x9028=(sj1*sj2);
IkReal x9029=(gconst146*r20);
IkReal x9030=((1.0)*cj0);
IkReal x9031=((1.0)*sj0);
IkReal x9032=(gconst146*r00);
IkReal x9033=((1.0)*x9024);
IkReal x9034=((1.0)*x9023);
IkReal x9035=(gconst145*x9023);
evalcond[0]=((((-1.0)*x9029*x9034))+((r21*x9035))+(((-1.0)*r22*x9033)));
evalcond[1]=((((-1.0)*x9030))+((r01*x9035))+(((-1.0)*x9032*x9034))+(((-1.0)*r02*x9033)));
evalcond[2]=((((-1.0)*r12*x9033))+(((-1.0)*x9031))+(((-1.0)*x9025*x9034))+((x9023*x9027)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst145*r21*x9033))+((x9024*x9029))+((cj1*sj2))+(((-1.0)*r22*x9034)));
evalcond[4]=((((-1.0)*gconst145*r01*x9033))+((x9024*x9032))+(((-1.0)*x9028*x9031))+((sj0*x9026))+(((-1.0)*r02*x9034)));
evalcond[5]=((((-1.0)*r12*x9034))+((x9024*x9025))+((cj0*x9028))+(((-1.0)*x9027*x9033))+(((-1.0)*x9026*x9030)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9037 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x9037)==0){
continue;
}
IkReal x9036=pow(x9037,-0.5);
CheckValue<IkReal> x9038 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x9038.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x9038.value))));
IkReal gconst148=((1.0)*r01*x9036);
IkReal gconst149=((-1.0)*r00*x9036);
CheckValue<IkReal> x9039 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x9039.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x9039.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x9042 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x9042.valid){
continue;
}
IkReal x9040=((1.0)*(x9042.value));
IkReal x9041=x9036;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x9040)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x9040)));
IkReal gconst148=((1.0)*r01*x9041);
IkReal gconst149=((-1.0)*r00*x9041);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=sj0;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x9045 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x9045.valid){
continue;
}
IkReal x9043=((1.0)*(x9045.value));
IkReal x9044=x9036;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x9043)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x9043)));
IkReal gconst148=((1.0)*r01*x9044);
IkReal gconst149=((-1.0)*r00*x9044);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9046=((1.0)*cj0);
IkReal x9047=((1.0)*gconst149);
CheckValue<IkReal> x9048=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r20))+(((-1.0)*r21*x9047)))),-1);
if(!x9048.valid){
continue;
}
CheckValue<IkReal> x9049 = IKatan2WithCheck(IkReal((((r02*sj0))+(((-1.0)*r12*x9046)))),IkReal((((cj0*gconst149*r10))+(((-1.0)*r00*sj0*x9047))+((gconst148*r01*sj0))+(((-1.0)*gconst148*r11*x9046)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9049.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9048.value)))+(x9049.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9050=IKsin(j4);
IkReal x9051=IKcos(j4);
IkReal x9052=(gconst148*r11);
IkReal x9053=(sj1*sj2);
IkReal x9054=(cj1*cj2);
IkReal x9055=((1.0)*cj0);
IkReal x9056=((1.0)*sj0);
IkReal x9057=((1.0)*x9051);
IkReal x9058=(gconst149*x9051);
IkReal x9059=((1.0)*x9050);
IkReal x9060=(gconst148*x9050);
evalcond[0]=((((-1.0)*gconst149*r20*x9059))+(((-1.0)*r22*x9057))+((r21*x9060)));
evalcond[1]=((((-1.0)*r02*x9057))+((r01*x9060))+(((-1.0)*x9055))+(((-1.0)*gconst149*r00*x9059)));
evalcond[2]=(((x9050*x9052))+(((-1.0)*gconst149*r10*x9059))+(((-1.0)*r12*x9057))+(((-1.0)*x9056)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x9058))+(((-1.0)*gconst148*r21*x9057))+(((-1.0)*r22*x9059)));
evalcond[4]=((((-1.0)*x9053*x9056))+(((-1.0)*r02*x9059))+((r00*x9058))+((sj0*x9054))+(((-1.0)*gconst148*r01*x9057)));
evalcond[5]=((((-1.0)*x9054*x9055))+(((-1.0)*r12*x9059))+((cj0*x9053))+((r10*x9058))+(((-1.0)*x9052*x9057)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9061=((1.0)*gconst149);
CheckValue<IkReal> x9062 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x9061))+((cj0*gconst148*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9062.valid){
continue;
}
CheckValue<IkReal> x9063=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r10))+(((-1.0)*r11*x9061)))),-1);
if(!x9063.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9062.value)+(((1.5707963267949)*(x9063.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9064=IKsin(j4);
IkReal x9065=IKcos(j4);
IkReal x9066=(gconst148*r11);
IkReal x9067=(sj1*sj2);
IkReal x9068=(cj1*cj2);
IkReal x9069=((1.0)*cj0);
IkReal x9070=((1.0)*sj0);
IkReal x9071=((1.0)*x9065);
IkReal x9072=(gconst149*x9065);
IkReal x9073=((1.0)*x9064);
IkReal x9074=(gconst148*x9064);
evalcond[0]=(((r21*x9074))+(((-1.0)*r22*x9071))+(((-1.0)*gconst149*r20*x9073)));
evalcond[1]=((((-1.0)*x9069))+(((-1.0)*r02*x9071))+((r01*x9074))+(((-1.0)*gconst149*r00*x9073)));
evalcond[2]=(((x9064*x9066))+(((-1.0)*r12*x9071))+(((-1.0)*x9070))+(((-1.0)*gconst149*r10*x9073)));
evalcond[3]=(((cj2*sj1))+((r20*x9072))+((cj1*sj2))+(((-1.0)*r22*x9073))+(((-1.0)*gconst148*r21*x9071)));
evalcond[4]=(((sj0*x9068))+(((-1.0)*r02*x9073))+((r00*x9072))+(((-1.0)*x9067*x9070))+(((-1.0)*gconst148*r01*x9071)));
evalcond[5]=((((-1.0)*x9068*x9069))+((cj0*x9067))+(((-1.0)*r12*x9073))+(((-1.0)*x9066*x9071))+((r10*x9072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9075=IKPowWithIntegerCheck(IKsign((((gconst148*r00))+((gconst149*r01)))),-1);
if(!x9075.valid){
continue;
}
CheckValue<IkReal> x9076 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst149*r20*sj0))+((gconst148*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9076.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9075.value)))+(x9076.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9077=IKsin(j4);
IkReal x9078=IKcos(j4);
IkReal x9079=(gconst148*r11);
IkReal x9080=(sj1*sj2);
IkReal x9081=(cj1*cj2);
IkReal x9082=((1.0)*cj0);
IkReal x9083=((1.0)*sj0);
IkReal x9084=((1.0)*x9078);
IkReal x9085=(gconst149*x9078);
IkReal x9086=((1.0)*x9077);
IkReal x9087=(gconst148*x9077);
evalcond[0]=((((-1.0)*gconst149*r20*x9086))+((r21*x9087))+(((-1.0)*r22*x9084)));
evalcond[1]=(((r01*x9087))+(((-1.0)*x9082))+(((-1.0)*r02*x9084))+(((-1.0)*gconst149*r00*x9086)));
evalcond[2]=((((-1.0)*gconst149*r10*x9086))+(((-1.0)*x9083))+(((-1.0)*r12*x9084))+((x9077*x9079)));
evalcond[3]=(((cj2*sj1))+((r20*x9085))+((cj1*sj2))+(((-1.0)*gconst148*r21*x9084))+(((-1.0)*r22*x9086)));
evalcond[4]=(((sj0*x9081))+((r00*x9085))+(((-1.0)*r02*x9086))+(((-1.0)*gconst148*r01*x9084))+(((-1.0)*x9080*x9083)));
evalcond[5]=(((cj0*x9080))+((r10*x9085))+(((-1.0)*x9081*x9082))+(((-1.0)*x9079*x9084))+(((-1.0)*r12*x9086)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x9088=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x9088;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x9088);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x9089=((1.0)*cj5);
IkReal x9090=((((-1.0)*r10*sj5))+(((-1.0)*r11*x9089)));
j4eval[0]=x9090;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x9089)))))+(IKabs(r22)));
j4eval[2]=IKsign(x9090);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x9091=cj5*cj5;
IkReal x9092=r01*r01;
IkReal x9093=(r01*sj5);
IkReal x9094=(cj5*r00);
IkReal x9095=((((-1.0)*x9091*(r00*r00)))+(((-1.0)*(r02*r02)))+((x9091*x9092))+(((2.0)*x9093*x9094))+(((-1.0)*x9092)));
j4eval[0]=x9095;
j4eval[1]=IKsign(x9095);
j4eval[2]=((IKabs(r02))+(IKabs((x9094+(((-1.0)*x9093))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9096=cj5*cj5;
IkReal x9097=r01*r01;
IkReal x9098=(r01*sj5);
IkReal x9099=(cj5*r00);
CheckValue<IkReal> x9100=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*x9096*(r00*r00)))+((x9096*x9097))+(((2.0)*x9098*x9099))+(((-1.0)*x9097)))),-1);
if(!x9100.valid){
continue;
}
CheckValue<IkReal> x9101 = IKatan2WithCheck(IkReal((x9099+(((-1.0)*x9098)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9101.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9100.value)))+(x9101.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9102=IKsin(j4);
IkReal x9103=IKcos(j4);
IkReal x9104=(cj5*r10);
IkReal x9105=(r01*sj5);
IkReal x9106=(cj5*r00);
IkReal x9107=(cj5*r20);
IkReal x9108=((1.0)*x9103);
IkReal x9109=((1.0)*x9102);
IkReal x9110=(sj5*x9102);
evalcond[0]=(((r21*x9110))+(((-1.0)*r22*x9108))+(((-1.0)*x9107*x9109)));
evalcond[1]=(((r11*x9110))+(((-1.0)*r12*x9108))+(((-1.0)*x9104*x9109)));
evalcond[2]=((((-1.0)*r02*x9109))+((x9103*x9106))+(((-1.0)*x9105*x9108)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9108))+(((-1.0)*x9106*x9109))+((x9102*x9105)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9109))+(((-1.0)*r21*sj5*x9108))+((x9103*x9107)));
evalcond[5]=((((-1.0)*r11*sj5*x9108))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x9109))+((x9103*x9104)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9111=((1.0)*cj5);
CheckValue<IkReal> x9112=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x9111)))),-1);
if(!x9112.valid){
continue;
}
CheckValue<IkReal> x9113 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x9111)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9113.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9112.value)))+(x9113.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9114=IKsin(j4);
IkReal x9115=IKcos(j4);
IkReal x9116=(cj5*r10);
IkReal x9117=(r01*sj5);
IkReal x9118=(cj5*r00);
IkReal x9119=(cj5*r20);
IkReal x9120=((1.0)*x9115);
IkReal x9121=((1.0)*x9114);
IkReal x9122=(sj5*x9114);
evalcond[0]=((((-1.0)*x9119*x9121))+(((-1.0)*r22*x9120))+((r21*x9122)));
evalcond[1]=((((-1.0)*r12*x9120))+(((-1.0)*x9116*x9121))+((r11*x9122)));
evalcond[2]=((((-1.0)*r02*x9121))+(((-1.0)*x9117*x9120))+((x9115*x9118)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9120))+(((-1.0)*x9118*x9121))+((x9114*x9117)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x9120))+((x9115*x9119))+((cj1*sj2))+(((-1.0)*r22*x9121)));
evalcond[5]=((((-1.0)*r12*x9121))+((x9115*x9116))+(((-1.0)*r11*sj5*x9120))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9123=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x9123.valid){
continue;
}
CheckValue<IkReal> x9124 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9124.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9123.value)))+(x9124.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9125=IKsin(j4);
IkReal x9126=IKcos(j4);
IkReal x9127=(cj5*r10);
IkReal x9128=(r01*sj5);
IkReal x9129=(cj5*r00);
IkReal x9130=(cj5*r20);
IkReal x9131=((1.0)*x9126);
IkReal x9132=((1.0)*x9125);
IkReal x9133=(sj5*x9125);
evalcond[0]=((((-1.0)*x9130*x9132))+(((-1.0)*r22*x9131))+((r21*x9133)));
evalcond[1]=((((-1.0)*x9127*x9132))+(((-1.0)*r12*x9131))+((r11*x9133)));
evalcond[2]=((((-1.0)*x9128*x9131))+(((-1.0)*r02*x9132))+((x9126*x9129)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9131))+((x9125*x9128))+(((-1.0)*x9129*x9132)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9132))+(((-1.0)*r21*sj5*x9131))+((x9126*x9130)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x9126*x9127))+(((-1.0)*r12*x9132))+(((-1.0)*r11*sj5*x9131)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x9134=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x9134;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x9134);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x9135=((1.0)*cj5);
IkReal x9136=((((-1.0)*r21*x9135))+(((-1.0)*r20*sj5)));
j4eval[0]=x9136;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x9135))))));
j4eval[2]=IKsign(x9136);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x9137=cj5*cj5;
IkReal x9138=r01*r01;
IkReal x9139=(cj5*r00);
IkReal x9140=(r01*sj5);
IkReal x9141=((((-2.0)*x9139*x9140))+x9138+(((-1.0)*x9137*x9138))+((x9137*(r00*r00)))+(r02*r02));
j4eval[0]=x9141;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x9140))+x9139))));
j4eval[2]=IKsign(x9141);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9142=cj5*cj5;
IkReal x9143=r01*r01;
IkReal x9144=(r01*sj5);
IkReal x9145=(cj5*r00);
CheckValue<IkReal> x9146=IKPowWithIntegerCheck(IKsign((x9143+((x9142*(r00*r00)))+(((-2.0)*x9144*x9145))+(((-1.0)*x9142*x9143))+(r02*r02))),-1);
if(!x9146.valid){
continue;
}
CheckValue<IkReal> x9147 = IKatan2WithCheck(IkReal(((((-1.0)*x9144))+x9145)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9147.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9146.value)))+(x9147.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9148=IKsin(j4);
IkReal x9149=IKcos(j4);
IkReal x9150=(cj5*r10);
IkReal x9151=(r01*sj5);
IkReal x9152=(cj5*r00);
IkReal x9153=(cj5*r20);
IkReal x9154=((1.0)*x9149);
IkReal x9155=((1.0)*x9148);
IkReal x9156=(sj5*x9148);
evalcond[0]=((((-1.0)*x9153*x9155))+(((-1.0)*r22*x9154))+((r21*x9156)));
evalcond[1]=(((r11*x9156))+(((-1.0)*r12*x9154))+(((-1.0)*x9150*x9155)));
evalcond[2]=((((-1.0)*r02*x9155))+((x9149*x9152))+(((-1.0)*x9151*x9154)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9154))+((x9148*x9151))+(((-1.0)*x9152*x9155)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x9154))+((cj1*sj2))+((x9149*x9153))+(((-1.0)*r22*x9155)));
evalcond[5]=((((-1.0)*r12*x9155))+(((-1.0)*sj1*sj2))+((x9149*x9150))+(((-1.0)*r11*sj5*x9154))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9157=((1.0)*cj5);
CheckValue<IkReal> x9158 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x9157)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9158.valid){
continue;
}
CheckValue<IkReal> x9159=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9157))+(((-1.0)*r20*sj5)))),-1);
if(!x9159.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9158.value)+(((1.5707963267949)*(x9159.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9160=IKsin(j4);
IkReal x9161=IKcos(j4);
IkReal x9162=(cj5*r10);
IkReal x9163=(r01*sj5);
IkReal x9164=(cj5*r00);
IkReal x9165=(cj5*r20);
IkReal x9166=((1.0)*x9161);
IkReal x9167=((1.0)*x9160);
IkReal x9168=(sj5*x9160);
evalcond[0]=((((-1.0)*r22*x9166))+(((-1.0)*x9165*x9167))+((r21*x9168)));
evalcond[1]=((((-1.0)*r12*x9166))+(((-1.0)*x9162*x9167))+((r11*x9168)));
evalcond[2]=((((-1.0)*x9163*x9166))+((x9161*x9164))+(((-1.0)*r02*x9167)));
evalcond[3]=((1.0)+((x9160*x9163))+(((-1.0)*r02*x9166))+(((-1.0)*x9164*x9167)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x9167))+((cj1*sj2))+((x9161*x9165))+(((-1.0)*r21*sj5*x9166)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r12*x9167))+((x9161*x9162))+((cj1*cj2))+(((-1.0)*r11*sj5*x9166)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9169 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9169.valid){
continue;
}
CheckValue<IkReal> x9170=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x9170.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9169.value)+(((1.5707963267949)*(x9170.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9171=IKsin(j4);
IkReal x9172=IKcos(j4);
IkReal x9173=(cj5*r10);
IkReal x9174=(r01*sj5);
IkReal x9175=(cj5*r00);
IkReal x9176=(cj5*r20);
IkReal x9177=((1.0)*x9172);
IkReal x9178=((1.0)*x9171);
IkReal x9179=(sj5*x9171);
evalcond[0]=(((r21*x9179))+(((-1.0)*r22*x9177))+(((-1.0)*x9176*x9178)));
evalcond[1]=((((-1.0)*x9173*x9178))+(((-1.0)*r12*x9177))+((r11*x9179)));
evalcond[2]=((((-1.0)*r02*x9178))+((x9172*x9175))+(((-1.0)*x9174*x9177)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9177))+(((-1.0)*x9175*x9178))+((x9171*x9174)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9178))+((x9172*x9176))+(((-1.0)*r21*sj5*x9177)));
evalcond[5]=((((-1.0)*r11*sj5*x9177))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x9178))+((cj1*cj2))+((x9172*x9173)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9180=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9180);
rxp1_1=(px*r21);
rxp1_2=(r11*x9180);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9181=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9181);
rxp1_1=(px*r21);
rxp1_2=(r11*x9181);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9182=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9182);
rxp1_1=(px*r21);
rxp1_2=(r11*x9182);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9185=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x9185.valid){
continue;
}
IkReal x9183=x9185.value;
IkReal x9184=(cj0*x9183);
cj4array[0]=(((cj1*cj2*x9184))+(((-1.0)*sj1*sj2*x9184)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9186=IKsin(j4);
IkReal x9187=IKcos(j4);
IkReal x9188=(r21*sj5);
IkReal x9189=(cj5*r20);
IkReal x9190=((1.0)*x9186);
IkReal x9191=((1.0)*x9187);
evalcond[0]=((-1.0)*r02*x9186);
evalcond[1]=((((-1.0)*r02*x9191))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*x9189*x9190))+((x9186*x9188)));
evalcond[3]=(((r11*sj5*x9186))+(((-1.0)*cj5*r10*x9190)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x9188*x9191))+((cj1*sj2))+((x9187*x9189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9194=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x9194.valid){
continue;
}
IkReal x9192=x9194.value;
IkReal x9193=((1.0)*x9192);
cj4array[0]=((((-1.0)*cj2*sj1*x9193))+(((-1.0)*cj1*sj2*x9193)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9195=IKsin(j4);
IkReal x9196=IKcos(j4);
IkReal x9197=(r11*sj5);
IkReal x9198=((1.0)*cj0);
IkReal x9199=((1.0)*x9196);
IkReal x9200=((1.0)*cj5*x9195);
evalcond[0]=((-1.0)*r02*x9195);
evalcond[1]=((((-1.0)*r02*x9199))+(((-1.0)*x9198)));
evalcond[2]=(((r21*sj5*x9195))+(((-1.0)*r20*x9200)));
evalcond[3]=(((x9195*x9197))+(((-1.0)*r10*x9200)));
evalcond[4]=(((cj5*r10*x9196))+(((-1.0)*x9197*x9199))+(((-1.0)*cj1*cj2*x9198))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9201=IKPowWithIntegerCheck(r02,-1);
if(!x9201.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x9201.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9202=IKsin(j4);
IkReal x9203=IKcos(j4);
IkReal x9204=(r21*sj5);
IkReal x9205=(r11*sj5);
IkReal x9206=(cj5*x9203);
IkReal x9207=((1.0)*x9203);
IkReal x9208=((1.0)*cj5*x9202);
evalcond[0]=((-1.0)*r02*x9202);
evalcond[1]=(((x9202*x9204))+(((-1.0)*r20*x9208)));
evalcond[2]=(((x9202*x9205))+(((-1.0)*r10*x9208)));
evalcond[3]=(((r20*x9206))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9204*x9207)));
evalcond[4]=((((-1.0)*cj0*cj1*cj2))+((r10*x9206))+(((-1.0)*x9205*x9207))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9209=((1.0)*cj0);
IkReal x9210=((1.0)*cj5);
CheckValue<IkReal> x9211=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9210))+(((-1.0)*r20*sj5)))),-1);
if(!x9211.valid){
continue;
}
CheckValue<IkReal> x9212 = IKatan2WithCheck(IkReal((((r02*sj0))+(((-1.0)*r12*x9209)))),IkReal(((((-1.0)*r11*sj5*x9209))+((cj0*cj5*r10))+(((-1.0)*r00*sj0*x9210))+((r01*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9212.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9211.value)))+(x9212.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9213=IKsin(j4);
IkReal x9214=IKcos(j4);
IkReal x9215=(cj1*cj2);
IkReal x9216=(cj5*r10);
IkReal x9217=(sj1*sj2);
IkReal x9218=(r01*sj5);
IkReal x9219=(cj5*r00);
IkReal x9220=((1.0)*cj0);
IkReal x9221=((1.0)*sj0);
IkReal x9222=(cj5*r20);
IkReal x9223=((1.0)*x9214);
IkReal x9224=((1.0)*x9213);
IkReal x9225=(sj5*x9213);
evalcond[0]=(((r21*x9225))+(((-1.0)*x9222*x9224))+(((-1.0)*r22*x9223)));
evalcond[1]=((((-1.0)*x9220))+(((-1.0)*r02*x9223))+(((-1.0)*x9219*x9224))+((x9213*x9218)));
evalcond[2]=((((-1.0)*x9221))+(((-1.0)*x9216*x9224))+((r11*x9225))+(((-1.0)*r12*x9223)));
evalcond[3]=(((cj2*sj1))+((x9214*x9222))+((cj1*sj2))+(((-1.0)*r21*sj5*x9223))+(((-1.0)*r22*x9224)));
evalcond[4]=((((-1.0)*r02*x9224))+((x9214*x9219))+(((-1.0)*x9217*x9221))+((sj0*x9215))+(((-1.0)*x9218*x9223)));
evalcond[5]=(((x9214*x9216))+(((-1.0)*r11*sj5*x9223))+((cj0*x9217))+(((-1.0)*r12*x9224))+(((-1.0)*x9215*x9220)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9226=((1.0)*cj5);
CheckValue<IkReal> x9227 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x9226)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9227.valid){
continue;
}
CheckValue<IkReal> x9228=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x9226)))),-1);
if(!x9228.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9227.value)+(((1.5707963267949)*(x9228.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9229=IKsin(j4);
IkReal x9230=IKcos(j4);
IkReal x9231=(cj1*cj2);
IkReal x9232=(cj5*r10);
IkReal x9233=(sj1*sj2);
IkReal x9234=(r01*sj5);
IkReal x9235=(cj5*r00);
IkReal x9236=((1.0)*cj0);
IkReal x9237=((1.0)*sj0);
IkReal x9238=(cj5*r20);
IkReal x9239=((1.0)*x9230);
IkReal x9240=((1.0)*x9229);
IkReal x9241=(sj5*x9229);
evalcond[0]=(((r21*x9241))+(((-1.0)*x9238*x9240))+(((-1.0)*r22*x9239)));
evalcond[1]=(((x9229*x9234))+(((-1.0)*x9235*x9240))+(((-1.0)*x9236))+(((-1.0)*r02*x9239)));
evalcond[2]=((((-1.0)*r12*x9239))+(((-1.0)*x9237))+(((-1.0)*x9232*x9240))+((r11*x9241)));
evalcond[3]=((((-1.0)*r22*x9240))+((cj2*sj1))+((cj1*sj2))+((x9230*x9238))+(((-1.0)*r21*sj5*x9239)));
evalcond[4]=((((-1.0)*x9233*x9237))+(((-1.0)*r02*x9240))+((x9230*x9235))+((sj0*x9231))+(((-1.0)*x9234*x9239)));
evalcond[5]=(((cj0*x9233))+(((-1.0)*r12*x9240))+((x9230*x9232))+(((-1.0)*x9231*x9236))+(((-1.0)*r11*sj5*x9239)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9242=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x9242.valid){
continue;
}
CheckValue<IkReal> x9243 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9243.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9242.value)))+(x9243.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9244=IKsin(j4);
IkReal x9245=IKcos(j4);
IkReal x9246=(cj1*cj2);
IkReal x9247=(cj5*r10);
IkReal x9248=(sj1*sj2);
IkReal x9249=(r01*sj5);
IkReal x9250=(cj5*r00);
IkReal x9251=((1.0)*cj0);
IkReal x9252=((1.0)*sj0);
IkReal x9253=(cj5*r20);
IkReal x9254=((1.0)*x9245);
IkReal x9255=((1.0)*x9244);
IkReal x9256=(sj5*x9244);
evalcond[0]=((((-1.0)*x9253*x9255))+(((-1.0)*r22*x9254))+((r21*x9256)));
evalcond[1]=((((-1.0)*x9250*x9255))+((x9244*x9249))+(((-1.0)*x9251))+(((-1.0)*r02*x9254)));
evalcond[2]=((((-1.0)*x9247*x9255))+(((-1.0)*r12*x9254))+(((-1.0)*x9252))+((r11*x9256)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x9255))+(((-1.0)*r21*sj5*x9254))+((cj1*sj2))+((x9245*x9253)));
evalcond[4]=(((x9245*x9250))+((sj0*x9246))+(((-1.0)*x9249*x9254))+(((-1.0)*x9248*x9252))+(((-1.0)*r02*x9255)));
evalcond[5]=((((-1.0)*r11*sj5*x9254))+((cj0*x9248))+(((-1.0)*x9246*x9251))+(((-1.0)*r12*x9255))+((x9245*x9247)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x9257=cj1*cj1;
IkReal x9258=cj2*cj2;
IkReal x9259=(sj1*sj2);
IkReal x9260=((156900000.0)*py);
IkReal x9261=(cj1*cj5);
IkReal x9262=((14850585.0)*cj2);
IkReal x9263=(r00*sj5);
IkReal x9264=((16090500.0)*cj1);
IkReal x9265=((4132419.0)*cj5);
IkReal x9266=(r10*sj5);
IkReal x9267=((170000000.0)*cj1);
IkReal x9268=((156900000.0)*px);
IkReal x9269=(cj1*cj2);
IkReal x9270=((14850585.0)*cj5);
CheckValue<IkReal> x9271 = IKatan2WithCheck(IkReal(((((-43660000.0)*py))+(((-16090500.0)*r01*x9261))+((x9259*x9268))+(((14850585.0)*x9259*x9263))+((r01*x9259*x9270))+(((-1.0)*px*x9267))+(((-1.0)*x9263*x9264))+(((-1.0)*r01*x9261*x9262))+(((-4132419.0)*x9266))+(((-1.0)*cj1*x9262*x9263))+(((-1.0)*x9268*x9269))+(((-1.0)*r11*x9265)))),IkReal(((((-43660000.0)*px))+(((-1.0)*x9259*x9260))+(((-1.0)*r11*x9259*x9270))+((py*x9267))+(((-4132419.0)*x9263))+((x9264*x9266))+((r11*x9261*x9262))+((x9260*x9269))+(((16090500.0)*r11*x9261))+((cj1*x9262*x9266))+(((-14850585.0)*x9259*x9266))+(((-1.0)*r01*x9265)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9271.valid){
continue;
}
CheckValue<IkReal> x9272=IKPowWithIntegerCheck(IKsign(((66309514.0)+(((-61544025.0)*x9258))+(((123088050.0)*x9257*x9258))+(((-123088050.0)*x9259*x9269))+(((-133365000.0)*cj1*x9259))+(((133365000.0)*cj2*x9257))+(((10705975.0)*x9257)))),-1);
if(!x9272.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x9271.value)+(((1.5707963267949)*(x9272.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x9273=IKsin(j0);
IkReal x9274=IKcos(j0);
IkReal x9275=((0.425)*cj1);
IkReal x9276=(cj1*cj2);
IkReal x9277=((0.09465)*cj5);
IkReal x9278=(sj1*sj2);
IkReal x9279=((0.09465)*sj5);
IkReal x9280=((0.39225)*x9273);
IkReal x9281=((0.39225)*x9274);
evalcond[0]=((((-1.0)*x9276*x9280))+(((-1.0)*x9273*x9275))+(((-1.0)*px))+(((-0.10915)*x9274))+((x9278*x9280))+(((-1.0)*r00*x9279))+(((-1.0)*r01*x9277)));
evalcond[1]=(((x9276*x9281))+(((-1.0)*x9278*x9281))+(((-1.0)*py))+(((-0.10915)*x9273))+(((-1.0)*r10*x9279))+((x9274*x9275))+(((-1.0)*r11*x9277)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x9282=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x9282;
j4eval[1]=IKsign(x9282);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9283=((1.0)*cj5);
IkReal x9284=((((-1.0)*r11*x9283))+(((-1.0)*r10*sj5)));
j4eval[0]=x9284;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x9283)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x9284);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9285=((1.0)*cj0);
IkReal x9286=((1.0)*cj5);
IkReal x9287=((((-1.0)*r21*x9286))+(((-1.0)*r20*sj5)));
j4eval[0]=x9287;
j4eval[1]=((IKabs(((((-1.0)*r12*x9285))+((r02*sj0)))))+(IKabs((((cj0*cj5*r10))+(((-1.0)*r11*sj5*x9285))+((r01*sj0*sj5))+(((-1.0)*r00*sj0*x9286))))));
j4eval[2]=IKsign(x9287);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x9288=((-1.0)*r20);
IkReal x9290 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x9290)==0){
continue;
}
IkReal x9289=pow(x9290,-0.5);
CheckValue<IkReal> x9291 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9288),IKFAST_ATAN2_MAGTHRESH);
if(!x9291.valid){
continue;
}
IkReal gconst0=((-1.0)*(x9291.value));
IkReal gconst1=(r21*x9289);
IkReal gconst2=(x9288*x9289);
CheckValue<IkReal> x9292 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9292.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x9292.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9293=((-1.0)*r20);
IkReal x9294=x9289;
CheckValue<IkReal> x9296 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9293),IKFAST_ATAN2_MAGTHRESH);
if(!x9296.valid){
continue;
}
IkReal x9295=((-1.0)*(x9296.value));
sj5=gconst1;
cj5=gconst2;
j5=x9295;
IkReal gconst0=x9295;
IkReal gconst1=(r21*x9294);
IkReal gconst2=(x9293*x9294);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9297=((-1.0)*r20);
IkReal x9298=x9289;
CheckValue<IkReal> x9300 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9297),IKFAST_ATAN2_MAGTHRESH);
if(!x9300.valid){
continue;
}
IkReal x9299=((-1.0)*(x9300.value));
sj5=gconst1;
cj5=gconst2;
j5=x9299;
IkReal gconst0=x9299;
IkReal gconst1=(r21*x9298);
IkReal gconst2=(x9297*x9298);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9301=((-1.0)*r20);
IkReal x9302=x9289;
CheckValue<IkReal> x9304 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9301),IKFAST_ATAN2_MAGTHRESH);
if(!x9304.valid){
continue;
}
IkReal x9303=((-1.0)*(x9304.value));
sj5=gconst1;
cj5=gconst2;
j5=x9303;
IkReal gconst0=x9303;
IkReal gconst1=(r21*x9302);
IkReal gconst2=(x9301*x9302);
IkReal x9305=r22*r22;
CheckValue<IkReal> x9309=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x9305))),-1);
if(!x9309.valid){
continue;
}
IkReal x9306=x9309.value;
IkReal x9307=(sj3*x9306);
IkReal x9308=((((2.0)*x9307*(r20*r20)*(r21*r21)))+((x9307*(r21*r21*r21*r21)))+((x9307*(r20*r20*r20*r20)))+((sj3*x9305)));
j4eval[0]=x9308;
j4eval[1]=IKsign(x9308);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9310=((-1.0)*r20);
IkReal x9311=x9289;
CheckValue<IkReal> x9313 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9310),IKFAST_ATAN2_MAGTHRESH);
if(!x9313.valid){
continue;
}
IkReal x9312=((-1.0)*(x9313.value));
sj5=gconst1;
cj5=gconst2;
j5=x9312;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x9312;
IkReal gconst1=(r21*x9311);
IkReal gconst2=(x9310*x9311);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9314=((-1.0)*r20);
IkReal x9315=x9289;
CheckValue<IkReal> x9317 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9314),IKFAST_ATAN2_MAGTHRESH);
if(!x9317.valid){
continue;
}
IkReal x9316=((-1.0)*(x9317.value));
sj5=gconst1;
cj5=gconst2;
j5=x9316;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x9316;
IkReal gconst1=(r21*x9315);
IkReal gconst2=(x9314*x9315);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9318=((-1.0)*r20);
IkReal x9319=x9289;
CheckValue<IkReal> x9321 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9318),IKFAST_ATAN2_MAGTHRESH);
if(!x9321.valid){
continue;
}
IkReal x9320=((-1.0)*(x9321.value));
sj5=gconst1;
cj5=gconst2;
j5=x9320;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x9320;
IkReal gconst1=(r21*x9319);
IkReal gconst2=(x9318*x9319);
IkReal x9322=((1.0)*(r22*r22));
CheckValue<IkReal> x9326=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x9322))),-1);
if(!x9326.valid){
continue;
}
IkReal x9323=x9326.value;
IkReal x9324=((1.0)*x9323);
IkReal x9325=((((-1.0)*x9322))+(((-2.0)*x9323*(r20*r20)*(r21*r21)))+(((-1.0)*x9324*(r21*r21*r21*r21)))+(((-1.0)*x9324*(r20*r20*r20*r20))));
j4eval[0]=x9325;
j4eval[1]=IKsign(x9325);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9327=((-1.0)*r20);
IkReal x9328=x9289;
CheckValue<IkReal> x9330 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9327),IKFAST_ATAN2_MAGTHRESH);
if(!x9330.valid){
continue;
}
IkReal x9329=((-1.0)*(x9330.value));
sj5=gconst1;
cj5=gconst2;
j5=x9329;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9329;
IkReal gconst1=(r21*x9328);
IkReal gconst2=(x9327*x9328);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9331=((-1.0)*r20);
IkReal x9332=x9289;
CheckValue<IkReal> x9334 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9331),IKFAST_ATAN2_MAGTHRESH);
if(!x9334.valid){
continue;
}
IkReal x9333=((-1.0)*(x9334.value));
sj5=gconst1;
cj5=gconst2;
j5=x9333;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9333;
IkReal gconst1=(r21*x9332);
IkReal gconst2=(x9331*x9332);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9335=((-1.0)*r20);
IkReal x9336=x9289;
CheckValue<IkReal> x9338 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9335),IKFAST_ATAN2_MAGTHRESH);
if(!x9338.valid){
continue;
}
IkReal x9337=((-1.0)*(x9338.value));
sj5=gconst1;
cj5=gconst2;
j5=x9337;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9337;
IkReal gconst1=(r21*x9336);
IkReal gconst2=(x9335*x9336);
IkReal x9339=r22*r22;
IkReal x9340=(cj1*r12*sj2);
IkReal x9341=(cj2*r12*sj1);
CheckValue<IkReal> x9345=IKPowWithIntegerCheck(((-1.0)+x9339),-1);
if(!x9345.valid){
continue;
}
IkReal x9342=x9345.value;
if((((1.0)+(((-1.0)*x9339)))) < -0.00001)
continue;
IkReal x9343=IKsqrt(((1.0)+(((-1.0)*x9339))));
IkReal x9344=(r22*x9342*x9343);
j4eval[0]=((IKabs((((x9341*x9344))+((x9340*x9344)))))+(IKabs(((((-1.0)*x9341))+(((-1.0)*x9340))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9346=(cj1*sj2);
IkReal x9347=(cj2*sj1);
IkReal x9348=((1.0)*r12);
IkReal x9349=(gconst1*r11);
IkReal x9350=((1.0)*gconst2*r10);
CheckValue<IkReal> x9351=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x9351.valid){
continue;
}
CheckValue<IkReal> x9352 = IKatan2WithCheck(IkReal((((x9346*x9349))+((x9347*x9349))+(((-1.0)*x9347*x9350))+(((-1.0)*x9346*x9350)))),IkReal(((((-1.0)*x9346*x9348))+(((-1.0)*x9347*x9348)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9352.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9351.value)))+(x9352.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9353=IKcos(j4);
IkReal x9354=IKsin(j4);
IkReal x9355=((1.0)*x9353);
IkReal x9356=(gconst1*x9353);
IkReal x9357=(gconst1*x9354);
IkReal x9358=((1.0)*gconst2*x9354);
evalcond[0]=(((r11*x9356))+(((-1.0)*gconst2*r10*x9355))+((r12*x9354)));
evalcond[1]=((((-1.0)*r22*x9355))+((r21*x9357))+(((-1.0)*r20*x9358)));
evalcond[2]=((((-1.0)*r02*x9355))+((r01*x9357))+(((-1.0)*r00*x9358)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x9358))+((r11*x9357))+(((-1.0)*r12*x9355)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst2*r20*x9355))+((r21*x9356))+((r22*x9354)));
evalcond[5]=(((r01*x9356))+(((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r00*x9355))+((cj1*cj2))+((r02*x9354)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9359=(gconst1*r11);
IkReal x9360=(gconst2*r10);
CheckValue<IkReal> x9361 = IKatan2WithCheck(IkReal((x9359+(((-1.0)*x9360)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9361.valid){
continue;
}
CheckValue<IkReal> x9362=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x9360*x9360)+(x9359*x9359)+(((-2.0)*x9359*x9360)))),-1);
if(!x9362.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9361.value)+(((1.5707963267949)*(x9362.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9363=IKcos(j4);
IkReal x9364=IKsin(j4);
IkReal x9365=((1.0)*x9363);
IkReal x9366=(gconst1*x9363);
IkReal x9367=(gconst1*x9364);
IkReal x9368=((1.0)*gconst2*x9364);
evalcond[0]=(((r12*x9364))+((r11*x9366))+(((-1.0)*gconst2*r10*x9365)));
evalcond[1]=(((r21*x9367))+(((-1.0)*r20*x9368))+(((-1.0)*r22*x9365)));
evalcond[2]=((((-1.0)*r02*x9365))+(((-1.0)*r00*x9368))+((r01*x9367)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x9368))+((r11*x9367))+(((-1.0)*r12*x9365)));
evalcond[4]=(((r21*x9366))+((cj2*sj1))+((cj1*sj2))+((r22*x9364))+(((-1.0)*gconst2*r20*x9365)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r02*x9364))+((r01*x9366))+((cj1*cj2))+(((-1.0)*gconst2*r00*x9365)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9369 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9369.valid){
continue;
}
CheckValue<IkReal> x9370=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9370.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9369.value)+(((1.5707963267949)*(x9370.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9371=IKcos(j4);
IkReal x9372=IKsin(j4);
IkReal x9373=((1.0)*x9371);
IkReal x9374=(gconst1*x9371);
IkReal x9375=(gconst1*x9372);
IkReal x9376=((1.0)*gconst2*x9372);
evalcond[0]=((((-1.0)*gconst2*r10*x9373))+((r11*x9374))+((r12*x9372)));
evalcond[1]=(((r21*x9375))+(((-1.0)*r20*x9376))+(((-1.0)*r22*x9373)));
evalcond[2]=((((-1.0)*r00*x9376))+(((-1.0)*r02*x9373))+((r01*x9375)));
evalcond[3]=((-1.0)+((r11*x9375))+(((-1.0)*r10*x9376))+(((-1.0)*r12*x9373)));
evalcond[4]=(((cj2*sj1))+((r21*x9374))+((r22*x9372))+((cj1*sj2))+(((-1.0)*gconst2*r20*x9373)));
evalcond[5]=(((r02*x9372))+(((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r00*x9373))+((cj1*cj2))+((r01*x9374)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9377=((-1.0)*r20);
IkReal x9378=x9289;
CheckValue<IkReal> x9380 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9377),IKFAST_ATAN2_MAGTHRESH);
if(!x9380.valid){
continue;
}
IkReal x9379=((-1.0)*(x9380.value));
sj5=gconst1;
cj5=gconst2;
j5=x9379;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9379;
IkReal gconst1=(r21*x9378);
IkReal gconst2=(x9377*x9378);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9381=((-1.0)*r20);
IkReal x9382=x9289;
CheckValue<IkReal> x9384 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9381),IKFAST_ATAN2_MAGTHRESH);
if(!x9384.valid){
continue;
}
IkReal x9383=((-1.0)*(x9384.value));
sj5=gconst1;
cj5=gconst2;
j5=x9383;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9383;
IkReal gconst1=(r21*x9382);
IkReal gconst2=(x9381*x9382);
IkReal x9385=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9389=IKPowWithIntegerCheck(x9385,-1);
if(!x9389.valid){
continue;
}
IkReal x9386=x9389.value;
IkReal x9387=((1.0)*x9386);
IkReal x9388=((((-1.0)*(r12*r12)))+(((-1.0)*x9387*(r10*r10)*(r20*r20)))+(((-1.0)*x9387*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x9386)));
j4eval[0]=x9388;
j4eval[1]=r12;
j4eval[2]=x9385;
j4eval[3]=IKsign(x9388);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9390=((-1.0)*r20);
IkReal x9391=x9289;
CheckValue<IkReal> x9393 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9390),IKFAST_ATAN2_MAGTHRESH);
if(!x9393.valid){
continue;
}
IkReal x9392=((-1.0)*(x9393.value));
sj5=gconst1;
cj5=gconst2;
j5=x9392;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9392;
IkReal gconst1=(r21*x9391);
IkReal gconst2=(x9390*x9391);
IkReal x9394=r22*r22;
IkReal x9395=(cj1*r12*sj2);
IkReal x9396=(cj2*r12*sj1);
CheckValue<IkReal> x9400=IKPowWithIntegerCheck(((-1.0)+x9394),-1);
if(!x9400.valid){
continue;
}
IkReal x9397=x9400.value;
if((((1.0)+(((-1.0)*x9394)))) < -0.00001)
continue;
IkReal x9398=IKsqrt(((1.0)+(((-1.0)*x9394))));
IkReal x9399=(r22*x9397*x9398);
j4eval[0]=((IKabs(((((-1.0)*x9396))+(((-1.0)*x9395)))))+(IKabs((((x9396*x9399))+((x9395*x9399))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9401=(cj1*sj2);
IkReal x9402=(cj2*sj1);
IkReal x9403=((1.0)*r12);
IkReal x9404=(gconst1*r11);
IkReal x9405=((1.0)*gconst2*r10);
CheckValue<IkReal> x9406=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x9406.valid){
continue;
}
CheckValue<IkReal> x9407 = IKatan2WithCheck(IkReal((((x9401*x9404))+((x9402*x9404))+(((-1.0)*x9401*x9405))+(((-1.0)*x9402*x9405)))),IkReal(((((-1.0)*x9401*x9403))+(((-1.0)*x9402*x9403)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9407.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9406.value)))+(x9407.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9408=IKcos(j4);
IkReal x9409=IKsin(j4);
IkReal x9410=((1.0)*x9408);
IkReal x9411=(gconst1*x9408);
IkReal x9412=(gconst1*x9409);
IkReal x9413=((1.0)*gconst2*x9409);
evalcond[0]=(((r12*x9409))+((r11*x9411))+(((-1.0)*gconst2*r10*x9410)));
evalcond[1]=((((-1.0)*r20*x9413))+((r21*x9412))+(((-1.0)*r22*x9410)));
evalcond[2]=((((-1.0)*r02*x9410))+(((-1.0)*r00*x9413))+((r01*x9412)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9410))+((r11*x9412))+(((-1.0)*r10*x9413)));
evalcond[4]=(((r22*x9409))+((cj2*sj1))+((r21*x9411))+((cj1*sj2))+(((-1.0)*gconst2*r20*x9410)));
evalcond[5]=((((-1.0)*gconst2*r00*x9410))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x9411))+((r02*x9409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9414=(gconst2*r10);
IkReal x9415=(gconst1*r11);
CheckValue<IkReal> x9416=IKPowWithIntegerCheck(IKsign(((((2.0)*x9414*x9415))+(((-1.0)*(r12*r12)))+(((-1.0)*(x9415*x9415)))+(((-1.0)*(x9414*x9414))))),-1);
if(!x9416.valid){
continue;
}
CheckValue<IkReal> x9417 = IKatan2WithCheck(IkReal((x9415+(((-1.0)*x9414)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9417.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9416.value)))+(x9417.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9418=IKcos(j4);
IkReal x9419=IKsin(j4);
IkReal x9420=((1.0)*x9418);
IkReal x9421=(gconst1*x9418);
IkReal x9422=(gconst1*x9419);
IkReal x9423=((1.0)*gconst2*x9419);
evalcond[0]=((((-1.0)*gconst2*r10*x9420))+((r12*x9419))+((r11*x9421)));
evalcond[1]=((((-1.0)*r20*x9423))+((r21*x9422))+(((-1.0)*r22*x9420)));
evalcond[2]=(((r01*x9422))+(((-1.0)*r02*x9420))+(((-1.0)*r00*x9423)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9420))+(((-1.0)*r10*x9423))+((r11*x9422)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9419))+((r21*x9421))+(((-1.0)*gconst2*r20*x9420)));
evalcond[5]=(((r01*x9421))+((r02*x9419))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r00*x9420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9424=((1.0)*gconst2);
CheckValue<IkReal> x9425=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9424)))),-1);
if(!x9425.valid){
continue;
}
CheckValue<IkReal> x9426 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9424))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9426.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9425.value)))+(x9426.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9427=IKcos(j4);
IkReal x9428=IKsin(j4);
IkReal x9429=((1.0)*x9427);
IkReal x9430=(gconst1*x9427);
IkReal x9431=(gconst1*x9428);
IkReal x9432=((1.0)*gconst2*x9428);
evalcond[0]=(((r12*x9428))+((r11*x9430))+(((-1.0)*gconst2*r10*x9429)));
evalcond[1]=((((-1.0)*r20*x9432))+((r21*x9431))+(((-1.0)*r22*x9429)));
evalcond[2]=((((-1.0)*r02*x9429))+(((-1.0)*r00*x9432))+((r01*x9431)));
evalcond[3]=((1.0)+((r11*x9431))+(((-1.0)*r10*x9432))+(((-1.0)*r12*x9429)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x9430))+(((-1.0)*gconst2*r20*x9429))+((r22*x9428)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x9428))+((r01*x9430))+(((-1.0)*gconst2*r00*x9429)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9433=((-1.0)*r20);
IkReal x9434=x9289;
CheckValue<IkReal> x9436 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9433),IKFAST_ATAN2_MAGTHRESH);
if(!x9436.valid){
continue;
}
IkReal x9435=((-1.0)*(x9436.value));
sj5=gconst1;
cj5=gconst2;
j5=x9435;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9435;
IkReal gconst1=(r21*x9434);
IkReal gconst2=(x9433*x9434);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9437=((-1.0)*r20);
IkReal x9438=x9289;
CheckValue<IkReal> x9440 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9437),IKFAST_ATAN2_MAGTHRESH);
if(!x9440.valid){
continue;
}
IkReal x9439=((-1.0)*(x9440.value));
sj5=gconst1;
cj5=gconst2;
j5=x9439;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9439;
IkReal gconst1=(r21*x9438);
IkReal gconst2=(x9437*x9438);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9441=((-1.0)*r20);
IkReal x9442=x9289;
CheckValue<IkReal> x9444 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9441),IKFAST_ATAN2_MAGTHRESH);
if(!x9444.valid){
continue;
}
IkReal x9443=((-1.0)*(x9444.value));
sj5=gconst1;
cj5=gconst2;
j5=x9443;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9443;
IkReal gconst1=(r21*x9442);
IkReal gconst2=(x9441*x9442);
IkReal x9445=r22*r22;
IkReal x9446=((1.0)*r02);
IkReal x9447=(cj1*sj2);
IkReal x9448=(cj2*sj1);
CheckValue<IkReal> x9452=IKPowWithIntegerCheck(((-1.0)+x9445),-1);
if(!x9452.valid){
continue;
}
IkReal x9449=x9452.value;
if((((1.0)+(((-1.0)*x9445)))) < -0.00001)
continue;
IkReal x9450=IKsqrt(((1.0)+(((-1.0)*x9445))));
IkReal x9451=(r02*r22*x9449*x9450);
j4eval[0]=((IKabs(((((-1.0)*x9446*x9447))+(((-1.0)*x9446*x9448)))))+(IKabs((((x9448*x9451))+((x9447*x9451))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9453=(cj1*sj2);
IkReal x9454=(gconst1*r01);
IkReal x9455=((1.0)*r02);
IkReal x9456=(cj2*sj1);
IkReal x9457=((1.0)*gconst2*r00);
CheckValue<IkReal> x9458 = IKatan2WithCheck(IkReal(((((-1.0)*x9456*x9457))+((x9453*x9454))+(((-1.0)*x9453*x9457))+((x9454*x9456)))),IkReal(((((-1.0)*x9453*x9455))+(((-1.0)*x9455*x9456)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9458.valid){
continue;
}
CheckValue<IkReal> x9459=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9459.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9458.value)+(((1.5707963267949)*(x9459.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9460=IKcos(j4);
IkReal x9461=IKsin(j4);
IkReal x9462=((1.0)*x9460);
IkReal x9463=(gconst1*x9460);
IkReal x9464=(gconst1*x9461);
IkReal x9465=((1.0)*gconst2*x9461);
evalcond[0]=(((r01*x9463))+(((-1.0)*gconst2*r00*x9462))+((r02*x9461)));
evalcond[1]=(((r21*x9464))+(((-1.0)*r22*x9462))+(((-1.0)*r20*x9465)));
evalcond[2]=((((-1.0)*r10*x9465))+((r11*x9464))+(((-1.0)*r12*x9462)));
evalcond[3]=((-1.0)+((r01*x9464))+(((-1.0)*r00*x9465))+(((-1.0)*r02*x9462)));
evalcond[4]=(((cj2*sj1))+((r22*x9461))+((cj1*sj2))+((r21*x9463))+(((-1.0)*gconst2*r20*x9462)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x9463))+((r12*x9461))+(((-1.0)*gconst2*r10*x9462)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9466=(gconst1*r01);
IkReal x9467=(gconst2*r00);
CheckValue<IkReal> x9468=IKPowWithIntegerCheck(IKsign(((x9467*x9467)+(x9466*x9466)+(((-2.0)*x9466*x9467))+(r02*r02))),-1);
if(!x9468.valid){
continue;
}
CheckValue<IkReal> x9469 = IKatan2WithCheck(IkReal((x9466+(((-1.0)*x9467)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9469.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9468.value)))+(x9469.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9470=IKcos(j4);
IkReal x9471=IKsin(j4);
IkReal x9472=((1.0)*x9470);
IkReal x9473=(gconst1*x9470);
IkReal x9474=(gconst1*x9471);
IkReal x9475=((1.0)*gconst2*x9471);
evalcond[0]=(((r01*x9473))+(((-1.0)*gconst2*r00*x9472))+((r02*x9471)));
evalcond[1]=(((r21*x9474))+(((-1.0)*r22*x9472))+(((-1.0)*r20*x9475)));
evalcond[2]=((((-1.0)*r10*x9475))+((r11*x9474))+(((-1.0)*r12*x9472)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9472))+((r01*x9474))+(((-1.0)*r00*x9475)));
evalcond[4]=(((cj2*sj1))+((r22*x9471))+((cj1*sj2))+((r21*x9473))+(((-1.0)*gconst2*r20*x9472)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x9473))+((r12*x9471))+(((-1.0)*gconst2*r10*x9472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9476=((1.0)*gconst2);
CheckValue<IkReal> x9477=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9476)))),-1);
if(!x9477.valid){
continue;
}
CheckValue<IkReal> x9478 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x9476)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9478.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9477.value)))+(x9478.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9479=IKcos(j4);
IkReal x9480=IKsin(j4);
IkReal x9481=((1.0)*x9479);
IkReal x9482=(gconst1*x9479);
IkReal x9483=(gconst1*x9480);
IkReal x9484=((1.0)*gconst2*x9480);
evalcond[0]=((((-1.0)*gconst2*r00*x9481))+((r01*x9482))+((r02*x9480)));
evalcond[1]=((((-1.0)*r20*x9484))+((r21*x9483))+(((-1.0)*r22*x9481)));
evalcond[2]=((((-1.0)*r10*x9484))+((r11*x9483))+(((-1.0)*r12*x9481)));
evalcond[3]=((-1.0)+((r01*x9483))+(((-1.0)*r02*x9481))+(((-1.0)*r00*x9484)));
evalcond[4]=(((cj2*sj1))+((r21*x9482))+((cj1*sj2))+(((-1.0)*gconst2*r20*x9481))+((r22*x9480)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x9482))+((r12*x9480))+(((-1.0)*gconst2*r10*x9481)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9485=((-1.0)*r20);
IkReal x9486=x9289;
CheckValue<IkReal> x9488 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9485),IKFAST_ATAN2_MAGTHRESH);
if(!x9488.valid){
continue;
}
IkReal x9487=((-1.0)*(x9488.value));
sj5=gconst1;
cj5=gconst2;
j5=x9487;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9487;
IkReal gconst1=(r21*x9486);
IkReal gconst2=(x9485*x9486);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9489=((-1.0)*r20);
IkReal x9490=x9289;
CheckValue<IkReal> x9492 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9489),IKFAST_ATAN2_MAGTHRESH);
if(!x9492.valid){
continue;
}
IkReal x9491=((-1.0)*(x9492.value));
sj5=gconst1;
cj5=gconst2;
j5=x9491;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9491;
IkReal gconst1=(r21*x9490);
IkReal gconst2=(x9489*x9490);
IkReal x9493=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9497=IKPowWithIntegerCheck(x9493,-1);
if(!x9497.valid){
continue;
}
IkReal x9494=x9497.value;
IkReal x9495=((1.0)*x9494);
IkReal x9496=((((-1.0)*x9495*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x9494))+(((-1.0)*(r02*r02)))+(((-1.0)*x9495*(r01*r01)*(r21*r21))));
j4eval[0]=x9496;
j4eval[1]=IKsign(x9496);
j4eval[2]=r02;
j4eval[3]=x9493;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9498=((-1.0)*r20);
IkReal x9499=x9289;
CheckValue<IkReal> x9501 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9498),IKFAST_ATAN2_MAGTHRESH);
if(!x9501.valid){
continue;
}
IkReal x9500=((-1.0)*(x9501.value));
sj5=gconst1;
cj5=gconst2;
j5=x9500;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9500;
IkReal gconst1=(r21*x9499);
IkReal gconst2=(x9498*x9499);
IkReal x9502=r22*r22;
IkReal x9503=((1.0)*r02);
IkReal x9504=(cj1*sj2);
IkReal x9505=(cj2*sj1);
CheckValue<IkReal> x9509=IKPowWithIntegerCheck(((-1.0)+x9502),-1);
if(!x9509.valid){
continue;
}
IkReal x9506=x9509.value;
if((((1.0)+(((-1.0)*x9502)))) < -0.00001)
continue;
IkReal x9507=IKsqrt(((1.0)+(((-1.0)*x9502))));
IkReal x9508=(r02*r22*x9506*x9507);
j4eval[0]=((IKabs(((((-1.0)*x9503*x9504))+(((-1.0)*x9503*x9505)))))+(IKabs((((x9505*x9508))+((x9504*x9508))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9510=(cj1*sj2);
IkReal x9511=(gconst1*r01);
IkReal x9512=((1.0)*r02);
IkReal x9513=(cj2*sj1);
IkReal x9514=((1.0)*gconst2*r00);
CheckValue<IkReal> x9515=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9515.valid){
continue;
}
CheckValue<IkReal> x9516 = IKatan2WithCheck(IkReal(((((-1.0)*x9510*x9514))+(((-1.0)*x9513*x9514))+((x9511*x9513))+((x9510*x9511)))),IkReal(((((-1.0)*x9510*x9512))+(((-1.0)*x9512*x9513)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9516.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9515.value)))+(x9516.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9517=IKcos(j4);
IkReal x9518=IKsin(j4);
IkReal x9519=((1.0)*x9517);
IkReal x9520=(gconst1*x9517);
IkReal x9521=(gconst1*x9518);
IkReal x9522=((1.0)*gconst2*x9518);
evalcond[0]=(((r01*x9520))+(((-1.0)*gconst2*r00*x9519))+((r02*x9518)));
evalcond[1]=((((-1.0)*r20*x9522))+(((-1.0)*r22*x9519))+((r21*x9521)));
evalcond[2]=((((-1.0)*r10*x9522))+((r11*x9521))+(((-1.0)*r12*x9519)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9519))+(((-1.0)*r00*x9522))+((r01*x9521)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x9519))+((cj1*sj2))+((r22*x9518))+((r21*x9520)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r11*x9520))+(((-1.0)*gconst2*r10*x9519))+((r12*x9518))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9523=(gconst1*r01);
IkReal x9524=(gconst2*r00);
CheckValue<IkReal> x9525 = IKatan2WithCheck(IkReal(((((-1.0)*x9524))+x9523)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9525.valid){
continue;
}
CheckValue<IkReal> x9526=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9524*x9524)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x9523*x9523)))+(((2.0)*x9523*x9524)))),-1);
if(!x9526.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9525.value)+(((1.5707963267949)*(x9526.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9527=IKcos(j4);
IkReal x9528=IKsin(j4);
IkReal x9529=((1.0)*x9527);
IkReal x9530=(gconst1*x9527);
IkReal x9531=(gconst1*x9528);
IkReal x9532=((1.0)*gconst2*x9528);
evalcond[0]=(((r02*x9528))+((r01*x9530))+(((-1.0)*gconst2*r00*x9529)));
evalcond[1]=((((-1.0)*r22*x9529))+(((-1.0)*r20*x9532))+((r21*x9531)));
evalcond[2]=((((-1.0)*r12*x9529))+((r11*x9531))+(((-1.0)*r10*x9532)));
evalcond[3]=((1.0)+(((-1.0)*r00*x9532))+(((-1.0)*r02*x9529))+((r01*x9531)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst2*r20*x9529))+((r22*x9528))+((r21*x9530)));
evalcond[5]=((((-1.0)*gconst2*r10*x9529))+((r11*x9530))+((r12*x9528))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9533 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9533.valid){
continue;
}
CheckValue<IkReal> x9534=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9534.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9533.value)+(((1.5707963267949)*(x9534.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9535=IKcos(j4);
IkReal x9536=IKsin(j4);
IkReal x9537=((1.0)*x9535);
IkReal x9538=(gconst1*x9535);
IkReal x9539=(gconst1*x9536);
IkReal x9540=((1.0)*gconst2*x9536);
evalcond[0]=(((r02*x9536))+(((-1.0)*gconst2*r00*x9537))+((r01*x9538)));
evalcond[1]=((((-1.0)*r22*x9537))+((r21*x9539))+(((-1.0)*r20*x9540)));
evalcond[2]=(((r11*x9539))+(((-1.0)*r10*x9540))+(((-1.0)*r12*x9537)));
evalcond[3]=((1.0)+(((-1.0)*r00*x9540))+(((-1.0)*r02*x9537))+((r01*x9539)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9536))+(((-1.0)*gconst2*r20*x9537))+((r21*x9538)));
evalcond[5]=(((r11*x9538))+(((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r10*x9537))+((r12*x9536))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9541=((-1.0)*r20);
IkReal x9542=((-1.0)*px);
CheckValue<IkReal> x9544 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9541),IKFAST_ATAN2_MAGTHRESH);
if(!x9544.valid){
continue;
}
IkReal x9543=((-1.0)*(x9544.value));
sj5=gconst1;
cj5=gconst2;
j5=x9543;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9542);
rxp1_1=(px*r21);
rxp1_2=(r11*x9542);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9543;
IkReal gconst1=r21;
IkReal gconst2=x9541;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9545=((-1.0)*r20);
IkReal x9546=((-1.0)*px);
CheckValue<IkReal> x9548 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9545),IKFAST_ATAN2_MAGTHRESH);
if(!x9548.valid){
continue;
}
IkReal x9547=((-1.0)*(x9548.value));
sj5=gconst1;
cj5=gconst2;
j5=x9547;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9546);
rxp1_1=(px*r21);
rxp1_2=(r11*x9546);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9547;
IkReal gconst1=r21;
IkReal gconst2=x9545;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9549=((-1.0)*r20);
IkReal x9550=((-1.0)*px);
CheckValue<IkReal> x9552 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9549),IKFAST_ATAN2_MAGTHRESH);
if(!x9552.valid){
continue;
}
IkReal x9551=((-1.0)*(x9552.value));
sj5=gconst1;
cj5=gconst2;
j5=x9551;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9550);
rxp1_1=(px*r21);
rxp1_2=(r11*x9550);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9551;
IkReal gconst1=r21;
IkReal gconst2=x9549;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9555=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x9555.valid){
continue;
}
IkReal x9553=x9555.value;
IkReal x9554=(cj0*x9553);
cj4array[0]=(((cj1*cj2*x9554))+(((-1.0)*sj1*sj2*x9554)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9556=IKsin(j4);
IkReal x9557=IKcos(j4);
IkReal x9558=((1.0)*gconst2);
IkReal x9559=(gconst1*r21);
evalcond[0]=(r02*x9556);
evalcond[1]=((((-1.0)*r02*x9557))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r20*x9556*x9558))+((x9556*x9559)));
evalcond[3]=(((gconst1*r11*x9556))+(((-1.0)*r10*x9556*x9558)));
evalcond[4]=(((cj2*sj1))+((x9557*x9559))+((cj1*sj2))+(((-1.0)*r20*x9557*x9558)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9562=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x9562.valid){
continue;
}
IkReal x9560=x9562.value;
IkReal x9561=((1.0)*x9560);
cj4array[0]=((((-1.0)*cj2*sj1*x9561))+(((-1.0)*cj1*sj2*x9561)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9563=IKsin(j4);
IkReal x9564=IKcos(j4);
IkReal x9565=((1.0)*cj0);
IkReal x9566=((1.0)*gconst2*r10);
IkReal x9567=(gconst1*x9563);
evalcond[0]=(r02*x9563);
evalcond[1]=((((-1.0)*x9565))+(((-1.0)*r02*x9564)));
evalcond[2]=(((r21*x9567))+(((-1.0)*gconst2*r20*x9563)));
evalcond[3]=((((-1.0)*x9563*x9566))+((r11*x9567)));
evalcond[4]=((((-1.0)*cj1*cj2*x9565))+((gconst1*r11*x9564))+(((-1.0)*x9564*x9566))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9568=IKPowWithIntegerCheck(r02,-1);
if(!x9568.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x9568.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9569=IKsin(j4);
IkReal x9570=IKcos(j4);
IkReal x9571=(gconst1*r21);
IkReal x9572=(gconst1*r11);
IkReal x9573=((1.0)*gconst2*r10);
IkReal x9574=((1.0)*gconst2*r20);
evalcond[0]=(r02*x9569);
evalcond[1]=(((x9569*x9571))+(((-1.0)*x9569*x9574)));
evalcond[2]=(((x9569*x9572))+(((-1.0)*x9569*x9573)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9570*x9574))+((x9570*x9571)));
evalcond[4]=((((-1.0)*cj0*cj1*cj2))+(((-1.0)*x9570*x9573))+((cj0*sj1*sj2))+((x9570*x9572)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9575=(cj2*sj1);
IkReal x9576=(cj1*sj2);
IkReal x9577=(gconst1*r21);
IkReal x9578=((1.0)*gconst2*r20);
CheckValue<IkReal> x9579=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r20*x9578))+(((-1.0)*(r22*r22)))+(((-1.0)*(x9577*x9577)))+(((2.0)*gconst2*r20*x9577)))),-1);
if(!x9579.valid){
continue;
}
CheckValue<IkReal> x9580 = IKatan2WithCheck(IkReal((((r22*x9576))+((r22*x9575)))),IkReal((((x9575*x9577))+((x9576*x9577))+(((-1.0)*x9576*x9578))+(((-1.0)*x9575*x9578)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9580.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9579.value)))+(x9580.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9581=IKsin(j4);
IkReal x9582=IKcos(j4);
IkReal x9583=(cj1*cj2);
IkReal x9584=(sj1*sj2);
IkReal x9585=(gconst2*r10);
IkReal x9586=((1.0)*cj0);
IkReal x9587=(gconst2*r00);
IkReal x9588=((1.0)*sj0);
IkReal x9589=(gconst2*r20);
IkReal x9590=((1.0)*x9582);
IkReal x9591=(gconst1*x9582);
IkReal x9592=(gconst1*x9581);
IkReal x9593=((1.0)*x9581);
evalcond[0]=((((-1.0)*r22*x9590))+((r21*x9592))+(((-1.0)*x9589*x9593)));
evalcond[1]=(((r01*x9592))+(((-1.0)*x9587*x9593))+(((-1.0)*x9586))+(((-1.0)*r02*x9590)));
evalcond[2]=(((r11*x9592))+(((-1.0)*x9585*x9593))+(((-1.0)*x9588))+(((-1.0)*r12*x9590)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x9581))+((r21*x9591))+(((-1.0)*x9589*x9590)));
evalcond[4]=(((r01*x9591))+((sj0*x9583))+(((-1.0)*x9587*x9590))+(((-1.0)*x9584*x9588))+((r02*x9581)));
evalcond[5]=(((r11*x9591))+(((-1.0)*x9585*x9590))+((cj0*x9584))+((r12*x9581))+(((-1.0)*x9583*x9586)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9594=((1.0)*gconst2);
CheckValue<IkReal> x9595=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9594)))),-1);
if(!x9595.valid){
continue;
}
CheckValue<IkReal> x9596 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*r20*x9594)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9596.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9595.value)))+(x9596.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9597=IKsin(j4);
IkReal x9598=IKcos(j4);
IkReal x9599=(cj1*cj2);
IkReal x9600=(sj1*sj2);
IkReal x9601=(gconst2*r10);
IkReal x9602=((1.0)*cj0);
IkReal x9603=(gconst2*r00);
IkReal x9604=((1.0)*sj0);
IkReal x9605=(gconst2*r20);
IkReal x9606=((1.0)*x9598);
IkReal x9607=(gconst1*x9598);
IkReal x9608=(gconst1*x9597);
IkReal x9609=((1.0)*x9597);
evalcond[0]=((((-1.0)*r22*x9606))+((r21*x9608))+(((-1.0)*x9605*x9609)));
evalcond[1]=((((-1.0)*x9602))+((r01*x9608))+(((-1.0)*r02*x9606))+(((-1.0)*x9603*x9609)));
evalcond[2]=((((-1.0)*x9604))+((r11*x9608))+(((-1.0)*r12*x9606))+(((-1.0)*x9601*x9609)));
evalcond[3]=(((cj2*sj1))+((r21*x9607))+((cj1*sj2))+((r22*x9597))+(((-1.0)*x9605*x9606)));
evalcond[4]=(((sj0*x9599))+((r01*x9607))+(((-1.0)*x9600*x9604))+((r02*x9597))+(((-1.0)*x9603*x9606)));
evalcond[5]=(((r11*x9607))+((cj0*x9600))+((r12*x9597))+(((-1.0)*x9601*x9606))+(((-1.0)*x9599*x9602)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9610=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9610.valid){
continue;
}
CheckValue<IkReal> x9611 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst2*r20*sj0))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9611.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9610.value)))+(x9611.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9612=IKsin(j4);
IkReal x9613=IKcos(j4);
IkReal x9614=(cj1*cj2);
IkReal x9615=(sj1*sj2);
IkReal x9616=(gconst2*r10);
IkReal x9617=((1.0)*cj0);
IkReal x9618=(gconst2*r00);
IkReal x9619=((1.0)*sj0);
IkReal x9620=(gconst2*r20);
IkReal x9621=((1.0)*x9613);
IkReal x9622=(gconst1*x9613);
IkReal x9623=(gconst1*x9612);
IkReal x9624=((1.0)*x9612);
evalcond[0]=((((-1.0)*r22*x9621))+((r21*x9623))+(((-1.0)*x9620*x9624)));
evalcond[1]=(((r01*x9623))+(((-1.0)*x9618*x9624))+(((-1.0)*r02*x9621))+(((-1.0)*x9617)));
evalcond[2]=((((-1.0)*r12*x9621))+((r11*x9623))+(((-1.0)*x9616*x9624))+(((-1.0)*x9619)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x9612))+((r21*x9622))+(((-1.0)*x9620*x9621)));
evalcond[4]=(((r01*x9622))+(((-1.0)*x9618*x9621))+(((-1.0)*x9615*x9619))+((sj0*x9614))+((r02*x9612)));
evalcond[5]=(((cj0*x9615))+(((-1.0)*x9614*x9617))+((r12*x9612))+((r11*x9622))+(((-1.0)*x9616*x9621)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9625=((-1.0)*r20);
IkReal x9626=x9289;
CheckValue<IkReal> x9628 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9625),IKFAST_ATAN2_MAGTHRESH);
if(!x9628.valid){
continue;
}
IkReal x9627=((-1.0)*(x9628.value));
sj5=gconst1;
cj5=gconst2;
j5=x9627;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9627;
IkReal gconst1=(r21*x9626);
IkReal gconst2=(x9625*x9626);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9629=((-1.0)*r20);
IkReal x9630=x9289;
CheckValue<IkReal> x9632 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9629),IKFAST_ATAN2_MAGTHRESH);
if(!x9632.valid){
continue;
}
IkReal x9631=((-1.0)*(x9632.value));
sj5=gconst1;
cj5=gconst2;
j5=x9631;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9631;
IkReal gconst1=(r21*x9630);
IkReal gconst2=(x9629*x9630);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9633=((-1.0)*r20);
IkReal x9634=x9289;
CheckValue<IkReal> x9636 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9633),IKFAST_ATAN2_MAGTHRESH);
if(!x9636.valid){
continue;
}
IkReal x9635=((-1.0)*(x9636.value));
sj5=gconst1;
cj5=gconst2;
j5=x9635;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9635;
IkReal gconst1=(r21*x9634);
IkReal gconst2=(x9633*x9634);
IkReal x9637=r22*r22;
CheckValue<IkReal> x9640=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x9637))),-1);
if(!x9640.valid){
continue;
}
IkReal x9638=x9640.value;
IkReal x9639=((((2.0)*x9638*(r20*r20)*(r21*r21)))+((x9638*(r20*r20*r20*r20)))+x9637+((x9638*(r21*r21*r21*r21))));
j4eval[0]=x9639;
j4eval[1]=IKsign(x9639);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9641=((-1.0)*r20);
IkReal x9642=x9289;
CheckValue<IkReal> x9644 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9641),IKFAST_ATAN2_MAGTHRESH);
if(!x9644.valid){
continue;
}
IkReal x9643=((-1.0)*(x9644.value));
sj5=gconst1;
cj5=gconst2;
j5=x9643;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9643;
IkReal gconst1=(r21*x9642);
IkReal gconst2=(x9641*x9642);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9645=((-1.0)*r20);
IkReal x9646=x9289;
CheckValue<IkReal> x9648 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9645),IKFAST_ATAN2_MAGTHRESH);
if(!x9648.valid){
continue;
}
IkReal x9647=((-1.0)*(x9648.value));
sj5=gconst1;
cj5=gconst2;
j5=x9647;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9647;
IkReal gconst1=(r21*x9646);
IkReal gconst2=(x9645*x9646);
IkReal x9649=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9653=IKPowWithIntegerCheck(x9649,-1);
if(!x9653.valid){
continue;
}
IkReal x9650=x9653.value;
IkReal x9651=((1.0)*x9650);
IkReal x9652=((((-1.0)*x9651*(r11*r11)*(r21*r21)))+(((-1.0)*x9651*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x9650))+(((-1.0)*(r12*r12))));
j4eval[0]=x9652;
j4eval[1]=r12;
j4eval[2]=x9649;
j4eval[3]=IKsign(x9652);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9654=((-1.0)*r20);
IkReal x9655=x9289;
CheckValue<IkReal> x9657 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9654),IKFAST_ATAN2_MAGTHRESH);
if(!x9657.valid){
continue;
}
IkReal x9656=((-1.0)*(x9657.value));
sj5=gconst1;
cj5=gconst2;
j5=x9656;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9656;
IkReal gconst1=(r21*x9655);
IkReal gconst2=(x9654*x9655);
IkReal x9658=r22*r22;
IkReal x9659=(cj1*r12*sj2);
IkReal x9660=(cj2*r12*sj1);
CheckValue<IkReal> x9664=IKPowWithIntegerCheck(((-1.0)+x9658),-1);
if(!x9664.valid){
continue;
}
IkReal x9661=x9664.value;
if((((1.0)+(((-1.0)*x9658)))) < -0.00001)
continue;
IkReal x9662=IKsqrt(((1.0)+(((-1.0)*x9658))));
IkReal x9663=((1.0)*r22*x9661*x9662);
j4eval[0]=((IKabs((x9660+x9659)))+(IKabs(((((-1.0)*x9660*x9663))+(((-1.0)*x9659*x9663))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9665=((1.0)*gconst1);
IkReal x9666=(cj2*sj1);
IkReal x9667=(gconst2*r10);
IkReal x9668=(cj1*sj2);
CheckValue<IkReal> x9669=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x9665))+(((-1.0)*gconst2*r01)))),-1);
if(!x9669.valid){
continue;
}
CheckValue<IkReal> x9670 = IKatan2WithCheck(IkReal((((x9666*x9667))+((x9667*x9668))+(((-1.0)*r11*x9665*x9666))+(((-1.0)*r11*x9665*x9668)))),IkReal((((r12*x9666))+((r12*x9668)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9670.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9669.value)))+(x9670.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9671=IKsin(j4);
IkReal x9672=IKcos(j4);
IkReal x9673=((1.0)*x9672);
IkReal x9674=(gconst2*x9672);
IkReal x9675=(gconst1*x9671);
IkReal x9676=((1.0)*x9671);
evalcond[0]=(((r21*x9675))+(((-1.0)*gconst2*r20*x9676))+(((-1.0)*r22*x9673)));
evalcond[1]=(((r01*x9675))+(((-1.0)*r02*x9673))+(((-1.0)*gconst2*r00*x9676)));
evalcond[2]=(((r10*x9674))+(((-1.0)*gconst1*r11*x9673))+(((-1.0)*r12*x9676)));
evalcond[3]=((-1.0)+((r11*x9675))+(((-1.0)*gconst2*r10*x9676))+(((-1.0)*r12*x9673)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r20*x9674))+(((-1.0)*gconst1*r21*x9673))+(((-1.0)*r22*x9676)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r00*x9674))+(((-1.0)*gconst1*r01*x9673))+(((-1.0)*r02*x9676))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9677=(gconst1*r11);
IkReal x9678=(gconst2*r10);
CheckValue<IkReal> x9679=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9677*x9677)))+(((-1.0)*(r12*r12)))+(((2.0)*x9677*x9678))+(((-1.0)*(x9678*x9678))))),-1);
if(!x9679.valid){
continue;
}
CheckValue<IkReal> x9680 = IKatan2WithCheck(IkReal((x9678+(((-1.0)*x9677)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9680.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9679.value)))+(x9680.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9681=IKsin(j4);
IkReal x9682=IKcos(j4);
IkReal x9683=((1.0)*x9682);
IkReal x9684=(gconst2*x9682);
IkReal x9685=(gconst1*x9681);
IkReal x9686=((1.0)*x9681);
evalcond[0]=(((r21*x9685))+(((-1.0)*r22*x9683))+(((-1.0)*gconst2*r20*x9686)));
evalcond[1]=((((-1.0)*r02*x9683))+(((-1.0)*gconst2*r00*x9686))+((r01*x9685)));
evalcond[2]=((((-1.0)*gconst1*r11*x9683))+(((-1.0)*r12*x9686))+((r10*x9684)));
evalcond[3]=((-1.0)+(((-1.0)*gconst2*r10*x9686))+(((-1.0)*r12*x9683))+((r11*x9685)));
evalcond[4]=((((-1.0)*gconst1*r21*x9683))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9686))+((r20*x9684)));
evalcond[5]=((((-1.0)*gconst1*r01*x9683))+(((-1.0)*r02*x9686))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r00*x9684)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9687 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9687.valid){
continue;
}
CheckValue<IkReal> x9688=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9688.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9687.value)+(((1.5707963267949)*(x9688.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9689=IKsin(j4);
IkReal x9690=IKcos(j4);
IkReal x9691=((1.0)*x9690);
IkReal x9692=(gconst2*x9690);
IkReal x9693=(gconst1*x9689);
IkReal x9694=((1.0)*x9689);
evalcond[0]=(((r21*x9693))+(((-1.0)*r22*x9691))+(((-1.0)*gconst2*r20*x9694)));
evalcond[1]=((((-1.0)*gconst2*r00*x9694))+(((-1.0)*r02*x9691))+((r01*x9693)));
evalcond[2]=((((-1.0)*gconst1*r11*x9691))+(((-1.0)*r12*x9694))+((r10*x9692)));
evalcond[3]=((-1.0)+(((-1.0)*gconst2*r10*x9694))+(((-1.0)*r12*x9691))+((r11*x9693)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9691))+((cj1*sj2))+(((-1.0)*r22*x9694))+((r20*x9692)));
evalcond[5]=((((-1.0)*gconst1*r01*x9691))+(((-1.0)*r02*x9694))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r00*x9692)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9695=((-1.0)*r20);
IkReal x9696=x9289;
CheckValue<IkReal> x9698 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9695),IKFAST_ATAN2_MAGTHRESH);
if(!x9698.valid){
continue;
}
IkReal x9697=((-1.0)*(x9698.value));
sj5=gconst1;
cj5=gconst2;
j5=x9697;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9697;
IkReal gconst1=(r21*x9696);
IkReal gconst2=(x9695*x9696);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9699=((-1.0)*r20);
IkReal x9700=x9289;
CheckValue<IkReal> x9702 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9699),IKFAST_ATAN2_MAGTHRESH);
if(!x9702.valid){
continue;
}
IkReal x9701=((-1.0)*(x9702.value));
sj5=gconst1;
cj5=gconst2;
j5=x9701;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9701;
IkReal gconst1=(r21*x9700);
IkReal gconst2=(x9699*x9700);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9703=((-1.0)*r20);
IkReal x9704=x9289;
CheckValue<IkReal> x9706 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9703),IKFAST_ATAN2_MAGTHRESH);
if(!x9706.valid){
continue;
}
IkReal x9705=((-1.0)*(x9706.value));
sj5=gconst1;
cj5=gconst2;
j5=x9705;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9705;
IkReal gconst1=(r21*x9704);
IkReal gconst2=(x9703*x9704);
IkReal x9707=r22*r22;
IkReal x9708=(cj1*r12*sj2);
IkReal x9709=(cj2*r12*sj1);
CheckValue<IkReal> x9713=IKPowWithIntegerCheck(((-1.0)+x9707),-1);
if(!x9713.valid){
continue;
}
IkReal x9710=x9713.value;
if((((1.0)+(((-1.0)*x9707)))) < -0.00001)
continue;
IkReal x9711=IKsqrt(((1.0)+(((-1.0)*x9707))));
IkReal x9712=((1.0)*r22*x9710*x9711);
j4eval[0]=((IKabs((x9708+x9709)))+(IKabs(((((-1.0)*x9709*x9712))+(((-1.0)*x9708*x9712))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9714=((1.0)*gconst1);
IkReal x9715=(cj2*sj1);
IkReal x9716=(gconst2*r10);
IkReal x9717=(cj1*sj2);
CheckValue<IkReal> x9718 = IKatan2WithCheck(IkReal((((x9716*x9717))+(((-1.0)*r11*x9714*x9717))+(((-1.0)*r11*x9714*x9715))+((x9715*x9716)))),IkReal((((r12*x9717))+((r12*x9715)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9718.valid){
continue;
}
CheckValue<IkReal> x9719=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x9714))+(((-1.0)*gconst2*r01)))),-1);
if(!x9719.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9718.value)+(((1.5707963267949)*(x9719.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9720=IKsin(j4);
IkReal x9721=IKcos(j4);
IkReal x9722=((1.0)*x9721);
IkReal x9723=(gconst2*x9721);
IkReal x9724=(gconst1*x9720);
IkReal x9725=((1.0)*x9720);
evalcond[0]=((((-1.0)*gconst2*r20*x9725))+(((-1.0)*r22*x9722))+((r21*x9724)));
evalcond[1]=(((r01*x9724))+(((-1.0)*r02*x9722))+(((-1.0)*gconst2*r00*x9725)));
evalcond[2]=((((-1.0)*gconst1*r11*x9722))+(((-1.0)*r12*x9725))+((r10*x9723)));
evalcond[3]=((1.0)+((r11*x9724))+(((-1.0)*r12*x9722))+(((-1.0)*gconst2*r10*x9725)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r20*x9723))+(((-1.0)*gconst1*r21*x9722))+(((-1.0)*r22*x9725)));
evalcond[5]=((((-1.0)*r02*x9725))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r00*x9723))+(((-1.0)*gconst1*r01*x9722)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9726=(gconst1*r11);
IkReal x9727=(gconst2*r10);
CheckValue<IkReal> x9728 = IKatan2WithCheck(IkReal((x9727+(((-1.0)*x9726)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9728.valid){
continue;
}
CheckValue<IkReal> x9729=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x9727*x9727)+(x9726*x9726)+(((-2.0)*x9726*x9727)))),-1);
if(!x9729.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9728.value)+(((1.5707963267949)*(x9729.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9730=IKsin(j4);
IkReal x9731=IKcos(j4);
IkReal x9732=((1.0)*x9731);
IkReal x9733=(gconst2*x9731);
IkReal x9734=(gconst1*x9730);
IkReal x9735=((1.0)*x9730);
evalcond[0]=((((-1.0)*r22*x9732))+((r21*x9734))+(((-1.0)*gconst2*r20*x9735)));
evalcond[1]=((((-1.0)*r02*x9732))+(((-1.0)*gconst2*r00*x9735))+((r01*x9734)));
evalcond[2]=((((-1.0)*gconst1*r11*x9732))+(((-1.0)*r12*x9735))+((r10*x9733)));
evalcond[3]=((1.0)+((r11*x9734))+(((-1.0)*r12*x9732))+(((-1.0)*gconst2*r10*x9735)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r20*x9733))+(((-1.0)*gconst1*r21*x9732))+(((-1.0)*r22*x9735)));
evalcond[5]=((((-1.0)*r02*x9735))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst1*r01*x9732))+((r00*x9733)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9736=((1.0)*gconst2);
CheckValue<IkReal> x9737 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9736))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9737.valid){
continue;
}
CheckValue<IkReal> x9738=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x9736))+(((-1.0)*gconst1*r00)))),-1);
if(!x9738.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9737.value)+(((1.5707963267949)*(x9738.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9739=IKsin(j4);
IkReal x9740=IKcos(j4);
IkReal x9741=((1.0)*x9740);
IkReal x9742=(gconst2*x9740);
IkReal x9743=(gconst1*x9739);
IkReal x9744=((1.0)*x9739);
evalcond[0]=(((r21*x9743))+(((-1.0)*gconst2*r20*x9744))+(((-1.0)*r22*x9741)));
evalcond[1]=((((-1.0)*gconst2*r00*x9744))+(((-1.0)*r02*x9741))+((r01*x9743)));
evalcond[2]=(((r10*x9742))+(((-1.0)*gconst1*r11*x9741))+(((-1.0)*r12*x9744)));
evalcond[3]=((1.0)+((r11*x9743))+(((-1.0)*gconst2*r10*x9744))+(((-1.0)*r12*x9741)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9741))+((r20*x9742))+(((-1.0)*r22*x9744)));
evalcond[5]=((((-1.0)*gconst1*r01*x9741))+(((-1.0)*r02*x9744))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r00*x9742)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9745=((-1.0)*r20);
IkReal x9746=x9289;
CheckValue<IkReal> x9748 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9745),IKFAST_ATAN2_MAGTHRESH);
if(!x9748.valid){
continue;
}
IkReal x9747=((-1.0)*(x9748.value));
sj5=gconst1;
cj5=gconst2;
j5=x9747;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9747;
IkReal gconst1=(r21*x9746);
IkReal gconst2=(x9745*x9746);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9749=((-1.0)*r20);
IkReal x9750=x9289;
CheckValue<IkReal> x9752 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9749),IKFAST_ATAN2_MAGTHRESH);
if(!x9752.valid){
continue;
}
IkReal x9751=((-1.0)*(x9752.value));
sj5=gconst1;
cj5=gconst2;
j5=x9751;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9751;
IkReal gconst1=(r21*x9750);
IkReal gconst2=(x9749*x9750);
IkReal x9753=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9757=IKPowWithIntegerCheck(x9753,-1);
if(!x9757.valid){
continue;
}
IkReal x9754=x9757.value;
IkReal x9755=((1.0)*x9754);
IkReal x9756=((((-1.0)*(r02*r02)))+(((-1.0)*x9755*(r01*r01)*(r21*r21)))+(((-1.0)*x9755*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x9754)));
j4eval[0]=x9756;
j4eval[1]=IKsign(x9756);
j4eval[2]=r02;
j4eval[3]=x9753;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9758=((-1.0)*r20);
IkReal x9759=x9289;
CheckValue<IkReal> x9761 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9758),IKFAST_ATAN2_MAGTHRESH);
if(!x9761.valid){
continue;
}
IkReal x9760=((-1.0)*(x9761.value));
sj5=gconst1;
cj5=gconst2;
j5=x9760;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9760;
IkReal gconst1=(r21*x9759);
IkReal gconst2=(x9758*x9759);
IkReal x9762=r22*r22;
IkReal x9763=(cj1*r02*sj2);
IkReal x9764=(cj2*r02*sj1);
CheckValue<IkReal> x9768=IKPowWithIntegerCheck(((-1.0)+x9762),-1);
if(!x9768.valid){
continue;
}
IkReal x9765=x9768.value;
if((((1.0)+(((-1.0)*x9762)))) < -0.00001)
continue;
IkReal x9766=IKsqrt(((1.0)+(((-1.0)*x9762))));
IkReal x9767=((1.0)*r22*x9765*x9766);
j4eval[0]=((IKabs(((((-1.0)*x9763*x9767))+(((-1.0)*x9764*x9767)))))+(IKabs((x9763+x9764))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9769=(cj2*sj1);
IkReal x9770=(cj1*sj2);
IkReal x9771=(gconst2*r00);
IkReal x9772=((1.0)*gconst1*r01);
CheckValue<IkReal> x9773 = IKatan2WithCheck(IkReal((((x9770*x9771))+(((-1.0)*x9769*x9772))+((x9769*x9771))+(((-1.0)*x9770*x9772)))),IkReal((((r02*x9770))+((r02*x9769)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9773.valid){
continue;
}
CheckValue<IkReal> x9774=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9774.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9773.value)+(((1.5707963267949)*(x9774.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9775=IKsin(j4);
IkReal x9776=IKcos(j4);
IkReal x9777=(gconst1*r11);
IkReal x9778=(gconst1*r21);
IkReal x9779=(gconst1*r01);
IkReal x9780=((1.0)*x9776);
IkReal x9781=(gconst2*x9776);
IkReal x9782=((1.0)*x9775);
evalcond[0]=((((-1.0)*gconst2*r20*x9782))+(((-1.0)*r22*x9780))+((x9775*x9778)));
evalcond[1]=((((-1.0)*r12*x9780))+((x9775*x9777))+(((-1.0)*gconst2*r10*x9782)));
evalcond[2]=(((r00*x9781))+(((-1.0)*r02*x9782))+(((-1.0)*x9779*x9780)));
evalcond[3]=((-1.0)+(((-1.0)*gconst2*r00*x9782))+(((-1.0)*r02*x9780))+((x9775*x9779)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9778*x9780))+(((-1.0)*r22*x9782))+((r20*x9781)));
evalcond[5]=((((-1.0)*r12*x9782))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r10*x9781))+(((-1.0)*x9777*x9780)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9783=(gconst2*r00);
IkReal x9784=(gconst1*r01);
CheckValue<IkReal> x9785=IKPowWithIntegerCheck(IKsign(((((2.0)*x9783*x9784))+(((-1.0)*(r02*r02)))+(((-1.0)*(x9784*x9784)))+(((-1.0)*(x9783*x9783))))),-1);
if(!x9785.valid){
continue;
}
CheckValue<IkReal> x9786 = IKatan2WithCheck(IkReal((x9783+(((-1.0)*x9784)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9786.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9785.value)))+(x9786.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9787=IKsin(j4);
IkReal x9788=IKcos(j4);
IkReal x9789=(gconst1*r11);
IkReal x9790=(gconst1*r21);
IkReal x9791=(gconst1*r01);
IkReal x9792=((1.0)*x9788);
IkReal x9793=(gconst2*x9788);
IkReal x9794=((1.0)*x9787);
evalcond[0]=(((x9787*x9790))+(((-1.0)*gconst2*r20*x9794))+(((-1.0)*r22*x9792)));
evalcond[1]=((((-1.0)*gconst2*r10*x9794))+(((-1.0)*r12*x9792))+((x9787*x9789)));
evalcond[2]=((((-1.0)*x9791*x9792))+(((-1.0)*r02*x9794))+((r00*x9793)));
evalcond[3]=((-1.0)+((x9787*x9791))+(((-1.0)*r02*x9792))+(((-1.0)*gconst2*r00*x9794)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x9790*x9792))+((r20*x9793))+((cj1*sj2))+(((-1.0)*r22*x9794)));
evalcond[5]=(((r10*x9793))+(((-1.0)*x9789*x9792))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x9794)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9795=((1.0)*gconst2);
CheckValue<IkReal> x9796 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x9795)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9796.valid){
continue;
}
CheckValue<IkReal> x9797=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9795)))),-1);
if(!x9797.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9796.value)+(((1.5707963267949)*(x9797.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9798=IKsin(j4);
IkReal x9799=IKcos(j4);
IkReal x9800=(gconst1*r11);
IkReal x9801=(gconst1*r21);
IkReal x9802=(gconst1*r01);
IkReal x9803=((1.0)*x9799);
IkReal x9804=(gconst2*x9799);
IkReal x9805=((1.0)*x9798);
evalcond[0]=(((x9798*x9801))+(((-1.0)*r22*x9803))+(((-1.0)*gconst2*r20*x9805)));
evalcond[1]=((((-1.0)*gconst2*r10*x9805))+((x9798*x9800))+(((-1.0)*r12*x9803)));
evalcond[2]=(((r00*x9804))+(((-1.0)*r02*x9805))+(((-1.0)*x9802*x9803)));
evalcond[3]=((-1.0)+(((-1.0)*gconst2*r00*x9805))+(((-1.0)*r02*x9803))+((x9798*x9802)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9805))+(((-1.0)*x9801*x9803))+((r20*x9804)));
evalcond[5]=(((r10*x9804))+(((-1.0)*x9800*x9803))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x9805)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9806=((-1.0)*r20);
IkReal x9807=x9289;
CheckValue<IkReal> x9809 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9806),IKFAST_ATAN2_MAGTHRESH);
if(!x9809.valid){
continue;
}
IkReal x9808=((-1.0)*(x9809.value));
sj5=gconst1;
cj5=gconst2;
j5=x9808;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9808;
IkReal gconst1=(r21*x9807);
IkReal gconst2=(x9806*x9807);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9810=((-1.0)*r20);
IkReal x9811=x9289;
CheckValue<IkReal> x9813 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9810),IKFAST_ATAN2_MAGTHRESH);
if(!x9813.valid){
continue;
}
IkReal x9812=((-1.0)*(x9813.value));
sj5=gconst1;
cj5=gconst2;
j5=x9812;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9812;
IkReal gconst1=(r21*x9811);
IkReal gconst2=(x9810*x9811);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9814=((-1.0)*r20);
IkReal x9815=x9289;
CheckValue<IkReal> x9817 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9814),IKFAST_ATAN2_MAGTHRESH);
if(!x9817.valid){
continue;
}
IkReal x9816=((-1.0)*(x9817.value));
sj5=gconst1;
cj5=gconst2;
j5=x9816;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9816;
IkReal gconst1=(r21*x9815);
IkReal gconst2=(x9814*x9815);
IkReal x9818=r22*r22;
IkReal x9819=(cj1*r02*sj2);
IkReal x9820=(cj2*r02*sj1);
CheckValue<IkReal> x9824=IKPowWithIntegerCheck(((-1.0)+x9818),-1);
if(!x9824.valid){
continue;
}
IkReal x9821=x9824.value;
if((((1.0)+(((-1.0)*x9818)))) < -0.00001)
continue;
IkReal x9822=IKsqrt(((1.0)+(((-1.0)*x9818))));
IkReal x9823=((1.0)*r22*x9821*x9822);
j4eval[0]=((IKabs((x9820+x9819)))+(IKabs(((((-1.0)*x9820*x9823))+(((-1.0)*x9819*x9823))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9825=(cj2*sj1);
IkReal x9826=(cj1*sj2);
IkReal x9827=(gconst2*r00);
IkReal x9828=((1.0)*gconst1*r01);
CheckValue<IkReal> x9829 = IKatan2WithCheck(IkReal((((x9825*x9827))+((x9826*x9827))+(((-1.0)*x9826*x9828))+(((-1.0)*x9825*x9828)))),IkReal((((r02*x9825))+((r02*x9826)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9829.valid){
continue;
}
CheckValue<IkReal> x9830=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9830.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9829.value)+(((1.5707963267949)*(x9830.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9831=IKsin(j4);
IkReal x9832=IKcos(j4);
IkReal x9833=(gconst1*r11);
IkReal x9834=(gconst1*r21);
IkReal x9835=(gconst1*r01);
IkReal x9836=((1.0)*x9832);
IkReal x9837=(gconst2*x9832);
IkReal x9838=((1.0)*x9831);
evalcond[0]=((((-1.0)*r22*x9836))+(((-1.0)*gconst2*r20*x9838))+((x9831*x9834)));
evalcond[1]=((((-1.0)*gconst2*r10*x9838))+(((-1.0)*r12*x9836))+((x9831*x9833)));
evalcond[2]=(((r00*x9837))+(((-1.0)*r02*x9838))+(((-1.0)*x9835*x9836)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9836))+(((-1.0)*gconst2*r00*x9838))+((x9831*x9835)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x9834*x9836))+(((-1.0)*r22*x9838))+((cj1*sj2))+((r20*x9837)));
evalcond[5]=(((r10*x9837))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x9838))+((cj1*cj2))+(((-1.0)*x9833*x9836)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9839=(gconst1*r01);
IkReal x9840=(gconst2*r00);
CheckValue<IkReal> x9841 = IKatan2WithCheck(IkReal(((((-1.0)*x9839))+x9840)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9841.valid){
continue;
}
CheckValue<IkReal> x9842=IKPowWithIntegerCheck(IKsign(((x9840*x9840)+(x9839*x9839)+(r02*r02)+(((-2.0)*x9839*x9840)))),-1);
if(!x9842.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9841.value)+(((1.5707963267949)*(x9842.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9843=IKsin(j4);
IkReal x9844=IKcos(j4);
IkReal x9845=(gconst1*r11);
IkReal x9846=(gconst1*r21);
IkReal x9847=(gconst1*r01);
IkReal x9848=((1.0)*x9844);
IkReal x9849=(gconst2*x9844);
IkReal x9850=((1.0)*x9843);
evalcond[0]=(((x9843*x9846))+(((-1.0)*gconst2*r20*x9850))+(((-1.0)*r22*x9848)));
evalcond[1]=((((-1.0)*r12*x9848))+(((-1.0)*gconst2*r10*x9850))+((x9843*x9845)));
evalcond[2]=((((-1.0)*r02*x9850))+(((-1.0)*x9847*x9848))+((r00*x9849)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9848))+((x9843*x9847))+(((-1.0)*gconst2*r00*x9850)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r20*x9849))+(((-1.0)*r22*x9850))+(((-1.0)*x9846*x9848)));
evalcond[5]=(((r10*x9849))+(((-1.0)*sj1*sj2))+(((-1.0)*x9845*x9848))+((cj1*cj2))+(((-1.0)*r12*x9850)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9851 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9851.valid){
continue;
}
CheckValue<IkReal> x9852=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9852.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9851.value)+(((1.5707963267949)*(x9852.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9853=IKsin(j4);
IkReal x9854=IKcos(j4);
IkReal x9855=(gconst1*r11);
IkReal x9856=(gconst1*r21);
IkReal x9857=(gconst1*r01);
IkReal x9858=((1.0)*x9854);
IkReal x9859=(gconst2*x9854);
IkReal x9860=((1.0)*x9853);
evalcond[0]=((((-1.0)*r22*x9858))+(((-1.0)*gconst2*r20*x9860))+((x9853*x9856)));
evalcond[1]=((((-1.0)*gconst2*r10*x9860))+((x9853*x9855))+(((-1.0)*r12*x9858)));
evalcond[2]=(((r00*x9859))+(((-1.0)*x9857*x9858))+(((-1.0)*r02*x9860)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9858))+(((-1.0)*gconst2*r00*x9860))+((x9853*x9857)));
evalcond[4]=((((-1.0)*r22*x9860))+((cj2*sj1))+((cj1*sj2))+((r20*x9859))+(((-1.0)*x9856*x9858)));
evalcond[5]=(((r10*x9859))+(((-1.0)*x9855*x9858))+(((-1.0)*r12*x9860))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9861=((-1.0)*r20);
IkReal x9862=((-1.0)*px);
CheckValue<IkReal> x9864 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9861),IKFAST_ATAN2_MAGTHRESH);
if(!x9864.valid){
continue;
}
IkReal x9863=((-1.0)*(x9864.value));
sj5=gconst1;
cj5=gconst2;
j5=x9863;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9862);
rxp1_1=(px*r21);
rxp1_2=(r11*x9862);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9863;
IkReal gconst1=r21;
IkReal gconst2=x9861;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9865=((-1.0)*r20);
IkReal x9866=((-1.0)*px);
CheckValue<IkReal> x9868 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9865),IKFAST_ATAN2_MAGTHRESH);
if(!x9868.valid){
continue;
}
IkReal x9867=((-1.0)*(x9868.value));
sj5=gconst1;
cj5=gconst2;
j5=x9867;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9866);
rxp1_1=(px*r21);
rxp1_2=(r11*x9866);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9867;
IkReal gconst1=r21;
IkReal gconst2=x9865;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9869=((-1.0)*r20);
IkReal x9870=((-1.0)*px);
CheckValue<IkReal> x9872 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9869),IKFAST_ATAN2_MAGTHRESH);
if(!x9872.valid){
continue;
}
IkReal x9871=((-1.0)*(x9872.value));
sj5=gconst1;
cj5=gconst2;
j5=x9871;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9870);
rxp1_1=(px*r21);
rxp1_2=(r11*x9870);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9871;
IkReal gconst1=r21;
IkReal gconst2=x9869;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9875=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x9875.valid){
continue;
}
IkReal x9873=x9875.value;
IkReal x9874=(cj0*x9873);
cj4array[0]=(((cj1*cj2*x9874))+(((-1.0)*sj1*sj2*x9874)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9876=IKsin(j4);
IkReal x9877=IKcos(j4);
IkReal x9878=(gconst1*x9876);
IkReal x9879=((1.0)*x9877);
IkReal x9880=((1.0)*gconst2*x9876);
evalcond[0]=((-1.0)*r02*x9876);
evalcond[1]=((((-1.0)*r02*x9879))+(((-1.0)*cj0)));
evalcond[2]=(((r21*x9878))+(((-1.0)*r20*x9880)));
evalcond[3]=((((-1.0)*r10*x9880))+((r11*x9878)));
evalcond[4]=(((cj2*sj1))+((gconst2*r20*x9877))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9879)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9883=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9883.valid){
continue;
}
IkReal x9881=x9883.value;
IkReal x9882=((1.0)*x9881);
cj4array[0]=((((-1.0)*cj1*sj2*x9882))+(((-1.0)*cj2*sj1*x9882)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9884=IKsin(j4);
IkReal x9885=IKcos(j4);
IkReal x9886=(gconst2*r10);
IkReal x9887=((1.0)*cj0);
IkReal x9888=((1.0)*x9884);
IkReal x9889=(gconst1*x9884);
IkReal x9890=((1.0)*x9885);
evalcond[0]=((-1.0)*r02*x9884);
evalcond[1]=((((-1.0)*x9887))+(((-1.0)*r02*x9890)));
evalcond[2]=(((r21*x9889))+(((-1.0)*gconst2*r20*x9888)));
evalcond[3]=(((r11*x9889))+(((-1.0)*x9886*x9888)));
evalcond[4]=((((-1.0)*cj1*cj2*x9887))+(((-1.0)*gconst1*r11*x9890))+((x9885*x9886))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9891=IKPowWithIntegerCheck(r02,-1);
if(!x9891.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x9891.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9892=IKsin(j4);
IkReal x9893=IKcos(j4);
IkReal x9894=(gconst2*r10);
IkReal x9895=(gconst2*r20);
IkReal x9896=((1.0)*x9892);
IkReal x9897=(gconst1*x9892);
IkReal x9898=((1.0)*gconst1*x9893);
evalcond[0]=((-1.0)*r02*x9892);
evalcond[1]=(((r21*x9897))+(((-1.0)*x9895*x9896)));
evalcond[2]=((((-1.0)*x9894*x9896))+((r11*x9897)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*x9898))+((x9893*x9895)));
evalcond[4]=((((-1.0)*cj0*cj1*cj2))+(((-1.0)*r11*x9898))+((x9893*x9894))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9899=(cj2*sj1);
IkReal x9900=(cj1*sj2);
IkReal x9901=(gconst1*r21);
IkReal x9902=((1.0)*gconst2*r20);
CheckValue<IkReal> x9903=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((gconst2*gconst2)*(r20*r20)))+(x9901*x9901)+(((-2.0)*gconst2*r20*x9901)))),-1);
if(!x9903.valid){
continue;
}
CheckValue<IkReal> x9904 = IKatan2WithCheck(IkReal((((r22*x9899))+((r22*x9900)))),IkReal((((x9899*x9901))+((x9900*x9901))+(((-1.0)*x9899*x9902))+(((-1.0)*x9900*x9902)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9904.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9903.value)))+(x9904.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9905=IKsin(j4);
IkReal x9906=IKcos(j4);
IkReal x9907=(cj1*cj2);
IkReal x9908=(gconst1*r11);
IkReal x9909=(sj1*sj2);
IkReal x9910=(gconst1*r21);
IkReal x9911=(gconst1*r01);
IkReal x9912=((1.0)*cj0);
IkReal x9913=((1.0)*sj0);
IkReal x9914=((1.0)*x9906);
IkReal x9915=(gconst2*x9906);
IkReal x9916=((1.0)*x9905);
evalcond[0]=((((-1.0)*gconst2*r20*x9916))+((x9905*x9910))+(((-1.0)*r22*x9914)));
evalcond[1]=(((x9905*x9911))+(((-1.0)*x9912))+(((-1.0)*r02*x9914))+(((-1.0)*gconst2*r00*x9916)));
evalcond[2]=((((-1.0)*gconst2*r10*x9916))+((x9905*x9908))+(((-1.0)*x9913))+(((-1.0)*r12*x9914)));
evalcond[3]=(((cj2*sj1))+((r20*x9915))+((cj1*sj2))+(((-1.0)*r22*x9916))+(((-1.0)*x9910*x9914)));
evalcond[4]=((((-1.0)*x9909*x9913))+((r00*x9915))+(((-1.0)*r02*x9916))+((sj0*x9907))+(((-1.0)*x9911*x9914)));
evalcond[5]=(((cj0*x9909))+(((-1.0)*r12*x9916))+(((-1.0)*x9908*x9914))+(((-1.0)*x9907*x9912))+((r10*x9915)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9917=((1.0)*gconst2);
CheckValue<IkReal> x9918 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x9917))+((cj0*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9918.valid){
continue;
}
CheckValue<IkReal> x9919=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9917))+(((-1.0)*gconst1*r10)))),-1);
if(!x9919.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9918.value)+(((1.5707963267949)*(x9919.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9920=IKsin(j4);
IkReal x9921=IKcos(j4);
IkReal x9922=(cj1*cj2);
IkReal x9923=(gconst1*r11);
IkReal x9924=(sj1*sj2);
IkReal x9925=(gconst1*r21);
IkReal x9926=(gconst1*r01);
IkReal x9927=((1.0)*cj0);
IkReal x9928=((1.0)*sj0);
IkReal x9929=((1.0)*x9921);
IkReal x9930=(gconst2*x9921);
IkReal x9931=((1.0)*x9920);
evalcond[0]=((((-1.0)*gconst2*r20*x9931))+((x9920*x9925))+(((-1.0)*r22*x9929)));
evalcond[1]=((((-1.0)*r02*x9929))+((x9920*x9926))+(((-1.0)*gconst2*r00*x9931))+(((-1.0)*x9927)));
evalcond[2]=(((x9920*x9923))+(((-1.0)*r12*x9929))+(((-1.0)*x9928))+(((-1.0)*gconst2*r10*x9931)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x9925*x9929))+((cj1*sj2))+(((-1.0)*r22*x9931))+((r20*x9930)));
evalcond[4]=(((r00*x9930))+(((-1.0)*x9926*x9929))+(((-1.0)*r02*x9931))+((sj0*x9922))+(((-1.0)*x9924*x9928)));
evalcond[5]=(((r10*x9930))+((cj0*x9924))+(((-1.0)*x9922*x9927))+(((-1.0)*x9923*x9929))+(((-1.0)*r12*x9931)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9932=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9932.valid){
continue;
}
CheckValue<IkReal> x9933 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst2*r20*sj0))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9933.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9932.value)))+(x9933.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9934=IKsin(j4);
IkReal x9935=IKcos(j4);
IkReal x9936=(cj1*cj2);
IkReal x9937=(gconst1*r11);
IkReal x9938=(sj1*sj2);
IkReal x9939=(gconst1*r21);
IkReal x9940=(gconst1*r01);
IkReal x9941=((1.0)*cj0);
IkReal x9942=((1.0)*sj0);
IkReal x9943=((1.0)*x9935);
IkReal x9944=(gconst2*x9935);
IkReal x9945=((1.0)*x9934);
evalcond[0]=((((-1.0)*gconst2*r20*x9945))+(((-1.0)*r22*x9943))+((x9934*x9939)));
evalcond[1]=((((-1.0)*gconst2*r00*x9945))+((x9934*x9940))+(((-1.0)*x9941))+(((-1.0)*r02*x9943)));
evalcond[2]=((((-1.0)*gconst2*r10*x9945))+(((-1.0)*r12*x9943))+(((-1.0)*x9942))+((x9934*x9937)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x9944))+(((-1.0)*x9939*x9943))+(((-1.0)*r22*x9945)));
evalcond[4]=((((-1.0)*x9940*x9943))+((sj0*x9936))+(((-1.0)*x9938*x9942))+((r00*x9944))+(((-1.0)*r02*x9945)));
evalcond[5]=(((cj0*x9938))+(((-1.0)*x9937*x9943))+(((-1.0)*r12*x9945))+(((-1.0)*x9936*x9941))+((r10*x9944)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9946=((-1.0)*r20);
IkReal x9947=x9289;
CheckValue<IkReal> x9949 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9946),IKFAST_ATAN2_MAGTHRESH);
if(!x9949.valid){
continue;
}
IkReal x9948=((-1.0)*(x9949.value));
sj5=gconst1;
cj5=gconst2;
j5=x9948;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9948;
IkReal gconst1=(r21*x9947);
IkReal gconst2=(x9946*x9947);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9950=((-1.0)*r20);
IkReal x9951=x9289;
CheckValue<IkReal> x9953 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9950),IKFAST_ATAN2_MAGTHRESH);
if(!x9953.valid){
continue;
}
IkReal x9952=((-1.0)*(x9953.value));
sj5=gconst1;
cj5=gconst2;
j5=x9952;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9952;
IkReal gconst1=(r21*x9951);
IkReal gconst2=(x9950*x9951);
CheckValue<IkReal> x9961=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9961.valid){
continue;
}
IkReal x9954=x9961.value;
IkReal x9955=(sj3*x9954);
IkReal x9956=(r11*x9955);
IkReal x9957=(r00*x9955);
IkReal x9958=(r01*x9955);
IkReal x9959=(r10*x9955);
IkReal x9960=(r20*r21*x9955);
j4eval[0]=IKsign((((r02*r12*sj3))+((r01*x9956*(r21*r21)))+((r00*r20*r21*x9956))+((r10*x9957*(r20*r20)))+((r10*r20*r21*x9958))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9962=gconst2*gconst2;
IkReal x9963=gconst1*gconst1;
IkReal x9964=((1.0)*cj3);
IkReal x9965=((1.0)*sj3);
IkReal x9966=(r11*sj3);
IkReal x9967=(r10*sj3);
IkReal x9968=(gconst1*gconst2*r00);
IkReal x9969=(gconst1*gconst2*r01);
IkReal x9970=(r00*x9962);
IkReal x9971=(r01*x9963);
CheckValue<IkReal> x9972 = IKatan2WithCheck(IkReal((((gconst2*r02*x9966))+((gconst1*r02*x9967)))),IkReal((((x9966*x9969))+(((-1.0)*r11*x9965*x9970))+(((-1.0)*r10*x9965*x9968))+((x9967*x9971)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9972.valid){
continue;
}
CheckValue<IkReal> x9973=IKPowWithIntegerCheck(IKsign((((cj3*r11*x9968))+(((-1.0)*r10*x9964*x9970))+(((-1.0)*r11*x9964*x9971))+((cj3*r10*x9969))+(((-1.0)*r02*r12*x9964)))),-1);
if(!x9973.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9972.value)+(((1.5707963267949)*(x9973.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9974=IKsin(j4);
IkReal x9975=IKcos(j4);
IkReal x9976=(cj2*sj1);
IkReal x9977=(cj1*sj2);
IkReal x9978=(gconst1*sj3);
IkReal x9979=(cj3*gconst1);
IkReal x9980=(sj1*sj2);
IkReal x9981=(cj3*gconst2);
IkReal x9982=(cj1*cj2);
IkReal x9983=(gconst2*sj3);
IkReal x9984=((1.0)*x9975);
IkReal x9985=((1.0)*x9974);
IkReal x9986=(gconst1*x9974);
IkReal x9987=(cj3*x9974);
IkReal x9988=(x9977+x9976);
IkReal x9989=(x9975*x9983);
evalcond[0]=((((-1.0)*r22*x9984))+((r21*x9986))+(((-1.0)*gconst2*r20*x9985)));
evalcond[1]=(((r01*x9986))+(((-1.0)*r02*x9984))+(((-1.0)*gconst2*r00*x9985)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r10*x9985))+((r11*x9986))+(((-1.0)*r12*x9984)));
evalcond[3]=(((r11*x9983))+((r12*x9987))+((r11*x9975*x9979))+((r10*x9978))+(((-1.0)*r10*x9981*x9984)));
evalcond[4]=(((r11*x9981))+((r10*x9989))+(((-1.0)*r11*x9978*x9984))+((r10*x9979))+(((-1.0)*r12*sj3*x9985)));
evalcond[5]=(((r22*x9987))+(((-1.0)*r20*x9981*x9984))+((r21*x9975*x9979))+((r21*x9983))+((r20*x9978))+x9988);
evalcond[6]=(((r00*x9989))+((r01*x9981))+(((-1.0)*r02*sj3*x9985))+(((-1.0)*r01*x9978*x9984))+((r00*x9979))+x9988);
evalcond[7]=(((r01*x9983))+(((-1.0)*r00*x9981*x9984))+((r01*x9975*x9979))+(((-1.0)*x9980))+((r02*x9987))+((r00*x9978))+x9982);
evalcond[8]=((((-1.0)*r22*sj3*x9985))+(((-1.0)*r21*x9978*x9984))+((r21*x9981))+((r20*x9979))+(((-1.0)*x9982))+((r20*x9989))+x9980);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9990=gconst2*gconst2;
IkReal x9991=gconst1*gconst1;
IkReal x9992=(gconst2*r11);
IkReal x9993=(cj3*r02);
IkReal x9994=(gconst1*r01);
IkReal x9995=(cj3*r10);
IkReal x9996=(r10*sj3);
IkReal x9997=((1.0)*gconst1*r00);
IkReal x9998=(r01*x9991);
IkReal x9999=(r00*x9990);
CheckValue<IkReal> x10000=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((x9996*x9999))+(((-1.0)*sj3*x9992*x9997))+((r11*sj3*x9998))+(((-1.0)*gconst2*x9994*x9996)))),-1);
if(!x10000.valid){
continue;
}
CheckValue<IkReal> x10001 = IKatan2WithCheck(IkReal((((gconst1*r10*x9993))+((x9992*x9993)))),IkReal((((cj3*x9992*x9994))+(((-1.0)*gconst2*x9995*x9997))+((x9995*x9998))+(((-1.0)*cj3*r11*x9999)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10001.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10000.value)))+(x10001.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10002=IKsin(j4);
IkReal x10003=IKcos(j4);
IkReal x10004=(cj2*sj1);
IkReal x10005=(cj1*sj2);
IkReal x10006=(gconst1*sj3);
IkReal x10007=(cj3*gconst1);
IkReal x10008=(sj1*sj2);
IkReal x10009=(cj3*gconst2);
IkReal x10010=(cj1*cj2);
IkReal x10011=(gconst2*sj3);
IkReal x10012=((1.0)*x10003);
IkReal x10013=((1.0)*x10002);
IkReal x10014=(gconst1*x10002);
IkReal x10015=(cj3*x10002);
IkReal x10016=(x10004+x10005);
IkReal x10017=(x10003*x10011);
evalcond[0]=(((r21*x10014))+(((-1.0)*gconst2*r20*x10013))+(((-1.0)*r22*x10012)));
evalcond[1]=((((-1.0)*gconst2*r00*x10013))+(((-1.0)*r02*x10012))+((r01*x10014)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r10*x10013))+(((-1.0)*r12*x10012))+((r11*x10014)));
evalcond[3]=(((r11*x10003*x10007))+((r12*x10015))+((r11*x10011))+((r10*x10006))+(((-1.0)*r10*x10009*x10012)));
evalcond[4]=((((-1.0)*r11*x10006*x10012))+((r10*x10017))+(((-1.0)*r12*sj3*x10013))+((r10*x10007))+((r11*x10009)));
evalcond[5]=(((r21*x10011))+(((-1.0)*r20*x10009*x10012))+((r22*x10015))+((r21*x10003*x10007))+x10016+((r20*x10006)));
evalcond[6]=((((-1.0)*r01*x10006*x10012))+x10016+((r01*x10009))+((r00*x10017))+((r00*x10007))+(((-1.0)*r02*sj3*x10013)));
evalcond[7]=(((r02*x10015))+(((-1.0)*r00*x10009*x10012))+(((-1.0)*x10008))+x10010+((r01*x10011))+((r00*x10006))+((r01*x10003*x10007)));
evalcond[8]=((((-1.0)*x10010))+(((-1.0)*r21*x10006*x10012))+x10008+(((-1.0)*r22*sj3*x10013))+((r20*x10007))+((r20*x10017))+((r21*x10009)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10018 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10018.valid){
continue;
}
CheckValue<IkReal> x10019=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x10019.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10018.value)+(((1.5707963267949)*(x10019.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10020=IKsin(j4);
IkReal x10021=IKcos(j4);
IkReal x10022=(cj2*sj1);
IkReal x10023=(cj1*sj2);
IkReal x10024=(gconst1*sj3);
IkReal x10025=(cj3*gconst1);
IkReal x10026=(sj1*sj2);
IkReal x10027=(cj3*gconst2);
IkReal x10028=(cj1*cj2);
IkReal x10029=(gconst2*sj3);
IkReal x10030=((1.0)*x10021);
IkReal x10031=((1.0)*x10020);
IkReal x10032=(gconst1*x10020);
IkReal x10033=(cj3*x10020);
IkReal x10034=(x10022+x10023);
IkReal x10035=(x10021*x10029);
evalcond[0]=(((r21*x10032))+(((-1.0)*r22*x10030))+(((-1.0)*gconst2*r20*x10031)));
evalcond[1]=((((-1.0)*r02*x10030))+(((-1.0)*gconst2*r00*x10031))+((r01*x10032)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r10*x10031))+((r11*x10032))+(((-1.0)*r12*x10030)));
evalcond[3]=(((r10*x10024))+((r11*x10029))+((r12*x10033))+(((-1.0)*r10*x10027*x10030))+((r11*x10021*x10025)));
evalcond[4]=((((-1.0)*r11*x10024*x10030))+((r10*x10035))+((r10*x10025))+(((-1.0)*r12*sj3*x10031))+((r11*x10027)));
evalcond[5]=(((r21*x10029))+(((-1.0)*r20*x10027*x10030))+((r20*x10024))+x10034+((r21*x10021*x10025))+((r22*x10033)));
evalcond[6]=((((-1.0)*r01*x10024*x10030))+(((-1.0)*r02*sj3*x10031))+((r01*x10027))+x10034+((r00*x10035))+((r00*x10025)));
evalcond[7]=(((r01*x10021*x10025))+(((-1.0)*x10026))+((r01*x10029))+x10028+((r00*x10024))+(((-1.0)*r00*x10027*x10030))+((r02*x10033)));
evalcond[8]=((((-1.0)*x10028))+((r21*x10027))+((r20*x10025))+(((-1.0)*r22*sj3*x10031))+((r20*x10035))+x10026+(((-1.0)*r21*x10024*x10030)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10036=((-1.0)*r20);
IkReal x10037=x9289;
CheckValue<IkReal> x10039 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x10036),IKFAST_ATAN2_MAGTHRESH);
if(!x10039.valid){
continue;
}
IkReal x10038=((-1.0)*(x10039.value));
sj5=gconst1;
cj5=gconst2;
j5=x10038;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x10038;
IkReal gconst1=(r21*x10037);
IkReal gconst2=(x10036*x10037);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10040=((-1.0)*r20);
IkReal x10041=x9289;
CheckValue<IkReal> x10043 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x10040),IKFAST_ATAN2_MAGTHRESH);
if(!x10043.valid){
continue;
}
IkReal x10042=((-1.0)*(x10043.value));
sj5=gconst1;
cj5=gconst2;
j5=x10042;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x10042;
IkReal gconst1=(r21*x10041);
IkReal gconst2=(x10040*x10041);
CheckValue<IkReal> x10051=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x10051.valid){
continue;
}
IkReal x10044=x10051.value;
IkReal x10045=(sj3*x10044);
IkReal x10046=(r11*x10045);
IkReal x10047=(r00*x10045);
IkReal x10048=(r01*x10045);
IkReal x10049=(r10*x10045);
IkReal x10050=(r20*r21*x10045);
j4eval[0]=IKsign((((r02*r12*sj3))+((r00*r20*r21*x10046))+((r10*x10047*(r20*r20)))+((r10*r20*r21*x10048))+((r01*x10046*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10052=gconst2*gconst2;
IkReal x10053=gconst1*gconst1;
IkReal x10054=((1.0)*cj3);
IkReal x10055=((1.0)*sj3);
IkReal x10056=(r11*sj3);
IkReal x10057=(r10*sj3);
IkReal x10058=(gconst1*gconst2*r00);
IkReal x10059=(gconst1*gconst2*r01);
IkReal x10060=(r00*x10052);
IkReal x10061=(r01*x10053);
CheckValue<IkReal> x10062 = IKatan2WithCheck(IkReal((((gconst1*r02*x10057))+((gconst2*r02*x10056)))),IkReal(((((-1.0)*r11*x10055*x10060))+((x10057*x10061))+(((-1.0)*r10*x10055*x10058))+((x10056*x10059)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10062.valid){
continue;
}
CheckValue<IkReal> x10063=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12*x10054))+(((-1.0)*r11*x10054*x10061))+(((-1.0)*r10*x10054*x10060))+((cj3*r10*x10059))+((cj3*r11*x10058)))),-1);
if(!x10063.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10062.value)+(((1.5707963267949)*(x10063.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10064=IKsin(j4);
IkReal x10065=IKcos(j4);
IkReal x10066=(sj1*sj2);
IkReal x10067=(gconst1*sj3);
IkReal x10068=(cj3*gconst1);
IkReal x10069=(cj3*gconst2);
IkReal x10070=((1.0)*cj2);
IkReal x10071=(cj1*sj2);
IkReal x10072=(gconst2*sj3);
IkReal x10073=(cj1*x10070);
IkReal x10074=((1.0)*x10065);
IkReal x10075=((1.0)*x10064);
IkReal x10076=(gconst1*x10064);
IkReal x10077=(cj3*x10064);
IkReal x10078=(x10065*x10072);
evalcond[0]=(((r21*x10076))+(((-1.0)*r22*x10074))+(((-1.0)*gconst2*r20*x10075)));
evalcond[1]=(((r01*x10076))+(((-1.0)*gconst2*r00*x10075))+(((-1.0)*r02*x10074)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r10*x10075))+(((-1.0)*r12*x10074))+((r11*x10076)));
evalcond[3]=(((r10*x10067))+((r12*x10077))+((r11*x10065*x10068))+((r11*x10072))+(((-1.0)*r10*x10069*x10074)));
evalcond[4]=(((r10*x10078))+((r10*x10068))+(((-1.0)*r12*sj3*x10075))+(((-1.0)*r11*x10067*x10074))+((r11*x10069)));
evalcond[5]=(((cj2*sj1))+((r21*x10065*x10068))+(((-1.0)*r20*x10069*x10074))+((r20*x10067))+x10071+((r22*x10077))+((r21*x10072)));
evalcond[6]=((((-1.0)*r00*x10069*x10074))+((r00*x10067))+(((-1.0)*x10073))+((r01*x10072))+x10066+((r01*x10065*x10068))+((r02*x10077)));
evalcond[7]=((((-1.0)*r22*sj3*x10075))+((r20*x10068))+((r20*x10078))+(((-1.0)*x10073))+x10066+(((-1.0)*r21*x10067*x10074))+((r21*x10069)));
evalcond[8]=((((-1.0)*r01*x10067*x10074))+((r00*x10068))+((r00*x10078))+((r01*x10069))+(((-1.0)*sj1*x10070))+(((-1.0)*r02*sj3*x10075))+(((-1.0)*x10071)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10079=gconst2*gconst2;
IkReal x10080=gconst1*gconst1;
IkReal x10081=(gconst2*r11);
IkReal x10082=(cj3*r02);
IkReal x10083=(gconst1*r01);
IkReal x10084=(cj3*r10);
IkReal x10085=(r10*sj3);
IkReal x10086=((1.0)*gconst1*r00);
IkReal x10087=(r01*x10080);
IkReal x10088=(r00*x10079);
CheckValue<IkReal> x10089=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*sj3*x10081*x10086))+((x10085*x10088))+((r11*sj3*x10087))+(((-1.0)*gconst2*x10083*x10085)))),-1);
if(!x10089.valid){
continue;
}
CheckValue<IkReal> x10090 = IKatan2WithCheck(IkReal((((x10081*x10082))+((gconst1*r10*x10082)))),IkReal(((((-1.0)*cj3*r11*x10088))+((x10084*x10087))+(((-1.0)*gconst2*x10084*x10086))+((cj3*x10081*x10083)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10090.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10089.value)))+(x10090.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10091=IKsin(j4);
IkReal x10092=IKcos(j4);
IkReal x10093=(sj1*sj2);
IkReal x10094=(gconst1*sj3);
IkReal x10095=(cj3*gconst1);
IkReal x10096=(cj3*gconst2);
IkReal x10097=((1.0)*cj2);
IkReal x10098=(cj1*sj2);
IkReal x10099=(gconst2*sj3);
IkReal x10100=(cj1*x10097);
IkReal x10101=((1.0)*x10092);
IkReal x10102=((1.0)*x10091);
IkReal x10103=(gconst1*x10091);
IkReal x10104=(cj3*x10091);
IkReal x10105=(x10092*x10099);
evalcond[0]=(((r21*x10103))+(((-1.0)*gconst2*r20*x10102))+(((-1.0)*r22*x10101)));
evalcond[1]=(((r01*x10103))+(((-1.0)*r02*x10101))+(((-1.0)*gconst2*r00*x10102)));
evalcond[2]=((1.0)+(((-1.0)*r12*x10101))+(((-1.0)*gconst2*r10*x10102))+((r11*x10103)));
evalcond[3]=((((-1.0)*r10*x10096*x10101))+((r11*x10099))+((r11*x10092*x10095))+((r10*x10094))+((r12*x10104)));
evalcond[4]=((((-1.0)*r12*sj3*x10102))+((r11*x10096))+((r10*x10105))+((r10*x10095))+(((-1.0)*r11*x10094*x10101)));
evalcond[5]=(((cj2*sj1))+x10098+((r21*x10092*x10095))+(((-1.0)*r20*x10096*x10101))+((r21*x10099))+((r20*x10094))+((r22*x10104)));
evalcond[6]=((((-1.0)*r00*x10096*x10101))+x10093+((r02*x10104))+((r01*x10092*x10095))+(((-1.0)*x10100))+((r01*x10099))+((r00*x10094)));
evalcond[7]=(((r20*x10105))+(((-1.0)*r21*x10094*x10101))+x10093+((r21*x10096))+(((-1.0)*r22*sj3*x10102))+((r20*x10095))+(((-1.0)*x10100)));
evalcond[8]=(((r00*x10105))+(((-1.0)*sj1*x10097))+(((-1.0)*r01*x10094*x10101))+(((-1.0)*r02*sj3*x10102))+((r01*x10096))+((r00*x10095))+(((-1.0)*x10098)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10106=((1.0)*gconst2);
CheckValue<IkReal> x10107=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x10106)))),-1);
if(!x10107.valid){
continue;
}
CheckValue<IkReal> x10108 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x10106)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10108.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10107.value)))+(x10108.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10109=IKsin(j4);
IkReal x10110=IKcos(j4);
IkReal x10111=(sj1*sj2);
IkReal x10112=(gconst1*sj3);
IkReal x10113=(cj3*gconst1);
IkReal x10114=(cj3*gconst2);
IkReal x10115=((1.0)*cj2);
IkReal x10116=(cj1*sj2);
IkReal x10117=(gconst2*sj3);
IkReal x10118=(cj1*x10115);
IkReal x10119=((1.0)*x10110);
IkReal x10120=((1.0)*x10109);
IkReal x10121=(gconst1*x10109);
IkReal x10122=(cj3*x10109);
IkReal x10123=(x10110*x10117);
evalcond[0]=(((r21*x10121))+(((-1.0)*r22*x10119))+(((-1.0)*gconst2*r20*x10120)));
evalcond[1]=((((-1.0)*gconst2*r00*x10120))+(((-1.0)*r02*x10119))+((r01*x10121)));
evalcond[2]=((1.0)+(((-1.0)*r12*x10119))+(((-1.0)*gconst2*r10*x10120))+((r11*x10121)));
evalcond[3]=(((r11*x10117))+(((-1.0)*r10*x10114*x10119))+((r10*x10112))+((r12*x10122))+((r11*x10110*x10113)));
evalcond[4]=((((-1.0)*r11*x10112*x10119))+((r10*x10123))+((r11*x10114))+(((-1.0)*r12*sj3*x10120))+((r10*x10113)));
evalcond[5]=(((r21*x10117))+((cj2*sj1))+((r20*x10112))+x10116+((r21*x10110*x10113))+((r22*x10122))+(((-1.0)*r20*x10114*x10119)));
evalcond[6]=(((r01*x10117))+((r00*x10112))+(((-1.0)*r00*x10114*x10119))+((r01*x10110*x10113))+x10111+((r02*x10122))+(((-1.0)*x10118)));
evalcond[7]=(((r21*x10114))+((r20*x10123))+((r20*x10113))+(((-1.0)*r22*sj3*x10120))+x10111+(((-1.0)*x10118))+(((-1.0)*r21*x10112*x10119)));
evalcond[8]=(((r01*x10114))+(((-1.0)*x10116))+((r00*x10113))+(((-1.0)*r01*x10112*x10119))+((r00*x10123))+(((-1.0)*sj1*x10115))+(((-1.0)*r02*sj3*x10120)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10124=((-1.0)*r20);
IkReal x10125=x9289;
CheckValue<IkReal> x10127 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x10124),IKFAST_ATAN2_MAGTHRESH);
if(!x10127.valid){
continue;
}
IkReal x10126=((-1.0)*(x10127.value));
sj5=gconst1;
cj5=gconst2;
j5=x10126;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x10126;
IkReal gconst1=(r21*x10125);
IkReal gconst2=(x10124*x10125);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10128=((-1.0)*r20);
IkReal x10129=x9289;
CheckValue<IkReal> x10131 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x10128),IKFAST_ATAN2_MAGTHRESH);
if(!x10131.valid){
continue;
}
IkReal x10130=((-1.0)*(x10131.value));
sj5=gconst1;
cj5=gconst2;
j5=x10130;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x10130;
IkReal gconst1=(r21*x10129);
IkReal gconst2=(x10128*x10129);
CheckValue<IkReal> x10139=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x10139.valid){
continue;
}
IkReal x10132=x10139.value;
IkReal x10133=(sj3*x10132);
IkReal x10134=(r11*x10133);
IkReal x10135=(r00*x10133);
IkReal x10136=(r01*x10133);
IkReal x10137=(r10*x10133);
IkReal x10138=(r20*r21*x10133);
j4eval[0]=IKsign((((r02*r12*sj3))+((r00*r20*r21*x10134))+((r01*x10134*(r21*r21)))+((r10*r20*r21*x10136))+((r10*x10135*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10140=gconst1*gconst1;
IkReal x10141=gconst2*gconst2;
IkReal x10142=((1.0)*cj3);
IkReal x10143=(gconst2*r10);
IkReal x10144=(r01*sj3);
IkReal x10145=(gconst1*r00*sj3);
IkReal x10146=(gconst1*gconst2*r11);
IkReal x10147=(r10*x10141);
IkReal x10148=(r11*x10140);
CheckValue<IkReal> x10149=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12*x10142))+(((-1.0)*r01*x10142*x10148))+((cj3*r00*x10146))+(((-1.0)*r00*x10142*x10147))+((cj3*gconst1*r01*x10143)))),-1);
if(!x10149.valid){
continue;
}
CheckValue<IkReal> x10150 = IKatan2WithCheck(IkReal((((r12*x10145))+((gconst2*r12*x10144)))),IkReal(((((-1.0)*x10143*x10145))+(((-1.0)*x10144*x10147))+((x10144*x10146))+((r00*sj3*x10148)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10150.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10149.value)))+(x10150.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10151=IKsin(j4);
IkReal x10152=IKcos(j4);
IkReal x10153=(sj1*sj2);
IkReal x10154=(gconst1*sj3);
IkReal x10155=(cj3*gconst1);
IkReal x10156=(cj3*gconst2);
IkReal x10157=((1.0)*cj2);
IkReal x10158=(cj1*sj2);
IkReal x10159=(gconst2*sj3);
IkReal x10160=(cj1*x10157);
IkReal x10161=((1.0)*x10152);
IkReal x10162=((1.0)*x10151);
IkReal x10163=(gconst1*x10151);
IkReal x10164=(cj3*x10151);
IkReal x10165=(x10152*x10159);
evalcond[0]=((((-1.0)*r22*x10161))+(((-1.0)*gconst2*r20*x10162))+((r21*x10163)));
evalcond[1]=((((-1.0)*r12*x10161))+(((-1.0)*gconst2*r10*x10162))+((r11*x10163)));
evalcond[2]=((-1.0)+((r01*x10163))+(((-1.0)*gconst2*r00*x10162))+(((-1.0)*r02*x10161)));
evalcond[3]=(((r01*x10152*x10155))+(((-1.0)*r00*x10156*x10161))+((r02*x10164))+((r01*x10159))+((r00*x10154)));
evalcond[4]=((((-1.0)*r01*x10154*x10161))+((r00*x10165))+(((-1.0)*r02*sj3*x10162))+((r01*x10156))+((r00*x10155)));
evalcond[5]=(((cj2*sj1))+((r22*x10164))+((r21*x10159))+x10158+(((-1.0)*r20*x10156*x10161))+((r21*x10152*x10155))+((r20*x10154)));
evalcond[6]=((((-1.0)*r10*x10156*x10161))+(((-1.0)*x10160))+((r10*x10154))+x10153+((r12*x10164))+((r11*x10159))+((r11*x10152*x10155)));
evalcond[7]=((((-1.0)*x10160))+((r21*x10156))+((r20*x10165))+x10153+(((-1.0)*r22*sj3*x10162))+((r20*x10155))+(((-1.0)*r21*x10154*x10161)));
evalcond[8]=(((r10*x10165))+((r10*x10155))+(((-1.0)*r11*x10154*x10161))+(((-1.0)*sj1*x10157))+(((-1.0)*r12*sj3*x10162))+(((-1.0)*x10158))+((r11*x10156)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10166=gconst2*gconst2;
IkReal x10167=gconst1*gconst1;
IkReal x10168=(gconst1*r00);
IkReal x10169=(r11*sj3);
IkReal x10170=((1.0)*gconst2);
IkReal x10171=(cj3*r12);
IkReal x10172=(cj3*r11);
IkReal x10173=(gconst2*r01);
IkReal x10174=(cj3*r10);
IkReal x10175=(r10*sj3);
CheckValue<IkReal> x10176 = IKatan2WithCheck(IkReal((((x10168*x10171))+((x10171*x10173)))),IkReal(((((-1.0)*r01*x10166*x10174))+(((-1.0)*x10168*x10170*x10174))+((r00*x10167*x10172))+((gconst1*x10172*x10173)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10176.valid){
continue;
}
CheckValue<IkReal> x10177=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((r01*x10167*x10169))+(((-1.0)*x10168*x10169*x10170))+(((-1.0)*gconst1*r01*x10170*x10175))+((r00*x10166*x10175)))),-1);
if(!x10177.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10176.value)+(((1.5707963267949)*(x10177.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10178=IKsin(j4);
IkReal x10179=IKcos(j4);
IkReal x10180=(sj1*sj2);
IkReal x10181=(gconst1*sj3);
IkReal x10182=(cj3*gconst1);
IkReal x10183=(cj3*gconst2);
IkReal x10184=((1.0)*cj2);
IkReal x10185=(cj1*sj2);
IkReal x10186=(gconst2*sj3);
IkReal x10187=(cj1*x10184);
IkReal x10188=((1.0)*x10179);
IkReal x10189=((1.0)*x10178);
IkReal x10190=(gconst1*x10178);
IkReal x10191=(cj3*x10178);
IkReal x10192=(x10179*x10186);
evalcond[0]=(((r21*x10190))+(((-1.0)*r22*x10188))+(((-1.0)*gconst2*r20*x10189)));
evalcond[1]=((((-1.0)*gconst2*r10*x10189))+((r11*x10190))+(((-1.0)*r12*x10188)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x10188))+(((-1.0)*gconst2*r00*x10189))+((r01*x10190)));
evalcond[3]=(((r02*x10191))+(((-1.0)*r00*x10183*x10188))+((r00*x10181))+((r01*x10179*x10182))+((r01*x10186)));
evalcond[4]=((((-1.0)*r02*sj3*x10189))+(((-1.0)*r01*x10181*x10188))+((r00*x10182))+((r00*x10192))+((r01*x10183)));
evalcond[5]=(((cj2*sj1))+((r22*x10191))+(((-1.0)*r20*x10183*x10188))+x10185+((r21*x10179*x10182))+((r21*x10186))+((r20*x10181)));
evalcond[6]=(((r11*x10186))+((r10*x10181))+(((-1.0)*r10*x10183*x10188))+((r12*x10191))+((r11*x10179*x10182))+x10180+(((-1.0)*x10187)));
evalcond[7]=((((-1.0)*r22*sj3*x10189))+x10180+(((-1.0)*x10187))+(((-1.0)*r21*x10181*x10188))+((r21*x10183))+((r20*x10192))+((r20*x10182)));
evalcond[8]=(((r11*x10183))+((r10*x10182))+(((-1.0)*r11*x10181*x10188))+((r10*x10192))+(((-1.0)*x10185))+(((-1.0)*sj1*x10184))+(((-1.0)*r12*sj3*x10189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10193=((1.0)*gconst2);
CheckValue<IkReal> x10194 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10193))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10194.valid){
continue;
}
CheckValue<IkReal> x10195=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x10193)))),-1);
if(!x10195.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10194.value)+(((1.5707963267949)*(x10195.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10196=IKsin(j4);
IkReal x10197=IKcos(j4);
IkReal x10198=(sj1*sj2);
IkReal x10199=(gconst1*sj3);
IkReal x10200=(cj3*gconst1);
IkReal x10201=(cj3*gconst2);
IkReal x10202=((1.0)*cj2);
IkReal x10203=(cj1*sj2);
IkReal x10204=(gconst2*sj3);
IkReal x10205=(cj1*x10202);
IkReal x10206=((1.0)*x10197);
IkReal x10207=((1.0)*x10196);
IkReal x10208=(gconst1*x10196);
IkReal x10209=(cj3*x10196);
IkReal x10210=(x10197*x10204);
evalcond[0]=((((-1.0)*r22*x10206))+((r21*x10208))+(((-1.0)*gconst2*r20*x10207)));
evalcond[1]=((((-1.0)*gconst2*r10*x10207))+((r11*x10208))+(((-1.0)*r12*x10206)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x10206))+((r01*x10208))+(((-1.0)*gconst2*r00*x10207)));
evalcond[3]=(((r02*x10209))+((r01*x10204))+((r00*x10199))+(((-1.0)*r00*x10201*x10206))+((r01*x10197*x10200)));
evalcond[4]=(((r00*x10210))+((r00*x10200))+((r01*x10201))+(((-1.0)*r02*sj3*x10207))+(((-1.0)*r01*x10199*x10206)));
evalcond[5]=(((cj2*sj1))+((r22*x10209))+((r21*x10197*x10200))+((r21*x10204))+(((-1.0)*r20*x10201*x10206))+x10203+((r20*x10199)));
evalcond[6]=((((-1.0)*r10*x10201*x10206))+((r10*x10199))+((r11*x10197*x10200))+x10198+(((-1.0)*x10205))+((r12*x10209))+((r11*x10204)));
evalcond[7]=(((r20*x10210))+((r21*x10201))+x10198+(((-1.0)*x10205))+((r20*x10200))+(((-1.0)*r22*sj3*x10207))+(((-1.0)*r21*x10199*x10206)));
evalcond[8]=((((-1.0)*x10203))+((r10*x10210))+((r10*x10200))+(((-1.0)*r12*sj3*x10207))+(((-1.0)*sj1*x10202))+((r11*x10201))+(((-1.0)*r11*x10199*x10206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10211=((-1.0)*r20);
IkReal x10212=x9289;
CheckValue<IkReal> x10214 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x10211),IKFAST_ATAN2_MAGTHRESH);
if(!x10214.valid){
continue;
}
IkReal x10213=((-1.0)*(x10214.value));
sj5=gconst1;
cj5=gconst2;
j5=x10213;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x10213;
IkReal gconst1=(r21*x10212);
IkReal gconst2=(x10211*x10212);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10215=((-1.0)*r20);
IkReal x10216=x9289;
CheckValue<IkReal> x10218 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x10215),IKFAST_ATAN2_MAGTHRESH);
if(!x10218.valid){
continue;
}
IkReal x10217=((-1.0)*(x10218.value));
sj5=gconst1;
cj5=gconst2;
j5=x10217;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x10217;
IkReal gconst1=(r21*x10216);
IkReal gconst2=(x10215*x10216);
CheckValue<IkReal> x10226=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x10226.valid){
continue;
}
IkReal x10219=x10226.value;
IkReal x10220=(sj3*x10219);
IkReal x10221=(r11*x10220);
IkReal x10222=(r00*x10220);
IkReal x10223=(r01*x10220);
IkReal x10224=(r10*x10220);
IkReal x10225=(r20*r21*x10220);
j4eval[0]=IKsign((((r02*r12*sj3))+((r00*r20*r21*x10221))+((r10*r20*r21*x10223))+((r10*x10222*(r20*r20)))+((r01*x10221*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10227=gconst1*gconst1;
IkReal x10228=gconst2*gconst2;
IkReal x10229=((1.0)*cj3);
IkReal x10230=(gconst2*r10);
IkReal x10231=(r01*sj3);
IkReal x10232=(gconst1*r00*sj3);
IkReal x10233=(gconst1*gconst2*r11);
IkReal x10234=(r10*x10228);
IkReal x10235=(r11*x10227);
CheckValue<IkReal> x10236=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12*x10229))+(((-1.0)*r00*x10229*x10234))+((cj3*gconst1*r01*x10230))+((cj3*r00*x10233))+(((-1.0)*r01*x10229*x10235)))),-1);
if(!x10236.valid){
continue;
}
CheckValue<IkReal> x10237 = IKatan2WithCheck(IkReal((((gconst2*r12*x10231))+((r12*x10232)))),IkReal(((((-1.0)*x10231*x10234))+(((-1.0)*x10230*x10232))+((r00*sj3*x10235))+((x10231*x10233)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10237.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10236.value)))+(x10237.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10238=IKsin(j4);
IkReal x10239=IKcos(j4);
IkReal x10240=(cj2*sj1);
IkReal x10241=(cj1*sj2);
IkReal x10242=(gconst1*sj3);
IkReal x10243=(cj3*gconst1);
IkReal x10244=(sj1*sj2);
IkReal x10245=(cj3*gconst2);
IkReal x10246=(cj1*cj2);
IkReal x10247=(gconst2*sj3);
IkReal x10248=((1.0)*x10239);
IkReal x10249=((1.0)*x10238);
IkReal x10250=(gconst1*x10238);
IkReal x10251=(cj3*x10238);
IkReal x10252=(x10240+x10241);
IkReal x10253=(x10239*x10247);
evalcond[0]=((((-1.0)*gconst2*r20*x10249))+(((-1.0)*r22*x10248))+((r21*x10250)));
evalcond[1]=((((-1.0)*gconst2*r10*x10249))+(((-1.0)*r12*x10248))+((r11*x10250)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r00*x10249))+(((-1.0)*r02*x10248))+((r01*x10250)));
evalcond[3]=((((-1.0)*r00*x10245*x10248))+((r02*x10251))+((r01*x10239*x10243))+((r01*x10247))+((r00*x10242)));
evalcond[4]=((((-1.0)*r02*sj3*x10249))+(((-1.0)*r01*x10242*x10248))+((r00*x10253))+((r01*x10245))+((r00*x10243)));
evalcond[5]=(((r22*x10251))+(((-1.0)*r20*x10245*x10248))+((r21*x10247))+x10252+((r20*x10242))+((r21*x10239*x10243)));
evalcond[6]=(((r12*x10251))+((r10*x10242))+((r11*x10239*x10243))+x10246+(((-1.0)*x10244))+((r11*x10247))+(((-1.0)*r10*x10245*x10248)));
evalcond[7]=(((r10*x10253))+((r10*x10243))+(((-1.0)*r11*x10242*x10248))+x10252+(((-1.0)*r12*sj3*x10249))+((r11*x10245)));
evalcond[8]=((((-1.0)*r21*x10242*x10248))+((r21*x10245))+(((-1.0)*r22*sj3*x10249))+x10244+((r20*x10243))+((r20*x10253))+(((-1.0)*x10246)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10254=gconst2*gconst2;
IkReal x10255=gconst1*gconst1;
IkReal x10256=(gconst1*r00);
IkReal x10257=(r11*sj3);
IkReal x10258=((1.0)*gconst2);
IkReal x10259=(cj3*r12);
IkReal x10260=(cj3*r11);
IkReal x10261=(gconst2*r01);
IkReal x10262=(cj3*r10);
IkReal x10263=(r10*sj3);
CheckValue<IkReal> x10264 = IKatan2WithCheck(IkReal((((x10256*x10259))+((x10259*x10261)))),IkReal(((((-1.0)*r01*x10254*x10262))+((gconst1*x10260*x10261))+((r00*x10255*x10260))+(((-1.0)*x10256*x10258*x10262)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10264.valid){
continue;
}
CheckValue<IkReal> x10265=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*x10256*x10257*x10258))+(((-1.0)*gconst1*r01*x10258*x10263))+((r01*x10255*x10257))+((r00*x10254*x10263)))),-1);
if(!x10265.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10264.value)+(((1.5707963267949)*(x10265.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10266=IKsin(j4);
IkReal x10267=IKcos(j4);
IkReal x10268=(cj2*sj1);
IkReal x10269=(cj1*sj2);
IkReal x10270=(gconst1*sj3);
IkReal x10271=(cj3*gconst1);
IkReal x10272=(sj1*sj2);
IkReal x10273=(cj3*gconst2);
IkReal x10274=(cj1*cj2);
IkReal x10275=(gconst2*sj3);
IkReal x10276=((1.0)*x10267);
IkReal x10277=((1.0)*x10266);
IkReal x10278=(gconst1*x10266);
IkReal x10279=(cj3*x10266);
IkReal x10280=(x10268+x10269);
IkReal x10281=(x10267*x10275);
evalcond[0]=((((-1.0)*r22*x10276))+((r21*x10278))+(((-1.0)*gconst2*r20*x10277)));
evalcond[1]=(((r11*x10278))+(((-1.0)*r12*x10276))+(((-1.0)*gconst2*r10*x10277)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r00*x10277))+((r01*x10278))+(((-1.0)*r02*x10276)));
evalcond[3]=(((r00*x10270))+((r01*x10275))+(((-1.0)*r00*x10273*x10276))+((r02*x10279))+((r01*x10267*x10271)));
evalcond[4]=(((r00*x10271))+((r01*x10273))+(((-1.0)*r01*x10270*x10276))+(((-1.0)*r02*sj3*x10277))+((r00*x10281)));
evalcond[5]=(((r20*x10270))+((r21*x10275))+(((-1.0)*r20*x10273*x10276))+x10280+((r21*x10267*x10271))+((r22*x10279)));
evalcond[6]=(((r12*x10279))+(((-1.0)*r10*x10273*x10276))+((r11*x10275))+x10274+(((-1.0)*x10272))+((r10*x10270))+((r11*x10267*x10271)));
evalcond[7]=(((r11*x10273))+(((-1.0)*r12*sj3*x10277))+(((-1.0)*r11*x10270*x10276))+x10280+((r10*x10281))+((r10*x10271)));
evalcond[8]=(((r20*x10281))+((r20*x10271))+(((-1.0)*r22*sj3*x10277))+((r21*x10273))+x10272+(((-1.0)*x10274))+(((-1.0)*r21*x10270*x10276)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10282 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10282.valid){
continue;
}
CheckValue<IkReal> x10283=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x10283.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10282.value)+(((1.5707963267949)*(x10283.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10284=IKsin(j4);
IkReal x10285=IKcos(j4);
IkReal x10286=(cj2*sj1);
IkReal x10287=(cj1*sj2);
IkReal x10288=(gconst1*sj3);
IkReal x10289=(cj3*gconst1);
IkReal x10290=(sj1*sj2);
IkReal x10291=(cj3*gconst2);
IkReal x10292=(cj1*cj2);
IkReal x10293=(gconst2*sj3);
IkReal x10294=((1.0)*x10285);
IkReal x10295=((1.0)*x10284);
IkReal x10296=(gconst1*x10284);
IkReal x10297=(cj3*x10284);
IkReal x10298=(x10286+x10287);
IkReal x10299=(x10285*x10293);
evalcond[0]=(((r21*x10296))+(((-1.0)*r22*x10294))+(((-1.0)*gconst2*r20*x10295)));
evalcond[1]=((((-1.0)*gconst2*r10*x10295))+((r11*x10296))+(((-1.0)*r12*x10294)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r00*x10295))+(((-1.0)*r02*x10294))+((r01*x10296)));
evalcond[3]=(((r01*x10285*x10289))+(((-1.0)*r00*x10291*x10294))+((r02*x10297))+((r01*x10293))+((r00*x10288)));
evalcond[4]=((((-1.0)*r02*sj3*x10295))+(((-1.0)*r01*x10288*x10294))+((r01*x10291))+((r00*x10299))+((r00*x10289)));
evalcond[5]=(((r20*x10288))+((r21*x10285*x10289))+(((-1.0)*r20*x10291*x10294))+((r21*x10293))+x10298+((r22*x10297)));
evalcond[6]=(((r12*x10297))+((r11*x10293))+((r11*x10285*x10289))+(((-1.0)*x10290))+x10292+((r10*x10288))+(((-1.0)*r10*x10291*x10294)));
evalcond[7]=((((-1.0)*r12*sj3*x10295))+((r11*x10291))+(((-1.0)*r11*x10288*x10294))+((r10*x10299))+x10298+((r10*x10289)));
evalcond[8]=(((r20*x10289))+((r20*x10299))+(((-1.0)*r22*sj3*x10295))+(((-1.0)*x10292))+((r21*x10291))+x10290+(((-1.0)*r21*x10288*x10294)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10300=((-1.0)*r20);
IkReal x10301=((-1.0)*px);
CheckValue<IkReal> x10303 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x10300),IKFAST_ATAN2_MAGTHRESH);
if(!x10303.valid){
continue;
}
IkReal x10302=((-1.0)*(x10303.value));
sj5=gconst1;
cj5=gconst2;
j5=x10302;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10301);
rxp1_1=(px*r21);
rxp1_2=(r11*x10301);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x10302;
IkReal gconst1=r21;
IkReal gconst2=x10300;
j4eval[0]=(((r11*r21))+((r10*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10304=((-1.0)*r20);
IkReal x10305=((-1.0)*px);
CheckValue<IkReal> x10307 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x10304),IKFAST_ATAN2_MAGTHRESH);
if(!x10307.valid){
continue;
}
IkReal x10306=((-1.0)*(x10307.value));
sj5=gconst1;
cj5=gconst2;
j5=x10306;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10305);
rxp1_1=(px*r21);
rxp1_2=(r11*x10305);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x10306;
IkReal gconst1=r21;
IkReal gconst2=x10304;
j4eval[0]=(((r11*r21))+((r10*r20)));
j4eval[1]=(((cj3*(r21*r21)))+cj3+(((-1.0)*cj3*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10308=((-1.0)*r20);
IkReal x10309=((-1.0)*px);
CheckValue<IkReal> x10311 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x10308),IKFAST_ATAN2_MAGTHRESH);
if(!x10311.valid){
continue;
}
IkReal x10310=((-1.0)*(x10311.value));
sj5=gconst1;
cj5=gconst2;
j5=x10310;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10309);
rxp1_1=(px*r21);
rxp1_2=(r11*x10309);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x10310;
IkReal gconst1=r21;
IkReal gconst2=x10308;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10312=((-1.0)*r20);
IkReal x10313=((-1.0)*px);
CheckValue<IkReal> x10315 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x10312),IKFAST_ATAN2_MAGTHRESH);
if(!x10315.valid){
continue;
}
IkReal x10314=((-1.0)*(x10315.value));
sj5=gconst1;
cj5=gconst2;
j5=x10314;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10313);
rxp1_1=(px*r21);
rxp1_2=(r11*x10313);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x10314;
IkReal gconst1=r21;
IkReal gconst2=x10312;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10316=((-1.0)*r20);
IkReal x10317=((-1.0)*px);
CheckValue<IkReal> x10319 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x10316),IKFAST_ATAN2_MAGTHRESH);
if(!x10319.valid){
continue;
}
IkReal x10318=((-1.0)*(x10319.value));
sj5=gconst1;
cj5=gconst2;
j5=x10318;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10317);
rxp1_1=(px*r21);
rxp1_2=(r11*x10317);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x10318;
IkReal gconst1=r21;
IkReal gconst2=x10316;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10320=((-1.0)*r20);
IkReal x10321=((-1.0)*px);
CheckValue<IkReal> x10323 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x10320),IKFAST_ATAN2_MAGTHRESH);
if(!x10323.valid){
continue;
}
IkReal x10322=((-1.0)*(x10323.value));
sj5=gconst1;
cj5=gconst2;
j5=x10322;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10321);
rxp1_1=(px*r21);
rxp1_2=(r11*x10321);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x10322;
IkReal gconst1=r21;
IkReal gconst2=x10320;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10326=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x10326.valid){
continue;
}
IkReal x10324=x10326.value;
IkReal x10325=(cj0*x10324);
cj4array[0]=(((cj1*sj2*x10325))+((cj2*sj1*x10325)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10327=IKsin(j4);
IkReal x10328=IKcos(j4);
IkReal x10329=(gconst1*x10327);
IkReal x10330=((1.0)*x10328);
IkReal x10331=((1.0)*gconst2*x10327);
evalcond[0]=((-1.0)*r02*x10327);
evalcond[1]=((((-1.0)*cj0))+(((-1.0)*r02*x10330)));
evalcond[2]=(((r21*x10329))+(((-1.0)*r20*x10331)));
evalcond[3]=(((r11*x10329))+(((-1.0)*r10*x10331)));
evalcond[4]=(((gconst2*r20*x10328))+(((-1.0)*gconst1*r21*x10330))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10333=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x10333.valid){
continue;
}
IkReal x10332=x10333.value;
cj4array[0]=((((-1.0)*sj1*sj2*x10332))+((cj1*cj2*x10332)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10334=IKsin(j4);
IkReal x10335=IKcos(j4);
IkReal x10336=(gconst2*r10);
IkReal x10337=((1.0)*cj0);
IkReal x10338=((1.0)*x10334);
IkReal x10339=(gconst1*x10334);
IkReal x10340=((1.0)*x10335);
evalcond[0]=((-1.0)*r02*x10334);
evalcond[1]=((((-1.0)*r02*x10340))+(((-1.0)*x10337)));
evalcond[2]=((((-1.0)*gconst2*r20*x10338))+((r21*x10339)));
evalcond[3]=((((-1.0)*x10336*x10338))+((r11*x10339)));
evalcond[4]=((((-1.0)*gconst1*r11*x10340))+(((-1.0)*cj2*sj1*x10337))+(((-1.0)*cj1*sj2*x10337))+((x10335*x10336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10341=IKPowWithIntegerCheck(r02,-1);
if(!x10341.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x10341.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10342=IKsin(j4);
IkReal x10343=IKcos(j4);
IkReal x10344=(gconst2*r10);
IkReal x10345=(gconst1*r11);
IkReal x10346=(gconst1*r21);
IkReal x10347=((1.0)*cj0);
IkReal x10348=(gconst2*r20);
IkReal x10349=((1.0)*x10342);
IkReal x10350=((1.0)*x10343);
evalcond[0]=((-1.0)*r02*x10342);
evalcond[1]=(((x10342*x10346))+(((-1.0)*x10348*x10349)));
evalcond[2]=(((x10342*x10345))+(((-1.0)*x10344*x10349)));
evalcond[3]=(((x10343*x10348))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10346*x10350)));
evalcond[4]=(((x10343*x10344))+(((-1.0)*cj2*sj1*x10347))+(((-1.0)*cj1*sj2*x10347))+(((-1.0)*x10345*x10350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10351=((-1.0)*r20);
IkReal x10352=((-1.0)*px);
CheckValue<IkReal> x10354 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x10351),IKFAST_ATAN2_MAGTHRESH);
if(!x10354.valid){
continue;
}
IkReal x10353=((-1.0)*(x10354.value));
sj5=gconst1;
cj5=gconst2;
j5=x10353;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10352);
rxp1_1=(px*r21);
rxp1_2=(r11*x10352);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x10353;
IkReal gconst1=r21;
IkReal gconst2=x10351;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10355=((-1.0)*r20);
IkReal x10356=((-1.0)*px);
CheckValue<IkReal> x10358 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x10355),IKFAST_ATAN2_MAGTHRESH);
if(!x10358.valid){
continue;
}
IkReal x10357=((-1.0)*(x10358.value));
sj5=gconst1;
cj5=gconst2;
j5=x10357;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10356);
rxp1_1=(px*r21);
rxp1_2=(r11*x10356);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x10357;
IkReal gconst1=r21;
IkReal gconst2=x10355;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10359=((-1.0)*r20);
IkReal x10360=((-1.0)*px);
CheckValue<IkReal> x10362 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x10359),IKFAST_ATAN2_MAGTHRESH);
if(!x10362.valid){
continue;
}
IkReal x10361=((-1.0)*(x10362.value));
sj5=gconst1;
cj5=gconst2;
j5=x10361;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10360);
rxp1_1=(px*r21);
rxp1_2=(r11*x10360);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x10361;
IkReal gconst1=r21;
IkReal gconst2=x10359;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10365=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x10365.valid){
continue;
}
IkReal x10363=x10365.value;
IkReal x10364=(cj0*x10363);
cj4array[0]=(((cj1*sj2*x10364))+((cj2*sj1*x10364)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10366=IKsin(j4);
IkReal x10367=IKcos(j4);
IkReal x10368=((1.0)*gconst2);
IkReal x10369=(gconst1*r21);
evalcond[0]=(r02*x10366);
evalcond[1]=((((-1.0)*r02*x10367))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r20*x10366*x10368))+((x10366*x10369)));
evalcond[3]=(((gconst1*r11*x10366))+(((-1.0)*r10*x10366*x10368)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x10367*x10369))+(((-1.0)*r20*x10367*x10368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10371=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x10371.valid){
continue;
}
IkReal x10370=x10371.value;
cj4array[0]=((((-1.0)*sj1*sj2*x10370))+((cj1*cj2*x10370)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10372=IKsin(j4);
IkReal x10373=IKcos(j4);
IkReal x10374=((1.0)*cj0);
IkReal x10375=((1.0)*gconst2*r10);
IkReal x10376=(gconst1*x10372);
evalcond[0]=(r02*x10372);
evalcond[1]=((((-1.0)*r02*x10373))+(((-1.0)*x10374)));
evalcond[2]=((((-1.0)*gconst2*r20*x10372))+((r21*x10376)));
evalcond[3]=((((-1.0)*x10372*x10375))+((r11*x10376)));
evalcond[4]=((((-1.0)*cj2*sj1*x10374))+(((-1.0)*cj1*sj2*x10374))+((gconst1*r11*x10373))+(((-1.0)*x10373*x10375)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10377=IKPowWithIntegerCheck(r02,-1);
if(!x10377.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x10377.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10378=IKsin(j4);
IkReal x10379=IKcos(j4);
IkReal x10380=(gconst1*r21);
IkReal x10381=(gconst1*r11);
IkReal x10382=((1.0)*cj1);
IkReal x10383=((1.0)*gconst2*r10);
IkReal x10384=((1.0)*gconst2*r20);
evalcond[0]=(r02*x10378);
evalcond[1]=(((x10378*x10380))+(((-1.0)*x10378*x10384)));
evalcond[2]=(((x10378*x10381))+(((-1.0)*x10378*x10383)));
evalcond[3]=(((x10379*x10380))+((sj1*sj2))+(((-1.0)*x10379*x10384))+(((-1.0)*cj2*x10382)));
evalcond[4]=(((x10379*x10381))+(((-1.0)*cj0*cj2*sj1))+(((-1.0)*x10379*x10383))+(((-1.0)*cj0*sj2*x10382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10386=IKPowWithIntegerCheck(r02,-1);
if(!x10386.valid){
continue;
}
IkReal x10385=x10386.value;
CheckValue<IkReal> x10387=IKPowWithIntegerCheck(sj3,-1);
if(!x10387.valid){
continue;
}
if( IKabs((x10385*(x10387.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x10385)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x10385*(x10387.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((-1.0)*cj0*x10385))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x10385*(x10387.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((-1.0)*cj0*x10385));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10388=IKsin(j4);
IkReal x10389=IKcos(j4);
IkReal x10390=(gconst2*r10);
IkReal x10391=(gconst1*r11);
IkReal x10392=(cj2*sj0);
IkReal x10393=(sj1*sj2);
IkReal x10394=(gconst2*r20);
IkReal x10395=(gconst1*r20);
IkReal x10396=(gconst2*r11);
IkReal x10397=(cj2*sj1);
IkReal x10398=(gconst1*r21);
IkReal x10399=((1.0)*cj0);
IkReal x10400=((1.0)*sj0);
IkReal x10401=(cj1*sj2);
IkReal x10402=(gconst1*r10);
IkReal x10403=(gconst2*r21);
IkReal x10404=(sj3*x10389);
IkReal x10405=(cj3*x10389);
IkReal x10406=((1.0)*cj1*cj2);
IkReal x10407=(r02*x10388);
IkReal x10408=((1.0)*x10388);
evalcond[0]=((((-1.0)*x10399))+(((-1.0)*r02*x10389)));
evalcond[1]=((((-1.0)*x10394*x10408))+((x10388*x10398)));
evalcond[2]=((((-1.0)*sj3*x10407))+((sj0*x10401))+((sj1*x10392)));
evalcond[3]=(((cj3*x10407))+((cj1*x10392))+(((-1.0)*x10393*x10400)));
evalcond[4]=((((-1.0)*x10390*x10408))+(((-1.0)*x10400))+((x10388*x10391)));
evalcond[5]=((((-1.0)*x10394*x10405))+((x10398*x10405))+((sj3*x10403))+((sj3*x10395))+x10397+x10401);
evalcond[6]=(((cj3*x10403))+(((-1.0)*x10406))+x10393+((x10394*x10404))+(((-1.0)*x10398*x10404))+((cj3*x10395)));
evalcond[7]=(((x10391*x10405))+(((-1.0)*x10390*x10405))+((sj3*x10402))+((sj3*x10396))+(((-1.0)*cj1*cj2*x10399))+((cj0*x10393)));
evalcond[8]=(((x10390*x10404))+(((-1.0)*x10391*x10404))+((cj3*x10402))+(((-1.0)*x10399*x10401))+(((-1.0)*x10397*x10399))+((cj3*x10396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10409=((1.0)*sj3);
IkReal x10410=((1.0)*gconst2);
CheckValue<IkReal> x10411=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*r10*x10410))),-1);
if(!x10411.valid){
continue;
}
CheckValue<IkReal> x10412=IKPowWithIntegerCheck((((cj3*gconst1*r21))+(((-1.0)*cj3*r20*x10410))),-1);
if(!x10412.valid){
continue;
}
if( IKabs((sj0*(x10411.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10412.value)*(((((-1.0)*gconst2*r21*x10409))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*x10409)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*(x10411.value)))+IKsqr(((x10412.value)*(((((-1.0)*gconst2*r21*x10409))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*x10409))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*(x10411.value)), ((x10412.value)*(((((-1.0)*gconst2*r21*x10409))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*x10409))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10413=IKsin(j4);
IkReal x10414=IKcos(j4);
IkReal x10415=(gconst2*r10);
IkReal x10416=(gconst1*r11);
IkReal x10417=(cj2*sj0);
IkReal x10418=(sj1*sj2);
IkReal x10419=(gconst2*r20);
IkReal x10420=(gconst1*r20);
IkReal x10421=(gconst2*r11);
IkReal x10422=(cj2*sj1);
IkReal x10423=(gconst1*r21);
IkReal x10424=((1.0)*cj0);
IkReal x10425=((1.0)*sj0);
IkReal x10426=(cj1*sj2);
IkReal x10427=(gconst1*r10);
IkReal x10428=(gconst2*r21);
IkReal x10429=(sj3*x10414);
IkReal x10430=(cj3*x10414);
IkReal x10431=((1.0)*cj1*cj2);
IkReal x10432=(r02*x10413);
IkReal x10433=((1.0)*x10413);
evalcond[0]=((((-1.0)*r02*x10414))+(((-1.0)*x10424)));
evalcond[1]=((((-1.0)*x10419*x10433))+((x10413*x10423)));
evalcond[2]=((((-1.0)*sj3*x10432))+((sj0*x10426))+((sj1*x10417)));
evalcond[3]=(((cj3*x10432))+(((-1.0)*x10418*x10425))+((cj1*x10417)));
evalcond[4]=(((x10413*x10416))+(((-1.0)*x10425))+(((-1.0)*x10415*x10433)));
evalcond[5]=((((-1.0)*x10419*x10430))+((x10423*x10430))+((sj3*x10428))+((sj3*x10420))+x10422+x10426);
evalcond[6]=((((-1.0)*x10423*x10429))+((cj3*x10428))+((cj3*x10420))+((x10419*x10429))+x10418+(((-1.0)*x10431)));
evalcond[7]=((((-1.0)*cj1*cj2*x10424))+((x10416*x10430))+((cj0*x10418))+((sj3*x10421))+((sj3*x10427))+(((-1.0)*x10415*x10430)));
evalcond[8]=((((-1.0)*x10416*x10429))+(((-1.0)*x10422*x10424))+((x10415*x10429))+((cj3*x10427))+((cj3*x10421))+(((-1.0)*x10424*x10426)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10434=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x10434.valid){
continue;
}
CheckValue<IkReal> x10435=IKPowWithIntegerCheck(r02,-1);
if(!x10435.valid){
continue;
}
if( IKabs((sj0*(x10434.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x10435.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*(x10434.value)))+IKsqr(((-1.0)*cj0*(x10435.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*(x10434.value)), ((-1.0)*cj0*(x10435.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10436=IKsin(j4);
IkReal x10437=IKcos(j4);
IkReal x10438=(gconst2*r10);
IkReal x10439=(gconst1*r11);
IkReal x10440=(cj2*sj0);
IkReal x10441=(sj1*sj2);
IkReal x10442=(gconst2*r20);
IkReal x10443=(gconst1*r20);
IkReal x10444=(gconst2*r11);
IkReal x10445=(cj2*sj1);
IkReal x10446=(gconst1*r21);
IkReal x10447=((1.0)*cj0);
IkReal x10448=((1.0)*sj0);
IkReal x10449=(cj1*sj2);
IkReal x10450=(gconst1*r10);
IkReal x10451=(gconst2*r21);
IkReal x10452=(sj3*x10437);
IkReal x10453=(cj3*x10437);
IkReal x10454=((1.0)*cj1*cj2);
IkReal x10455=(r02*x10436);
IkReal x10456=((1.0)*x10436);
evalcond[0]=((((-1.0)*x10447))+(((-1.0)*r02*x10437)));
evalcond[1]=((((-1.0)*x10442*x10456))+((x10436*x10446)));
evalcond[2]=((((-1.0)*sj3*x10455))+((sj1*x10440))+((sj0*x10449)));
evalcond[3]=(((cj3*x10455))+(((-1.0)*x10441*x10448))+((cj1*x10440)));
evalcond[4]=((((-1.0)*x10438*x10456))+((x10436*x10439))+(((-1.0)*x10448)));
evalcond[5]=(((sj3*x10443))+((x10446*x10453))+((sj3*x10451))+(((-1.0)*x10442*x10453))+x10449+x10445);
evalcond[6]=(((cj3*x10451))+((x10442*x10452))+((cj3*x10443))+x10441+(((-1.0)*x10446*x10452))+(((-1.0)*x10454)));
evalcond[7]=(((sj3*x10444))+(((-1.0)*cj1*cj2*x10447))+(((-1.0)*x10438*x10453))+((x10439*x10453))+((cj0*x10441))+((sj3*x10450)));
evalcond[8]=(((cj3*x10450))+(((-1.0)*x10445*x10447))+(((-1.0)*x10447*x10449))+(((-1.0)*x10439*x10452))+((x10438*x10452))+((cj3*x10444)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10457=gconst1*gconst1;
IkReal x10458=r21*r21;
IkReal x10459=gconst2*gconst2;
IkReal x10460=r20*r20;
IkReal x10461=(gconst2*r20);
IkReal x10462=(cj1*cj2);
IkReal x10463=(sj1*sj2);
IkReal x10464=(gconst1*r21);
IkReal x10465=(cj3*gconst2);
IkReal x10466=(cj3*r20);
CheckValue<IkReal> x10467=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+((sj3*x10457*x10458))+((sj3*x10459*x10460))+(((-2.0)*sj3*x10461*x10464)))),-1);
if(!x10467.valid){
continue;
}
CheckValue<IkReal> x10468 = IKatan2WithCheck(IkReal((((r22*x10463))+(((-1.0)*r22*x10462))+((r21*r22*x10465))+((gconst1*r22*x10466)))),IkReal(((((-1.0)*x10462*x10464))+((gconst1*x10458*x10465))+((x10461*x10462))+((r21*x10457*x10466))+(((-1.0)*x10461*x10463))+((x10463*x10464))+(((-1.0)*r21*x10459*x10466))+(((-1.0)*gconst1*x10460*x10465)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10468.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10467.value)))+(x10468.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10469=IKsin(j4);
IkReal x10470=IKcos(j4);
IkReal x10471=(gconst1*sj3);
IkReal x10472=(cj2*sj0);
IkReal x10473=(sj1*sj2);
IkReal x10474=(cj3*r20);
IkReal x10475=((1.0)*cj2);
IkReal x10476=(cj0*cj1);
IkReal x10477=(gconst2*r11);
IkReal x10478=(cj3*gconst1);
IkReal x10479=(gconst2*r00);
IkReal x10480=((1.0)*sj0);
IkReal x10481=(gconst2*r10);
IkReal x10482=(gconst2*r01);
IkReal x10483=(cj1*sj2);
IkReal x10484=(gconst2*r21);
IkReal x10485=((1.0)*x10470);
IkReal x10486=((1.0)*x10469);
IkReal x10487=(gconst1*x10469);
IkReal x10488=(cj3*x10469);
IkReal x10489=(gconst2*sj3*x10470);
evalcond[0]=((((-1.0)*r22*x10485))+((r21*x10487))+(((-1.0)*gconst2*r20*x10486)));
evalcond[1]=((((-1.0)*x10479*x10486))+(((-1.0)*r02*x10485))+(((-1.0)*cj0))+((r01*x10487)));
evalcond[2]=((((-1.0)*x10481*x10486))+((r11*x10487))+(((-1.0)*r12*x10485))+(((-1.0)*x10480)));
evalcond[3]=(((cj2*sj1))+((r20*x10471))+((r21*x10470*x10478))+((sj3*x10484))+((r22*x10488))+x10483+(((-1.0)*gconst2*x10474*x10485)));
evalcond[4]=((((-1.0)*r21*x10471*x10485))+(((-1.0)*r22*sj3*x10486))+((cj3*x10484))+(((-1.0)*cj1*x10475))+((gconst1*x10474))+x10473+((r20*x10489)));
evalcond[5]=(((r00*x10478))+((sj1*x10472))+((cj3*x10482))+(((-1.0)*r01*x10471*x10485))+((sj3*x10470*x10479))+((sj0*x10483))+(((-1.0)*r02*sj3*x10486)));
evalcond[6]=(((r00*x10471))+(((-1.0)*cj3*x10479*x10485))+((sj3*x10482))+((r01*x10470*x10478))+((r02*x10488))+(((-1.0)*x10473*x10480))+((cj1*x10472)));
evalcond[7]=((((-1.0)*cj3*x10481*x10485))+((r12*x10488))+((cj0*x10473))+((r11*x10470*x10478))+((sj3*x10477))+(((-1.0)*x10475*x10476))+((r10*x10471)));
evalcond[8]=(((sj3*x10470*x10481))+(((-1.0)*cj0*sj1*x10475))+(((-1.0)*sj2*x10476))+((cj3*x10477))+(((-1.0)*r11*x10471*x10485))+(((-1.0)*r12*sj3*x10486))+((r10*x10478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10490=((1.0)*gconst2);
CheckValue<IkReal> x10491 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*r20*x10490)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10491.valid){
continue;
}
CheckValue<IkReal> x10492=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x10490)))),-1);
if(!x10492.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10491.value)+(((1.5707963267949)*(x10492.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10493=IKsin(j4);
IkReal x10494=IKcos(j4);
IkReal x10495=(gconst1*sj3);
IkReal x10496=(cj2*sj0);
IkReal x10497=(sj1*sj2);
IkReal x10498=(cj3*r20);
IkReal x10499=((1.0)*cj2);
IkReal x10500=(cj0*cj1);
IkReal x10501=(gconst2*r11);
IkReal x10502=(cj3*gconst1);
IkReal x10503=(gconst2*r00);
IkReal x10504=((1.0)*sj0);
IkReal x10505=(gconst2*r10);
IkReal x10506=(gconst2*r01);
IkReal x10507=(cj1*sj2);
IkReal x10508=(gconst2*r21);
IkReal x10509=((1.0)*x10494);
IkReal x10510=((1.0)*x10493);
IkReal x10511=(gconst1*x10493);
IkReal x10512=(cj3*x10493);
IkReal x10513=(gconst2*sj3*x10494);
evalcond[0]=((((-1.0)*r22*x10509))+(((-1.0)*gconst2*r20*x10510))+((r21*x10511)));
evalcond[1]=((((-1.0)*x10503*x10510))+((r01*x10511))+(((-1.0)*r02*x10509))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*x10504))+(((-1.0)*r12*x10509))+(((-1.0)*x10505*x10510))+((r11*x10511)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst2*x10498*x10509))+x10507+((r20*x10495))+((r22*x10512))+((sj3*x10508))+((r21*x10494*x10502)));
evalcond[4]=((((-1.0)*r22*sj3*x10510))+((gconst1*x10498))+((r20*x10513))+(((-1.0)*cj1*x10499))+((cj3*x10508))+x10497+(((-1.0)*r21*x10495*x10509)));
evalcond[5]=((((-1.0)*r02*sj3*x10510))+((r00*x10502))+((sj0*x10507))+((cj3*x10506))+(((-1.0)*r01*x10495*x10509))+((sj3*x10494*x10503))+((sj1*x10496)));
evalcond[6]=(((cj1*x10496))+(((-1.0)*cj3*x10503*x10509))+((r01*x10494*x10502))+(((-1.0)*x10497*x10504))+((r02*x10512))+((sj3*x10506))+((r00*x10495)));
evalcond[7]=(((r12*x10512))+((r10*x10495))+(((-1.0)*cj3*x10505*x10509))+((r11*x10494*x10502))+((cj0*x10497))+((sj3*x10501))+(((-1.0)*x10499*x10500)));
evalcond[8]=(((r10*x10502))+(((-1.0)*r11*x10495*x10509))+((cj3*x10501))+(((-1.0)*cj0*sj1*x10499))+(((-1.0)*r12*sj3*x10510))+((sj3*x10494*x10505))+(((-1.0)*sj2*x10500)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10514=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x10514.valid){
continue;
}
CheckValue<IkReal> x10515 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst2*r20*sj0))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10515.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10514.value)))+(x10515.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10516=IKsin(j4);
IkReal x10517=IKcos(j4);
IkReal x10518=(gconst1*sj3);
IkReal x10519=(cj2*sj0);
IkReal x10520=(sj1*sj2);
IkReal x10521=(cj3*r20);
IkReal x10522=((1.0)*cj2);
IkReal x10523=(cj0*cj1);
IkReal x10524=(gconst2*r11);
IkReal x10525=(cj3*gconst1);
IkReal x10526=(gconst2*r00);
IkReal x10527=((1.0)*sj0);
IkReal x10528=(gconst2*r10);
IkReal x10529=(gconst2*r01);
IkReal x10530=(cj1*sj2);
IkReal x10531=(gconst2*r21);
IkReal x10532=((1.0)*x10517);
IkReal x10533=((1.0)*x10516);
IkReal x10534=(gconst1*x10516);
IkReal x10535=(cj3*x10516);
IkReal x10536=(gconst2*sj3*x10517);
evalcond[0]=((((-1.0)*r22*x10532))+(((-1.0)*gconst2*r20*x10533))+((r21*x10534)));
evalcond[1]=((((-1.0)*r02*x10532))+((r01*x10534))+(((-1.0)*x10526*x10533))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*x10527))+(((-1.0)*r12*x10532))+(((-1.0)*x10528*x10533))+((r11*x10534)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst2*x10521*x10532))+((r22*x10535))+((r20*x10518))+x10530+((r21*x10517*x10525))+((sj3*x10531)));
evalcond[4]=((((-1.0)*cj1*x10522))+((cj3*x10531))+(((-1.0)*r21*x10518*x10532))+(((-1.0)*r22*sj3*x10533))+x10520+((r20*x10536))+((gconst1*x10521)));
evalcond[5]=(((cj3*x10529))+((sj3*x10517*x10526))+((sj0*x10530))+((r00*x10525))+(((-1.0)*r02*sj3*x10533))+((sj1*x10519))+(((-1.0)*r01*x10518*x10532)));
evalcond[6]=((((-1.0)*x10520*x10527))+((r02*x10535))+((r00*x10518))+((r01*x10517*x10525))+((cj1*x10519))+((sj3*x10529))+(((-1.0)*cj3*x10526*x10532)));
evalcond[7]=(((r10*x10518))+((r11*x10517*x10525))+((cj0*x10520))+((r12*x10535))+(((-1.0)*cj3*x10528*x10532))+((sj3*x10524))+(((-1.0)*x10522*x10523)));
evalcond[8]=(((cj3*x10524))+((r10*x10525))+((sj3*x10517*x10528))+(((-1.0)*cj0*sj1*x10522))+(((-1.0)*sj2*x10523))+(((-1.0)*r11*x10518*x10532))+(((-1.0)*r12*sj3*x10533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10537=((-1.0)*r21);
IkReal x10539 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x10539)==0){
continue;
}
IkReal x10538=pow(x10539,-0.5);
CheckValue<IkReal> x10540 = IKatan2WithCheck(IkReal(x10537),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10540.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x10540.value))));
IkReal gconst4=(x10537*x10538);
IkReal gconst5=((1.0)*r20*x10538);
CheckValue<IkReal> x10541 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10541.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x10541.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10542=((-1.0)*r21);
CheckValue<IkReal> x10545 = IKatan2WithCheck(IkReal(x10542),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10545.valid){
continue;
}
IkReal x10543=((1.0)*(x10545.value));
IkReal x10544=x10538;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10543)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10543)));
IkReal gconst4=(x10542*x10544);
IkReal gconst5=((1.0)*r20*x10544);
IkReal x10546=r22*r22;
IkReal x10547=((1.0)*x10546);
CheckValue<IkReal> x10551=IKPowWithIntegerCheck(((-1.0)+x10546),-1);
if(!x10551.valid){
continue;
}
IkReal x10548=x10551.value;
if((((1.0)+(((-1.0)*x10547)))) < -0.00001)
continue;
IkReal x10549=IKsqrt(((1.0)+(((-1.0)*x10547))));
IkReal x10550=(sj0*x10548*x10549);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x10547*x10550))+x10550))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10552=((-1.0)*r21);
CheckValue<IkReal> x10555 = IKatan2WithCheck(IkReal(x10552),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10555.valid){
continue;
}
IkReal x10553=((1.0)*(x10555.value));
IkReal x10554=x10538;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10553)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10553)));
IkReal gconst4=(x10552*x10554);
IkReal gconst5=((1.0)*r20*x10554);
IkReal x10556=r22*r22;
IkReal x10557=((1.0)*x10556);
CheckValue<IkReal> x10561=IKPowWithIntegerCheck(((-1.0)+x10556),-1);
if(!x10561.valid){
continue;
}
IkReal x10558=x10561.value;
if((((1.0)+(((-1.0)*x10557)))) < -0.00001)
continue;
IkReal x10559=IKsqrt(((1.0)+(((-1.0)*x10557))));
IkReal x10560=(cj0*x10558*x10559);
j4eval[0]=((IKabs(((((-1.0)*x10557*x10560))+x10560)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10562=((-1.0)*r21);
CheckValue<IkReal> x10565 = IKatan2WithCheck(IkReal(x10562),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10565.valid){
continue;
}
IkReal x10563=((1.0)*(x10565.value));
IkReal x10564=x10538;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10563)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10563)));
IkReal gconst4=(x10562*x10564);
IkReal gconst5=((1.0)*r20*x10564);
IkReal x10566=r22*r22;
IkReal x10567=(cj0*r12);
IkReal x10568=(r02*sj0);
CheckValue<IkReal> x10572=IKPowWithIntegerCheck(((-1.0)+x10566),-1);
if(!x10572.valid){
continue;
}
IkReal x10569=x10572.value;
if((((1.0)+(((-1.0)*x10566)))) < -0.00001)
continue;
IkReal x10570=IKsqrt(((1.0)+(((-1.0)*x10566))));
IkReal x10571=(r22*x10569*x10570);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x10567))+x10568)))+(IKabs(((((-1.0)*x10568*x10571))+((x10567*x10571))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10573=((-1.0)*r21);
CheckValue<IkReal> x10576 = IKatan2WithCheck(IkReal(x10573),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10576.valid){
continue;
}
IkReal x10574=((1.0)*(x10576.value));
IkReal x10575=x10538;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10574)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10574)));
IkReal gconst4=(x10573*x10575);
IkReal gconst5=((1.0)*r20*x10575);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10577=((-1.0)*r21);
CheckValue<IkReal> x10580 = IKatan2WithCheck(IkReal(x10577),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10580.valid){
continue;
}
IkReal x10578=((1.0)*(x10580.value));
IkReal x10579=x10538;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10578)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10578)));
IkReal gconst4=(x10577*x10579);
IkReal gconst5=((1.0)*r20*x10579);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10581=((-1.0)*r21);
CheckValue<IkReal> x10584 = IKatan2WithCheck(IkReal(x10581),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10584.valid){
continue;
}
IkReal x10582=((1.0)*(x10584.value));
IkReal x10583=x10538;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10582)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10582)));
IkReal gconst4=(x10581*x10583);
IkReal gconst5=((1.0)*r20*x10583);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10585=((-1.0)*r21);
CheckValue<IkReal> x10588 = IKatan2WithCheck(IkReal(x10585),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10588.valid){
continue;
}
IkReal x10586=((1.0)*(x10588.value));
IkReal x10587=x10538;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10586)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10586)));
IkReal gconst4=(x10585*x10587);
IkReal gconst5=((1.0)*r20*x10587);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10589=((-1.0)*r21);
CheckValue<IkReal> x10592 = IKatan2WithCheck(IkReal(x10589),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10592.valid){
continue;
}
IkReal x10590=((1.0)*(x10592.value));
IkReal x10591=x10538;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10590)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10590)));
IkReal gconst4=(x10589*x10591);
IkReal gconst5=((1.0)*r20*x10591);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10593=((-1.0)*r21);
CheckValue<IkReal> x10596 = IKatan2WithCheck(IkReal(x10593),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10596.valid){
continue;
}
IkReal x10594=((1.0)*(x10596.value));
IkReal x10595=x10538;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10594)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10594)));
IkReal gconst4=(x10593*x10595);
IkReal gconst5=((1.0)*r20*x10595);
IkReal x10597=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10601=IKPowWithIntegerCheck(x10597,-1);
if(!x10601.valid){
continue;
}
IkReal x10598=x10601.value;
IkReal x10599=((1.0)*x10598);
IkReal x10600=((((-1.0)*x10599*(r11*r11)*(r21*r21)))+(((-1.0)*x10599*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x10598)));
j4eval[0]=x10600;
j4eval[1]=r12;
j4eval[2]=x10597;
j4eval[3]=IKsign(x10600);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10602=(gconst5*r10);
IkReal x10603=(gconst4*r11);
CheckValue<IkReal> x10604 = IKatan2WithCheck(IkReal(((((-1.0)*x10603))+x10602)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10604.valid){
continue;
}
CheckValue<IkReal> x10605=IKPowWithIntegerCheck(IKsign(((((2.0)*x10602*x10603))+(((-1.0)*(x10602*x10602)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10603*x10603))))),-1);
if(!x10605.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10604.value)+(((1.5707963267949)*(x10605.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10606=IKsin(j4);
IkReal x10607=IKcos(j4);
IkReal x10608=(gconst4*r11);
IkReal x10609=(gconst5*r10);
IkReal x10610=(gconst4*r01);
IkReal x10611=(gconst5*r00);
IkReal x10612=(gconst4*r21);
IkReal x10613=(gconst5*r20);
IkReal x10614=((1.0)*x10607);
IkReal x10615=((1.0)*x10606);
evalcond[0]=((((-1.0)*r22*x10614))+((x10606*x10612))+(((-1.0)*x10613*x10615)));
evalcond[1]=((((-1.0)*x10611*x10615))+(((-1.0)*r02*x10614))+((x10606*x10610)));
evalcond[2]=(((x10607*x10609))+(((-1.0)*x10608*x10614))+(((-1.0)*r12*x10615)));
evalcond[3]=((-1.0)+(((-1.0)*x10609*x10615))+((x10606*x10608))+(((-1.0)*r12*x10614)));
evalcond[4]=(((cj2*sj1))+((x10607*x10611))+(((-1.0)*x10610*x10614))+((cj1*sj2))+(((-1.0)*r02*x10615)));
evalcond[5]=(((x10607*x10613))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x10615))+(((-1.0)*x10612*x10614)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10616=((1.0)*gconst5);
CheckValue<IkReal> x10617=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10616))+(((-1.0)*gconst4*r20)))),-1);
if(!x10617.valid){
continue;
}
CheckValue<IkReal> x10618 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10616)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10618.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10617.value)))+(x10618.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10619=IKsin(j4);
IkReal x10620=IKcos(j4);
IkReal x10621=(gconst4*r11);
IkReal x10622=(gconst5*r10);
IkReal x10623=(gconst4*r01);
IkReal x10624=(gconst5*r00);
IkReal x10625=(gconst4*r21);
IkReal x10626=(gconst5*r20);
IkReal x10627=((1.0)*x10620);
IkReal x10628=((1.0)*x10619);
evalcond[0]=((((-1.0)*x10626*x10628))+(((-1.0)*r22*x10627))+((x10619*x10625)));
evalcond[1]=((((-1.0)*r02*x10627))+(((-1.0)*x10624*x10628))+((x10619*x10623)));
evalcond[2]=((((-1.0)*r12*x10628))+(((-1.0)*x10621*x10627))+((x10620*x10622)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10627))+(((-1.0)*x10622*x10628))+((x10619*x10621)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x10628))+(((-1.0)*x10623*x10627))+((cj1*sj2))+((x10620*x10624)));
evalcond[5]=((((-1.0)*x10625*x10627))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x10628))+((x10620*x10626)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10629=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10629.valid){
continue;
}
CheckValue<IkReal> x10630 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10630.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10629.value)))+(x10630.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10631=IKsin(j4);
IkReal x10632=IKcos(j4);
IkReal x10633=(gconst4*r11);
IkReal x10634=(gconst5*r10);
IkReal x10635=(gconst4*r01);
IkReal x10636=(gconst5*r00);
IkReal x10637=(gconst4*r21);
IkReal x10638=(gconst5*r20);
IkReal x10639=((1.0)*x10632);
IkReal x10640=((1.0)*x10631);
evalcond[0]=((((-1.0)*x10638*x10640))+(((-1.0)*r22*x10639))+((x10631*x10637)));
evalcond[1]=((((-1.0)*r02*x10639))+(((-1.0)*x10636*x10640))+((x10631*x10635)));
evalcond[2]=((((-1.0)*x10633*x10639))+(((-1.0)*r12*x10640))+((x10632*x10634)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10639))+((x10631*x10633))+(((-1.0)*x10634*x10640)));
evalcond[4]=((((-1.0)*x10635*x10639))+((cj2*sj1))+(((-1.0)*r02*x10640))+((cj1*sj2))+((x10632*x10636)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x10640))+(((-1.0)*x10637*x10639))+((x10632*x10638)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10641=((-1.0)*r21);
CheckValue<IkReal> x10644 = IKatan2WithCheck(IkReal(x10641),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10644.valid){
continue;
}
IkReal x10642=((1.0)*(x10644.value));
IkReal x10643=x10538;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10642)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10642)));
IkReal gconst4=(x10641*x10643);
IkReal gconst5=((1.0)*r20*x10643);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10645=((-1.0)*r21);
CheckValue<IkReal> x10648 = IKatan2WithCheck(IkReal(x10645),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10648.valid){
continue;
}
IkReal x10646=((1.0)*(x10648.value));
IkReal x10647=x10538;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10646)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10646)));
IkReal gconst4=(x10645*x10647);
IkReal gconst5=((1.0)*r20*x10647);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10649=((-1.0)*r21);
CheckValue<IkReal> x10652 = IKatan2WithCheck(IkReal(x10649),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10652.valid){
continue;
}
IkReal x10650=((1.0)*(x10652.value));
IkReal x10651=x10538;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10650)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10650)));
IkReal gconst4=(x10649*x10651);
IkReal gconst5=((1.0)*r20*x10651);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10653=(gconst5*r10);
IkReal x10654=(gconst4*r11);
CheckValue<IkReal> x10655=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10654*x10654)+(x10653*x10653)+(((-2.0)*x10653*x10654)))),-1);
if(!x10655.valid){
continue;
}
CheckValue<IkReal> x10656 = IKatan2WithCheck(IkReal(((((-1.0)*x10653))+x10654)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10656.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10655.value)))+(x10656.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10657=IKcos(j4);
IkReal x10658=IKsin(j4);
IkReal x10659=(gconst4*r11);
IkReal x10660=(gconst5*r10);
IkReal x10661=(gconst5*r00);
IkReal x10662=(gconst5*r20);
IkReal x10663=((1.0)*x10657);
IkReal x10664=(gconst4*x10657);
IkReal x10665=((1.0)*x10658);
IkReal x10666=(gconst4*x10658);
evalcond[0]=(((x10657*x10659))+(((-1.0)*x10660*x10663))+((r12*x10658)));
evalcond[1]=((((-1.0)*r22*x10663))+(((-1.0)*x10662*x10665))+((r21*x10666)));
evalcond[2]=((((-1.0)*x10661*x10665))+(((-1.0)*r02*x10663))+((r01*x10666)));
evalcond[3]=((-1.0)+((x10658*x10659))+(((-1.0)*x10660*x10665))+(((-1.0)*r12*x10663)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x10658))+(((-1.0)*x10661*x10663))+((r01*x10664)));
evalcond[5]=((((-1.0)*cj1*cj2))+((r22*x10658))+((sj1*sj2))+(((-1.0)*x10662*x10663))+((r21*x10664)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10667=((1.0)*gconst5);
CheckValue<IkReal> x10668 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10667)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10668.valid){
continue;
}
CheckValue<IkReal> x10669=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10667))+(((-1.0)*gconst4*r20)))),-1);
if(!x10669.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10668.value)+(((1.5707963267949)*(x10669.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10670=IKcos(j4);
IkReal x10671=IKsin(j4);
IkReal x10672=(gconst4*r11);
IkReal x10673=(gconst5*r10);
IkReal x10674=(gconst5*r00);
IkReal x10675=(gconst5*r20);
IkReal x10676=((1.0)*x10670);
IkReal x10677=(gconst4*x10670);
IkReal x10678=((1.0)*x10671);
IkReal x10679=(gconst4*x10671);
evalcond[0]=(((x10670*x10672))+(((-1.0)*x10673*x10676))+((r12*x10671)));
evalcond[1]=((((-1.0)*x10675*x10678))+(((-1.0)*r22*x10676))+((r21*x10679)));
evalcond[2]=((((-1.0)*r02*x10676))+((r01*x10679))+(((-1.0)*x10674*x10678)));
evalcond[3]=((-1.0)+(((-1.0)*x10673*x10678))+((x10671*x10672))+(((-1.0)*r12*x10676)));
evalcond[4]=(((cj2*sj1))+((r02*x10671))+((cj1*sj2))+((r01*x10677))+(((-1.0)*x10674*x10676)));
evalcond[5]=(((r22*x10671))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10675*x10676))+((r21*x10677)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10680=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10680.valid){
continue;
}
CheckValue<IkReal> x10681 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10681.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10680.value)))+(x10681.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10682=IKcos(j4);
IkReal x10683=IKsin(j4);
IkReal x10684=(gconst4*r11);
IkReal x10685=(gconst5*r10);
IkReal x10686=(gconst5*r00);
IkReal x10687=(gconst5*r20);
IkReal x10688=((1.0)*x10682);
IkReal x10689=(gconst4*x10682);
IkReal x10690=((1.0)*x10683);
IkReal x10691=(gconst4*x10683);
evalcond[0]=((((-1.0)*x10685*x10688))+((r12*x10683))+((x10682*x10684)));
evalcond[1]=(((r21*x10691))+(((-1.0)*r22*x10688))+(((-1.0)*x10687*x10690)));
evalcond[2]=((((-1.0)*r02*x10688))+(((-1.0)*x10686*x10690))+((r01*x10691)));
evalcond[3]=((-1.0)+(((-1.0)*x10685*x10690))+(((-1.0)*r12*x10688))+((x10683*x10684)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r01*x10689))+(((-1.0)*x10686*x10688))+((r02*x10683)));
evalcond[5]=((((-1.0)*x10687*x10688))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x10683))+((r21*x10689)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10692=((-1.0)*r21);
CheckValue<IkReal> x10695 = IKatan2WithCheck(IkReal(x10692),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10695.valid){
continue;
}
IkReal x10693=((1.0)*(x10695.value));
IkReal x10694=x10538;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10693)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10693)));
IkReal gconst4=(x10692*x10694);
IkReal gconst5=((1.0)*r20*x10694);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10696=((-1.0)*r21);
CheckValue<IkReal> x10699 = IKatan2WithCheck(IkReal(x10696),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10699.valid){
continue;
}
IkReal x10697=((1.0)*(x10699.value));
IkReal x10698=x10538;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10697)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10697)));
IkReal gconst4=(x10696*x10698);
IkReal gconst5=((1.0)*r20*x10698);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10700=((-1.0)*r21);
CheckValue<IkReal> x10703 = IKatan2WithCheck(IkReal(x10700),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10703.valid){
continue;
}
IkReal x10701=((1.0)*(x10703.value));
IkReal x10702=x10538;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10701)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10701)));
IkReal gconst4=(x10700*x10702);
IkReal gconst5=((1.0)*r20*x10702);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10704=(gconst5*r10);
IkReal x10705=(gconst4*r11);
CheckValue<IkReal> x10706=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10704*x10704)+(x10705*x10705)+(((-2.0)*x10704*x10705)))),-1);
if(!x10706.valid){
continue;
}
CheckValue<IkReal> x10707 = IKatan2WithCheck(IkReal(((((-1.0)*x10704))+x10705)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10707.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10706.value)))+(x10707.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10708=IKcos(j4);
IkReal x10709=IKsin(j4);
IkReal x10710=(gconst5*r10);
IkReal x10711=(gconst5*r00);
IkReal x10712=(gconst5*r20);
IkReal x10713=((1.0)*x10708);
IkReal x10714=(gconst4*x10709);
IkReal x10715=(gconst4*x10708);
IkReal x10716=((1.0)*x10709);
evalcond[0]=((((-1.0)*x10710*x10713))+((r11*x10715))+((r12*x10709)));
evalcond[1]=((((-1.0)*x10712*x10716))+(((-1.0)*r22*x10713))+((r21*x10714)));
evalcond[2]=((((-1.0)*x10711*x10716))+((r01*x10714))+(((-1.0)*r02*x10713)));
evalcond[3]=((-1.0)+(((-1.0)*x10710*x10716))+((r11*x10714))+(((-1.0)*r12*x10713)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10712*x10713))+((r22*x10709))+((r21*x10715)));
evalcond[5]=((((-1.0)*x10711*x10713))+(((-1.0)*sj1*sj2))+((r01*x10715))+((r02*x10709))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10717=((1.0)*gconst5);
CheckValue<IkReal> x10718=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10717))+(((-1.0)*gconst4*r20)))),-1);
if(!x10718.valid){
continue;
}
CheckValue<IkReal> x10719 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10717))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10719.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10718.value)))+(x10719.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10720=IKcos(j4);
IkReal x10721=IKsin(j4);
IkReal x10722=(gconst5*r10);
IkReal x10723=(gconst5*r00);
IkReal x10724=(gconst5*r20);
IkReal x10725=((1.0)*x10720);
IkReal x10726=(gconst4*x10721);
IkReal x10727=(gconst4*x10720);
IkReal x10728=((1.0)*x10721);
evalcond[0]=((((-1.0)*x10722*x10725))+((r12*x10721))+((r11*x10727)));
evalcond[1]=((((-1.0)*r22*x10725))+((r21*x10726))+(((-1.0)*x10724*x10728)));
evalcond[2]=((((-1.0)*r02*x10725))+((r01*x10726))+(((-1.0)*x10723*x10728)));
evalcond[3]=((-1.0)+(((-1.0)*x10722*x10728))+(((-1.0)*r12*x10725))+((r11*x10726)));
evalcond[4]=(((r22*x10721))+((cj2*sj1))+((r21*x10727))+((cj1*sj2))+(((-1.0)*x10724*x10725)));
evalcond[5]=(((r02*x10721))+(((-1.0)*sj1*sj2))+((r01*x10727))+((cj1*cj2))+(((-1.0)*x10723*x10725)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10729=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10729.valid){
continue;
}
CheckValue<IkReal> x10730 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10730.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10729.value)))+(x10730.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10731=IKcos(j4);
IkReal x10732=IKsin(j4);
IkReal x10733=(gconst5*r10);
IkReal x10734=(gconst5*r00);
IkReal x10735=(gconst5*r20);
IkReal x10736=((1.0)*x10731);
IkReal x10737=(gconst4*x10732);
IkReal x10738=(gconst4*x10731);
IkReal x10739=((1.0)*x10732);
evalcond[0]=((((-1.0)*x10733*x10736))+((r11*x10738))+((r12*x10732)));
evalcond[1]=((((-1.0)*r22*x10736))+(((-1.0)*x10735*x10739))+((r21*x10737)));
evalcond[2]=((((-1.0)*x10734*x10739))+(((-1.0)*r02*x10736))+((r01*x10737)));
evalcond[3]=((-1.0)+(((-1.0)*x10733*x10739))+(((-1.0)*r12*x10736))+((r11*x10737)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10735*x10736))+((cj1*sj2))+((r21*x10738))+((r22*x10732)));
evalcond[5]=((((-1.0)*x10734*x10736))+((r02*x10732))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r01*x10738)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10740=((-1.0)*r21);
CheckValue<IkReal> x10743 = IKatan2WithCheck(IkReal(x10740),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10743.valid){
continue;
}
IkReal x10741=((1.0)*(x10743.value));
IkReal x10742=x10538;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10741)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10741)));
IkReal gconst4=(x10740*x10742);
IkReal gconst5=((1.0)*r20*x10742);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10744=((-1.0)*r21);
CheckValue<IkReal> x10747 = IKatan2WithCheck(IkReal(x10744),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10747.valid){
continue;
}
IkReal x10745=((1.0)*(x10747.value));
IkReal x10746=x10538;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10745)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10745)));
IkReal gconst4=(x10744*x10746);
IkReal gconst5=((1.0)*r20*x10746);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10748=((-1.0)*r21);
CheckValue<IkReal> x10751 = IKatan2WithCheck(IkReal(x10748),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10751.valid){
continue;
}
IkReal x10749=((1.0)*(x10751.value));
IkReal x10750=x10538;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10749)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10749)));
IkReal gconst4=(x10748*x10750);
IkReal gconst5=((1.0)*r20*x10750);
IkReal x10752=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10756=IKPowWithIntegerCheck(x10752,-1);
if(!x10756.valid){
continue;
}
IkReal x10753=x10756.value;
IkReal x10754=((1.0)*x10753);
IkReal x10755=((((-1.0)*x10754*(r11*r11)*(r21*r21)))+(((-1.0)*x10754*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x10753)));
j4eval[0]=x10755;
j4eval[1]=r12;
j4eval[2]=x10752;
j4eval[3]=IKsign(x10755);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10757=(gconst5*r10);
IkReal x10758=(gconst4*r11);
CheckValue<IkReal> x10759 = IKatan2WithCheck(IkReal((x10757+(((-1.0)*x10758)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10759.valid){
continue;
}
CheckValue<IkReal> x10760=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10758*x10758)))+(((-1.0)*(x10757*x10757)))+(((-1.0)*(r12*r12)))+(((2.0)*x10757*x10758)))),-1);
if(!x10760.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10759.value)+(((1.5707963267949)*(x10760.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10761=IKsin(j4);
IkReal x10762=IKcos(j4);
IkReal x10763=(gconst4*r11);
IkReal x10764=(gconst5*r10);
IkReal x10765=(gconst5*r00);
IkReal x10766=(gconst5*r20);
IkReal x10767=((1.0)*x10762);
IkReal x10768=(gconst4*x10761);
IkReal x10769=((1.0)*x10761);
evalcond[0]=((((-1.0)*r22*x10767))+((r21*x10768))+(((-1.0)*x10766*x10769)));
evalcond[1]=(((r01*x10768))+(((-1.0)*x10765*x10769))+(((-1.0)*r02*x10767)));
evalcond[2]=((((-1.0)*x10763*x10767))+(((-1.0)*r12*x10769))+((x10762*x10764)));
evalcond[3]=((-1.0)+(((-1.0)*x10764*x10769))+(((-1.0)*r12*x10767))+((x10761*x10763)));
evalcond[4]=((((-1.0)*gconst4*r21*x10767))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x10769))+((x10762*x10766)));
evalcond[5]=((((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*gconst4*r01*x10767))+(((-1.0)*r02*x10769))+((x10762*x10765)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10770=((1.0)*gconst5);
CheckValue<IkReal> x10771=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10770))+(((-1.0)*gconst4*r20)))),-1);
if(!x10771.valid){
continue;
}
CheckValue<IkReal> x10772 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10770)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10772.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10771.value)))+(x10772.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10773=IKsin(j4);
IkReal x10774=IKcos(j4);
IkReal x10775=(gconst4*r11);
IkReal x10776=(gconst5*r10);
IkReal x10777=(gconst5*r00);
IkReal x10778=(gconst5*r20);
IkReal x10779=((1.0)*x10774);
IkReal x10780=(gconst4*x10773);
IkReal x10781=((1.0)*x10773);
evalcond[0]=(((r21*x10780))+(((-1.0)*r22*x10779))+(((-1.0)*x10778*x10781)));
evalcond[1]=((((-1.0)*r02*x10779))+((r01*x10780))+(((-1.0)*x10777*x10781)));
evalcond[2]=(((x10774*x10776))+(((-1.0)*x10775*x10779))+(((-1.0)*r12*x10781)));
evalcond[3]=((-1.0)+(((-1.0)*x10776*x10781))+((x10773*x10775))+(((-1.0)*r12*x10779)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst4*r21*x10779))+((x10774*x10778))+((cj1*sj2))+(((-1.0)*r22*x10781)));
evalcond[5]=(((x10774*x10777))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*gconst4*r01*x10779))+(((-1.0)*r02*x10781)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10782=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10782.valid){
continue;
}
CheckValue<IkReal> x10783 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10783.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10782.value)))+(x10783.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10784=IKsin(j4);
IkReal x10785=IKcos(j4);
IkReal x10786=(gconst4*r11);
IkReal x10787=(gconst5*r10);
IkReal x10788=(gconst5*r00);
IkReal x10789=(gconst5*r20);
IkReal x10790=((1.0)*x10785);
IkReal x10791=(gconst4*x10784);
IkReal x10792=((1.0)*x10784);
evalcond[0]=(((r21*x10791))+(((-1.0)*x10789*x10792))+(((-1.0)*r22*x10790)));
evalcond[1]=((((-1.0)*r02*x10790))+(((-1.0)*x10788*x10792))+((r01*x10791)));
evalcond[2]=((((-1.0)*r12*x10792))+((x10785*x10787))+(((-1.0)*x10786*x10790)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10790))+(((-1.0)*x10787*x10792))+((x10784*x10786)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x10785*x10789))+(((-1.0)*gconst4*r21*x10790))+(((-1.0)*r22*x10792)));
evalcond[5]=((((-1.0)*r02*x10792))+(((-1.0)*sj1*sj2))+((x10785*x10788))+((cj1*cj2))+(((-1.0)*gconst4*r01*x10790)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10793=((-1.0)*r21);
IkReal x10794=((-1.0)*px);
CheckValue<IkReal> x10796 = IKatan2WithCheck(IkReal(x10793),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10796.valid){
continue;
}
IkReal x10795=((1.0)*(x10796.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10795)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10794);
rxp1_1=(px*r21);
rxp1_2=(r11*x10794);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10795)));
IkReal gconst4=x10793;
IkReal gconst5=((1.0)*r20);
IkReal x10797=((1.0)*cj3);
IkReal x10798=(r10*r20);
IkReal x10799=(r11*r21);
j4eval[0]=((((-1.0)*x10798))+(((-1.0)*x10799)));
j4eval[1]=((((-1.0)*x10797*x10799))+(((-1.0)*x10797*x10798)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10800=((-1.0)*r21);
IkReal x10801=((-1.0)*px);
CheckValue<IkReal> x10803 = IKatan2WithCheck(IkReal(x10800),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10803.valid){
continue;
}
IkReal x10802=((1.0)*(x10803.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10802)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10801);
rxp1_1=(px*r21);
rxp1_2=(r11*x10801);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10802)));
IkReal gconst4=x10800;
IkReal gconst5=((1.0)*r20);
IkReal x10804=((1.0)*r11*r21);
IkReal x10805=((1.0)*r10*r20);
j4eval[0]=((((-1.0)*x10805))+(((-1.0)*x10804)));
j4eval[1]=(((sj3*x10805))+((sj3*x10804)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10806=((-1.0)*r21);
IkReal x10807=((-1.0)*px);
CheckValue<IkReal> x10809 = IKatan2WithCheck(IkReal(x10806),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10809.valid){
continue;
}
IkReal x10808=((1.0)*(x10809.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10808)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10807);
rxp1_1=(px*r21);
rxp1_2=(r11*x10807);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10808)));
IkReal gconst4=x10806;
IkReal gconst5=((1.0)*r20);
IkReal x10810=((1.0)*cj3);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((((-1.0)*r11*r21*x10810))+(((-1.0)*r10*r20*x10810)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10811=((1.0)*sj3);
CheckValue<IkReal> x10812=IKPowWithIntegerCheck(r02,-1);
if(!x10812.valid){
continue;
}
CheckValue<IkReal> x10813=IKPowWithIntegerCheck(sj3,-1);
if(!x10813.valid){
continue;
}
CheckValue<IkReal> x10814=IKPowWithIntegerCheck(((((-1.0)*cj3*gconst5*r10))+((cj3*gconst4*r11))),-1);
if(!x10814.valid){
continue;
}
if( IKabs(((x10812.value)*(x10813.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10814.value)*(((((-1.0)*gconst4*r10*x10811))+(((-1.0)*gconst5*r11*x10811)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10812.value)*(x10813.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x10814.value)*(((((-1.0)*gconst4*r10*x10811))+(((-1.0)*gconst5*r11*x10811))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10812.value)*(x10813.value)*((((cj2*sj1))+((cj1*sj2))))), ((x10814.value)*(((((-1.0)*gconst4*r10*x10811))+(((-1.0)*gconst5*r11*x10811))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10815=IKsin(j4);
IkReal x10816=IKcos(j4);
IkReal x10817=(cj2*sj1);
IkReal x10818=(cj1*sj2);
IkReal x10819=(gconst5*sj3);
IkReal x10820=(gconst4*r11);
IkReal x10821=(sj1*sj2);
IkReal x10822=((1.0)*gconst5);
IkReal x10823=(cj1*cj2);
IkReal x10824=(gconst4*r21);
IkReal x10825=(cj3*gconst4);
IkReal x10826=(gconst4*sj3);
IkReal x10827=(cj3*gconst5);
IkReal x10828=(r20*x10816);
IkReal x10829=(r10*x10816);
IkReal x10830=(cj3*x10816);
IkReal x10831=(r02*x10815);
IkReal x10832=(x10817+x10818);
IkReal x10833=((1.0)*sj3*x10816);
evalcond[0]=((-1.0)*r02*x10816);
evalcond[1]=(((x10815*x10824))+(((-1.0)*r20*x10815*x10822)));
evalcond[2]=((((-1.0)*sj3*x10831))+x10832);
evalcond[3]=((((-1.0)*x10821))+((cj3*x10831))+x10823);
evalcond[4]=((-1.0)+((x10815*x10820))+(((-1.0)*r10*x10815*x10822)));
evalcond[5]=(((x10820*x10830))+(((-1.0)*cj3*x10822*x10829))+((r10*x10826))+((r11*x10819)));
evalcond[6]=(((r10*x10825))+(((-1.0)*x10820*x10833))+((r11*x10827))+((x10819*x10829)));
evalcond[7]=(((x10824*x10830))+(((-1.0)*cj3*x10822*x10828))+((r20*x10826))+((r21*x10819))+x10832);
evalcond[8]=(((r21*x10827))+(((-1.0)*x10823))+((r20*x10825))+(((-1.0)*x10824*x10833))+((x10819*x10828))+x10821);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10834=((1.0)*gconst5);
IkReal x10835=(gconst4*r11);
CheckValue<IkReal> x10836=IKPowWithIntegerCheck(((((-1.0)*r10*x10834))+x10835),-1);
if(!x10836.valid){
continue;
}
CheckValue<IkReal> x10837=IKPowWithIntegerCheck(((((-1.0)*sj3*x10835))+((gconst5*r10*sj3))),-1);
if(!x10837.valid){
continue;
}
if( IKabs(x10836.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10837.value)*(((((-1.0)*cj3*r11*x10834))+(((-1.0)*cj3*gconst4*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10836.value)+IKsqr(((x10837.value)*(((((-1.0)*cj3*r11*x10834))+(((-1.0)*cj3*gconst4*r10))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10836.value, ((x10837.value)*(((((-1.0)*cj3*r11*x10834))+(((-1.0)*cj3*gconst4*r10))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10838=IKsin(j4);
IkReal x10839=IKcos(j4);
IkReal x10840=(cj2*sj1);
IkReal x10841=(cj1*sj2);
IkReal x10842=(gconst5*sj3);
IkReal x10843=(gconst4*r11);
IkReal x10844=(sj1*sj2);
IkReal x10845=((1.0)*gconst5);
IkReal x10846=(cj1*cj2);
IkReal x10847=(gconst4*r21);
IkReal x10848=(cj3*gconst4);
IkReal x10849=(gconst4*sj3);
IkReal x10850=(cj3*gconst5);
IkReal x10851=(r20*x10839);
IkReal x10852=(r10*x10839);
IkReal x10853=(cj3*x10839);
IkReal x10854=(r02*x10838);
IkReal x10855=(x10840+x10841);
IkReal x10856=((1.0)*sj3*x10839);
evalcond[0]=((-1.0)*r02*x10839);
evalcond[1]=(((x10838*x10847))+(((-1.0)*r20*x10838*x10845)));
evalcond[2]=((((-1.0)*sj3*x10854))+x10855);
evalcond[3]=(((cj3*x10854))+(((-1.0)*x10844))+x10846);
evalcond[4]=((-1.0)+((x10838*x10843))+(((-1.0)*r10*x10838*x10845)));
evalcond[5]=(((x10843*x10853))+(((-1.0)*cj3*x10845*x10852))+((r11*x10842))+((r10*x10849)));
evalcond[6]=(((x10842*x10852))+((r11*x10850))+(((-1.0)*x10843*x10856))+((r10*x10848)));
evalcond[7]=(((x10847*x10853))+(((-1.0)*cj3*x10845*x10851))+((r21*x10842))+((r20*x10849))+x10855);
evalcond[8]=(((x10842*x10851))+((r21*x10850))+(((-1.0)*x10846))+((r20*x10848))+(((-1.0)*x10847*x10856))+x10844);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10857=((1.0)*sj3);
IkReal x10858=(gconst4*r11);
IkReal x10859=((1.0)*gconst5*r10);
CheckValue<IkReal> x10860=IKPowWithIntegerCheck(((((-1.0)*x10859))+x10858),-1);
if(!x10860.valid){
continue;
}
CheckValue<IkReal> x10861=IKPowWithIntegerCheck((((cj3*x10858))+(((-1.0)*cj3*x10859))),-1);
if(!x10861.valid){
continue;
}
if( IKabs(x10860.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10861.value)*(((((-1.0)*gconst4*r10*x10857))+(((-1.0)*gconst5*r11*x10857)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10860.value)+IKsqr(((x10861.value)*(((((-1.0)*gconst4*r10*x10857))+(((-1.0)*gconst5*r11*x10857))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10860.value, ((x10861.value)*(((((-1.0)*gconst4*r10*x10857))+(((-1.0)*gconst5*r11*x10857))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10862=IKsin(j4);
IkReal x10863=IKcos(j4);
IkReal x10864=(cj2*sj1);
IkReal x10865=(cj1*sj2);
IkReal x10866=(gconst5*sj3);
IkReal x10867=(gconst4*r11);
IkReal x10868=(sj1*sj2);
IkReal x10869=((1.0)*gconst5);
IkReal x10870=(cj1*cj2);
IkReal x10871=(gconst4*r21);
IkReal x10872=(cj3*gconst4);
IkReal x10873=(gconst4*sj3);
IkReal x10874=(cj3*gconst5);
IkReal x10875=(r20*x10863);
IkReal x10876=(r10*x10863);
IkReal x10877=(cj3*x10863);
IkReal x10878=(r02*x10862);
IkReal x10879=(x10864+x10865);
IkReal x10880=((1.0)*sj3*x10863);
evalcond[0]=((-1.0)*r02*x10863);
evalcond[1]=((((-1.0)*r20*x10862*x10869))+((x10862*x10871)));
evalcond[2]=((((-1.0)*sj3*x10878))+x10879);
evalcond[3]=(((cj3*x10878))+(((-1.0)*x10868))+x10870);
evalcond[4]=((-1.0)+((x10862*x10867))+(((-1.0)*r10*x10862*x10869)));
evalcond[5]=(((r11*x10866))+((r10*x10873))+(((-1.0)*cj3*x10869*x10876))+((x10867*x10877)));
evalcond[6]=((((-1.0)*x10867*x10880))+((x10866*x10876))+((r11*x10874))+((r10*x10872)));
evalcond[7]=(((r21*x10866))+(((-1.0)*cj3*x10869*x10875))+((r20*x10873))+((x10871*x10877))+x10879);
evalcond[8]=(((r21*x10874))+((x10866*x10875))+(((-1.0)*x10871*x10880))+((r20*x10872))+(((-1.0)*x10870))+x10868);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10881=gconst4*gconst4;
IkReal x10882=gconst5*gconst5;
IkReal x10883=(r10*r21);
IkReal x10884=((1.0)*cj3);
IkReal x10885=(r11*r21);
IkReal x10886=(r11*r20);
IkReal x10887=(r22*sj3);
IkReal x10888=(gconst4*r10);
IkReal x10889=((1.0)*sj3);
IkReal x10890=(cj3*gconst4*gconst5);
CheckValue<IkReal> x10891=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x10884))+((x10883*x10890))+(((-1.0)*x10881*x10884*x10885))+((x10886*x10890))+(((-1.0)*r10*r20*x10882*x10884)))),-1);
if(!x10891.valid){
continue;
}
CheckValue<IkReal> x10892 = IKatan2WithCheck(IkReal((((gconst5*r11*x10887))+((x10887*x10888)))),IkReal(((((-1.0)*x10882*x10886*x10889))+((sj3*x10881*x10883))+(((-1.0)*gconst5*r20*x10888*x10889))+((gconst4*gconst5*sj3*x10885)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10892.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10891.value)))+(x10892.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10893=IKsin(j4);
IkReal x10894=IKcos(j4);
IkReal x10895=(cj2*sj1);
IkReal x10896=(cj1*sj2);
IkReal x10897=(gconst5*sj3);
IkReal x10898=(gconst4*r11);
IkReal x10899=(sj1*sj2);
IkReal x10900=(gconst5*r10);
IkReal x10901=(cj1*cj2);
IkReal x10902=(gconst4*r01);
IkReal x10903=(gconst4*r21);
IkReal x10904=(gconst5*r00);
IkReal x10905=(cj3*gconst5);
IkReal x10906=(gconst4*sj3);
IkReal x10907=(cj3*gconst4);
IkReal x10908=((1.0)*x10894);
IkReal x10909=((1.0)*x10893);
IkReal x10910=(cj3*x10893);
IkReal x10911=(cj3*x10894);
IkReal x10912=(x10895+x10896);
evalcond[0]=(((x10893*x10903))+(((-1.0)*r22*x10908))+(((-1.0)*gconst5*r20*x10909)));
evalcond[1]=(((x10893*x10902))+(((-1.0)*x10904*x10909))+(((-1.0)*r02*x10908)));
evalcond[2]=((-1.0)+(((-1.0)*x10900*x10909))+((x10893*x10898))+(((-1.0)*r12*x10908)));
evalcond[3]=(((x10898*x10911))+(((-1.0)*cj3*x10900*x10908))+((r12*x10910))+((r11*x10897))+((r10*x10906)));
evalcond[4]=((((-1.0)*r12*sj3*x10909))+((r10*x10894*x10897))+(((-1.0)*sj3*x10898*x10908))+((r10*x10907))+((r11*x10905)));
evalcond[5]=(((r20*x10906))+(((-1.0)*r20*x10905*x10908))+((r22*x10910))+((r21*x10897))+x10912+((x10903*x10911)));
evalcond[6]=((((-1.0)*sj3*x10902*x10908))+((r01*x10905))+((r00*x10907))+((r00*x10894*x10897))+(((-1.0)*r02*sj3*x10909))+x10912);
evalcond[7]=(((r01*x10897))+(((-1.0)*x10899))+((r02*x10910))+((r00*x10906))+(((-1.0)*cj3*x10904*x10908))+x10901+((x10902*x10911)));
evalcond[8]=(((r20*x10907))+(((-1.0)*r22*sj3*x10909))+((r20*x10894*x10897))+((r21*x10905))+(((-1.0)*x10901))+(((-1.0)*sj3*x10903*x10908))+x10899);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10913=((1.0)*gconst5);
CheckValue<IkReal> x10914=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10913))+(((-1.0)*gconst4*r20)))),-1);
if(!x10914.valid){
continue;
}
CheckValue<IkReal> x10915 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10913)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10915.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10914.value)))+(x10915.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10916=IKsin(j4);
IkReal x10917=IKcos(j4);
IkReal x10918=(cj2*sj1);
IkReal x10919=(cj1*sj2);
IkReal x10920=(gconst5*sj3);
IkReal x10921=(gconst4*r11);
IkReal x10922=(sj1*sj2);
IkReal x10923=(gconst5*r10);
IkReal x10924=(cj1*cj2);
IkReal x10925=(gconst4*r01);
IkReal x10926=(gconst4*r21);
IkReal x10927=(gconst5*r00);
IkReal x10928=(cj3*gconst5);
IkReal x10929=(gconst4*sj3);
IkReal x10930=(cj3*gconst4);
IkReal x10931=((1.0)*x10917);
IkReal x10932=((1.0)*x10916);
IkReal x10933=(cj3*x10916);
IkReal x10934=(cj3*x10917);
IkReal x10935=(x10918+x10919);
evalcond[0]=((((-1.0)*r22*x10931))+(((-1.0)*gconst5*r20*x10932))+((x10916*x10926)));
evalcond[1]=((((-1.0)*r02*x10931))+(((-1.0)*x10927*x10932))+((x10916*x10925)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x10931))+(((-1.0)*x10923*x10932))+((x10916*x10921)));
evalcond[3]=(((r10*x10929))+((x10921*x10934))+((r12*x10933))+((r11*x10920))+(((-1.0)*cj3*x10923*x10931)));
evalcond[4]=(((r10*x10930))+((r10*x10917*x10920))+(((-1.0)*sj3*x10921*x10931))+((r11*x10928))+(((-1.0)*r12*sj3*x10932)));
evalcond[5]=(((x10926*x10934))+(((-1.0)*r20*x10928*x10931))+((r21*x10920))+((r22*x10933))+((r20*x10929))+x10935);
evalcond[6]=(((r00*x10917*x10920))+((r01*x10928))+(((-1.0)*sj3*x10925*x10931))+(((-1.0)*r02*sj3*x10932))+((r00*x10930))+x10935);
evalcond[7]=((((-1.0)*x10922))+(((-1.0)*cj3*x10927*x10931))+((r02*x10933))+((r01*x10920))+((r00*x10929))+((x10925*x10934))+x10924);
evalcond[8]=((((-1.0)*r22*sj3*x10932))+(((-1.0)*x10924))+((r21*x10928))+((r20*x10930))+(((-1.0)*sj3*x10926*x10931))+x10922+((r20*x10917*x10920)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10936=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10936.valid){
continue;
}
CheckValue<IkReal> x10937 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10937.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10936.value)))+(x10937.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10938=IKsin(j4);
IkReal x10939=IKcos(j4);
IkReal x10940=(cj2*sj1);
IkReal x10941=(cj1*sj2);
IkReal x10942=(gconst5*sj3);
IkReal x10943=(gconst4*r11);
IkReal x10944=(sj1*sj2);
IkReal x10945=(gconst5*r10);
IkReal x10946=(cj1*cj2);
IkReal x10947=(gconst4*r01);
IkReal x10948=(gconst4*r21);
IkReal x10949=(gconst5*r00);
IkReal x10950=(cj3*gconst5);
IkReal x10951=(gconst4*sj3);
IkReal x10952=(cj3*gconst4);
IkReal x10953=((1.0)*x10939);
IkReal x10954=((1.0)*x10938);
IkReal x10955=(cj3*x10938);
IkReal x10956=(cj3*x10939);
IkReal x10957=(x10941+x10940);
evalcond[0]=((((-1.0)*r22*x10953))+(((-1.0)*gconst5*r20*x10954))+((x10938*x10948)));
evalcond[1]=((((-1.0)*x10949*x10954))+(((-1.0)*r02*x10953))+((x10938*x10947)));
evalcond[2]=((-1.0)+(((-1.0)*x10945*x10954))+(((-1.0)*r12*x10953))+((x10938*x10943)));
evalcond[3]=(((r11*x10942))+((r10*x10951))+((x10943*x10956))+(((-1.0)*cj3*x10945*x10953))+((r12*x10955)));
evalcond[4]=((((-1.0)*r12*sj3*x10954))+((r10*x10952))+((r10*x10939*x10942))+(((-1.0)*sj3*x10943*x10953))+((r11*x10950)));
evalcond[5]=(((r21*x10942))+((r22*x10955))+((r20*x10951))+(((-1.0)*r20*x10950*x10953))+x10957+((x10948*x10956)));
evalcond[6]=(((r00*x10952))+((r01*x10950))+(((-1.0)*sj3*x10947*x10953))+((r00*x10939*x10942))+(((-1.0)*r02*sj3*x10954))+x10957);
evalcond[7]=(((r02*x10955))+((r01*x10942))+((r00*x10951))+(((-1.0)*x10944))+((x10947*x10956))+(((-1.0)*cj3*x10949*x10953))+x10946);
evalcond[8]=((((-1.0)*sj3*x10948*x10953))+((r20*x10939*x10942))+(((-1.0)*x10946))+(((-1.0)*r22*sj3*x10954))+((r20*x10952))+((r21*x10950))+x10944);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10958=((-1.0)*r21);
CheckValue<IkReal> x10961 = IKatan2WithCheck(IkReal(x10958),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10961.valid){
continue;
}
IkReal x10959=((1.0)*(x10961.value));
IkReal x10960=x10538;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10959)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10959)));
IkReal gconst4=(x10958*x10960);
IkReal gconst5=((1.0)*r20*x10960);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10962=((-1.0)*r21);
CheckValue<IkReal> x10965 = IKatan2WithCheck(IkReal(x10962),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10965.valid){
continue;
}
IkReal x10963=((1.0)*(x10965.value));
IkReal x10964=x10538;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10963)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10963)));
IkReal gconst4=(x10962*x10964);
IkReal gconst5=((1.0)*r20*x10964);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10966=((-1.0)*r21);
CheckValue<IkReal> x10969 = IKatan2WithCheck(IkReal(x10966),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10969.valid){
continue;
}
IkReal x10967=((1.0)*(x10969.value));
IkReal x10968=x10538;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10967)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10967)));
IkReal gconst4=(x10966*x10968);
IkReal gconst5=((1.0)*r20*x10968);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10970=((-1.0)*r21);
CheckValue<IkReal> x10973 = IKatan2WithCheck(IkReal(x10970),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10973.valid){
continue;
}
IkReal x10971=((1.0)*(x10973.value));
IkReal x10972=x10538;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10971)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10971)));
IkReal gconst4=(x10970*x10972);
IkReal gconst5=((1.0)*r20*x10972);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10974=((-1.0)*r21);
CheckValue<IkReal> x10977 = IKatan2WithCheck(IkReal(x10974),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10977.valid){
continue;
}
IkReal x10975=((1.0)*(x10977.value));
IkReal x10976=x10538;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10975)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10975)));
IkReal gconst4=(x10974*x10976);
IkReal gconst5=((1.0)*r20*x10976);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10978=((-1.0)*r21);
CheckValue<IkReal> x10981 = IKatan2WithCheck(IkReal(x10978),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10981.valid){
continue;
}
IkReal x10979=((1.0)*(x10981.value));
IkReal x10980=x10538;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10979)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10979)));
IkReal gconst4=(x10978*x10980);
IkReal gconst5=((1.0)*r20*x10980);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10982=(gconst5*r10);
IkReal x10983=(gconst4*r11);
CheckValue<IkReal> x10984=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10982*x10982)+(((-2.0)*x10982*x10983))+(x10983*x10983))),-1);
if(!x10984.valid){
continue;
}
CheckValue<IkReal> x10985 = IKatan2WithCheck(IkReal(((((-1.0)*x10983))+x10982)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10985.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10984.value)))+(x10985.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10986=IKsin(j4);
IkReal x10987=IKcos(j4);
IkReal x10988=(gconst4*r11);
IkReal x10989=((1.0)*cj1);
IkReal x10990=(gconst5*r10);
IkReal x10991=(gconst4*r01);
IkReal x10992=(gconst5*r00);
IkReal x10993=(gconst4*r21);
IkReal x10994=(gconst5*r20);
IkReal x10995=((1.0)*x10987);
IkReal x10996=((1.0)*x10986);
evalcond[0]=((((-1.0)*r22*x10995))+((x10986*x10993))+(((-1.0)*x10994*x10996)));
evalcond[1]=((((-1.0)*x10992*x10996))+((x10986*x10991))+(((-1.0)*r02*x10995)));
evalcond[2]=(((x10987*x10990))+(((-1.0)*x10988*x10995))+(((-1.0)*r12*x10996)));
evalcond[3]=((1.0)+((x10986*x10988))+(((-1.0)*x10990*x10996))+(((-1.0)*r12*x10995)));
evalcond[4]=(((x10987*x10994))+(((-1.0)*x10993*x10995))+(((-1.0)*cj2*x10989))+(((-1.0)*r22*x10996))+((sj1*sj2)));
evalcond[5]=(((x10987*x10992))+(((-1.0)*sj2*x10989))+(((-1.0)*x10991*x10995))+(((-1.0)*cj2*sj1))+(((-1.0)*r02*x10996)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10997=((1.0)*gconst5);
CheckValue<IkReal> x10998=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10997)))),-1);
if(!x10998.valid){
continue;
}
CheckValue<IkReal> x10999 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10997))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10999.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10998.value)))+(x10999.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11000=IKsin(j4);
IkReal x11001=IKcos(j4);
IkReal x11002=(gconst4*r11);
IkReal x11003=((1.0)*cj1);
IkReal x11004=(gconst5*r10);
IkReal x11005=(gconst4*r01);
IkReal x11006=(gconst5*r00);
IkReal x11007=(gconst4*r21);
IkReal x11008=(gconst5*r20);
IkReal x11009=((1.0)*x11001);
IkReal x11010=((1.0)*x11000);
evalcond[0]=((((-1.0)*r22*x11009))+((x11000*x11007))+(((-1.0)*x11008*x11010)));
evalcond[1]=((((-1.0)*r02*x11009))+(((-1.0)*x11006*x11010))+((x11000*x11005)));
evalcond[2]=(((x11001*x11004))+(((-1.0)*x11002*x11009))+(((-1.0)*r12*x11010)));
evalcond[3]=((1.0)+(((-1.0)*x11004*x11010))+((x11000*x11002))+(((-1.0)*r12*x11009)));
evalcond[4]=((((-1.0)*r22*x11010))+(((-1.0)*x11007*x11009))+((x11001*x11008))+((sj1*sj2))+(((-1.0)*cj2*x11003)));
evalcond[5]=((((-1.0)*r02*x11010))+((x11001*x11006))+(((-1.0)*cj2*sj1))+(((-1.0)*x11005*x11009))+(((-1.0)*sj2*x11003)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11011 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11011.valid){
continue;
}
CheckValue<IkReal> x11012=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11012.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11011.value)+(((1.5707963267949)*(x11012.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11013=IKsin(j4);
IkReal x11014=IKcos(j4);
IkReal x11015=(gconst4*r11);
IkReal x11016=((1.0)*cj1);
IkReal x11017=(gconst5*r10);
IkReal x11018=(gconst4*r01);
IkReal x11019=(gconst5*r00);
IkReal x11020=(gconst4*r21);
IkReal x11021=(gconst5*r20);
IkReal x11022=((1.0)*x11014);
IkReal x11023=((1.0)*x11013);
evalcond[0]=(((x11013*x11020))+(((-1.0)*r22*x11022))+(((-1.0)*x11021*x11023)));
evalcond[1]=((((-1.0)*r02*x11022))+((x11013*x11018))+(((-1.0)*x11019*x11023)));
evalcond[2]=((((-1.0)*x11015*x11022))+(((-1.0)*r12*x11023))+((x11014*x11017)));
evalcond[3]=((1.0)+((x11013*x11015))+(((-1.0)*r12*x11022))+(((-1.0)*x11017*x11023)));
evalcond[4]=(((x11014*x11021))+((sj1*sj2))+(((-1.0)*r22*x11023))+(((-1.0)*cj2*x11016))+(((-1.0)*x11020*x11022)));
evalcond[5]=((((-1.0)*r02*x11023))+(((-1.0)*x11018*x11022))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x11016))+((x11014*x11019)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x11024=((-1.0)*r21);
CheckValue<IkReal> x11027 = IKatan2WithCheck(IkReal(x11024),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11027.valid){
continue;
}
IkReal x11025=((1.0)*(x11027.value));
IkReal x11026=x10538;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11025)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11025)));
IkReal gconst4=(x11024*x11026);
IkReal gconst5=((1.0)*r20*x11026);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11028=((-1.0)*r21);
CheckValue<IkReal> x11031 = IKatan2WithCheck(IkReal(x11028),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11031.valid){
continue;
}
IkReal x11029=((1.0)*(x11031.value));
IkReal x11030=x10538;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11029)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11029)));
IkReal gconst4=(x11028*x11030);
IkReal gconst5=((1.0)*r20*x11030);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11032=((-1.0)*r21);
CheckValue<IkReal> x11035 = IKatan2WithCheck(IkReal(x11032),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11035.valid){
continue;
}
IkReal x11033=((1.0)*(x11035.value));
IkReal x11034=x10538;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11033)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11033)));
IkReal gconst4=(x11032*x11034);
IkReal gconst5=((1.0)*r20*x11034);
IkReal x11036=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11040=IKPowWithIntegerCheck(x11036,-1);
if(!x11040.valid){
continue;
}
IkReal x11037=x11040.value;
IkReal x11038=((1.0)*x11037);
IkReal x11039=((((-1.0)*x11038*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x11037))+(((-1.0)*(r12*r12)))+(((-1.0)*x11038*(r11*r11)*(r21*r21))));
j4eval[0]=x11039;
j4eval[1]=r12;
j4eval[2]=x11036;
j4eval[3]=IKsign(x11039);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11041=(gconst5*r10);
IkReal x11042=(gconst4*r11);
CheckValue<IkReal> x11043 = IKatan2WithCheck(IkReal((x11042+(((-1.0)*x11041)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x11043.valid){
continue;
}
CheckValue<IkReal> x11044=IKPowWithIntegerCheck(IKsign(((((2.0)*x11041*x11042))+(((-1.0)*(x11042*x11042)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x11041*x11041))))),-1);
if(!x11044.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11043.value)+(((1.5707963267949)*(x11044.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11045=IKcos(j4);
IkReal x11046=IKsin(j4);
IkReal x11047=(gconst4*r11);
IkReal x11048=(gconst5*r10);
IkReal x11049=((1.0)*cj1);
IkReal x11050=(gconst5*r00);
IkReal x11051=(gconst5*r20);
IkReal x11052=((1.0)*x11045);
IkReal x11053=(gconst4*x11045);
IkReal x11054=((1.0)*x11046);
IkReal x11055=(gconst4*x11046);
evalcond[0]=(((x11045*x11047))+((r12*x11046))+(((-1.0)*x11048*x11052)));
evalcond[1]=((((-1.0)*r22*x11052))+(((-1.0)*x11051*x11054))+((r21*x11055)));
evalcond[2]=(((r01*x11055))+(((-1.0)*x11050*x11054))+(((-1.0)*r02*x11052)));
evalcond[3]=((1.0)+(((-1.0)*r12*x11052))+((x11046*x11047))+(((-1.0)*x11048*x11054)));
evalcond[4]=((((-1.0)*cj2*x11049))+((sj1*sj2))+((r22*x11046))+(((-1.0)*x11051*x11052))+((r21*x11053)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r01*x11053))+(((-1.0)*sj2*x11049))+(((-1.0)*x11050*x11052))+((r02*x11046)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11056=((1.0)*gconst5);
CheckValue<IkReal> x11057=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x11056)))),-1);
if(!x11057.valid){
continue;
}
CheckValue<IkReal> x11058 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11056))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11058.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11057.value)))+(x11058.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11059=IKcos(j4);
IkReal x11060=IKsin(j4);
IkReal x11061=(gconst4*r11);
IkReal x11062=(gconst5*r10);
IkReal x11063=((1.0)*cj1);
IkReal x11064=(gconst5*r00);
IkReal x11065=(gconst5*r20);
IkReal x11066=((1.0)*x11059);
IkReal x11067=(gconst4*x11059);
IkReal x11068=((1.0)*x11060);
IkReal x11069=(gconst4*x11060);
evalcond[0]=(((r12*x11060))+(((-1.0)*x11062*x11066))+((x11059*x11061)));
evalcond[1]=((((-1.0)*r22*x11066))+((r21*x11069))+(((-1.0)*x11065*x11068)));
evalcond[2]=((((-1.0)*r02*x11066))+((r01*x11069))+(((-1.0)*x11064*x11068)));
evalcond[3]=((1.0)+((x11060*x11061))+(((-1.0)*r12*x11066))+(((-1.0)*x11062*x11068)));
evalcond[4]=(((sj1*sj2))+((r21*x11067))+((r22*x11060))+(((-1.0)*cj2*x11063))+(((-1.0)*x11065*x11066)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*sj2*x11063))+((r01*x11067))+(((-1.0)*x11064*x11066))+((r02*x11060)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11070 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11070.valid){
continue;
}
CheckValue<IkReal> x11071=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11071.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11070.value)+(((1.5707963267949)*(x11071.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11072=IKcos(j4);
IkReal x11073=IKsin(j4);
IkReal x11074=(gconst4*r11);
IkReal x11075=(gconst5*r10);
IkReal x11076=((1.0)*cj1);
IkReal x11077=(gconst5*r00);
IkReal x11078=(gconst5*r20);
IkReal x11079=((1.0)*x11072);
IkReal x11080=(gconst4*x11072);
IkReal x11081=((1.0)*x11073);
IkReal x11082=(gconst4*x11073);
evalcond[0]=(((x11072*x11074))+((r12*x11073))+(((-1.0)*x11075*x11079)));
evalcond[1]=(((r21*x11082))+(((-1.0)*x11078*x11081))+(((-1.0)*r22*x11079)));
evalcond[2]=((((-1.0)*x11077*x11081))+((r01*x11082))+(((-1.0)*r02*x11079)));
evalcond[3]=((1.0)+(((-1.0)*x11075*x11081))+((x11073*x11074))+(((-1.0)*r12*x11079)));
evalcond[4]=((((-1.0)*x11078*x11079))+((r21*x11080))+((sj1*sj2))+(((-1.0)*cj2*x11076))+((r22*x11073)));
evalcond[5]=(((r01*x11080))+(((-1.0)*cj2*sj1))+((r02*x11073))+(((-1.0)*x11077*x11079))+(((-1.0)*sj2*x11076)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x11083=((-1.0)*r21);
CheckValue<IkReal> x11086 = IKatan2WithCheck(IkReal(x11083),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11086.valid){
continue;
}
IkReal x11084=((1.0)*(x11086.value));
IkReal x11085=x10538;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11084)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11084)));
IkReal gconst4=(x11083*x11085);
IkReal gconst5=((1.0)*r20*x11085);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11087=((-1.0)*r21);
CheckValue<IkReal> x11090 = IKatan2WithCheck(IkReal(x11087),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11090.valid){
continue;
}
IkReal x11088=((1.0)*(x11090.value));
IkReal x11089=x10538;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11088)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11088)));
IkReal gconst4=(x11087*x11089);
IkReal gconst5=((1.0)*r20*x11089);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11091=((-1.0)*r21);
CheckValue<IkReal> x11094 = IKatan2WithCheck(IkReal(x11091),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11094.valid){
continue;
}
IkReal x11092=((1.0)*(x11094.value));
IkReal x11093=x10538;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11092)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11092)));
IkReal gconst4=(x11091*x11093);
IkReal gconst5=((1.0)*r20*x11093);
IkReal x11095=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11099=IKPowWithIntegerCheck(x11095,-1);
if(!x11099.valid){
continue;
}
IkReal x11096=x11099.value;
IkReal x11097=((1.0)*x11096);
IkReal x11098=((((-1.0)*x11097*(r11*r11)*(r21*r21)))+(((-1.0)*x11097*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x11096)));
j4eval[0]=x11098;
j4eval[1]=r12;
j4eval[2]=x11095;
j4eval[3]=IKsign(x11098);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11100=(gconst5*r10);
IkReal x11101=(gconst4*r11);
CheckValue<IkReal> x11102=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11101*x11101)))+(((2.0)*x11100*x11101))+(((-1.0)*(r12*r12)))+(((-1.0)*(x11100*x11100))))),-1);
if(!x11102.valid){
continue;
}
CheckValue<IkReal> x11103 = IKatan2WithCheck(IkReal(((((-1.0)*x11100))+x11101)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x11103.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11102.value)))+(x11103.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11104=IKcos(j4);
IkReal x11105=IKsin(j4);
IkReal x11106=(gconst4*r11);
IkReal x11107=(gconst5*r10);
IkReal x11108=(gconst5*r00);
IkReal x11109=(gconst5*r20);
IkReal x11110=((1.0)*x11104);
IkReal x11111=(gconst4*x11104);
IkReal x11112=((1.0)*x11105);
IkReal x11113=(gconst4*x11105);
evalcond[0]=(((x11104*x11106))+(((-1.0)*x11107*x11110))+((r12*x11105)));
evalcond[1]=(((r21*x11113))+(((-1.0)*r22*x11110))+(((-1.0)*x11109*x11112)));
evalcond[2]=((((-1.0)*x11108*x11112))+(((-1.0)*r02*x11110))+((r01*x11113)));
evalcond[3]=((1.0)+((x11105*x11106))+(((-1.0)*x11107*x11112))+(((-1.0)*r12*x11110)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x11111))+(((-1.0)*x11109*x11110))+((r22*x11105)));
evalcond[5]=((((-1.0)*x11108*x11110))+((r02*x11105))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x11111)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11114=((1.0)*gconst5);
CheckValue<IkReal> x11115 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x11114)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11115.valid){
continue;
}
CheckValue<IkReal> x11116=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x11114)))),-1);
if(!x11116.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11115.value)+(((1.5707963267949)*(x11116.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11117=IKcos(j4);
IkReal x11118=IKsin(j4);
IkReal x11119=(gconst4*r11);
IkReal x11120=(gconst5*r10);
IkReal x11121=(gconst5*r00);
IkReal x11122=(gconst5*r20);
IkReal x11123=((1.0)*x11117);
IkReal x11124=(gconst4*x11117);
IkReal x11125=((1.0)*x11118);
IkReal x11126=(gconst4*x11118);
evalcond[0]=(((x11117*x11119))+(((-1.0)*x11120*x11123))+((r12*x11118)));
evalcond[1]=(((r21*x11126))+(((-1.0)*x11122*x11125))+(((-1.0)*r22*x11123)));
evalcond[2]=((((-1.0)*x11121*x11125))+(((-1.0)*r02*x11123))+((r01*x11126)));
evalcond[3]=((1.0)+(((-1.0)*r12*x11123))+(((-1.0)*x11120*x11125))+((x11118*x11119)));
evalcond[4]=(((cj2*sj1))+((r21*x11124))+((cj1*sj2))+(((-1.0)*x11122*x11123))+((r22*x11118)));
evalcond[5]=(((r02*x11118))+(((-1.0)*x11121*x11123))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x11124)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11127 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11127.valid){
continue;
}
CheckValue<IkReal> x11128=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11128.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11127.value)+(((1.5707963267949)*(x11128.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11129=IKcos(j4);
IkReal x11130=IKsin(j4);
IkReal x11131=(gconst4*r11);
IkReal x11132=(gconst5*r10);
IkReal x11133=(gconst5*r00);
IkReal x11134=(gconst5*r20);
IkReal x11135=((1.0)*x11129);
IkReal x11136=(gconst4*x11129);
IkReal x11137=((1.0)*x11130);
IkReal x11138=(gconst4*x11130);
evalcond[0]=((((-1.0)*x11132*x11135))+((x11129*x11131))+((r12*x11130)));
evalcond[1]=((((-1.0)*x11134*x11137))+((r21*x11138))+(((-1.0)*r22*x11135)));
evalcond[2]=((((-1.0)*x11133*x11137))+(((-1.0)*r02*x11135))+((r01*x11138)));
evalcond[3]=((1.0)+(((-1.0)*x11132*x11137))+((x11130*x11131))+(((-1.0)*r12*x11135)));
evalcond[4]=(((r22*x11130))+((cj2*sj1))+(((-1.0)*x11134*x11135))+((cj1*sj2))+((r21*x11136)));
evalcond[5]=(((r02*x11130))+(((-1.0)*x11133*x11135))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x11136)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x11139=((-1.0)*r21);
CheckValue<IkReal> x11142 = IKatan2WithCheck(IkReal(x11139),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11142.valid){
continue;
}
IkReal x11140=((1.0)*(x11142.value));
IkReal x11141=x10538;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11140)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11140)));
IkReal gconst4=(x11139*x11141);
IkReal gconst5=((1.0)*r20*x11141);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11143=((-1.0)*r21);
CheckValue<IkReal> x11146 = IKatan2WithCheck(IkReal(x11143),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11146.valid){
continue;
}
IkReal x11144=((1.0)*(x11146.value));
IkReal x11145=x10538;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11144)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11144)));
IkReal gconst4=(x11143*x11145);
IkReal gconst5=((1.0)*r20*x11145);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11147=((-1.0)*r21);
CheckValue<IkReal> x11150 = IKatan2WithCheck(IkReal(x11147),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11150.valid){
continue;
}
IkReal x11148=((1.0)*(x11150.value));
IkReal x11149=x10538;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11148)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11148)));
IkReal gconst4=(x11147*x11149);
IkReal gconst5=((1.0)*r20*x11149);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11151=(gconst5*r10);
IkReal x11152=(gconst4*r11);
CheckValue<IkReal> x11153 = IKatan2WithCheck(IkReal(((((-1.0)*x11152))+x11151)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x11153.valid){
continue;
}
CheckValue<IkReal> x11154=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x11152*x11152)+(((-2.0)*x11151*x11152))+(x11151*x11151))),-1);
if(!x11154.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11153.value)+(((1.5707963267949)*(x11154.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11155=IKsin(j4);
IkReal x11156=IKcos(j4);
IkReal x11157=(gconst4*r11);
IkReal x11158=(gconst5*r10);
IkReal x11159=(gconst4*r01);
IkReal x11160=(gconst5*r00);
IkReal x11161=(gconst4*r21);
IkReal x11162=(gconst5*r20);
IkReal x11163=((1.0)*x11156);
IkReal x11164=((1.0)*x11155);
evalcond[0]=((((-1.0)*r22*x11163))+(((-1.0)*x11162*x11164))+((x11155*x11161)));
evalcond[1]=((((-1.0)*x11160*x11164))+((x11155*x11159))+(((-1.0)*r02*x11163)));
evalcond[2]=((((-1.0)*x11157*x11163))+(((-1.0)*r12*x11164))+((x11156*x11158)));
evalcond[3]=((1.0)+(((-1.0)*x11158*x11164))+(((-1.0)*r12*x11163))+((x11155*x11157)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11161*x11163))+(((-1.0)*r22*x11164))+((cj1*sj2))+((x11156*x11162)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x11156*x11160))+(((-1.0)*x11159*x11163))+(((-1.0)*r02*x11164)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11165=((1.0)*gconst5);
CheckValue<IkReal> x11166=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x11165))+(((-1.0)*gconst4*r00)))),-1);
if(!x11166.valid){
continue;
}
CheckValue<IkReal> x11167 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11165))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11167.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11166.value)))+(x11167.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11168=IKsin(j4);
IkReal x11169=IKcos(j4);
IkReal x11170=(gconst4*r11);
IkReal x11171=(gconst5*r10);
IkReal x11172=(gconst4*r01);
IkReal x11173=(gconst5*r00);
IkReal x11174=(gconst4*r21);
IkReal x11175=(gconst5*r20);
IkReal x11176=((1.0)*x11169);
IkReal x11177=((1.0)*x11168);
evalcond[0]=((((-1.0)*x11175*x11177))+((x11168*x11174))+(((-1.0)*r22*x11176)));
evalcond[1]=(((x11168*x11172))+(((-1.0)*x11173*x11177))+(((-1.0)*r02*x11176)));
evalcond[2]=(((x11169*x11171))+(((-1.0)*r12*x11177))+(((-1.0)*x11170*x11176)));
evalcond[3]=((1.0)+((x11168*x11170))+(((-1.0)*r12*x11176))+(((-1.0)*x11171*x11177)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11174*x11176))+((x11169*x11175))+((cj1*sj2))+(((-1.0)*r22*x11177)));
evalcond[5]=(((x11169*x11173))+(((-1.0)*x11172*x11176))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x11177)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11178 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11178.valid){
continue;
}
CheckValue<IkReal> x11179=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11179.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11178.value)+(((1.5707963267949)*(x11179.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11180=IKsin(j4);
IkReal x11181=IKcos(j4);
IkReal x11182=(gconst4*r11);
IkReal x11183=(gconst5*r10);
IkReal x11184=(gconst4*r01);
IkReal x11185=(gconst5*r00);
IkReal x11186=(gconst4*r21);
IkReal x11187=(gconst5*r20);
IkReal x11188=((1.0)*x11181);
IkReal x11189=((1.0)*x11180);
evalcond[0]=((((-1.0)*r22*x11188))+((x11180*x11186))+(((-1.0)*x11187*x11189)));
evalcond[1]=((((-1.0)*r02*x11188))+(((-1.0)*x11185*x11189))+((x11180*x11184)));
evalcond[2]=((((-1.0)*x11182*x11188))+(((-1.0)*r12*x11189))+((x11181*x11183)));
evalcond[3]=((1.0)+(((-1.0)*x11183*x11189))+(((-1.0)*r12*x11188))+((x11180*x11182)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11186*x11188))+(((-1.0)*r22*x11189))+((cj1*sj2))+((x11181*x11187)));
evalcond[5]=((((-1.0)*r02*x11189))+(((-1.0)*x11184*x11188))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x11181*x11185)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11190=gconst4*gconst4;
IkReal x11191=gconst5*gconst5;
IkReal x11192=(r10*r21);
IkReal x11193=((1.0)*cj3);
IkReal x11194=(r11*r21);
IkReal x11195=(r11*r20);
IkReal x11196=(r22*sj3);
IkReal x11197=(gconst4*r10);
IkReal x11198=((1.0)*sj3);
IkReal x11199=(cj3*gconst4*gconst5);
CheckValue<IkReal> x11200=IKPowWithIntegerCheck(IKsign((((x11192*x11199))+(((-1.0)*x11190*x11193*x11194))+(((-1.0)*r10*r20*x11191*x11193))+((x11195*x11199))+(((-1.0)*r12*r22*x11193)))),-1);
if(!x11200.valid){
continue;
}
CheckValue<IkReal> x11201 = IKatan2WithCheck(IkReal((((gconst5*r11*x11196))+((x11196*x11197)))),IkReal((((sj3*x11190*x11192))+(((-1.0)*gconst5*r20*x11197*x11198))+((gconst4*gconst5*sj3*x11194))+(((-1.0)*x11191*x11195*x11198)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11201.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11200.value)))+(x11201.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11202=IKsin(j4);
IkReal x11203=IKcos(j4);
IkReal x11204=(sj1*sj2);
IkReal x11205=(gconst5*sj3);
IkReal x11206=(cj3*gconst5);
IkReal x11207=(gconst4*r11);
IkReal x11208=((1.0)*cj1);
IkReal x11209=(gconst4*r01);
IkReal x11210=(cj2*sj1);
IkReal x11211=(gconst4*r21);
IkReal x11212=(gconst4*sj3);
IkReal x11213=(cj3*gconst4);
IkReal x11214=(cj2*x11208);
IkReal x11215=((1.0)*x11203);
IkReal x11216=((1.0)*x11202);
IkReal x11217=(cj3*x11202);
IkReal x11218=(cj3*x11203);
evalcond[0]=(((x11202*x11211))+(((-1.0)*gconst5*r20*x11216))+(((-1.0)*r22*x11215)));
evalcond[1]=((((-1.0)*gconst5*r00*x11216))+((x11202*x11209))+(((-1.0)*r02*x11215)));
evalcond[2]=((1.0)+((x11202*x11207))+(((-1.0)*r12*x11215))+(((-1.0)*gconst5*r10*x11216)));
evalcond[3]=(((x11207*x11218))+(((-1.0)*r10*x11206*x11215))+((r11*x11205))+((r10*x11212))+((r12*x11217)));
evalcond[4]=((((-1.0)*r12*sj3*x11216))+((r10*x11203*x11205))+((r11*x11206))+((r10*x11213))+(((-1.0)*sj3*x11207*x11215)));
evalcond[5]=((((-1.0)*r20*x11206*x11215))+((r21*x11205))+((r20*x11212))+x11210+((cj1*sj2))+((x11211*x11218))+((r22*x11217)));
evalcond[6]=(((r02*x11217))+(((-1.0)*x11214))+x11204+((r00*x11212))+((r01*x11205))+((x11209*x11218))+(((-1.0)*r00*x11206*x11215)));
evalcond[7]=((((-1.0)*x11214))+((r21*x11206))+((r20*x11203*x11205))+((r20*x11213))+(((-1.0)*r22*sj3*x11216))+x11204+(((-1.0)*sj3*x11211*x11215)));
evalcond[8]=((((-1.0)*sj3*x11209*x11215))+((r00*x11203*x11205))+(((-1.0)*r02*sj3*x11216))+((r00*x11213))+((r01*x11206))+(((-1.0)*x11210))+(((-1.0)*sj2*x11208)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11219=((1.0)*gconst5);
CheckValue<IkReal> x11220 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11219))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11220.valid){
continue;
}
CheckValue<IkReal> x11221=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x11219)))),-1);
if(!x11221.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11220.value)+(((1.5707963267949)*(x11221.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11222=IKsin(j4);
IkReal x11223=IKcos(j4);
IkReal x11224=(sj1*sj2);
IkReal x11225=(gconst5*sj3);
IkReal x11226=(cj3*gconst5);
IkReal x11227=(gconst4*r11);
IkReal x11228=((1.0)*cj1);
IkReal x11229=(gconst4*r01);
IkReal x11230=(cj2*sj1);
IkReal x11231=(gconst4*r21);
IkReal x11232=(gconst4*sj3);
IkReal x11233=(cj3*gconst4);
IkReal x11234=(cj2*x11228);
IkReal x11235=((1.0)*x11223);
IkReal x11236=((1.0)*x11222);
IkReal x11237=(cj3*x11222);
IkReal x11238=(cj3*x11223);
evalcond[0]=(((x11222*x11231))+(((-1.0)*gconst5*r20*x11236))+(((-1.0)*r22*x11235)));
evalcond[1]=((((-1.0)*gconst5*r00*x11236))+(((-1.0)*r02*x11235))+((x11222*x11229)));
evalcond[2]=((1.0)+((x11222*x11227))+(((-1.0)*gconst5*r10*x11236))+(((-1.0)*r12*x11235)));
evalcond[3]=(((x11227*x11238))+((r11*x11225))+(((-1.0)*r10*x11226*x11235))+((r12*x11237))+((r10*x11232)));
evalcond[4]=(((r11*x11226))+((r10*x11223*x11225))+((r10*x11233))+(((-1.0)*r12*sj3*x11236))+(((-1.0)*sj3*x11227*x11235)));
evalcond[5]=(((r22*x11237))+(((-1.0)*r20*x11226*x11235))+x11230+((cj1*sj2))+((r20*x11232))+((x11231*x11238))+((r21*x11225)));
evalcond[6]=(x11224+(((-1.0)*x11234))+((x11229*x11238))+((r02*x11237))+((r01*x11225))+((r00*x11232))+(((-1.0)*r00*x11226*x11235)));
evalcond[7]=(((r20*x11223*x11225))+x11224+(((-1.0)*x11234))+((r20*x11233))+(((-1.0)*r22*sj3*x11236))+((r21*x11226))+(((-1.0)*sj3*x11231*x11235)));
evalcond[8]=((((-1.0)*x11230))+(((-1.0)*sj2*x11228))+((r00*x11223*x11225))+(((-1.0)*r02*sj3*x11236))+((r01*x11226))+((r00*x11233))+(((-1.0)*sj3*x11229*x11235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11239 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11239.valid){
continue;
}
CheckValue<IkReal> x11240=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11240.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11239.value)+(((1.5707963267949)*(x11240.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11241=IKsin(j4);
IkReal x11242=IKcos(j4);
IkReal x11243=(sj1*sj2);
IkReal x11244=(gconst5*sj3);
IkReal x11245=(cj3*gconst5);
IkReal x11246=(gconst4*r11);
IkReal x11247=((1.0)*cj1);
IkReal x11248=(gconst4*r01);
IkReal x11249=(cj2*sj1);
IkReal x11250=(gconst4*r21);
IkReal x11251=(gconst4*sj3);
IkReal x11252=(cj3*gconst4);
IkReal x11253=(cj2*x11247);
IkReal x11254=((1.0)*x11242);
IkReal x11255=((1.0)*x11241);
IkReal x11256=(cj3*x11241);
IkReal x11257=(cj3*x11242);
evalcond[0]=((((-1.0)*gconst5*r20*x11255))+((x11241*x11250))+(((-1.0)*r22*x11254)));
evalcond[1]=((((-1.0)*r02*x11254))+(((-1.0)*gconst5*r00*x11255))+((x11241*x11248)));
evalcond[2]=((1.0)+((x11241*x11246))+(((-1.0)*gconst5*r10*x11255))+(((-1.0)*r12*x11254)));
evalcond[3]=((((-1.0)*r10*x11245*x11254))+((r11*x11244))+((r12*x11256))+((r10*x11251))+((x11246*x11257)));
evalcond[4]=((((-1.0)*r12*sj3*x11255))+((r10*x11242*x11244))+((r11*x11245))+(((-1.0)*sj3*x11246*x11254))+((r10*x11252)));
evalcond[5]=(((r22*x11256))+x11249+((cj1*sj2))+((r20*x11251))+((x11250*x11257))+((r21*x11244))+(((-1.0)*r20*x11245*x11254)));
evalcond[6]=((((-1.0)*r00*x11245*x11254))+x11243+((r02*x11256))+(((-1.0)*x11253))+((r01*x11244))+((x11248*x11257))+((r00*x11251)));
evalcond[7]=(x11243+(((-1.0)*x11253))+((r20*x11252))+(((-1.0)*sj3*x11250*x11254))+(((-1.0)*r22*sj3*x11255))+((r21*x11245))+((r20*x11242*x11244)));
evalcond[8]=(((r00*x11242*x11244))+(((-1.0)*sj2*x11247))+(((-1.0)*x11249))+(((-1.0)*r02*sj3*x11255))+(((-1.0)*sj3*x11248*x11254))+((r01*x11245))+((r00*x11252)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x11258=((-1.0)*r21);
CheckValue<IkReal> x11261 = IKatan2WithCheck(IkReal(x11258),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11261.valid){
continue;
}
IkReal x11259=((1.0)*(x11261.value));
IkReal x11260=x10538;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11259)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11259)));
IkReal gconst4=(x11258*x11260);
IkReal gconst5=((1.0)*r20*x11260);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11262=((-1.0)*r21);
CheckValue<IkReal> x11265 = IKatan2WithCheck(IkReal(x11262),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11265.valid){
continue;
}
IkReal x11263=((1.0)*(x11265.value));
IkReal x11264=x10538;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11263)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11263)));
IkReal gconst4=(x11262*x11264);
IkReal gconst5=((1.0)*r20*x11264);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11266=((-1.0)*r21);
CheckValue<IkReal> x11269 = IKatan2WithCheck(IkReal(x11266),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11269.valid){
continue;
}
IkReal x11267=((1.0)*(x11269.value));
IkReal x11268=x10538;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11267)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11267)));
IkReal gconst4=(x11266*x11268);
IkReal gconst5=((1.0)*r20*x11268);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x11270=((-1.0)*r21);
CheckValue<IkReal> x11273 = IKatan2WithCheck(IkReal(x11270),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11273.valid){
continue;
}
IkReal x11271=((1.0)*(x11273.value));
IkReal x11272=x10538;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11271)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11271)));
IkReal gconst4=(x11270*x11272);
IkReal gconst5=((1.0)*r20*x11272);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11274=((-1.0)*r21);
CheckValue<IkReal> x11277 = IKatan2WithCheck(IkReal(x11274),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11277.valid){
continue;
}
IkReal x11275=((1.0)*(x11277.value));
IkReal x11276=x10538;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11275)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11275)));
IkReal gconst4=(x11274*x11276);
IkReal gconst5=((1.0)*r20*x11276);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11278=((-1.0)*r21);
CheckValue<IkReal> x11281 = IKatan2WithCheck(IkReal(x11278),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11281.valid){
continue;
}
IkReal x11279=((1.0)*(x11281.value));
IkReal x11280=x10538;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11279)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11279)));
IkReal gconst4=(x11278*x11280);
IkReal gconst5=((1.0)*r20*x11280);
IkReal x11282=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11286=IKPowWithIntegerCheck(x11282,-1);
if(!x11286.valid){
continue;
}
IkReal x11283=x11286.value;
IkReal x11284=((1.0)*x11283);
IkReal x11285=((((-2.0)*r00*r01*r20*r21*x11283))+(((-1.0)*x11284*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-1.0)*x11284*(r01*r01)*(r21*r21))));
j4eval[0]=x11285;
j4eval[1]=r02;
j4eval[2]=x11282;
j4eval[3]=IKsign(x11285);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11287=(gconst5*r00);
IkReal x11288=(gconst4*r01);
CheckValue<IkReal> x11289 = IKatan2WithCheck(IkReal((x11287+(((-1.0)*x11288)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11289.valid){
continue;
}
CheckValue<IkReal> x11290=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x11288*x11288)))+(((2.0)*x11287*x11288))+(((-1.0)*(x11287*x11287))))),-1);
if(!x11290.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11289.value)+(((1.5707963267949)*(x11290.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11291=IKsin(j4);
IkReal x11292=IKcos(j4);
IkReal x11293=(gconst4*r11);
IkReal x11294=((1.0)*cj1);
IkReal x11295=(gconst5*r10);
IkReal x11296=(gconst4*r01);
IkReal x11297=(gconst5*r00);
IkReal x11298=(gconst4*r21);
IkReal x11299=(gconst5*r20);
IkReal x11300=((1.0)*x11292);
IkReal x11301=((1.0)*x11291);
evalcond[0]=((((-1.0)*x11299*x11301))+((x11291*x11298))+(((-1.0)*r22*x11300)));
evalcond[1]=(((x11291*x11293))+(((-1.0)*r12*x11300))+(((-1.0)*x11295*x11301)));
evalcond[2]=((((-1.0)*x11296*x11300))+(((-1.0)*r02*x11301))+((x11292*x11297)));
evalcond[3]=((-1.0)+(((-1.0)*x11297*x11301))+(((-1.0)*r02*x11300))+((x11291*x11296)));
evalcond[4]=((((-1.0)*x11298*x11300))+((sj1*sj2))+(((-1.0)*cj2*x11294))+(((-1.0)*r22*x11301))+((x11292*x11299)));
evalcond[5]=((((-1.0)*x11293*x11300))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x11294))+(((-1.0)*r12*x11301))+((x11292*x11295)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11302=((1.0)*gconst5);
CheckValue<IkReal> x11303 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x11302)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11303.valid){
continue;
}
CheckValue<IkReal> x11304=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11302))+(((-1.0)*gconst4*r10)))),-1);
if(!x11304.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11303.value)+(((1.5707963267949)*(x11304.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11305=IKsin(j4);
IkReal x11306=IKcos(j4);
IkReal x11307=(gconst4*r11);
IkReal x11308=((1.0)*cj1);
IkReal x11309=(gconst5*r10);
IkReal x11310=(gconst4*r01);
IkReal x11311=(gconst5*r00);
IkReal x11312=(gconst4*r21);
IkReal x11313=(gconst5*r20);
IkReal x11314=((1.0)*x11306);
IkReal x11315=((1.0)*x11305);
evalcond[0]=((((-1.0)*r22*x11314))+(((-1.0)*x11313*x11315))+((x11305*x11312)));
evalcond[1]=((((-1.0)*x11309*x11315))+((x11305*x11307))+(((-1.0)*r12*x11314)));
evalcond[2]=((((-1.0)*r02*x11315))+(((-1.0)*x11310*x11314))+((x11306*x11311)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11314))+(((-1.0)*x11311*x11315))+((x11305*x11310)));
evalcond[4]=((((-1.0)*cj2*x11308))+(((-1.0)*r22*x11315))+((sj1*sj2))+(((-1.0)*x11312*x11314))+((x11306*x11313)));
evalcond[5]=(((x11306*x11309))+(((-1.0)*x11307*x11314))+(((-1.0)*cj2*sj1))+(((-1.0)*r12*x11315))+(((-1.0)*sj2*x11308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11316 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11316.valid){
continue;
}
CheckValue<IkReal> x11317=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11317.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11316.value)+(((1.5707963267949)*(x11317.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11318=IKsin(j4);
IkReal x11319=IKcos(j4);
IkReal x11320=(gconst4*r11);
IkReal x11321=((1.0)*cj1);
IkReal x11322=(gconst5*r10);
IkReal x11323=(gconst4*r01);
IkReal x11324=(gconst5*r00);
IkReal x11325=(gconst4*r21);
IkReal x11326=(gconst5*r20);
IkReal x11327=((1.0)*x11319);
IkReal x11328=((1.0)*x11318);
evalcond[0]=((((-1.0)*r22*x11327))+(((-1.0)*x11326*x11328))+((x11318*x11325)));
evalcond[1]=((((-1.0)*x11322*x11328))+(((-1.0)*r12*x11327))+((x11318*x11320)));
evalcond[2]=((((-1.0)*r02*x11328))+((x11319*x11324))+(((-1.0)*x11323*x11327)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11327))+((x11318*x11323))+(((-1.0)*x11324*x11328)));
evalcond[4]=((((-1.0)*x11325*x11327))+(((-1.0)*r22*x11328))+((sj1*sj2))+((x11319*x11326))+(((-1.0)*cj2*x11321)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*r12*x11328))+((x11319*x11322))+(((-1.0)*x11320*x11327))+(((-1.0)*sj2*x11321)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x11329=((-1.0)*r21);
CheckValue<IkReal> x11332 = IKatan2WithCheck(IkReal(x11329),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11332.valid){
continue;
}
IkReal x11330=((1.0)*(x11332.value));
IkReal x11331=x10538;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11330)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11330)));
IkReal gconst4=(x11329*x11331);
IkReal gconst5=((1.0)*r20*x11331);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11333=((-1.0)*r21);
CheckValue<IkReal> x11336 = IKatan2WithCheck(IkReal(x11333),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11336.valid){
continue;
}
IkReal x11334=((1.0)*(x11336.value));
IkReal x11335=x10538;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11334)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11334)));
IkReal gconst4=(x11333*x11335);
IkReal gconst5=((1.0)*r20*x11335);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11337=((-1.0)*r21);
CheckValue<IkReal> x11340 = IKatan2WithCheck(IkReal(x11337),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11340.valid){
continue;
}
IkReal x11338=((1.0)*(x11340.value));
IkReal x11339=x10538;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11338)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11338)));
IkReal gconst4=(x11337*x11339);
IkReal gconst5=((1.0)*r20*x11339);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11341=(gconst4*r01);
IkReal x11342=(gconst5*r00);
CheckValue<IkReal> x11343=IKPowWithIntegerCheck(IKsign(((x11341*x11341)+(x11342*x11342)+(r02*r02)+(((-2.0)*x11341*x11342)))),-1);
if(!x11343.valid){
continue;
}
CheckValue<IkReal> x11344 = IKatan2WithCheck(IkReal((x11341+(((-1.0)*x11342)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11344.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11343.value)))+(x11344.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11345=IKcos(j4);
IkReal x11346=IKsin(j4);
IkReal x11347=(gconst4*r11);
IkReal x11348=(gconst5*r10);
IkReal x11349=((1.0)*cj1);
IkReal x11350=(gconst5*r00);
IkReal x11351=(gconst5*r20);
IkReal x11352=((1.0)*x11345);
IkReal x11353=(gconst4*x11345);
IkReal x11354=((1.0)*x11346);
IkReal x11355=(gconst4*x11346);
evalcond[0]=((((-1.0)*x11350*x11352))+((r01*x11353))+((r02*x11346)));
evalcond[1]=((((-1.0)*x11351*x11354))+(((-1.0)*r22*x11352))+((r21*x11355)));
evalcond[2]=((((-1.0)*x11348*x11354))+(((-1.0)*r12*x11352))+((x11346*x11347)));
evalcond[3]=((-1.0)+(((-1.0)*x11350*x11354))+((r01*x11355))+(((-1.0)*r02*x11352)));
evalcond[4]=((((-1.0)*cj2*x11349))+(((-1.0)*x11351*x11352))+((sj1*sj2))+((r21*x11353))+((r22*x11346)));
evalcond[5]=((((-1.0)*x11348*x11352))+((r12*x11346))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x11349))+((x11345*x11347)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11356=((1.0)*gconst5);
CheckValue<IkReal> x11357=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11356))+(((-1.0)*gconst4*r10)))),-1);
if(!x11357.valid){
continue;
}
CheckValue<IkReal> x11358 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11356))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11358.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11357.value)))+(x11358.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11359=IKcos(j4);
IkReal x11360=IKsin(j4);
IkReal x11361=(gconst4*r11);
IkReal x11362=(gconst5*r10);
IkReal x11363=((1.0)*cj1);
IkReal x11364=(gconst5*r00);
IkReal x11365=(gconst5*r20);
IkReal x11366=((1.0)*x11359);
IkReal x11367=(gconst4*x11359);
IkReal x11368=((1.0)*x11360);
IkReal x11369=(gconst4*x11360);
evalcond[0]=(((r01*x11367))+((r02*x11360))+(((-1.0)*x11364*x11366)));
evalcond[1]=(((r21*x11369))+(((-1.0)*r22*x11366))+(((-1.0)*x11365*x11368)));
evalcond[2]=((((-1.0)*x11362*x11368))+(((-1.0)*r12*x11366))+((x11360*x11361)));
evalcond[3]=((-1.0)+((r01*x11369))+(((-1.0)*r02*x11366))+(((-1.0)*x11364*x11368)));
evalcond[4]=(((r21*x11367))+((sj1*sj2))+((r22*x11360))+(((-1.0)*cj2*x11363))+(((-1.0)*x11365*x11366)));
evalcond[5]=((((-1.0)*sj2*x11363))+(((-1.0)*x11362*x11366))+((x11359*x11361))+(((-1.0)*cj2*sj1))+((r12*x11360)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11370 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11370.valid){
continue;
}
CheckValue<IkReal> x11371=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11371.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11370.value)+(((1.5707963267949)*(x11371.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11372=IKcos(j4);
IkReal x11373=IKsin(j4);
IkReal x11374=(gconst4*r11);
IkReal x11375=(gconst5*r10);
IkReal x11376=((1.0)*cj1);
IkReal x11377=(gconst5*r00);
IkReal x11378=(gconst5*r20);
IkReal x11379=((1.0)*x11372);
IkReal x11380=(gconst4*x11372);
IkReal x11381=((1.0)*x11373);
IkReal x11382=(gconst4*x11373);
evalcond[0]=(((r01*x11380))+((r02*x11373))+(((-1.0)*x11377*x11379)));
evalcond[1]=((((-1.0)*r22*x11379))+(((-1.0)*x11378*x11381))+((r21*x11382)));
evalcond[2]=((((-1.0)*x11375*x11381))+(((-1.0)*r12*x11379))+((x11373*x11374)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11379))+((r01*x11382))+(((-1.0)*x11377*x11381)));
evalcond[4]=((((-1.0)*x11378*x11379))+((sj1*sj2))+((r22*x11373))+((r21*x11380))+(((-1.0)*cj2*x11376)));
evalcond[5]=((((-1.0)*sj2*x11376))+(((-1.0)*x11375*x11379))+(((-1.0)*cj2*sj1))+((r12*x11373))+((x11372*x11374)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x11383=((-1.0)*r21);
CheckValue<IkReal> x11386 = IKatan2WithCheck(IkReal(x11383),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11386.valid){
continue;
}
IkReal x11384=((1.0)*(x11386.value));
IkReal x11385=x10538;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11384)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11384)));
IkReal gconst4=(x11383*x11385);
IkReal gconst5=((1.0)*r20*x11385);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11387=((-1.0)*r21);
CheckValue<IkReal> x11390 = IKatan2WithCheck(IkReal(x11387),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11390.valid){
continue;
}
IkReal x11388=((1.0)*(x11390.value));
IkReal x11389=x10538;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11388)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11388)));
IkReal gconst4=(x11387*x11389);
IkReal gconst5=((1.0)*r20*x11389);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11391=((-1.0)*r21);
CheckValue<IkReal> x11394 = IKatan2WithCheck(IkReal(x11391),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11394.valid){
continue;
}
IkReal x11392=((1.0)*(x11394.value));
IkReal x11393=x10538;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11392)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11392)));
IkReal gconst4=(x11391*x11393);
IkReal gconst5=((1.0)*r20*x11393);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11395=(gconst4*r01);
IkReal x11396=(gconst5*r00);
CheckValue<IkReal> x11397 = IKatan2WithCheck(IkReal((x11395+(((-1.0)*x11396)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11397.valid){
continue;
}
CheckValue<IkReal> x11398=IKPowWithIntegerCheck(IKsign(((((-2.0)*x11395*x11396))+(x11396*x11396)+(r02*r02)+(x11395*x11395))),-1);
if(!x11398.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11397.value)+(((1.5707963267949)*(x11398.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11399=IKcos(j4);
IkReal x11400=IKsin(j4);
IkReal x11401=(gconst4*r11);
IkReal x11402=(gconst5*r10);
IkReal x11403=(gconst5*r00);
IkReal x11404=(gconst5*r20);
IkReal x11405=((1.0)*x11399);
IkReal x11406=(gconst4*x11399);
IkReal x11407=((1.0)*x11400);
IkReal x11408=(gconst4*x11400);
evalcond[0]=((((-1.0)*x11403*x11405))+((r02*x11400))+((r01*x11406)));
evalcond[1]=(((r21*x11408))+(((-1.0)*r22*x11405))+(((-1.0)*x11404*x11407)));
evalcond[2]=((((-1.0)*x11402*x11407))+((x11400*x11401))+(((-1.0)*r12*x11405)));
evalcond[3]=((-1.0)+(((-1.0)*x11403*x11407))+(((-1.0)*r02*x11405))+((r01*x11408)));
evalcond[4]=(((cj2*sj1))+((r21*x11406))+((r22*x11400))+((cj1*sj2))+(((-1.0)*x11404*x11405)));
evalcond[5]=((((-1.0)*x11402*x11405))+((r12*x11400))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x11399*x11401)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11409=((1.0)*gconst5);
CheckValue<IkReal> x11410 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x11409)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11410.valid){
continue;
}
CheckValue<IkReal> x11411=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11409))+(((-1.0)*gconst4*r10)))),-1);
if(!x11411.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11410.value)+(((1.5707963267949)*(x11411.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11412=IKcos(j4);
IkReal x11413=IKsin(j4);
IkReal x11414=(gconst4*r11);
IkReal x11415=(gconst5*r10);
IkReal x11416=(gconst5*r00);
IkReal x11417=(gconst5*r20);
IkReal x11418=((1.0)*x11412);
IkReal x11419=(gconst4*x11412);
IkReal x11420=((1.0)*x11413);
IkReal x11421=(gconst4*x11413);
evalcond[0]=(((r01*x11419))+(((-1.0)*x11416*x11418))+((r02*x11413)));
evalcond[1]=((((-1.0)*x11417*x11420))+((r21*x11421))+(((-1.0)*r22*x11418)));
evalcond[2]=((((-1.0)*r12*x11418))+(((-1.0)*x11415*x11420))+((x11413*x11414)));
evalcond[3]=((-1.0)+(((-1.0)*x11416*x11420))+((r01*x11421))+(((-1.0)*r02*x11418)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11417*x11418))+((cj1*sj2))+((r22*x11413))+((r21*x11419)));
evalcond[5]=((((-1.0)*x11415*x11418))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x11413))+((x11412*x11414)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11422 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11422.valid){
continue;
}
CheckValue<IkReal> x11423=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11423.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11422.value)+(((1.5707963267949)*(x11423.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11424=IKcos(j4);
IkReal x11425=IKsin(j4);
IkReal x11426=(gconst4*r11);
IkReal x11427=(gconst5*r10);
IkReal x11428=(gconst5*r00);
IkReal x11429=(gconst5*r20);
IkReal x11430=((1.0)*x11424);
IkReal x11431=(gconst4*x11424);
IkReal x11432=((1.0)*x11425);
IkReal x11433=(gconst4*x11425);
evalcond[0]=(((r02*x11425))+(((-1.0)*x11428*x11430))+((r01*x11431)));
evalcond[1]=((((-1.0)*x11429*x11432))+((r21*x11433))+(((-1.0)*r22*x11430)));
evalcond[2]=(((x11425*x11426))+(((-1.0)*r12*x11430))+(((-1.0)*x11427*x11432)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11430))+(((-1.0)*x11428*x11432))+((r01*x11433)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11429*x11430))+((r21*x11431))+((r22*x11425)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x11425))+((x11424*x11426))+(((-1.0)*x11427*x11430)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x11434=((-1.0)*r21);
CheckValue<IkReal> x11437 = IKatan2WithCheck(IkReal(x11434),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11437.valid){
continue;
}
IkReal x11435=((1.0)*(x11437.value));
IkReal x11436=x10538;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11435)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11435)));
IkReal gconst4=(x11434*x11436);
IkReal gconst5=((1.0)*r20*x11436);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11438=((-1.0)*r21);
CheckValue<IkReal> x11441 = IKatan2WithCheck(IkReal(x11438),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11441.valid){
continue;
}
IkReal x11439=((1.0)*(x11441.value));
IkReal x11440=x10538;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11439)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11439)));
IkReal gconst4=(x11438*x11440);
IkReal gconst5=((1.0)*r20*x11440);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11442=((-1.0)*r21);
CheckValue<IkReal> x11445 = IKatan2WithCheck(IkReal(x11442),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11445.valid){
continue;
}
IkReal x11443=((1.0)*(x11445.value));
IkReal x11444=x10538;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11443)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11443)));
IkReal gconst4=(x11442*x11444);
IkReal gconst5=((1.0)*r20*x11444);
IkReal x11446=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11450=IKPowWithIntegerCheck(x11446,-1);
if(!x11450.valid){
continue;
}
IkReal x11447=x11450.value;
IkReal x11448=((1.0)*x11447);
IkReal x11449=((((-1.0)*x11448*(r00*r00)*(r20*r20)))+(((-1.0)*x11448*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x11447)));
j4eval[0]=x11449;
j4eval[1]=r02;
j4eval[2]=x11446;
j4eval[3]=IKsign(x11449);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11451=(gconst5*r00);
IkReal x11452=(gconst4*r01);
CheckValue<IkReal> x11453=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x11451*x11452))+(((-1.0)*(x11452*x11452)))+(((-1.0)*(x11451*x11451))))),-1);
if(!x11453.valid){
continue;
}
CheckValue<IkReal> x11454 = IKatan2WithCheck(IkReal((x11451+(((-1.0)*x11452)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11454.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11453.value)))+(x11454.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11455=IKsin(j4);
IkReal x11456=IKcos(j4);
IkReal x11457=(gconst4*r11);
IkReal x11458=(gconst5*r10);
IkReal x11459=(gconst4*r01);
IkReal x11460=(gconst5*r00);
IkReal x11461=(gconst4*r21);
IkReal x11462=(gconst5*r20);
IkReal x11463=((1.0)*x11456);
IkReal x11464=((1.0)*x11455);
evalcond[0]=((((-1.0)*x11462*x11464))+(((-1.0)*r22*x11463))+((x11455*x11461)));
evalcond[1]=((((-1.0)*r12*x11463))+(((-1.0)*x11458*x11464))+((x11455*x11457)));
evalcond[2]=(((x11456*x11460))+(((-1.0)*r02*x11464))+(((-1.0)*x11459*x11463)));
evalcond[3]=((-1.0)+((x11455*x11459))+(((-1.0)*x11460*x11464))+(((-1.0)*r02*x11463)));
evalcond[4]=(((x11456*x11462))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11461*x11463))+(((-1.0)*r22*x11464)));
evalcond[5]=((((-1.0)*r12*x11464))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x11456*x11458))+(((-1.0)*x11457*x11463)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11465=((1.0)*gconst5);
CheckValue<IkReal> x11466=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11465))+(((-1.0)*gconst4*r10)))),-1);
if(!x11466.valid){
continue;
}
CheckValue<IkReal> x11467 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11465))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11467.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11466.value)))+(x11467.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11468=IKsin(j4);
IkReal x11469=IKcos(j4);
IkReal x11470=(gconst4*r11);
IkReal x11471=(gconst5*r10);
IkReal x11472=(gconst4*r01);
IkReal x11473=(gconst5*r00);
IkReal x11474=(gconst4*r21);
IkReal x11475=(gconst5*r20);
IkReal x11476=((1.0)*x11469);
IkReal x11477=((1.0)*x11468);
evalcond[0]=(((x11468*x11474))+(((-1.0)*x11475*x11477))+(((-1.0)*r22*x11476)));
evalcond[1]=(((x11468*x11470))+(((-1.0)*r12*x11476))+(((-1.0)*x11471*x11477)));
evalcond[2]=(((x11469*x11473))+(((-1.0)*x11472*x11476))+(((-1.0)*r02*x11477)));
evalcond[3]=((-1.0)+((x11468*x11472))+(((-1.0)*x11473*x11477))+(((-1.0)*r02*x11476)));
evalcond[4]=(((cj2*sj1))+((x11469*x11475))+(((-1.0)*x11474*x11476))+((cj1*sj2))+(((-1.0)*r22*x11477)));
evalcond[5]=((((-1.0)*r12*x11477))+((x11469*x11471))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11470*x11476)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11478 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11478.valid){
continue;
}
CheckValue<IkReal> x11479=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11479.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11478.value)+(((1.5707963267949)*(x11479.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11480=IKsin(j4);
IkReal x11481=IKcos(j4);
IkReal x11482=(gconst4*r11);
IkReal x11483=(gconst5*r10);
IkReal x11484=(gconst4*r01);
IkReal x11485=(gconst5*r00);
IkReal x11486=(gconst4*r21);
IkReal x11487=(gconst5*r20);
IkReal x11488=((1.0)*x11481);
IkReal x11489=((1.0)*x11480);
evalcond[0]=(((x11480*x11486))+(((-1.0)*r22*x11488))+(((-1.0)*x11487*x11489)));
evalcond[1]=((((-1.0)*r12*x11488))+(((-1.0)*x11483*x11489))+((x11480*x11482)));
evalcond[2]=((((-1.0)*r02*x11489))+((x11481*x11485))+(((-1.0)*x11484*x11488)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11488))+(((-1.0)*x11485*x11489))+((x11480*x11484)));
evalcond[4]=(((cj2*sj1))+((x11481*x11487))+((cj1*sj2))+(((-1.0)*r22*x11489))+(((-1.0)*x11486*x11488)));
evalcond[5]=((((-1.0)*r12*x11489))+((x11481*x11483))+(((-1.0)*x11482*x11488))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r12);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((-1.0)+r02);
op[1]=((((-2.0)*gconst5*r00))+(((2.0)*gconst4*r01)));
op[2]=((-1.0)+(((-1.0)*r02)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11490=gconst4*gconst4;
IkReal x11491=gconst5*gconst5;
IkReal x11492=(r01*r20);
IkReal x11493=(gconst4*sj3);
IkReal x11494=(r01*r21);
IkReal x11495=((1.0)*cj3);
IkReal x11496=(r00*r21);
IkReal x11497=(r00*r20);
IkReal x11498=(cj3*gconst4*gconst5);
IkReal x11499=((1.0)*x11491);
CheckValue<IkReal> x11500 = IKatan2WithCheck(IkReal((((r00*r22*x11493))+((gconst5*r01*r22*sj3)))),IkReal((((gconst5*x11493*x11494))+((sj3*x11490*x11496))+(((-1.0)*gconst5*x11493*x11497))+(((-1.0)*sj3*x11492*x11499)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11500.valid){
continue;
}
CheckValue<IkReal> x11501=IKPowWithIntegerCheck(IKsign(((((-1.0)*x11490*x11494*x11495))+(((-1.0)*x11491*x11495*x11497))+((x11492*x11498))+((x11496*x11498))+(((-1.0)*r02*r22*x11495)))),-1);
if(!x11501.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11500.value)+(((1.5707963267949)*(x11501.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11502=IKsin(j4);
IkReal x11503=IKcos(j4);
IkReal x11504=(sj1*sj2);
IkReal x11505=(gconst5*sj3);
IkReal x11506=(gconst4*r11);
IkReal x11507=(gconst5*r10);
IkReal x11508=((1.0)*cj1);
IkReal x11509=(gconst4*r01);
IkReal x11510=(cj2*sj1);
IkReal x11511=(gconst5*r00);
IkReal x11512=(gconst4*sj3);
IkReal x11513=(cj3*gconst5);
IkReal x11514=(cj3*gconst4);
IkReal x11515=(gconst4*r21);
IkReal x11516=(cj2*x11508);
IkReal x11517=((1.0)*x11503);
IkReal x11518=((1.0)*x11502);
IkReal x11519=(cj3*x11502);
IkReal x11520=(cj3*x11503);
evalcond[0]=((((-1.0)*r22*x11517))+(((-1.0)*gconst5*r20*x11518))+((x11502*x11515)));
evalcond[1]=((((-1.0)*x11507*x11518))+((x11502*x11506))+(((-1.0)*r12*x11517)));
evalcond[2]=((-1.0)+(((-1.0)*x11511*x11518))+((x11502*x11509))+(((-1.0)*r02*x11517)));
evalcond[3]=((((-1.0)*cj3*x11511*x11517))+((r01*x11505))+((r02*x11519))+((r00*x11512))+((x11509*x11520)));
evalcond[4]=(((r01*x11513))+((r00*x11503*x11505))+(((-1.0)*sj3*x11509*x11517))+(((-1.0)*r02*sj3*x11518))+((r00*x11514)));
evalcond[5]=(x11510+((r20*x11512))+((cj1*sj2))+((r21*x11505))+((r22*x11519))+((r21*x11503*x11514))+(((-1.0)*r20*x11513*x11517)));
evalcond[6]=(((x11506*x11520))+x11504+((r11*x11505))+(((-1.0)*x11516))+(((-1.0)*cj3*x11507*x11517))+((r12*x11519))+((r10*x11512)));
evalcond[7]=(x11504+((r20*x11514))+(((-1.0)*r21*x11512*x11517))+(((-1.0)*r22*sj3*x11518))+(((-1.0)*x11516))+((r20*x11503*x11505))+((r21*x11513)));
evalcond[8]=((((-1.0)*sj3*x11506*x11517))+(((-1.0)*x11510))+((r10*x11503*x11505))+(((-1.0)*r12*sj3*x11518))+((r10*x11514))+((r11*x11513))+(((-1.0)*sj2*x11508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11521=((1.0)*gconst5);
CheckValue<IkReal> x11522=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r10))+(((-1.0)*r11*x11521)))),-1);
if(!x11522.valid){
continue;
}
CheckValue<IkReal> x11523 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11521))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11523.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11522.value)))+(x11523.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11524=IKsin(j4);
IkReal x11525=IKcos(j4);
IkReal x11526=(sj1*sj2);
IkReal x11527=(gconst5*sj3);
IkReal x11528=(gconst4*r11);
IkReal x11529=(gconst5*r10);
IkReal x11530=((1.0)*cj1);
IkReal x11531=(gconst4*r01);
IkReal x11532=(cj2*sj1);
IkReal x11533=(gconst5*r00);
IkReal x11534=(gconst4*sj3);
IkReal x11535=(cj3*gconst5);
IkReal x11536=(cj3*gconst4);
IkReal x11537=(gconst4*r21);
IkReal x11538=(cj2*x11530);
IkReal x11539=((1.0)*x11525);
IkReal x11540=((1.0)*x11524);
IkReal x11541=(cj3*x11524);
IkReal x11542=(cj3*x11525);
evalcond[0]=(((x11524*x11537))+(((-1.0)*gconst5*r20*x11540))+(((-1.0)*r22*x11539)));
evalcond[1]=((((-1.0)*r12*x11539))+((x11524*x11528))+(((-1.0)*x11529*x11540)));
evalcond[2]=((-1.0)+((x11524*x11531))+(((-1.0)*x11533*x11540))+(((-1.0)*r02*x11539)));
evalcond[3]=(((r00*x11534))+((r01*x11527))+(((-1.0)*cj3*x11533*x11539))+((x11531*x11542))+((r02*x11541)));
evalcond[4]=((((-1.0)*sj3*x11531*x11539))+(((-1.0)*r02*sj3*x11540))+((r01*x11535))+((r00*x11536))+((r00*x11525*x11527)));
evalcond[5]=(x11532+((cj1*sj2))+((r21*x11527))+((r20*x11534))+((r22*x11541))+((r21*x11525*x11536))+(((-1.0)*r20*x11535*x11539)));
evalcond[6]=(x11526+((r11*x11527))+((r10*x11534))+((r12*x11541))+((x11528*x11542))+(((-1.0)*cj3*x11529*x11539))+(((-1.0)*x11538)));
evalcond[7]=(x11526+((r21*x11535))+((r20*x11525*x11527))+(((-1.0)*r22*sj3*x11540))+((r20*x11536))+(((-1.0)*r21*x11534*x11539))+(((-1.0)*x11538)));
evalcond[8]=((((-1.0)*sj2*x11530))+((r10*x11525*x11527))+(((-1.0)*sj3*x11528*x11539))+((r11*x11535))+((r10*x11536))+(((-1.0)*x11532))+(((-1.0)*r12*sj3*x11540)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11543 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11543.valid){
continue;
}
CheckValue<IkReal> x11544=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11544.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11543.value)+(((1.5707963267949)*(x11544.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11545=IKsin(j4);
IkReal x11546=IKcos(j4);
IkReal x11547=(sj1*sj2);
IkReal x11548=(gconst5*sj3);
IkReal x11549=(gconst4*r11);
IkReal x11550=(gconst5*r10);
IkReal x11551=((1.0)*cj1);
IkReal x11552=(gconst4*r01);
IkReal x11553=(cj2*sj1);
IkReal x11554=(gconst5*r00);
IkReal x11555=(gconst4*sj3);
IkReal x11556=(cj3*gconst5);
IkReal x11557=(cj3*gconst4);
IkReal x11558=(gconst4*r21);
IkReal x11559=(cj2*x11551);
IkReal x11560=((1.0)*x11546);
IkReal x11561=((1.0)*x11545);
IkReal x11562=(cj3*x11545);
IkReal x11563=(cj3*x11546);
evalcond[0]=((((-1.0)*gconst5*r20*x11561))+(((-1.0)*r22*x11560))+((x11545*x11558)));
evalcond[1]=((((-1.0)*x11550*x11561))+((x11545*x11549))+(((-1.0)*r12*x11560)));
evalcond[2]=((-1.0)+(((-1.0)*x11554*x11561))+(((-1.0)*r02*x11560))+((x11545*x11552)));
evalcond[3]=(((x11552*x11563))+(((-1.0)*cj3*x11554*x11560))+((r01*x11548))+((r02*x11562))+((r00*x11555)));
evalcond[4]=((((-1.0)*sj3*x11552*x11560))+((r00*x11546*x11548))+(((-1.0)*r02*sj3*x11561))+((r00*x11557))+((r01*x11556)));
evalcond[5]=(x11553+((cj1*sj2))+((r22*x11562))+((r21*x11548))+(((-1.0)*r20*x11556*x11560))+((r20*x11555))+((r21*x11546*x11557)));
evalcond[6]=(((x11549*x11563))+x11547+(((-1.0)*x11559))+((r10*x11555))+((r11*x11548))+((r12*x11562))+(((-1.0)*cj3*x11550*x11560)));
evalcond[7]=(((r21*x11556))+x11547+(((-1.0)*x11559))+(((-1.0)*r21*x11555*x11560))+(((-1.0)*r22*sj3*x11561))+((r20*x11546*x11548))+((r20*x11557)));
evalcond[8]=((((-1.0)*sj2*x11551))+((r11*x11556))+((r10*x11546*x11548))+(((-1.0)*sj3*x11549*x11560))+((r10*x11557))+(((-1.0)*r12*sj3*x11561))+(((-1.0)*x11553)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11564=((-1.0)*r21);
CheckValue<IkReal> x11567 = IKatan2WithCheck(IkReal(x11564),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11567.valid){
continue;
}
IkReal x11565=((1.0)*(x11567.value));
IkReal x11566=x10538;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11565)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11565)));
IkReal gconst4=(x11564*x11566);
IkReal gconst5=((1.0)*r20*x11566);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11568=((-1.0)*r21);
CheckValue<IkReal> x11571 = IKatan2WithCheck(IkReal(x11568),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11571.valid){
continue;
}
IkReal x11569=((1.0)*(x11571.value));
IkReal x11570=x10538;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11569)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11569)));
IkReal gconst4=(x11568*x11570);
IkReal gconst5=((1.0)*r20*x11570);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11572=((-1.0)*r21);
CheckValue<IkReal> x11575 = IKatan2WithCheck(IkReal(x11572),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11575.valid){
continue;
}
IkReal x11573=((1.0)*(x11575.value));
IkReal x11574=x10538;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11573)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11573)));
IkReal gconst4=(x11572*x11574);
IkReal gconst5=((1.0)*r20*x11574);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11576=((-1.0)*r21);
CheckValue<IkReal> x11579 = IKatan2WithCheck(IkReal(x11576),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11579.valid){
continue;
}
IkReal x11577=((1.0)*(x11579.value));
IkReal x11578=x10538;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11577)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11577)));
IkReal gconst4=(x11576*x11578);
IkReal gconst5=((1.0)*r20*x11578);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11580=((-1.0)*r21);
CheckValue<IkReal> x11583 = IKatan2WithCheck(IkReal(x11580),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11583.valid){
continue;
}
IkReal x11581=((1.0)*(x11583.value));
IkReal x11582=x10538;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11581)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11581)));
IkReal gconst4=(x11580*x11582);
IkReal gconst5=((1.0)*r20*x11582);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11584=((-1.0)*r21);
CheckValue<IkReal> x11587 = IKatan2WithCheck(IkReal(x11584),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11587.valid){
continue;
}
IkReal x11585=((1.0)*(x11587.value));
IkReal x11586=x10538;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11585)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11585)));
IkReal gconst4=(x11584*x11586);
IkReal gconst5=((1.0)*r20*x11586);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11588=(gconst5*r00);
IkReal x11589=(gconst4*r01);
CheckValue<IkReal> x11590=IKPowWithIntegerCheck(IKsign(((((-2.0)*x11588*x11589))+(r02*r02)+(x11589*x11589)+(x11588*x11588))),-1);
if(!x11590.valid){
continue;
}
CheckValue<IkReal> x11591 = IKatan2WithCheck(IkReal((x11588+(((-1.0)*x11589)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11591.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11590.value)))+(x11591.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11592=IKsin(j4);
IkReal x11593=IKcos(j4);
IkReal x11594=(gconst4*r11);
IkReal x11595=(gconst5*r10);
IkReal x11596=(gconst4*r01);
IkReal x11597=(gconst5*r00);
IkReal x11598=(gconst4*r21);
IkReal x11599=(gconst5*r20);
IkReal x11600=((1.0)*x11593);
IkReal x11601=((1.0)*x11592);
evalcond[0]=((((-1.0)*r22*x11600))+(((-1.0)*x11599*x11601))+((x11592*x11598)));
evalcond[1]=((((-1.0)*r12*x11600))+((x11592*x11594))+(((-1.0)*x11595*x11601)));
evalcond[2]=((((-1.0)*r02*x11601))+(((-1.0)*x11596*x11600))+((x11593*x11597)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11600))+((x11592*x11596))+(((-1.0)*x11597*x11601)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11594*x11600))+((cj1*sj2))+(((-1.0)*r12*x11601))+((x11593*x11595)));
evalcond[5]=((((-1.0)*r22*x11601))+(((-1.0)*x11598*x11600))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x11593*x11599)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11602=((1.0)*gconst5);
CheckValue<IkReal> x11603=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11602))+(((-1.0)*gconst4*r20)))),-1);
if(!x11603.valid){
continue;
}
CheckValue<IkReal> x11604 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x11602))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11604.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11603.value)))+(x11604.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11605=IKsin(j4);
IkReal x11606=IKcos(j4);
IkReal x11607=(gconst4*r11);
IkReal x11608=(gconst5*r10);
IkReal x11609=(gconst4*r01);
IkReal x11610=(gconst5*r00);
IkReal x11611=(gconst4*r21);
IkReal x11612=(gconst5*r20);
IkReal x11613=((1.0)*x11606);
IkReal x11614=((1.0)*x11605);
evalcond[0]=((((-1.0)*r22*x11613))+((x11605*x11611))+(((-1.0)*x11612*x11614)));
evalcond[1]=((((-1.0)*r12*x11613))+(((-1.0)*x11608*x11614))+((x11605*x11607)));
evalcond[2]=((((-1.0)*x11609*x11613))+((x11606*x11610))+(((-1.0)*r02*x11614)));
evalcond[3]=((1.0)+((x11605*x11609))+(((-1.0)*x11610*x11614))+(((-1.0)*r02*x11613)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x11614))+((cj1*sj2))+(((-1.0)*x11607*x11613))+((x11606*x11608)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x11614))+(((-1.0)*x11611*x11613))+((x11606*x11612)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11615=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11615.valid){
continue;
}
CheckValue<IkReal> x11616 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11616.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11615.value)))+(x11616.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11617=IKsin(j4);
IkReal x11618=IKcos(j4);
IkReal x11619=(gconst4*r11);
IkReal x11620=(gconst5*r10);
IkReal x11621=(gconst4*r01);
IkReal x11622=(gconst5*r00);
IkReal x11623=(gconst4*r21);
IkReal x11624=(gconst5*r20);
IkReal x11625=((1.0)*x11618);
IkReal x11626=((1.0)*x11617);
evalcond[0]=(((x11617*x11623))+(((-1.0)*r22*x11625))+(((-1.0)*x11624*x11626)));
evalcond[1]=(((x11617*x11619))+(((-1.0)*r12*x11625))+(((-1.0)*x11620*x11626)));
evalcond[2]=((((-1.0)*x11621*x11625))+((x11618*x11622))+(((-1.0)*r02*x11626)));
evalcond[3]=((1.0)+((x11617*x11621))+(((-1.0)*x11622*x11626))+(((-1.0)*r02*x11625)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11619*x11625))+(((-1.0)*r12*x11626))+((cj1*sj2))+((x11618*x11620)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x11626))+((x11618*x11624))+(((-1.0)*x11623*x11625)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11627=((-1.0)*r21);
CheckValue<IkReal> x11630 = IKatan2WithCheck(IkReal(x11627),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11630.valid){
continue;
}
IkReal x11628=((1.0)*(x11630.value));
IkReal x11629=x10538;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11628)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11628)));
IkReal gconst4=(x11627*x11629);
IkReal gconst5=((1.0)*r20*x11629);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11631=((-1.0)*r21);
CheckValue<IkReal> x11634 = IKatan2WithCheck(IkReal(x11631),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11634.valid){
continue;
}
IkReal x11632=((1.0)*(x11634.value));
IkReal x11633=x10538;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11632)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11632)));
IkReal gconst4=(x11631*x11633);
IkReal gconst5=((1.0)*r20*x11633);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11635=((-1.0)*r21);
CheckValue<IkReal> x11638 = IKatan2WithCheck(IkReal(x11635),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11638.valid){
continue;
}
IkReal x11636=((1.0)*(x11638.value));
IkReal x11637=x10538;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11636)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11636)));
IkReal gconst4=(x11635*x11637);
IkReal gconst5=((1.0)*r20*x11637);
IkReal x11639=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11643=IKPowWithIntegerCheck(x11639,-1);
if(!x11643.valid){
continue;
}
IkReal x11640=x11643.value;
IkReal x11641=((1.0)*x11640);
IkReal x11642=((((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x11640))+(((-1.0)*x11641*(r00*r00)*(r20*r20)))+(((-1.0)*x11641*(r01*r01)*(r21*r21))));
j4eval[0]=x11642;
j4eval[1]=IKsign(x11642);
j4eval[2]=r02;
j4eval[3]=x11639;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11644=(gconst4*r01);
IkReal x11645=(gconst5*r00);
CheckValue<IkReal> x11646=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11645*x11645)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x11644*x11644)))+(((2.0)*x11644*x11645)))),-1);
if(!x11646.valid){
continue;
}
CheckValue<IkReal> x11647 = IKatan2WithCheck(IkReal((x11644+(((-1.0)*x11645)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11647.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11646.value)))+(x11647.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11648=IKcos(j4);
IkReal x11649=IKsin(j4);
IkReal x11650=(gconst4*r11);
IkReal x11651=(gconst5*r10);
IkReal x11652=(gconst5*r00);
IkReal x11653=(gconst5*r20);
IkReal x11654=((1.0)*x11648);
IkReal x11655=(gconst4*x11648);
IkReal x11656=((1.0)*x11649);
IkReal x11657=(gconst4*x11649);
evalcond[0]=(((r02*x11649))+((r01*x11655))+(((-1.0)*x11652*x11654)));
evalcond[1]=((((-1.0)*r22*x11654))+((r21*x11657))+(((-1.0)*x11653*x11656)));
evalcond[2]=((((-1.0)*r12*x11654))+((x11649*x11650))+(((-1.0)*x11651*x11656)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11654))+((r01*x11657))+(((-1.0)*x11652*x11656)));
evalcond[4]=(((cj2*sj1))+((r12*x11649))+((cj1*sj2))+((x11648*x11650))+(((-1.0)*x11651*x11654)));
evalcond[5]=(((r22*x11649))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x11655))+(((-1.0)*x11653*x11654)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11658=((1.0)*gconst5);
CheckValue<IkReal> x11659 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x11658))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11659.valid){
continue;
}
CheckValue<IkReal> x11660=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11658))+(((-1.0)*gconst4*r20)))),-1);
if(!x11660.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11659.value)+(((1.5707963267949)*(x11660.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11661=IKcos(j4);
IkReal x11662=IKsin(j4);
IkReal x11663=(gconst4*r11);
IkReal x11664=(gconst5*r10);
IkReal x11665=(gconst5*r00);
IkReal x11666=(gconst5*r20);
IkReal x11667=((1.0)*x11661);
IkReal x11668=(gconst4*x11661);
IkReal x11669=((1.0)*x11662);
IkReal x11670=(gconst4*x11662);
evalcond[0]=(((r01*x11668))+(((-1.0)*x11665*x11667))+((r02*x11662)));
evalcond[1]=((((-1.0)*x11666*x11669))+(((-1.0)*r22*x11667))+((r21*x11670)));
evalcond[2]=((((-1.0)*x11664*x11669))+(((-1.0)*r12*x11667))+((x11662*x11663)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11667))+((r01*x11670))+(((-1.0)*x11665*x11669)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11664*x11667))+((r12*x11662))+((x11661*x11663)));
evalcond[5]=((((-1.0)*x11666*x11667))+((r21*x11668))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x11662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11671=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11671.valid){
continue;
}
CheckValue<IkReal> x11672 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11672.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11671.value)))+(x11672.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11673=IKcos(j4);
IkReal x11674=IKsin(j4);
IkReal x11675=(gconst4*r11);
IkReal x11676=(gconst5*r10);
IkReal x11677=(gconst5*r00);
IkReal x11678=(gconst5*r20);
IkReal x11679=((1.0)*x11673);
IkReal x11680=(gconst4*x11673);
IkReal x11681=((1.0)*x11674);
IkReal x11682=(gconst4*x11674);
evalcond[0]=((((-1.0)*x11677*x11679))+((r02*x11674))+((r01*x11680)));
evalcond[1]=(((r21*x11682))+(((-1.0)*r22*x11679))+(((-1.0)*x11678*x11681)));
evalcond[2]=(((x11674*x11675))+(((-1.0)*r12*x11679))+(((-1.0)*x11676*x11681)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11679))+(((-1.0)*x11677*x11681))+((r01*x11682)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11676*x11679))+((x11673*x11675))+((cj1*sj2))+((r12*x11674)));
evalcond[5]=((((-1.0)*x11678*x11679))+((r22*x11674))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x11680)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11683=((-1.0)*r21);
CheckValue<IkReal> x11686 = IKatan2WithCheck(IkReal(x11683),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11686.valid){
continue;
}
IkReal x11684=((1.0)*(x11686.value));
IkReal x11685=x10538;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11684)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11684)));
IkReal gconst4=(x11683*x11685);
IkReal gconst5=((1.0)*r20*x11685);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11687=((-1.0)*r21);
CheckValue<IkReal> x11690 = IKatan2WithCheck(IkReal(x11687),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11690.valid){
continue;
}
IkReal x11688=((1.0)*(x11690.value));
IkReal x11689=x10538;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11688)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11688)));
IkReal gconst4=(x11687*x11689);
IkReal gconst5=((1.0)*r20*x11689);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11691=((-1.0)*r21);
CheckValue<IkReal> x11694 = IKatan2WithCheck(IkReal(x11691),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11694.valid){
continue;
}
IkReal x11692=((1.0)*(x11694.value));
IkReal x11693=x10538;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11692)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11692)));
IkReal gconst4=(x11691*x11693);
IkReal gconst5=((1.0)*r20*x11693);
IkReal x11695=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11699=IKPowWithIntegerCheck(x11695,-1);
if(!x11699.valid){
continue;
}
IkReal x11696=x11699.value;
IkReal x11697=((1.0)*x11696);
IkReal x11698=((((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x11696))+(((-1.0)*x11697*(r00*r00)*(r20*r20)))+(((-1.0)*x11697*(r01*r01)*(r21*r21))));
j4eval[0]=x11698;
j4eval[1]=IKsign(x11698);
j4eval[2]=r02;
j4eval[3]=x11695;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11700=(gconst4*r01);
IkReal x11701=(gconst5*r00);
CheckValue<IkReal> x11702 = IKatan2WithCheck(IkReal((x11700+(((-1.0)*x11701)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11702.valid){
continue;
}
CheckValue<IkReal> x11703=IKPowWithIntegerCheck(IKsign(((((2.0)*x11700*x11701))+(((-1.0)*(r02*r02)))+(((-1.0)*(x11700*x11700)))+(((-1.0)*(x11701*x11701))))),-1);
if(!x11703.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11702.value)+(((1.5707963267949)*(x11703.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11704=IKcos(j4);
IkReal x11705=IKsin(j4);
IkReal x11706=(gconst5*r10);
IkReal x11707=(gconst5*r00);
IkReal x11708=(gconst5*r20);
IkReal x11709=((1.0)*x11704);
IkReal x11710=(gconst4*x11705);
IkReal x11711=(gconst4*x11704);
IkReal x11712=((1.0)*x11705);
evalcond[0]=((((-1.0)*x11707*x11709))+((r01*x11711))+((r02*x11705)));
evalcond[1]=((((-1.0)*r22*x11709))+(((-1.0)*x11708*x11712))+((r21*x11710)));
evalcond[2]=((((-1.0)*x11706*x11712))+(((-1.0)*r12*x11709))+((r11*x11710)));
evalcond[3]=((1.0)+(((-1.0)*x11707*x11712))+((r01*x11710))+(((-1.0)*r02*x11709)));
evalcond[4]=(((cj2*sj1))+((r22*x11705))+((cj1*sj2))+((r21*x11711))+(((-1.0)*x11708*x11709)));
evalcond[5]=((((-1.0)*x11706*x11709))+(((-1.0)*sj1*sj2))+((r12*x11705))+((cj1*cj2))+((r11*x11711)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11713=((1.0)*gconst5);
CheckValue<IkReal> x11714=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11713))+(((-1.0)*gconst4*r20)))),-1);
if(!x11714.valid){
continue;
}
CheckValue<IkReal> x11715 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x11713))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11715.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11714.value)))+(x11715.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11716=IKcos(j4);
IkReal x11717=IKsin(j4);
IkReal x11718=(gconst5*r10);
IkReal x11719=(gconst5*r00);
IkReal x11720=(gconst5*r20);
IkReal x11721=((1.0)*x11716);
IkReal x11722=(gconst4*x11717);
IkReal x11723=(gconst4*x11716);
IkReal x11724=((1.0)*x11717);
evalcond[0]=(((r01*x11723))+((r02*x11717))+(((-1.0)*x11719*x11721)));
evalcond[1]=((((-1.0)*x11720*x11724))+(((-1.0)*r22*x11721))+((r21*x11722)));
evalcond[2]=((((-1.0)*r12*x11721))+(((-1.0)*x11718*x11724))+((r11*x11722)));
evalcond[3]=((1.0)+((r01*x11722))+(((-1.0)*x11719*x11724))+(((-1.0)*r02*x11721)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11720*x11721))+((cj1*sj2))+((r22*x11717))+((r21*x11723)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x11718*x11721))+((cj1*cj2))+((r11*x11723))+((r12*x11717)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11725=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11725.valid){
continue;
}
CheckValue<IkReal> x11726 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11726.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11725.value)))+(x11726.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11727=IKcos(j4);
IkReal x11728=IKsin(j4);
IkReal x11729=(gconst5*r10);
IkReal x11730=(gconst5*r00);
IkReal x11731=(gconst5*r20);
IkReal x11732=((1.0)*x11727);
IkReal x11733=(gconst4*x11728);
IkReal x11734=(gconst4*x11727);
IkReal x11735=((1.0)*x11728);
evalcond[0]=(((r01*x11734))+((r02*x11728))+(((-1.0)*x11730*x11732)));
evalcond[1]=((((-1.0)*r22*x11732))+(((-1.0)*x11731*x11735))+((r21*x11733)));
evalcond[2]=(((r11*x11733))+(((-1.0)*x11729*x11735))+(((-1.0)*r12*x11732)));
evalcond[3]=((1.0)+((r01*x11733))+(((-1.0)*x11730*x11735))+(((-1.0)*r02*x11732)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11731*x11732))+((r21*x11734))+((r22*x11728)));
evalcond[5]=(((r12*x11728))+((r11*x11734))+(((-1.0)*x11729*x11732))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11736=((-1.0)*r21);
CheckValue<IkReal> x11739 = IKatan2WithCheck(IkReal(x11736),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11739.valid){
continue;
}
IkReal x11737=((1.0)*(x11739.value));
IkReal x11738=x10538;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11737)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11737)));
IkReal gconst4=(x11736*x11738);
IkReal gconst5=((1.0)*r20*x11738);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11740=((-1.0)*r21);
CheckValue<IkReal> x11743 = IKatan2WithCheck(IkReal(x11740),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11743.valid){
continue;
}
IkReal x11741=((1.0)*(x11743.value));
IkReal x11742=x10538;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11741)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11741)));
IkReal gconst4=(x11740*x11742);
IkReal gconst5=((1.0)*r20*x11742);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11744=((-1.0)*r21);
CheckValue<IkReal> x11747 = IKatan2WithCheck(IkReal(x11744),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11747.valid){
continue;
}
IkReal x11745=((1.0)*(x11747.value));
IkReal x11746=x10538;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11745)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11745)));
IkReal gconst4=(x11744*x11746);
IkReal gconst5=((1.0)*r20*x11746);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11748=(gconst5*r00);
IkReal x11749=(gconst4*r01);
CheckValue<IkReal> x11750=IKPowWithIntegerCheck(IKsign(((((-2.0)*x11748*x11749))+(x11748*x11748)+(x11749*x11749)+(r02*r02))),-1);
if(!x11750.valid){
continue;
}
CheckValue<IkReal> x11751 = IKatan2WithCheck(IkReal((x11748+(((-1.0)*x11749)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11751.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11750.value)))+(x11751.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11752=IKsin(j4);
IkReal x11753=IKcos(j4);
IkReal x11754=(gconst4*r11);
IkReal x11755=(gconst5*r10);
IkReal x11756=(gconst5*r00);
IkReal x11757=(gconst5*r20);
IkReal x11758=((1.0)*x11753);
IkReal x11759=(gconst4*x11752);
IkReal x11760=((1.0)*x11752);
evalcond[0]=((((-1.0)*r22*x11758))+(((-1.0)*x11757*x11760))+((r21*x11759)));
evalcond[1]=((((-1.0)*r12*x11758))+(((-1.0)*x11755*x11760))+((x11752*x11754)));
evalcond[2]=((((-1.0)*gconst4*r01*x11758))+((x11753*x11756))+(((-1.0)*r02*x11760)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11758))+(((-1.0)*x11756*x11760))+((r01*x11759)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x11753*x11757))+(((-1.0)*r22*x11760))+(((-1.0)*gconst4*r21*x11758)));
evalcond[5]=((((-1.0)*r12*x11760))+(((-1.0)*x11754*x11758))+(((-1.0)*sj1*sj2))+((x11753*x11755))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11761=((1.0)*gconst5);
CheckValue<IkReal> x11762 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x11761))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11762.valid){
continue;
}
CheckValue<IkReal> x11763=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11761))+(((-1.0)*gconst4*r20)))),-1);
if(!x11763.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11762.value)+(((1.5707963267949)*(x11763.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11764=IKsin(j4);
IkReal x11765=IKcos(j4);
IkReal x11766=(gconst4*r11);
IkReal x11767=(gconst5*r10);
IkReal x11768=(gconst5*r00);
IkReal x11769=(gconst5*r20);
IkReal x11770=((1.0)*x11765);
IkReal x11771=(gconst4*x11764);
IkReal x11772=((1.0)*x11764);
evalcond[0]=((((-1.0)*r22*x11770))+((r21*x11771))+(((-1.0)*x11769*x11772)));
evalcond[1]=((((-1.0)*x11767*x11772))+(((-1.0)*r12*x11770))+((x11764*x11766)));
evalcond[2]=((((-1.0)*r02*x11772))+((x11765*x11768))+(((-1.0)*gconst4*r01*x11770)));
evalcond[3]=((1.0)+(((-1.0)*x11768*x11772))+(((-1.0)*r02*x11770))+((r01*x11771)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x11765*x11769))+(((-1.0)*gconst4*r21*x11770))+(((-1.0)*r22*x11772)));
evalcond[5]=((((-1.0)*r12*x11772))+(((-1.0)*sj1*sj2))+(((-1.0)*x11766*x11770))+((x11765*x11767))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11773=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11773.valid){
continue;
}
CheckValue<IkReal> x11774 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11774.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11773.value)))+(x11774.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11775=IKsin(j4);
IkReal x11776=IKcos(j4);
IkReal x11777=(gconst4*r11);
IkReal x11778=(gconst5*r10);
IkReal x11779=(gconst5*r00);
IkReal x11780=(gconst5*r20);
IkReal x11781=((1.0)*x11776);
IkReal x11782=(gconst4*x11775);
IkReal x11783=((1.0)*x11775);
evalcond[0]=(((r21*x11782))+(((-1.0)*x11780*x11783))+(((-1.0)*r22*x11781)));
evalcond[1]=(((x11775*x11777))+(((-1.0)*x11778*x11783))+(((-1.0)*r12*x11781)));
evalcond[2]=(((x11776*x11779))+(((-1.0)*gconst4*r01*x11781))+(((-1.0)*r02*x11783)));
evalcond[3]=((1.0)+(((-1.0)*x11779*x11783))+(((-1.0)*r02*x11781))+((r01*x11782)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst4*r21*x11781))+(((-1.0)*r22*x11783))+((x11776*x11780)));
evalcond[5]=(((x11776*x11778))+(((-1.0)*r12*x11783))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*x11777*x11781)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11784=((-1.0)*r21);
IkReal x11785=((-1.0)*r20);
CheckValue<IkReal> x11787 = IKatan2WithCheck(IkReal(x11784),IkReal(x11785),IKFAST_ATAN2_MAGTHRESH);
if(!x11787.valid){
continue;
}
IkReal x11786=((1.0)*(x11787.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11786)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11785);
rxp0_2=(py*r00);
rxp1_0=(py*x11784);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11786)));
IkReal gconst4=x11784;
IkReal gconst5=((1.0)*r20);
IkReal x11788=((1.0)*r01*r21);
IkReal x11789=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x11788))+(((-1.0)*x11789)));
j4eval[1]=(((sj3*x11789))+((sj3*x11788)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11790=((-1.0)*r21);
IkReal x11791=((-1.0)*r20);
CheckValue<IkReal> x11793 = IKatan2WithCheck(IkReal(x11790),IkReal(x11791),IKFAST_ATAN2_MAGTHRESH);
if(!x11793.valid){
continue;
}
IkReal x11792=((1.0)*(x11793.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11792)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11791);
rxp0_2=(py*r00);
rxp1_0=(py*x11790);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11792)));
IkReal gconst4=x11790;
IkReal gconst5=((1.0)*r20);
IkReal x11794=((1.0)*r01*r21);
IkReal x11795=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x11794))+(((-1.0)*x11795)));
j4eval[1]=((((-1.0)*cj3*x11795))+(((-1.0)*cj3*x11794)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11796=((-1.0)*r21);
IkReal x11797=((-1.0)*r20);
CheckValue<IkReal> x11799 = IKatan2WithCheck(IkReal(x11796),IkReal(x11797),IKFAST_ATAN2_MAGTHRESH);
if(!x11799.valid){
continue;
}
IkReal x11798=((1.0)*(x11799.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11798)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11797);
rxp0_2=(py*r00);
rxp1_0=(py*x11796);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11798)));
IkReal gconst4=x11796;
IkReal gconst5=((1.0)*r20);
IkReal x11800=((1.0)*sj3);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=(((r01*r21*x11800))+((r00*r20*x11800)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11801=((1.0)*r01);
CheckValue<IkReal> x11802=IKPowWithIntegerCheck(cj3,-1);
if(!x11802.valid){
continue;
}
CheckValue<IkReal> x11803=IKPowWithIntegerCheck(r12,-1);
if(!x11803.valid){
continue;
}
CheckValue<IkReal> x11804=IKPowWithIntegerCheck((((gconst5*r00*sj3))+(((-1.0)*gconst4*sj3*x11801))),-1);
if(!x11804.valid){
continue;
}
if( IKabs(((x11802.value)*(x11803.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11804.value)*(((((-1.0)*cj3*gconst4*r00))+(((-1.0)*cj3*gconst5*x11801)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11802.value)*(x11803.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x11804.value)*(((((-1.0)*cj3*gconst4*r00))+(((-1.0)*cj3*gconst5*x11801))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11802.value)*(x11803.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x11804.value)*(((((-1.0)*cj3*gconst4*r00))+(((-1.0)*cj3*gconst5*x11801))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11805=IKsin(j4);
IkReal x11806=IKcos(j4);
IkReal x11807=(cj2*sj1);
IkReal x11808=(cj1*sj2);
IkReal x11809=(sj1*sj2);
IkReal x11810=(gconst5*r00);
IkReal x11811=(gconst5*sj3);
IkReal x11812=(cj3*gconst5);
IkReal x11813=(gconst4*sj3);
IkReal x11814=(cj3*gconst4);
IkReal x11815=(cj1*cj2);
IkReal x11816=((1.0)*x11805);
IkReal x11817=(gconst4*x11805);
IkReal x11818=((1.0)*x11806);
IkReal x11819=(x11808+x11807);
IkReal x11820=(x11806*x11811);
IkReal x11821=(x11806*x11814);
evalcond[0]=((-1.0)*r12*x11806);
evalcond[1]=((((-1.0)*gconst5*r20*x11816))+((r21*x11817)));
evalcond[2]=((((-1.0)*x11809))+x11815+((cj3*r12*x11805)));
evalcond[3]=((((-1.0)*r12*sj3*x11816))+x11819);
evalcond[4]=((1.0)+(((-1.0)*x11810*x11816))+((r01*x11817)));
evalcond[5]=(((r01*x11812))+(((-1.0)*r01*x11813*x11818))+((r00*x11814))+((sj3*x11806*x11810)));
evalcond[6]=(((r01*x11811))+((r00*x11813))+(((-1.0)*cj3*x11810*x11818))+((r01*x11821)));
evalcond[7]=(((r21*x11811))+((r20*x11813))+((r21*x11821))+(((-1.0)*r20*x11812*x11818))+x11819);
evalcond[8]=((((-1.0)*x11815))+(((-1.0)*r21*x11813*x11818))+((r21*x11812))+((r20*x11820))+((r20*x11814))+x11809);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11822=((1.0)*gconst5);
IkReal x11823=(gconst4*r01);
CheckValue<IkReal> x11824=IKPowWithIntegerCheck(((((-1.0)*r00*x11822))+x11823),-1);
if(!x11824.valid){
continue;
}
CheckValue<IkReal> x11825=IKPowWithIntegerCheck((((cj3*x11823))+(((-1.0)*cj3*r00*x11822))),-1);
if(!x11825.valid){
continue;
}
if( IKabs(((-1.0)*(x11824.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11825.value)*(((((-1.0)*gconst4*r00*sj3))+(((-1.0)*r01*sj3*x11822)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11824.value)))+IKsqr(((x11825.value)*(((((-1.0)*gconst4*r00*sj3))+(((-1.0)*r01*sj3*x11822))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11824.value)), ((x11825.value)*(((((-1.0)*gconst4*r00*sj3))+(((-1.0)*r01*sj3*x11822))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11826=IKsin(j4);
IkReal x11827=IKcos(j4);
IkReal x11828=(cj2*sj1);
IkReal x11829=(cj1*sj2);
IkReal x11830=(sj1*sj2);
IkReal x11831=(gconst5*r00);
IkReal x11832=(gconst5*sj3);
IkReal x11833=(cj3*gconst5);
IkReal x11834=(gconst4*sj3);
IkReal x11835=(cj3*gconst4);
IkReal x11836=(cj1*cj2);
IkReal x11837=((1.0)*x11826);
IkReal x11838=(gconst4*x11826);
IkReal x11839=((1.0)*x11827);
IkReal x11840=(x11829+x11828);
IkReal x11841=(x11827*x11832);
IkReal x11842=(x11827*x11835);
evalcond[0]=((-1.0)*r12*x11827);
evalcond[1]=(((r21*x11838))+(((-1.0)*gconst5*r20*x11837)));
evalcond[2]=(((cj3*r12*x11826))+(((-1.0)*x11830))+x11836);
evalcond[3]=((((-1.0)*r12*sj3*x11837))+x11840);
evalcond[4]=((1.0)+(((-1.0)*x11831*x11837))+((r01*x11838)));
evalcond[5]=(((sj3*x11827*x11831))+(((-1.0)*r01*x11834*x11839))+((r00*x11835))+((r01*x11833)));
evalcond[6]=(((r01*x11842))+(((-1.0)*cj3*x11831*x11839))+((r00*x11834))+((r01*x11832)));
evalcond[7]=(((r21*x11842))+((r21*x11832))+(((-1.0)*r20*x11833*x11839))+((r20*x11834))+x11840);
evalcond[8]=(((r21*x11833))+((r20*x11841))+(((-1.0)*x11836))+((r20*x11835))+(((-1.0)*r21*x11834*x11839))+x11830);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11843=((1.0)*gconst4);
IkReal x11844=(gconst5*r00);
CheckValue<IkReal> x11845=IKPowWithIntegerCheck((((gconst4*r01))+(((-1.0)*x11844))),-1);
if(!x11845.valid){
continue;
}
CheckValue<IkReal> x11846=IKPowWithIntegerCheck(((((-1.0)*r01*sj3*x11843))+((sj3*x11844))),-1);
if(!x11846.valid){
continue;
}
if( IKabs(((-1.0)*(x11845.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11846.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x11843)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11845.value)))+IKsqr(((x11846.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x11843))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11845.value)), ((x11846.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x11843))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11847=IKsin(j4);
IkReal x11848=IKcos(j4);
IkReal x11849=(cj2*sj1);
IkReal x11850=(cj1*sj2);
IkReal x11851=(sj1*sj2);
IkReal x11852=(gconst5*r00);
IkReal x11853=(gconst5*sj3);
IkReal x11854=(cj3*gconst5);
IkReal x11855=(gconst4*sj3);
IkReal x11856=(cj3*gconst4);
IkReal x11857=(cj1*cj2);
IkReal x11858=((1.0)*x11847);
IkReal x11859=(gconst4*x11847);
IkReal x11860=((1.0)*x11848);
IkReal x11861=(x11849+x11850);
IkReal x11862=(x11848*x11853);
IkReal x11863=(x11848*x11856);
evalcond[0]=((-1.0)*r12*x11848);
evalcond[1]=(((r21*x11859))+(((-1.0)*gconst5*r20*x11858)));
evalcond[2]=((((-1.0)*x11851))+((cj3*r12*x11847))+x11857);
evalcond[3]=((((-1.0)*r12*sj3*x11858))+x11861);
evalcond[4]=((1.0)+((r01*x11859))+(((-1.0)*x11852*x11858)));
evalcond[5]=((((-1.0)*r01*x11855*x11860))+((r01*x11854))+((sj3*x11848*x11852))+((r00*x11856)));
evalcond[6]=(((r01*x11863))+((r01*x11853))+((r00*x11855))+(((-1.0)*cj3*x11852*x11860)));
evalcond[7]=(((r21*x11853))+((r20*x11855))+(((-1.0)*r20*x11854*x11860))+x11861+((r21*x11863)));
evalcond[8]=(((r21*x11854))+((r20*x11856))+((r20*x11862))+(((-1.0)*x11857))+(((-1.0)*r21*x11855*x11860))+x11851);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11864=gconst4*gconst4;
IkReal x11865=gconst5*gconst5;
IkReal x11866=(r01*r20);
IkReal x11867=(gconst4*sj3);
IkReal x11868=(r01*r21);
IkReal x11869=((1.0)*cj3);
IkReal x11870=(r00*r21);
IkReal x11871=(r00*r20);
IkReal x11872=(cj3*gconst4*gconst5);
IkReal x11873=((1.0)*x11865);
CheckValue<IkReal> x11874=IKPowWithIntegerCheck(IKsign(((((-1.0)*x11865*x11869*x11871))+(((-1.0)*x11864*x11868*x11869))+(((-1.0)*r02*r22*x11869))+((x11866*x11872))+((x11870*x11872)))),-1);
if(!x11874.valid){
continue;
}
CheckValue<IkReal> x11875 = IKatan2WithCheck(IkReal((((r00*r22*x11867))+((gconst5*r01*r22*sj3)))),IkReal((((sj3*x11864*x11870))+((gconst5*x11867*x11868))+(((-1.0)*gconst5*x11867*x11871))+(((-1.0)*sj3*x11866*x11873)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11875.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11874.value)))+(x11875.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11876=IKsin(j4);
IkReal x11877=IKcos(j4);
IkReal x11878=(cj2*sj1);
IkReal x11879=(cj1*sj2);
IkReal x11880=(gconst5*sj3);
IkReal x11881=(gconst4*r11);
IkReal x11882=(sj1*sj2);
IkReal x11883=(gconst5*r10);
IkReal x11884=(cj1*cj2);
IkReal x11885=(gconst4*r01);
IkReal x11886=(gconst5*r00);
IkReal x11887=(gconst4*sj3);
IkReal x11888=(cj3*gconst5);
IkReal x11889=(cj3*gconst4);
IkReal x11890=(gconst4*r21);
IkReal x11891=((1.0)*x11877);
IkReal x11892=((1.0)*x11876);
IkReal x11893=(cj3*x11876);
IkReal x11894=(cj3*x11877);
IkReal x11895=(x11878+x11879);
evalcond[0]=((((-1.0)*r22*x11891))+(((-1.0)*gconst5*r20*x11892))+((x11876*x11890)));
evalcond[1]=(((x11876*x11881))+(((-1.0)*x11883*x11892))+(((-1.0)*r12*x11891)));
evalcond[2]=((1.0)+(((-1.0)*x11886*x11892))+((x11876*x11885))+(((-1.0)*r02*x11891)));
evalcond[3]=(((r01*x11880))+((r00*x11887))+((r02*x11893))+((x11885*x11894))+(((-1.0)*cj3*x11886*x11891)));
evalcond[4]=(((r01*x11888))+((r00*x11889))+((r00*x11877*x11880))+(((-1.0)*sj3*x11885*x11891))+(((-1.0)*r02*sj3*x11892)));
evalcond[5]=(((r21*x11880))+((r22*x11893))+((r21*x11877*x11889))+(((-1.0)*r20*x11888*x11891))+x11895+((r20*x11887)));
evalcond[6]=((((-1.0)*x11882))+((x11881*x11894))+((r10*x11887))+((r12*x11893))+x11884+(((-1.0)*cj3*x11883*x11891))+((r11*x11880)));
evalcond[7]=(((r10*x11877*x11880))+((r10*x11889))+(((-1.0)*r12*sj3*x11892))+(((-1.0)*sj3*x11881*x11891))+x11895+((r11*x11888)));
evalcond[8]=((((-1.0)*r22*sj3*x11892))+(((-1.0)*x11884))+((r21*x11888))+(((-1.0)*r21*x11887*x11891))+((r20*x11877*x11880))+x11882+((r20*x11889)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11896=((1.0)*gconst5);
CheckValue<IkReal> x11897 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x11896))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11897.valid){
continue;
}
CheckValue<IkReal> x11898=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r20))+(((-1.0)*r21*x11896)))),-1);
if(!x11898.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11897.value)+(((1.5707963267949)*(x11898.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11899=IKsin(j4);
IkReal x11900=IKcos(j4);
IkReal x11901=(cj2*sj1);
IkReal x11902=(cj1*sj2);
IkReal x11903=(gconst5*sj3);
IkReal x11904=(gconst4*r11);
IkReal x11905=(sj1*sj2);
IkReal x11906=(gconst5*r10);
IkReal x11907=(cj1*cj2);
IkReal x11908=(gconst4*r01);
IkReal x11909=(gconst5*r00);
IkReal x11910=(gconst4*sj3);
IkReal x11911=(cj3*gconst5);
IkReal x11912=(cj3*gconst4);
IkReal x11913=(gconst4*r21);
IkReal x11914=((1.0)*x11900);
IkReal x11915=((1.0)*x11899);
IkReal x11916=(cj3*x11899);
IkReal x11917=(cj3*x11900);
IkReal x11918=(x11901+x11902);
evalcond[0]=((((-1.0)*r22*x11914))+((x11899*x11913))+(((-1.0)*gconst5*r20*x11915)));
evalcond[1]=((((-1.0)*r12*x11914))+(((-1.0)*x11906*x11915))+((x11899*x11904)));
evalcond[2]=((1.0)+((x11899*x11908))+(((-1.0)*r02*x11914))+(((-1.0)*x11909*x11915)));
evalcond[3]=(((x11908*x11917))+((r00*x11910))+((r01*x11903))+(((-1.0)*cj3*x11909*x11914))+((r02*x11916)));
evalcond[4]=(((r00*x11912))+(((-1.0)*r02*sj3*x11915))+((r01*x11911))+(((-1.0)*sj3*x11908*x11914))+((r00*x11900*x11903)));
evalcond[5]=(x11918+((r22*x11916))+((r21*x11900*x11912))+(((-1.0)*r20*x11911*x11914))+((r21*x11903))+((r20*x11910)));
evalcond[6]=(x11907+(((-1.0)*x11905))+((r10*x11910))+((x11904*x11917))+(((-1.0)*cj3*x11906*x11914))+((r11*x11903))+((r12*x11916)));
evalcond[7]=(x11918+((r11*x11911))+(((-1.0)*sj3*x11904*x11914))+((r10*x11912))+(((-1.0)*r12*sj3*x11915))+((r10*x11900*x11903)));
evalcond[8]=(x11905+(((-1.0)*x11907))+(((-1.0)*r21*x11910*x11914))+((r21*x11911))+((r20*x11900*x11903))+(((-1.0)*r22*sj3*x11915))+((r20*x11912)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11919=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11919.valid){
continue;
}
CheckValue<IkReal> x11920 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11920.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11919.value)))+(x11920.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11921=IKsin(j4);
IkReal x11922=IKcos(j4);
IkReal x11923=(cj2*sj1);
IkReal x11924=(cj1*sj2);
IkReal x11925=(gconst5*sj3);
IkReal x11926=(gconst4*r11);
IkReal x11927=(sj1*sj2);
IkReal x11928=(gconst5*r10);
IkReal x11929=(cj1*cj2);
IkReal x11930=(gconst4*r01);
IkReal x11931=(gconst5*r00);
IkReal x11932=(gconst4*sj3);
IkReal x11933=(cj3*gconst5);
IkReal x11934=(cj3*gconst4);
IkReal x11935=(gconst4*r21);
IkReal x11936=((1.0)*x11922);
IkReal x11937=((1.0)*x11921);
IkReal x11938=(cj3*x11921);
IkReal x11939=(cj3*x11922);
IkReal x11940=(x11923+x11924);
evalcond[0]=((((-1.0)*gconst5*r20*x11937))+((x11921*x11935))+(((-1.0)*r22*x11936)));
evalcond[1]=(((x11921*x11926))+(((-1.0)*r12*x11936))+(((-1.0)*x11928*x11937)));
evalcond[2]=((1.0)+(((-1.0)*r02*x11936))+((x11921*x11930))+(((-1.0)*x11931*x11937)));
evalcond[3]=(((r02*x11938))+((x11930*x11939))+((r00*x11932))+((r01*x11925))+(((-1.0)*cj3*x11931*x11936)));
evalcond[4]=((((-1.0)*r02*sj3*x11937))+(((-1.0)*sj3*x11930*x11936))+((r00*x11934))+((r01*x11933))+((r00*x11922*x11925)));
evalcond[5]=(x11940+((r21*x11925))+((r20*x11932))+((r22*x11938))+((r21*x11922*x11934))+(((-1.0)*r20*x11933*x11936)));
evalcond[6]=(x11929+((r10*x11932))+((r11*x11925))+((x11926*x11939))+((r12*x11938))+(((-1.0)*cj3*x11928*x11936))+(((-1.0)*x11927)));
evalcond[7]=(x11940+((r10*x11922*x11925))+((r10*x11934))+(((-1.0)*r12*sj3*x11937))+((r11*x11933))+(((-1.0)*sj3*x11926*x11936)));
evalcond[8]=(x11927+(((-1.0)*r21*x11932*x11936))+((r21*x11933))+(((-1.0)*r22*sj3*x11937))+((r20*x11934))+((r20*x11922*x11925))+(((-1.0)*x11929)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11941=((-1.0)*r21);
IkReal x11942=((-1.0)*px);
CheckValue<IkReal> x11944 = IKatan2WithCheck(IkReal(x11941),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11944.valid){
continue;
}
IkReal x11943=((1.0)*(x11944.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11943)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11942);
rxp1_1=(px*r21);
rxp1_2=(r11*x11942);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11943)));
IkReal gconst4=x11941;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11945=((-1.0)*r21);
IkReal x11946=((-1.0)*px);
CheckValue<IkReal> x11948 = IKatan2WithCheck(IkReal(x11945),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11948.valid){
continue;
}
IkReal x11947=((1.0)*(x11948.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11947)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11946);
rxp1_1=(px*r21);
rxp1_2=(r11*x11946);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11947)));
IkReal gconst4=x11945;
IkReal gconst5=((1.0)*r20);
IkReal x11949=((1.0)*cj3);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j4eval[1]=((((-1.0)*x11949))+((x11949*(r10*r10)))+(((-1.0)*x11949*(r21*r21))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11950=((-1.0)*r21);
IkReal x11951=((-1.0)*px);
CheckValue<IkReal> x11953 = IKatan2WithCheck(IkReal(x11950),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11953.valid){
continue;
}
IkReal x11952=((1.0)*(x11953.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11952)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11951);
rxp1_1=(px*r21);
rxp1_2=(r11*x11951);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11952)));
IkReal gconst4=x11950;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11954=((-1.0)*r21);
IkReal x11955=((-1.0)*px);
CheckValue<IkReal> x11957 = IKatan2WithCheck(IkReal(x11954),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11957.valid){
continue;
}
IkReal x11956=((1.0)*(x11957.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11956)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11955);
rxp1_1=(px*r21);
rxp1_2=(r11*x11955);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11956)));
IkReal gconst4=x11954;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11958=((-1.0)*r21);
IkReal x11959=((-1.0)*px);
CheckValue<IkReal> x11961 = IKatan2WithCheck(IkReal(x11958),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11961.valid){
continue;
}
IkReal x11960=((1.0)*(x11961.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11960)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11959);
rxp1_1=(px*r21);
rxp1_2=(r11*x11959);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11960)));
IkReal gconst4=x11958;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11962=((-1.0)*r21);
IkReal x11963=((-1.0)*px);
CheckValue<IkReal> x11965 = IKatan2WithCheck(IkReal(x11962),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11965.valid){
continue;
}
IkReal x11964=((1.0)*(x11965.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11964)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11963);
rxp1_1=(px*r21);
rxp1_2=(r11*x11963);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11964)));
IkReal gconst4=x11962;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11968=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x11968.valid){
continue;
}
IkReal x11966=x11968.value;
IkReal x11967=(cj0*x11966);
cj4array[0]=(((cj1*cj2*x11967))+(((-1.0)*sj1*sj2*x11967)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11969=IKsin(j4);
IkReal x11970=IKcos(j4);
IkReal x11971=(gconst5*r20);
IkReal x11972=(gconst4*x11969);
IkReal x11973=((1.0)*x11970);
IkReal x11974=((1.0)*x11969);
evalcond[0]=(r02*x11969);
evalcond[1]=((((-1.0)*r02*x11973))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*x11971*x11974))+((r21*x11972)));
evalcond[3]=(((r11*x11972))+(((-1.0)*gconst5*r10*x11974)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11971*x11973))+((gconst4*r21*x11970)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11977=IKPowWithIntegerCheck((((gconst4*r21))+(((-1.0)*gconst5*r20))),-1);
if(!x11977.valid){
continue;
}
IkReal x11975=x11977.value;
IkReal x11976=((1.0)*x11975);
cj4array[0]=((((-1.0)*cj2*sj1*x11976))+(((-1.0)*cj1*sj2*x11976)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11978=IKsin(j4);
IkReal x11979=IKcos(j4);
IkReal x11980=(gconst4*r11);
IkReal x11981=((1.0)*cj0);
IkReal x11982=(gconst5*r10);
IkReal x11983=((1.0)*x11979);
IkReal x11984=((1.0)*x11978);
evalcond[0]=(r02*x11978);
evalcond[1]=((((-1.0)*r02*x11983))+(((-1.0)*x11981)));
evalcond[2]=((((-1.0)*gconst5*r20*x11984))+((gconst4*r21*x11978)));
evalcond[3]=(((x11978*x11980))+(((-1.0)*x11982*x11984)));
evalcond[4]=(((x11979*x11980))+(((-1.0)*x11982*x11983))+(((-1.0)*cj1*cj2*x11981))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11985=IKPowWithIntegerCheck(r02,-1);
if(!x11985.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x11985.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11986=IKsin(j4);
IkReal x11987=IKcos(j4);
IkReal x11988=(gconst4*r11);
IkReal x11989=(gconst4*r21);
IkReal x11990=((1.0)*gconst5*x11987);
IkReal x11991=((1.0)*gconst5*x11986);
evalcond[0]=(r02*x11986);
evalcond[1]=(((x11986*x11989))+(((-1.0)*r20*x11991)));
evalcond[2]=(((x11986*x11988))+(((-1.0)*r10*x11991)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x11987*x11989))+(((-1.0)*r20*x11990)));
evalcond[4]=((((-1.0)*cj0*cj1*cj2))+((x11987*x11988))+(((-1.0)*r10*x11990))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11992=((-1.0)*r21);
IkReal x11993=((-1.0)*px);
CheckValue<IkReal> x11995 = IKatan2WithCheck(IkReal(x11992),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11995.valid){
continue;
}
IkReal x11994=((1.0)*(x11995.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11994)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11993);
rxp1_1=(px*r21);
rxp1_2=(r11*x11993);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11994)));
IkReal gconst4=x11992;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11996=((-1.0)*r21);
IkReal x11997=((-1.0)*px);
CheckValue<IkReal> x11999 = IKatan2WithCheck(IkReal(x11996),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11999.valid){
continue;
}
IkReal x11998=((1.0)*(x11999.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11998)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11997);
rxp1_1=(px*r21);
rxp1_2=(r11*x11997);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11998)));
IkReal gconst4=x11996;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12000=((-1.0)*r21);
IkReal x12001=((-1.0)*px);
CheckValue<IkReal> x12003 = IKatan2WithCheck(IkReal(x12000),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x12003.valid){
continue;
}
IkReal x12002=((1.0)*(x12003.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x12002)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12001);
rxp1_1=(px*r21);
rxp1_2=(r11*x12001);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x12002)));
IkReal gconst4=x12000;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12006=IKPowWithIntegerCheck((((gconst5*r10))+(((-1.0)*gconst4*r11))),-1);
if(!x12006.valid){
continue;
}
IkReal x12004=x12006.value;
IkReal x12005=(cj0*x12004);
cj4array[0]=((((-1.0)*sj1*sj2*x12005))+((cj1*cj2*x12005)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12007=IKsin(j4);
IkReal x12008=IKcos(j4);
IkReal x12009=(gconst5*r20);
IkReal x12010=(gconst4*x12007);
IkReal x12011=((1.0)*x12008);
IkReal x12012=((1.0)*x12007);
evalcond[0]=((-1.0)*r02*x12007);
evalcond[1]=((((-1.0)*r02*x12011))+(((-1.0)*cj0)));
evalcond[2]=(((r21*x12010))+(((-1.0)*x12009*x12012)));
evalcond[3]=(((r11*x12010))+(((-1.0)*gconst5*r10*x12012)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst4*r21*x12011))+((x12008*x12009)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12015=IKPowWithIntegerCheck((((gconst5*r20))+(((-1.0)*gconst4*r21))),-1);
if(!x12015.valid){
continue;
}
IkReal x12013=x12015.value;
IkReal x12014=((1.0)*x12013);
cj4array[0]=((((-1.0)*cj2*sj1*x12014))+(((-1.0)*cj1*sj2*x12014)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12016=IKsin(j4);
IkReal x12017=IKcos(j4);
IkReal x12018=(gconst5*r10);
IkReal x12019=((1.0)*cj0);
IkReal x12020=(gconst4*x12016);
IkReal x12021=((1.0)*x12017);
IkReal x12022=((1.0)*x12016);
evalcond[0]=((-1.0)*r02*x12016);
evalcond[1]=((((-1.0)*r02*x12021))+(((-1.0)*x12019)));
evalcond[2]=((((-1.0)*gconst5*r20*x12022))+((r21*x12020)));
evalcond[3]=(((r11*x12020))+(((-1.0)*x12018*x12022)));
evalcond[4]=((((-1.0)*cj1*cj2*x12019))+((x12017*x12018))+(((-1.0)*gconst4*r11*x12021))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12023=IKPowWithIntegerCheck(r02,-1);
if(!x12023.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x12023.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12024=IKsin(j4);
IkReal x12025=IKcos(j4);
IkReal x12026=(gconst5*x12025);
IkReal x12027=(gconst4*x12024);
IkReal x12028=((1.0)*gconst4*x12025);
IkReal x12029=((1.0)*gconst5*x12024);
evalcond[0]=((-1.0)*r02*x12024);
evalcond[1]=((((-1.0)*r20*x12029))+((r21*x12027)));
evalcond[2]=(((r11*x12027))+(((-1.0)*r10*x12029)));
evalcond[3]=(((cj2*sj1))+((r20*x12026))+((cj1*sj2))+(((-1.0)*r21*x12028)));
evalcond[4]=((((-1.0)*cj0*cj1*cj2))+(((-1.0)*r11*x12028))+((cj0*sj1*sj2))+((r10*x12026)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12030=((-1.0)*r21);
IkReal x12031=((-1.0)*px);
CheckValue<IkReal> x12033 = IKatan2WithCheck(IkReal(x12030),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x12033.valid){
continue;
}
IkReal x12032=((1.0)*(x12033.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x12032)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12031);
rxp1_1=(px*r21);
rxp1_2=(r11*x12031);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x12032)));
IkReal gconst4=x12030;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12034=((-1.0)*r21);
IkReal x12035=((-1.0)*px);
CheckValue<IkReal> x12037 = IKatan2WithCheck(IkReal(x12034),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x12037.valid){
continue;
}
IkReal x12036=((1.0)*(x12037.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x12036)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12035);
rxp1_1=(px*r21);
rxp1_2=(r11*x12035);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x12036)));
IkReal gconst4=x12034;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12038=((-1.0)*r21);
IkReal x12039=((-1.0)*px);
CheckValue<IkReal> x12041 = IKatan2WithCheck(IkReal(x12038),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x12041.valid){
continue;
}
IkReal x12040=((1.0)*(x12041.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x12040)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12039);
rxp1_1=(px*r21);
rxp1_2=(r11*x12039);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x12040)));
IkReal gconst4=x12038;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12044=IKPowWithIntegerCheck((((gconst5*r10))+(((-1.0)*gconst4*r11))),-1);
if(!x12044.valid){
continue;
}
IkReal x12042=x12044.value;
IkReal x12043=(cj0*x12042);
cj4array[0]=(((cj2*sj1*x12043))+((cj1*sj2*x12043)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12045=IKsin(j4);
IkReal x12046=IKcos(j4);
IkReal x12047=(gconst5*r20);
IkReal x12048=(gconst4*x12045);
IkReal x12049=((1.0)*x12046);
IkReal x12050=((1.0)*x12045);
evalcond[0]=((-1.0)*r02*x12045);
evalcond[1]=((((-1.0)*r02*x12049))+(((-1.0)*cj0)));
evalcond[2]=(((r21*x12048))+(((-1.0)*x12047*x12050)));
evalcond[3]=(((r11*x12048))+(((-1.0)*gconst5*r10*x12050)));
evalcond[4]=((((-1.0)*gconst4*r21*x12049))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x12046*x12047)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12052=IKPowWithIntegerCheck((((gconst5*r20))+(((-1.0)*gconst4*r21))),-1);
if(!x12052.valid){
continue;
}
IkReal x12051=x12052.value;
cj4array[0]=((((-1.0)*sj1*sj2*x12051))+((cj1*cj2*x12051)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12053=IKsin(j4);
IkReal x12054=IKcos(j4);
IkReal x12055=(gconst5*r10);
IkReal x12056=((1.0)*cj0);
IkReal x12057=(gconst4*x12053);
IkReal x12058=((1.0)*x12054);
IkReal x12059=((1.0)*x12053);
evalcond[0]=((-1.0)*r02*x12053);
evalcond[1]=((((-1.0)*x12056))+(((-1.0)*r02*x12058)));
evalcond[2]=((((-1.0)*gconst5*r20*x12059))+((r21*x12057)));
evalcond[3]=((((-1.0)*x12055*x12059))+((r11*x12057)));
evalcond[4]=((((-1.0)*cj2*sj1*x12056))+(((-1.0)*cj1*sj2*x12056))+(((-1.0)*gconst4*r11*x12058))+((x12054*x12055)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12060=IKPowWithIntegerCheck(r02,-1);
if(!x12060.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x12060.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12061=IKsin(j4);
IkReal x12062=IKcos(j4);
IkReal x12063=((1.0)*cj0);
IkReal x12064=(gconst5*x12062);
IkReal x12065=(gconst4*x12061);
IkReal x12066=((1.0)*gconst4*x12062);
IkReal x12067=((1.0)*gconst5*x12061);
evalcond[0]=((-1.0)*r02*x12061);
evalcond[1]=(((r21*x12065))+(((-1.0)*r20*x12067)));
evalcond[2]=((((-1.0)*r10*x12067))+((r11*x12065)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x12066))+((r20*x12064)));
evalcond[4]=((((-1.0)*cj2*sj1*x12063))+(((-1.0)*cj1*sj2*x12063))+((r10*x12064))+(((-1.0)*r11*x12066)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12068=((-1.0)*r21);
IkReal x12069=((-1.0)*px);
CheckValue<IkReal> x12071 = IKatan2WithCheck(IkReal(x12068),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x12071.valid){
continue;
}
IkReal x12070=((1.0)*(x12071.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x12070)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12069);
rxp1_1=(px*r21);
rxp1_2=(r11*x12069);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x12070)));
IkReal gconst4=x12068;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12072=((-1.0)*r21);
IkReal x12073=((-1.0)*px);
CheckValue<IkReal> x12075 = IKatan2WithCheck(IkReal(x12072),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x12075.valid){
continue;
}
IkReal x12074=((1.0)*(x12075.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x12074)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12073);
rxp1_1=(px*r21);
rxp1_2=(r11*x12073);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x12074)));
IkReal gconst4=x12072;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12076=((-1.0)*r21);
IkReal x12077=((-1.0)*px);
CheckValue<IkReal> x12079 = IKatan2WithCheck(IkReal(x12076),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x12079.valid){
continue;
}
IkReal x12078=((1.0)*(x12079.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x12078)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12077);
rxp1_1=(px*r21);
rxp1_2=(r11*x12077);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x12078)));
IkReal gconst4=x12076;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12082=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x12082.valid){
continue;
}
IkReal x12080=x12082.value;
IkReal x12081=(cj0*x12080);
cj4array[0]=(((cj1*sj2*x12081))+((cj2*sj1*x12081)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12083=IKsin(j4);
IkReal x12084=IKcos(j4);
IkReal x12085=(gconst5*r20);
IkReal x12086=(gconst4*x12083);
IkReal x12087=((1.0)*x12084);
IkReal x12088=((1.0)*x12083);
evalcond[0]=(r02*x12083);
evalcond[1]=((((-1.0)*r02*x12087))+(((-1.0)*cj0)));
evalcond[2]=(((r21*x12086))+(((-1.0)*x12085*x12088)));
evalcond[3]=((((-1.0)*gconst5*r10*x12088))+((r11*x12086)));
evalcond[4]=(((gconst4*r21*x12084))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x12085*x12087)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12090=IKPowWithIntegerCheck((((gconst4*r21))+(((-1.0)*gconst5*r20))),-1);
if(!x12090.valid){
continue;
}
IkReal x12089=x12090.value;
cj4array[0]=((((-1.0)*sj1*sj2*x12089))+((cj1*cj2*x12089)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12091=IKsin(j4);
IkReal x12092=IKcos(j4);
IkReal x12093=(gconst4*r11);
IkReal x12094=((1.0)*cj0);
IkReal x12095=(gconst5*r10);
IkReal x12096=((1.0)*x12092);
IkReal x12097=((1.0)*x12091);
evalcond[0]=(r02*x12091);
evalcond[1]=((((-1.0)*r02*x12096))+(((-1.0)*x12094)));
evalcond[2]=((((-1.0)*gconst5*r20*x12097))+((gconst4*r21*x12091)));
evalcond[3]=((((-1.0)*x12095*x12097))+((x12091*x12093)));
evalcond[4]=((((-1.0)*x12095*x12096))+(((-1.0)*cj2*sj1*x12094))+(((-1.0)*cj1*sj2*x12094))+((x12092*x12093)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12098=IKPowWithIntegerCheck(r02,-1);
if(!x12098.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x12098.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12099=IKsin(j4);
IkReal x12100=IKcos(j4);
IkReal x12101=(gconst4*r11);
IkReal x12102=((1.0)*cj1);
IkReal x12103=(gconst4*r21);
IkReal x12104=((1.0)*gconst5*x12100);
IkReal x12105=((1.0)*gconst5*x12099);
evalcond[0]=(r02*x12099);
evalcond[1]=((((-1.0)*r20*x12105))+((x12099*x12103)));
evalcond[2]=((((-1.0)*r10*x12105))+((x12099*x12101)));
evalcond[3]=((((-1.0)*r20*x12104))+((sj1*sj2))+((x12100*x12103))+(((-1.0)*cj2*x12102)));
evalcond[4]=((((-1.0)*cj0*cj2*sj1))+(((-1.0)*r10*x12104))+((x12100*x12101))+(((-1.0)*cj0*sj2*x12102)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12107=IKPowWithIntegerCheck(r02,-1);
if(!x12107.valid){
continue;
}
IkReal x12106=x12107.value;
CheckValue<IkReal> x12108=IKPowWithIntegerCheck(sj3,-1);
if(!x12108.valid){
continue;
}
if( IKabs((x12106*(x12108.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x12106)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x12106*(x12108.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((-1.0)*cj0*x12106))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x12106*(x12108.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((-1.0)*cj0*x12106));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12109=IKsin(j4);
IkReal x12110=IKcos(j4);
IkReal x12111=(gconst5*sj3);
IkReal x12112=(gconst4*r11);
IkReal x12113=(cj2*sj0);
IkReal x12114=(sj1*sj2);
IkReal x12115=((1.0)*gconst5);
IkReal x12116=(cj2*sj1);
IkReal x12117=((1.0)*cj0);
IkReal x12118=(gconst4*r21);
IkReal x12119=((1.0)*sj0);
IkReal x12120=(cj3*gconst4);
IkReal x12121=(gconst4*sj3);
IkReal x12122=(cj1*sj2);
IkReal x12123=(cj3*gconst5);
IkReal x12124=(r20*x12110);
IkReal x12125=(r10*x12110);
IkReal x12126=((1.0)*cj1*cj2);
IkReal x12127=(cj3*x12110);
IkReal x12128=(r02*x12109);
IkReal x12129=((1.0)*sj3*x12110);
evalcond[0]=((((-1.0)*x12117))+(((-1.0)*r02*x12110)));
evalcond[1]=(((x12109*x12118))+(((-1.0)*r20*x12109*x12115)));
evalcond[2]=((((-1.0)*sj3*x12128))+((sj1*x12113))+((sj0*x12122)));
evalcond[3]=((((-1.0)*x12114*x12119))+((cj3*x12128))+((cj1*x12113)));
evalcond[4]=(((x12109*x12112))+(((-1.0)*r10*x12109*x12115))+(((-1.0)*x12119)));
evalcond[5]=(x12122+x12116+((x12118*x12127))+(((-1.0)*cj3*x12115*x12124))+((r21*x12111))+((r20*x12121)));
evalcond[6]=((((-1.0)*x12126))+((x12111*x12124))+((r21*x12123))+x12114+(((-1.0)*x12118*x12129))+((r20*x12120)));
evalcond[7]=(((cj0*x12114))+((x12112*x12127))+(((-1.0)*cj3*x12115*x12125))+((r11*x12111))+((r10*x12121))+(((-1.0)*cj1*cj2*x12117)));
evalcond[8]=((((-1.0)*x12116*x12117))+(((-1.0)*x12112*x12129))+((x12111*x12125))+(((-1.0)*x12117*x12122))+((r10*x12120))+((r11*x12123)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12130=((1.0)*gconst5);
CheckValue<IkReal> x12131=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*r10*x12130))),-1);
if(!x12131.valid){
continue;
}
CheckValue<IkReal> x12132=IKPowWithIntegerCheck(((((-1.0)*cj3*r20*x12130))+((cj3*gconst4*r21))),-1);
if(!x12132.valid){
continue;
}
if( IKabs((sj0*(x12131.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12132.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))+(((-1.0)*r21*sj3*x12130)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*(x12131.value)))+IKsqr(((x12132.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))+(((-1.0)*r21*sj3*x12130))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*(x12131.value)), ((x12132.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))+(((-1.0)*r21*sj3*x12130))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12133=IKsin(j4);
IkReal x12134=IKcos(j4);
IkReal x12135=(gconst5*sj3);
IkReal x12136=(gconst4*r11);
IkReal x12137=(cj2*sj0);
IkReal x12138=(sj1*sj2);
IkReal x12139=((1.0)*gconst5);
IkReal x12140=(cj2*sj1);
IkReal x12141=((1.0)*cj0);
IkReal x12142=(gconst4*r21);
IkReal x12143=((1.0)*sj0);
IkReal x12144=(cj3*gconst4);
IkReal x12145=(gconst4*sj3);
IkReal x12146=(cj1*sj2);
IkReal x12147=(cj3*gconst5);
IkReal x12148=(r20*x12134);
IkReal x12149=(r10*x12134);
IkReal x12150=((1.0)*cj1*cj2);
IkReal x12151=(cj3*x12134);
IkReal x12152=(r02*x12133);
IkReal x12153=((1.0)*sj3*x12134);
evalcond[0]=((((-1.0)*r02*x12134))+(((-1.0)*x12141)));
evalcond[1]=(((x12133*x12142))+(((-1.0)*r20*x12133*x12139)));
evalcond[2]=(((sj0*x12146))+(((-1.0)*sj3*x12152))+((sj1*x12137)));
evalcond[3]=(((cj1*x12137))+(((-1.0)*x12138*x12143))+((cj3*x12152)));
evalcond[4]=(((x12133*x12136))+(((-1.0)*r10*x12133*x12139))+(((-1.0)*x12143)));
evalcond[5]=(((r21*x12135))+x12140+x12146+((r20*x12145))+(((-1.0)*cj3*x12139*x12148))+((x12142*x12151)));
evalcond[6]=((((-1.0)*x12142*x12153))+((x12135*x12148))+x12138+((r20*x12144))+((r21*x12147))+(((-1.0)*x12150)));
evalcond[7]=((((-1.0)*cj1*cj2*x12141))+((cj0*x12138))+((r10*x12145))+((x12136*x12151))+(((-1.0)*cj3*x12139*x12149))+((r11*x12135)));
evalcond[8]=((((-1.0)*x12141*x12146))+(((-1.0)*x12140*x12141))+((r10*x12144))+((x12135*x12149))+((r11*x12147))+(((-1.0)*x12136*x12153)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12154=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x12154.valid){
continue;
}
CheckValue<IkReal> x12155=IKPowWithIntegerCheck(r02,-1);
if(!x12155.valid){
continue;
}
if( IKabs((sj0*(x12154.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x12155.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*(x12154.value)))+IKsqr(((-1.0)*cj0*(x12155.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*(x12154.value)), ((-1.0)*cj0*(x12155.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12156=IKsin(j4);
IkReal x12157=IKcos(j4);
IkReal x12158=(gconst5*sj3);
IkReal x12159=(gconst4*r11);
IkReal x12160=(cj2*sj0);
IkReal x12161=(sj1*sj2);
IkReal x12162=((1.0)*gconst5);
IkReal x12163=(cj2*sj1);
IkReal x12164=((1.0)*cj0);
IkReal x12165=(gconst4*r21);
IkReal x12166=((1.0)*sj0);
IkReal x12167=(cj3*gconst4);
IkReal x12168=(gconst4*sj3);
IkReal x12169=(cj1*sj2);
IkReal x12170=(cj3*gconst5);
IkReal x12171=(r20*x12157);
IkReal x12172=(r10*x12157);
IkReal x12173=((1.0)*cj1*cj2);
IkReal x12174=(cj3*x12157);
IkReal x12175=(r02*x12156);
IkReal x12176=((1.0)*sj3*x12157);
evalcond[0]=((((-1.0)*r02*x12157))+(((-1.0)*x12164)));
evalcond[1]=(((x12156*x12165))+(((-1.0)*r20*x12156*x12162)));
evalcond[2]=(((sj1*x12160))+((sj0*x12169))+(((-1.0)*sj3*x12175)));
evalcond[3]=(((cj3*x12175))+(((-1.0)*x12161*x12166))+((cj1*x12160)));
evalcond[4]=(((x12156*x12159))+(((-1.0)*x12166))+(((-1.0)*r10*x12156*x12162)));
evalcond[5]=(((r20*x12168))+x12163+x12169+((x12165*x12174))+((r21*x12158))+(((-1.0)*cj3*x12162*x12171)));
evalcond[6]=(((r21*x12170))+(((-1.0)*x12165*x12176))+((r20*x12167))+((x12158*x12171))+(((-1.0)*x12173))+x12161);
evalcond[7]=((((-1.0)*cj1*cj2*x12164))+((r10*x12168))+((x12159*x12174))+((cj0*x12161))+((r11*x12158))+(((-1.0)*cj3*x12162*x12172)));
evalcond[8]=((((-1.0)*x12159*x12176))+(((-1.0)*x12164*x12169))+((r10*x12167))+((x12158*x12172))+((r11*x12170))+(((-1.0)*x12163*x12164)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12177=((1.0)*cj0);
IkReal x12178=((1.0)*gconst5);
CheckValue<IkReal> x12179 = IKatan2WithCheck(IkReal((((r02*sj0))+(((-1.0)*r12*x12177)))),IkReal((((gconst4*r01*sj0))+(((-1.0)*r00*sj0*x12178))+(((-1.0)*gconst4*r11*x12177))+((cj0*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12179.valid){
continue;
}
CheckValue<IkReal> x12180=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12178))+(((-1.0)*gconst4*r20)))),-1);
if(!x12180.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12179.value)+(((1.5707963267949)*(x12180.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12181=IKsin(j4);
IkReal x12182=IKcos(j4);
IkReal x12183=(gconst5*sj3);
IkReal x12184=(gconst4*r11);
IkReal x12185=(cj2*sj0);
IkReal x12186=(sj1*sj2);
IkReal x12187=(gconst4*sj3);
IkReal x12188=(gconst5*r10);
IkReal x12189=(gconst4*r01);
IkReal x12190=(cj2*sj1);
IkReal x12191=(gconst4*r21);
IkReal x12192=((1.0)*cj0);
IkReal x12193=(gconst5*r00);
IkReal x12194=((1.0)*sj0);
IkReal x12195=(cj3*gconst5);
IkReal x12196=(cj3*gconst4);
IkReal x12197=(cj1*sj2);
IkReal x12198=((1.0)*x12182);
IkReal x12199=(cj3*x12181);
IkReal x12200=((1.0)*cj1*cj2);
IkReal x12201=((1.0)*x12181);
IkReal x12202=(cj3*x12182);
evalcond[0]=((((-1.0)*gconst5*r20*x12201))+((x12181*x12191))+(((-1.0)*r22*x12198)));
evalcond[1]=((((-1.0)*x12192))+((x12181*x12189))+(((-1.0)*r02*x12198))+(((-1.0)*x12193*x12201)));
evalcond[2]=((((-1.0)*x12194))+((x12181*x12184))+(((-1.0)*r12*x12198))+(((-1.0)*x12188*x12201)));
evalcond[3]=(((x12191*x12202))+((r21*x12183))+x12190+x12197+((r22*x12199))+((r20*x12187))+(((-1.0)*r20*x12195*x12198)));
evalcond[4]=(((r21*x12195))+(((-1.0)*r22*sj3*x12201))+x12186+((r20*x12182*x12183))+(((-1.0)*r21*x12187*x12198))+((r20*x12196))+(((-1.0)*x12200)));
evalcond[5]=(((sj0*x12197))+((r00*x12182*x12183))+((sj1*x12185))+((r01*x12195))+(((-1.0)*r02*sj3*x12201))+((r00*x12196))+(((-1.0)*r01*x12187*x12198)));
evalcond[6]=(((x12189*x12202))+(((-1.0)*cj3*x12193*x12198))+((cj1*x12185))+(((-1.0)*x12186*x12194))+((r02*x12199))+((r00*x12187))+((r01*x12183)));
evalcond[7]=((((-1.0)*cj3*x12188*x12198))+((r12*x12199))+((r11*x12183))+(((-1.0)*cj1*cj2*x12192))+((r10*x12187))+((x12184*x12202))+((cj0*x12186)));
evalcond[8]=((((-1.0)*sj3*x12184*x12198))+((r11*x12195))+(((-1.0)*x12192*x12197))+(((-1.0)*r12*sj3*x12201))+((r10*x12182*x12183))+((r10*x12196))+(((-1.0)*x12190*x12192)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12203=((1.0)*gconst5);
CheckValue<IkReal> x12204 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x12203))+((cj0*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12204.valid){
continue;
}
CheckValue<IkReal> x12205=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x12203))+(((-1.0)*gconst4*r10)))),-1);
if(!x12205.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12204.value)+(((1.5707963267949)*(x12205.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12206=IKsin(j4);
IkReal x12207=IKcos(j4);
IkReal x12208=(gconst5*sj3);
IkReal x12209=(gconst4*r11);
IkReal x12210=(cj2*sj0);
IkReal x12211=(sj1*sj2);
IkReal x12212=(gconst4*sj3);
IkReal x12213=(gconst5*r10);
IkReal x12214=(gconst4*r01);
IkReal x12215=(cj2*sj1);
IkReal x12216=(gconst4*r21);
IkReal x12217=((1.0)*cj0);
IkReal x12218=(gconst5*r00);
IkReal x12219=((1.0)*sj0);
IkReal x12220=(cj3*gconst5);
IkReal x12221=(cj3*gconst4);
IkReal x12222=(cj1*sj2);
IkReal x12223=((1.0)*x12207);
IkReal x12224=(cj3*x12206);
IkReal x12225=((1.0)*cj1*cj2);
IkReal x12226=((1.0)*x12206);
IkReal x12227=(cj3*x12207);
evalcond[0]=((((-1.0)*gconst5*r20*x12226))+(((-1.0)*r22*x12223))+((x12206*x12216)));
evalcond[1]=((((-1.0)*x12217))+((x12206*x12214))+(((-1.0)*x12218*x12226))+(((-1.0)*r02*x12223)));
evalcond[2]=((((-1.0)*x12219))+(((-1.0)*x12213*x12226))+(((-1.0)*r12*x12223))+((x12206*x12209)));
evalcond[3]=(((r22*x12224))+x12222+x12215+((x12216*x12227))+((r21*x12208))+(((-1.0)*r20*x12220*x12223))+((r20*x12212)));
evalcond[4]=((((-1.0)*x12225))+(((-1.0)*r21*x12212*x12223))+(((-1.0)*r22*sj3*x12226))+x12211+((r21*x12220))+((r20*x12221))+((r20*x12207*x12208)));
evalcond[5]=(((r00*x12207*x12208))+(((-1.0)*r02*sj3*x12226))+((r01*x12220))+(((-1.0)*r01*x12212*x12223))+((sj0*x12222))+((r00*x12221))+((sj1*x12210)));
evalcond[6]=((((-1.0)*cj3*x12218*x12223))+((x12214*x12227))+((r02*x12224))+((cj1*x12210))+(((-1.0)*x12211*x12219))+((r01*x12208))+((r00*x12212)));
evalcond[7]=(((cj0*x12211))+(((-1.0)*cj1*cj2*x12217))+((x12209*x12227))+((r10*x12212))+(((-1.0)*cj3*x12213*x12223))+((r12*x12224))+((r11*x12208)));
evalcond[8]=(((r11*x12220))+(((-1.0)*r12*sj3*x12226))+(((-1.0)*sj3*x12209*x12223))+((r10*x12207*x12208))+((r10*x12221))+(((-1.0)*x12215*x12217))+(((-1.0)*x12217*x12222)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12228 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst5*r20*sj0))+((gconst4*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12228.valid){
continue;
}
CheckValue<IkReal> x12229=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x12229.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12228.value)+(((1.5707963267949)*(x12229.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12230=IKsin(j4);
IkReal x12231=IKcos(j4);
IkReal x12232=(gconst5*sj3);
IkReal x12233=(gconst4*r11);
IkReal x12234=(cj2*sj0);
IkReal x12235=(sj1*sj2);
IkReal x12236=(gconst4*sj3);
IkReal x12237=(gconst5*r10);
IkReal x12238=(gconst4*r01);
IkReal x12239=(cj2*sj1);
IkReal x12240=(gconst4*r21);
IkReal x12241=((1.0)*cj0);
IkReal x12242=(gconst5*r00);
IkReal x12243=((1.0)*sj0);
IkReal x12244=(cj3*gconst5);
IkReal x12245=(cj3*gconst4);
IkReal x12246=(cj1*sj2);
IkReal x12247=((1.0)*x12231);
IkReal x12248=(cj3*x12230);
IkReal x12249=((1.0)*cj1*cj2);
IkReal x12250=((1.0)*x12230);
IkReal x12251=(cj3*x12231);
evalcond[0]=(((x12230*x12240))+(((-1.0)*r22*x12247))+(((-1.0)*gconst5*r20*x12250)));
evalcond[1]=((((-1.0)*x12242*x12250))+((x12230*x12238))+(((-1.0)*x12241))+(((-1.0)*r02*x12247)));
evalcond[2]=((((-1.0)*r12*x12247))+(((-1.0)*x12237*x12250))+((x12230*x12233))+(((-1.0)*x12243)));
evalcond[3]=(((x12240*x12251))+(((-1.0)*r20*x12244*x12247))+((r20*x12236))+x12246+x12239+((r22*x12248))+((r21*x12232)));
evalcond[4]=(x12235+((r20*x12231*x12232))+((r20*x12245))+(((-1.0)*x12249))+(((-1.0)*r22*sj3*x12250))+(((-1.0)*r21*x12236*x12247))+((r21*x12244)));
evalcond[5]=(((sj0*x12246))+((r00*x12231*x12232))+((sj1*x12234))+((r00*x12245))+(((-1.0)*r01*x12236*x12247))+((r01*x12244))+(((-1.0)*r02*sj3*x12250)));
evalcond[6]=(((r01*x12232))+((x12238*x12251))+((r00*x12236))+(((-1.0)*cj3*x12242*x12247))+((r02*x12248))+((cj1*x12234))+(((-1.0)*x12235*x12243)));
evalcond[7]=(((r10*x12236))+(((-1.0)*cj1*cj2*x12241))+((cj0*x12235))+((r12*x12248))+((r11*x12232))+((x12233*x12251))+(((-1.0)*cj3*x12237*x12247)));
evalcond[8]=(((r11*x12244))+((r10*x12231*x12232))+(((-1.0)*x12239*x12241))+((r10*x12245))+(((-1.0)*x12241*x12246))+(((-1.0)*r12*sj3*x12250))+(((-1.0)*sj3*x12233*x12247)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12252=((-1.0)*r10);
IkReal x12254 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x12254)==0){
continue;
}
IkReal x12253=pow(x12254,-0.5);
CheckValue<IkReal> x12255 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12252),IKFAST_ATAN2_MAGTHRESH);
if(!x12255.valid){
continue;
}
IkReal gconst6=((-1.0)*(x12255.value));
IkReal gconst7=(r11*x12253);
IkReal gconst8=(x12252*x12253);
CheckValue<IkReal> x12256 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12256.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x12256.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x12257=((-1.0)*r10);
IkReal x12258=x12253;
CheckValue<IkReal> x12260 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12257),IKFAST_ATAN2_MAGTHRESH);
if(!x12260.valid){
continue;
}
IkReal x12259=((-1.0)*(x12260.value));
sj5=gconst7;
cj5=gconst8;
j5=x12259;
IkReal gconst6=x12259;
IkReal gconst7=(r11*x12258);
IkReal gconst8=(x12257*x12258);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12261=((-1.0)*r10);
IkReal x12262=x12253;
CheckValue<IkReal> x12264 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12261),IKFAST_ATAN2_MAGTHRESH);
if(!x12264.valid){
continue;
}
IkReal x12263=((-1.0)*(x12264.value));
sj5=gconst7;
cj5=gconst8;
j5=x12263;
IkReal gconst6=x12263;
IkReal gconst7=(r11*x12262);
IkReal gconst8=(x12261*x12262);
IkReal x12265=r12*r12;
IkReal x12266=((1.0)*cj0);
IkReal x12267=(r02*sj0);
CheckValue<IkReal> x12271=IKPowWithIntegerCheck(((-1.0)+x12265),-1);
if(!x12271.valid){
continue;
}
IkReal x12268=x12271.value;
if((((1.0)+(((-1.0)*x12265)))) < -0.00001)
continue;
IkReal x12269=IKsqrt(((1.0)+(((-1.0)*x12265))));
IkReal x12270=(x12268*x12269);
j4eval[0]=((IKabs((((cj0*x12270))+(((-1.0)*x12265*x12266*x12270))+((r12*x12267*x12270)))))+(IKabs(((((-1.0)*r12*x12266))+x12267))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12272=((-1.0)*r10);
IkReal x12273=x12253;
CheckValue<IkReal> x12275 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12272),IKFAST_ATAN2_MAGTHRESH);
if(!x12275.valid){
continue;
}
IkReal x12274=((-1.0)*(x12275.value));
sj5=gconst7;
cj5=gconst8;
j5=x12274;
IkReal gconst6=x12274;
IkReal gconst7=(r11*x12273);
IkReal gconst8=(x12272*x12273);
CheckValue<IkReal> x12279=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x12279.valid){
continue;
}
IkReal x12276=x12279.value;
IkReal x12277=(sj3*x12276);
IkReal x12278=(((sj3*(r22*r22)))+((x12277*(r10*r10)*(r20*r20)))+((x12277*(r11*r11)*(r21*r21)))+(((2.0)*r10*r11*r20*r21*x12277)));
j4eval[0]=x12278;
j4eval[1]=IKsign(x12278);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x12280=((-1.0)*r10);
IkReal x12281=x12253;
CheckValue<IkReal> x12283 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12280),IKFAST_ATAN2_MAGTHRESH);
if(!x12283.valid){
continue;
}
IkReal x12282=((-1.0)*(x12283.value));
sj5=gconst7;
cj5=gconst8;
j5=x12282;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst6=x12282;
IkReal gconst7=(r11*x12281);
IkReal gconst8=(x12280*x12281);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12284=((-1.0)*r10);
IkReal x12285=x12253;
CheckValue<IkReal> x12287 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12284),IKFAST_ATAN2_MAGTHRESH);
if(!x12287.valid){
continue;
}
IkReal x12286=((-1.0)*(x12287.value));
sj5=gconst7;
cj5=gconst8;
j5=x12286;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst6=x12286;
IkReal gconst7=(r11*x12285);
IkReal gconst8=(x12284*x12285);
IkReal x12288=r12*r12;
IkReal x12289=((1.0)*cj0);
IkReal x12290=(r02*sj0);
CheckValue<IkReal> x12294=IKPowWithIntegerCheck(((-1.0)+x12288),-1);
if(!x12294.valid){
continue;
}
IkReal x12291=x12294.value;
if((((1.0)+(((-1.0)*x12288)))) < -0.00001)
continue;
IkReal x12292=IKsqrt(((1.0)+(((-1.0)*x12288))));
IkReal x12293=(x12291*x12292);
j4eval[0]=((IKabs(((((-1.0)*x12288*x12289*x12293))+((cj0*x12293))+((r12*x12290*x12293)))))+(IKabs(((((-1.0)*r12*x12289))+x12290))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x12295=((-1.0)*r10);
IkReal x12296=x12253;
CheckValue<IkReal> x12298 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12295),IKFAST_ATAN2_MAGTHRESH);
if(!x12298.valid){
continue;
}
IkReal x12297=((-1.0)*(x12298.value));
sj5=gconst7;
cj5=gconst8;
j5=x12297;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst6=x12297;
IkReal gconst7=(r11*x12296);
IkReal gconst8=(x12295*x12296);
IkReal x12299=(cj1*sj2);
IkReal x12300=(cj2*sj1);
IkReal x12301=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x12307=IKPowWithIntegerCheck(x12301,-1);
if(!x12307.valid){
continue;
}
IkReal x12302=x12307.value;
IkReal x12303=((1.0)*x12302);
IkReal x12304=x12253;
IkReal x12305=(r12*r22*x12304);
IkReal x12306=((((-2.0)*r10*r11*r20*r21*x12302))+(((-1.0)*x12303*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-1.0)*x12303*(r11*r11)*(r21*r21))));
j4eval[0]=x12306;
j4eval[1]=IKsign(x12306);
j4eval[2]=((IKabs((((r22*x12299))+((r22*x12300)))))+(IKabs((((x12300*x12305))+((x12299*x12305))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12308=((-1.0)*r10);
IkReal x12309=x12253;
CheckValue<IkReal> x12311 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12308),IKFAST_ATAN2_MAGTHRESH);
if(!x12311.valid){
continue;
}
IkReal x12310=((-1.0)*(x12311.value));
sj5=gconst7;
cj5=gconst8;
j5=x12310;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst6=x12310;
IkReal gconst7=(r11*x12309);
IkReal gconst8=(x12308*x12309);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12312=((-1.0)*r10);
IkReal x12313=x12253;
CheckValue<IkReal> x12315 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12312),IKFAST_ATAN2_MAGTHRESH);
if(!x12315.valid){
continue;
}
IkReal x12314=((-1.0)*(x12315.value));
sj5=gconst7;
cj5=gconst8;
j5=x12314;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst6=x12314;
IkReal gconst7=(r11*x12313);
IkReal gconst8=(x12312*x12313);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12316=((-1.0)*r10);
IkReal x12317=x12253;
CheckValue<IkReal> x12319 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12316),IKFAST_ATAN2_MAGTHRESH);
if(!x12319.valid){
continue;
}
IkReal x12318=((-1.0)*(x12319.value));
sj5=gconst7;
cj5=gconst8;
j5=x12318;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst6=x12318;
IkReal gconst7=(r11*x12317);
IkReal gconst8=(x12316*x12317);
IkReal x12320=r12*r12;
IkReal x12321=(r02*sj1*sj2);
IkReal x12322=(cj1*cj2*r02);
CheckValue<IkReal> x12326=IKPowWithIntegerCheck(((-1.0)+x12320),-1);
if(!x12326.valid){
continue;
}
IkReal x12323=x12326.value;
if((((1.0)+(((-1.0)*x12320)))) < -0.00001)
continue;
IkReal x12324=IKsqrt(((1.0)+(((-1.0)*x12320))));
IkReal x12325=(r12*x12323*x12324);
j4eval[0]=((IKabs(((((-1.0)*x12322*x12325))+((x12321*x12325)))))+(IKabs((x12322+(((-1.0)*x12321))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12327=((1.0)*gconst7);
IkReal x12328=(cj1*cj2);
IkReal x12329=(gconst8*r00);
IkReal x12330=((1.0)*sj1*sj2);
CheckValue<IkReal> x12331 = IKatan2WithCheck(IkReal((((x12328*x12329))+((gconst7*r01*sj1*sj2))+(((-1.0)*x12329*x12330))+(((-1.0)*r01*x12327*x12328)))),IkReal((((r02*x12328))+(((-1.0)*r02*x12330)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12331.valid){
continue;
}
CheckValue<IkReal> x12332=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12327))+(((-1.0)*gconst8*r21)))),-1);
if(!x12332.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12331.value)+(((1.5707963267949)*(x12332.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12333=IKcos(j4);
IkReal x12334=IKsin(j4);
IkReal x12335=(gconst8*r20);
IkReal x12336=(gconst8*r00);
IkReal x12337=(gconst8*r10);
IkReal x12338=((1.0)*x12333);
IkReal x12339=((1.0)*x12334);
IkReal x12340=(gconst7*x12334);
IkReal x12341=(gconst7*x12333);
evalcond[0]=(((r01*x12341))+((r02*x12334))+(((-1.0)*x12336*x12338)));
evalcond[1]=((((-1.0)*r22*x12338))+(((-1.0)*x12335*x12339))+((r21*x12340)));
evalcond[2]=(((r11*x12340))+(((-1.0)*x12337*x12339))+(((-1.0)*r12*x12338)));
evalcond[3]=((-1.0)+((r01*x12340))+(((-1.0)*r02*x12338))+(((-1.0)*x12336*x12339)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x12335*x12338))+((r21*x12341))+((r22*x12334)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x12334))+((r11*x12341))+(((-1.0)*x12337*x12338)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12342=(gconst7*r01);
IkReal x12343=(gconst8*r00);
CheckValue<IkReal> x12344 = IKatan2WithCheck(IkReal((x12342+(((-1.0)*x12343)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12344.valid){
continue;
}
CheckValue<IkReal> x12345=IKPowWithIntegerCheck(IKsign(((x12342*x12342)+(x12343*x12343)+(((-2.0)*x12342*x12343))+(r02*r02))),-1);
if(!x12345.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12344.value)+(((1.5707963267949)*(x12345.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12346=IKcos(j4);
IkReal x12347=IKsin(j4);
IkReal x12348=(gconst8*r20);
IkReal x12349=(gconst8*r00);
IkReal x12350=(gconst8*r10);
IkReal x12351=((1.0)*x12346);
IkReal x12352=((1.0)*x12347);
IkReal x12353=(gconst7*x12347);
IkReal x12354=(gconst7*x12346);
evalcond[0]=((((-1.0)*x12349*x12351))+((r01*x12354))+((r02*x12347)));
evalcond[1]=((((-1.0)*x12348*x12352))+((r21*x12353))+(((-1.0)*r22*x12351)));
evalcond[2]=((((-1.0)*x12350*x12352))+((r11*x12353))+(((-1.0)*r12*x12351)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x12351))+(((-1.0)*x12349*x12352))+((r01*x12353)));
evalcond[4]=((((-1.0)*x12348*x12351))+((cj2*sj1))+((cj1*sj2))+((r22*x12347))+((r21*x12354)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x12350*x12351))+((r11*x12354))+((r12*x12347)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12355=IKPowWithIntegerCheck(IKsign((((gconst7*r20))+((gconst8*r21)))),-1);
if(!x12355.valid){
continue;
}
CheckValue<IkReal> x12356 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst7*r11))+(((-1.0)*gconst8*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12356.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12355.value)))+(x12356.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12357=IKcos(j4);
IkReal x12358=IKsin(j4);
IkReal x12359=(gconst8*r20);
IkReal x12360=(gconst8*r00);
IkReal x12361=(gconst8*r10);
IkReal x12362=((1.0)*x12357);
IkReal x12363=((1.0)*x12358);
IkReal x12364=(gconst7*x12358);
IkReal x12365=(gconst7*x12357);
evalcond[0]=(((r02*x12358))+(((-1.0)*x12360*x12362))+((r01*x12365)));
evalcond[1]=((((-1.0)*r22*x12362))+(((-1.0)*x12359*x12363))+((r21*x12364)));
evalcond[2]=(((r11*x12364))+(((-1.0)*r12*x12362))+(((-1.0)*x12361*x12363)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x12362))+(((-1.0)*x12360*x12363))+((r01*x12364)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x12359*x12362))+((r22*x12358))+((r21*x12365)));
evalcond[5]=(((r11*x12365))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x12361*x12362))+((r12*x12358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12366=((-1.0)*r10);
IkReal x12367=x12253;
CheckValue<IkReal> x12369 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12366),IKFAST_ATAN2_MAGTHRESH);
if(!x12369.valid){
continue;
}
IkReal x12368=((-1.0)*(x12369.value));
sj5=gconst7;
cj5=gconst8;
j5=x12368;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst6=x12368;
IkReal gconst7=(r11*x12367);
IkReal gconst8=(x12366*x12367);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x12370=((-1.0)*r10);
IkReal x12371=x12253;
CheckValue<IkReal> x12373 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12370),IKFAST_ATAN2_MAGTHRESH);
if(!x12373.valid){
continue;
}
IkReal x12372=((-1.0)*(x12373.value));
sj5=gconst7;
cj5=gconst8;
j5=x12372;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst6=x12372;
IkReal gconst7=(r11*x12371);
IkReal gconst8=(x12370*x12371);
IkReal x12374=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x12378=IKPowWithIntegerCheck(x12374,-1);
if(!x12378.valid){
continue;
}
IkReal x12375=x12378.value;
IkReal x12376=((1.0)*x12375);
IkReal x12377=((((-2.0)*r00*r01*r10*r11*x12375))+(((-1.0)*(r02*r02)))+(((-1.0)*x12376*(r01*r01)*(r11*r11)))+(((-1.0)*x12376*(r00*r00)*(r10*r10))));
j4eval[0]=x12377;
j4eval[1]=IKsign(x12377);
j4eval[2]=r02;
j4eval[3]=x12374;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12379=((-1.0)*r10);
IkReal x12380=x12253;
CheckValue<IkReal> x12382 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12379),IKFAST_ATAN2_MAGTHRESH);
if(!x12382.valid){
continue;
}
IkReal x12381=((-1.0)*(x12382.value));
sj5=gconst7;
cj5=gconst8;
j5=x12381;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst6=x12381;
IkReal gconst7=(r11*x12380);
IkReal gconst8=(x12379*x12380);
IkReal x12383=r12*r12;
IkReal x12384=(r02*sj1*sj2);
IkReal x12385=(cj1*cj2*r02);
CheckValue<IkReal> x12389=IKPowWithIntegerCheck(((-1.0)+x12383),-1);
if(!x12389.valid){
continue;
}
IkReal x12386=x12389.value;
if((((1.0)+(((-1.0)*x12383)))) < -0.00001)
continue;
IkReal x12387=IKsqrt(((1.0)+(((-1.0)*x12383))));
IkReal x12388=(r12*x12386*x12387);
j4eval[0]=((IKabs(((((-1.0)*x12384*x12388))+((x12385*x12388)))))+(IKabs((x12384+(((-1.0)*x12385))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12390=(gconst7*r01);
IkReal x12391=(cj1*cj2);
IkReal x12392=(sj1*sj2);
IkReal x12393=(gconst8*r00);
CheckValue<IkReal> x12394=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst7*r20))+(((-1.0)*gconst8*r21)))),-1);
if(!x12394.valid){
continue;
}
CheckValue<IkReal> x12395 = IKatan2WithCheck(IkReal(((((-1.0)*x12391*x12393))+(((-1.0)*x12390*x12392))+((x12390*x12391))+((x12392*x12393)))),IkReal((((r02*x12392))+(((-1.0)*r02*x12391)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12395.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12394.value)))+(x12395.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12396=IKcos(j4);
IkReal x12397=IKsin(j4);
IkReal x12398=(gconst8*r20);
IkReal x12399=(gconst8*r00);
IkReal x12400=(gconst8*r10);
IkReal x12401=((1.0)*x12396);
IkReal x12402=((1.0)*x12397);
IkReal x12403=(gconst7*x12397);
IkReal x12404=(gconst7*x12396);
evalcond[0]=(((r02*x12397))+(((-1.0)*x12399*x12401))+((r01*x12404)));
evalcond[1]=((((-1.0)*x12398*x12402))+(((-1.0)*r22*x12401))+((r21*x12403)));
evalcond[2]=((((-1.0)*r12*x12401))+((r11*x12403))+(((-1.0)*x12400*x12402)));
evalcond[3]=((1.0)+(((-1.0)*x12399*x12402))+(((-1.0)*r02*x12401))+((r01*x12403)));
evalcond[4]=(((r22*x12397))+((cj2*sj1))+(((-1.0)*x12398*x12401))+((cj1*sj2))+((r21*x12404)));
evalcond[5]=((((-1.0)*sj1*sj2))+((cj1*cj2))+((r11*x12404))+((r12*x12397))+(((-1.0)*x12400*x12401)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12405=(gconst7*r01);
IkReal x12406=(gconst8*r00);
CheckValue<IkReal> x12407 = IKatan2WithCheck(IkReal((x12405+(((-1.0)*x12406)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12407.valid){
continue;
}
CheckValue<IkReal> x12408=IKPowWithIntegerCheck(IKsign(((((2.0)*x12405*x12406))+(((-1.0)*(x12406*x12406)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x12405*x12405))))),-1);
if(!x12408.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12407.value)+(((1.5707963267949)*(x12408.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12409=IKcos(j4);
IkReal x12410=IKsin(j4);
IkReal x12411=(gconst8*r20);
IkReal x12412=(gconst8*r00);
IkReal x12413=(gconst8*r10);
IkReal x12414=((1.0)*x12409);
IkReal x12415=((1.0)*x12410);
IkReal x12416=(gconst7*x12410);
IkReal x12417=(gconst7*x12409);
evalcond[0]=(((r01*x12417))+(((-1.0)*x12412*x12414))+((r02*x12410)));
evalcond[1]=((((-1.0)*r22*x12414))+((r21*x12416))+(((-1.0)*x12411*x12415)));
evalcond[2]=(((r11*x12416))+(((-1.0)*x12413*x12415))+(((-1.0)*r12*x12414)));
evalcond[3]=((1.0)+((r01*x12416))+(((-1.0)*r02*x12414))+(((-1.0)*x12412*x12415)));
evalcond[4]=(((cj2*sj1))+((r21*x12417))+(((-1.0)*x12411*x12414))+((cj1*sj2))+((r22*x12410)));
evalcond[5]=(((r11*x12417))+(((-1.0)*sj1*sj2))+((r12*x12410))+((cj1*cj2))+(((-1.0)*x12413*x12414)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12418=((1.0)*gconst8);
CheckValue<IkReal> x12419 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst7*r11))+(((-1.0)*r10*x12418)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12419.valid){
continue;
}
CheckValue<IkReal> x12420=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst7*r20))+(((-1.0)*r21*x12418)))),-1);
if(!x12420.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12419.value)+(((1.5707963267949)*(x12420.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12421=IKcos(j4);
IkReal x12422=IKsin(j4);
IkReal x12423=(gconst8*r20);
IkReal x12424=(gconst8*r00);
IkReal x12425=(gconst8*r10);
IkReal x12426=((1.0)*x12421);
IkReal x12427=((1.0)*x12422);
IkReal x12428=(gconst7*x12422);
IkReal x12429=(gconst7*x12421);
evalcond[0]=((((-1.0)*x12424*x12426))+((r02*x12422))+((r01*x12429)));
evalcond[1]=(((r21*x12428))+(((-1.0)*x12423*x12427))+(((-1.0)*r22*x12426)));
evalcond[2]=((((-1.0)*x12425*x12427))+((r11*x12428))+(((-1.0)*r12*x12426)));
evalcond[3]=((1.0)+(((-1.0)*x12424*x12427))+((r01*x12428))+(((-1.0)*r02*x12426)));
evalcond[4]=(((cj2*sj1))+((r21*x12429))+((cj1*sj2))+(((-1.0)*x12423*x12426))+((r22*x12422)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x12425*x12426))+((r12*x12422))+((r11*x12429))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12430=((-1.0)*r10);
IkReal x12431=((-1.0)*r11);
CheckValue<IkReal> x12433 = IKatan2WithCheck(IkReal(x12431),IkReal(x12430),IKFAST_ATAN2_MAGTHRESH);
if(!x12433.valid){
continue;
}
IkReal x12432=((-1.0)*(x12433.value));
sj5=gconst7;
cj5=gconst8;
j5=x12432;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12430);
rxp1_1=(px*r21);
rxp1_2=(px*x12431);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst6=x12432;
IkReal gconst7=r11;
IkReal gconst8=x12430;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12434=((-1.0)*r10);
IkReal x12435=((-1.0)*r11);
CheckValue<IkReal> x12437 = IKatan2WithCheck(IkReal(x12435),IkReal(x12434),IKFAST_ATAN2_MAGTHRESH);
if(!x12437.valid){
continue;
}
IkReal x12436=((-1.0)*(x12437.value));
sj5=gconst7;
cj5=gconst8;
j5=x12436;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12434);
rxp1_1=(px*r21);
rxp1_2=(px*x12435);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst6=x12436;
IkReal gconst7=r11;
IkReal gconst8=x12434;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12438=((-1.0)*r10);
IkReal x12439=((-1.0)*r11);
CheckValue<IkReal> x12441 = IKatan2WithCheck(IkReal(x12439),IkReal(x12438),IKFAST_ATAN2_MAGTHRESH);
if(!x12441.valid){
continue;
}
IkReal x12440=((-1.0)*(x12441.value));
sj5=gconst7;
cj5=gconst8;
j5=x12440;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12438);
rxp1_1=(px*r21);
rxp1_2=(px*x12439);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst6=x12440;
IkReal gconst7=r11;
IkReal gconst8=x12438;
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12444=IKPowWithIntegerCheck((((gconst7*r11))+(((-1.0)*gconst8*r10))),-1);
if(!x12444.valid){
continue;
}
IkReal x12442=x12444.value;
IkReal x12443=(cj0*x12442);
cj4array[0]=(((cj1*cj2*x12443))+(((-1.0)*sj1*sj2*x12443)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12445=IKsin(j4);
IkReal x12446=IKcos(j4);
IkReal x12447=(gconst7*r21);
IkReal x12448=((1.0)*gconst8*r20);
evalcond[0]=(r02*x12445);
evalcond[1]=((((-1.0)*r02*x12446))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*x12445*x12448))+((x12445*x12447)));
evalcond[3]=(((gconst7*r11*x12445))+(((-1.0)*gconst8*r10*x12445)));
evalcond[4]=(((x12446*x12447))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x12446*x12448)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12451=IKPowWithIntegerCheck((((gconst7*r21))+(((-1.0)*gconst8*r20))),-1);
if(!x12451.valid){
continue;
}
IkReal x12449=x12451.value;
IkReal x12450=((1.0)*x12449);
cj4array[0]=((((-1.0)*cj1*sj2*x12450))+(((-1.0)*cj2*sj1*x12450)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12452=IKsin(j4);
IkReal x12453=IKcos(j4);
IkReal x12454=((1.0)*cj0);
IkReal x12455=((1.0)*gconst8);
IkReal x12456=(gconst7*x12452);
evalcond[0]=(r02*x12452);
evalcond[1]=((((-1.0)*r02*x12453))+(((-1.0)*x12454)));
evalcond[2]=((((-1.0)*r20*x12452*x12455))+((r21*x12456)));
evalcond[3]=((((-1.0)*r10*x12452*x12455))+((r11*x12456)));
evalcond[4]=((((-1.0)*r10*x12453*x12455))+((gconst7*r11*x12453))+(((-1.0)*cj1*cj2*x12454))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12457=IKPowWithIntegerCheck(r02,-1);
if(!x12457.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x12457.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12458=IKsin(j4);
IkReal x12459=IKcos(j4);
IkReal x12460=(gconst7*r21);
IkReal x12461=(gconst7*r11);
IkReal x12462=((1.0)*gconst8*r20);
IkReal x12463=((1.0)*gconst8*r10);
evalcond[0]=(r02*x12458);
evalcond[1]=((((-1.0)*x12458*x12462))+((x12458*x12460)));
evalcond[2]=((((-1.0)*x12458*x12463))+((x12458*x12461)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x12459*x12462))+((x12459*x12460)));
evalcond[4]=((((-1.0)*cj0*cj1*cj2))+(((-1.0)*x12459*x12463))+((x12459*x12461))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12464=((-1.0)*r10);
IkReal x12465=x12253;
CheckValue<IkReal> x12467 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12464),IKFAST_ATAN2_MAGTHRESH);
if(!x12467.valid){
continue;
}
IkReal x12466=((-1.0)*(x12467.value));
sj5=gconst7;
cj5=gconst8;
j5=x12466;
sj3=0;
cj3=1.0;
j3=0;
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst6=x12466;
IkReal gconst7=(r11*x12465);
IkReal gconst8=(x12464*x12465);
IkReal x12468=r12*r12;
IkReal x12469=((1.0)*cj0);
IkReal x12470=(r02*sj0);
CheckValue<IkReal> x12474=IKPowWithIntegerCheck(((-1.0)+x12468),-1);
if(!x12474.valid){
continue;
}
IkReal x12471=x12474.value;
if((((1.0)+(((-1.0)*x12468)))) < -0.00001)
continue;
IkReal x12472=IKsqrt(((1.0)+(((-1.0)*x12468))));
IkReal x12473=(x12471*x12472);
j4eval[0]=((IKabs(((((-1.0)*x12468*x12469*x12473))+((r12*x12470*x12473))+((cj0*x12473)))))+(IKabs((x12470+(((-1.0)*r12*x12469))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12475=(gconst8*r00);
IkReal x12476=((1.0)*r02);
IkReal x12477=(gconst7*r01);
IkReal x12478=(sj0*sj1*sj2);
IkReal x12479=(cj1*cj2*sj0);
CheckValue<IkReal> x12480=IKPowWithIntegerCheck(IKsign(((x12475*x12475)+(r02*r02)+(x12477*x12477)+(((-2.0)*x12475*x12477)))),-1);
if(!x12480.valid){
continue;
}
CheckValue<IkReal> x12481 = IKatan2WithCheck(IkReal(((((-1.0)*x12476*x12479))+(((-1.0)*cj0*x12475))+((cj0*x12477))+((r02*x12478)))),IkReal((((x12475*x12479))+((x12477*x12478))+(((-1.0)*cj0*x12476))+(((-1.0)*x12477*x12479))+(((-1.0)*x12475*x12478)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12481.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12480.value)))+(x12481.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12482=IKsin(j4);
IkReal x12483=IKcos(j4);
IkReal x12484=(cj1*cj2);
IkReal x12485=(sj1*sj2);
IkReal x12486=((1.0)*cj0);
IkReal x12487=((1.0)*sj0);
IkReal x12488=(gconst8*r00);
IkReal x12489=(gconst8*r10);
IkReal x12490=((1.0)*gconst8*r20);
IkReal x12491=(gconst7*x12482);
IkReal x12492=((1.0)*x12483);
IkReal x12493=((1.0)*x12482);
IkReal x12494=(gconst7*x12483);
evalcond[0]=(((r21*x12491))+(((-1.0)*x12482*x12490)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r21*x12494))+(((-1.0)*x12483*x12490)));
evalcond[2]=(((r01*x12491))+(((-1.0)*x12486))+(((-1.0)*r02*x12492))+(((-1.0)*x12488*x12493)));
evalcond[3]=((((-1.0)*x12487))+(((-1.0)*x12489*x12493))+(((-1.0)*r12*x12492))+((r11*x12491)));
evalcond[4]=(((r01*x12494))+((r02*x12482))+(((-1.0)*x12485*x12487))+((sj0*x12484))+(((-1.0)*x12488*x12492)));
evalcond[5]=(((cj0*x12485))+((r12*x12482))+(((-1.0)*x12484*x12486))+(((-1.0)*x12489*x12492))+((r11*x12494)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12495=((1.0)*cj0);
IkReal x12496=((1.0)*gconst8);
CheckValue<IkReal> x12497=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst7*r20))+(((-1.0)*r21*x12496)))),-1);
if(!x12497.valid){
continue;
}
CheckValue<IkReal> x12498 = IKatan2WithCheck(IkReal((((r02*sj0))+(((-1.0)*r12*x12495)))),IkReal((((cj0*gconst8*r10))+(((-1.0)*r00*sj0*x12496))+((gconst7*r01*sj0))+(((-1.0)*gconst7*r11*x12495)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12498.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12497.value)))+(x12498.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12499=IKsin(j4);
IkReal x12500=IKcos(j4);
IkReal x12501=(cj1*cj2);
IkReal x12502=(sj1*sj2);
IkReal x12503=((1.0)*cj0);
IkReal x12504=((1.0)*sj0);
IkReal x12505=(gconst8*r00);
IkReal x12506=(gconst8*r10);
IkReal x12507=((1.0)*gconst8*r20);
IkReal x12508=(gconst7*x12499);
IkReal x12509=((1.0)*x12500);
IkReal x12510=((1.0)*x12499);
IkReal x12511=(gconst7*x12500);
evalcond[0]=(((r21*x12508))+(((-1.0)*x12499*x12507)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x12500*x12507))+((r21*x12511)));
evalcond[2]=((((-1.0)*x12503))+(((-1.0)*r02*x12509))+((r01*x12508))+(((-1.0)*x12505*x12510)));
evalcond[3]=((((-1.0)*x12504))+((r11*x12508))+(((-1.0)*r12*x12509))+(((-1.0)*x12506*x12510)));
evalcond[4]=(((sj0*x12501))+(((-1.0)*x12505*x12509))+((r01*x12511))+(((-1.0)*x12502*x12504))+((r02*x12499)));
evalcond[5]=((((-1.0)*x12501*x12503))+(((-1.0)*x12506*x12509))+((cj0*x12502))+((r12*x12499))+((r11*x12511)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12512=(gconst7*r21);
IkReal x12513=(gconst8*r20);
IkReal x12514=(cj2*sj1);
IkReal x12515=(cj1*sj2);
CheckValue<IkReal> x12516=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x12513*x12513)))+(((2.0)*x12512*x12513))+(((-1.0)*(x12512*x12512)))+(((-1.0)*(r22*r22))))),-1);
if(!x12516.valid){
continue;
}
CheckValue<IkReal> x12517 = IKatan2WithCheck(IkReal((((r22*x12514))+((r22*x12515)))),IkReal(((((-1.0)*x12513*x12514))+(((-1.0)*x12513*x12515))+((x12512*x12515))+((x12512*x12514)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12517.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12516.value)))+(x12517.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12518=IKsin(j4);
IkReal x12519=IKcos(j4);
IkReal x12520=(cj1*cj2);
IkReal x12521=(sj1*sj2);
IkReal x12522=(gconst8*r20);
IkReal x12523=((1.0)*cj0);
IkReal x12524=((1.0)*sj0);
IkReal x12525=(gconst8*r00);
IkReal x12526=(gconst8*r10);
IkReal x12527=((1.0)*x12519);
IkReal x12528=((1.0)*x12518);
IkReal x12529=(gconst7*x12518);
IkReal x12530=(gconst7*x12519);
evalcond[0]=((((-1.0)*x12522*x12528))+((r21*x12529))+(((-1.0)*r22*x12527)));
evalcond[1]=((((-1.0)*x12523))+(((-1.0)*r02*x12527))+((r01*x12529))+(((-1.0)*x12525*x12528)));
evalcond[2]=((((-1.0)*x12524))+(((-1.0)*r12*x12527))+((r11*x12529))+(((-1.0)*x12526*x12528)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x12522*x12527))+((r21*x12530))+((cj1*sj2))+((r22*x12518)));
evalcond[4]=(((sj0*x12520))+(((-1.0)*x12521*x12524))+(((-1.0)*x12525*x12527))+((r02*x12518))+((r01*x12530)));
evalcond[5]=(((cj0*x12521))+((r11*x12530))+((r12*x12518))+(((-1.0)*x12526*x12527))+(((-1.0)*x12520*x12523)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12531=((1.0)*cj0);
IkReal x12532=((1.0)*gconst8);
CheckValue<IkReal> x12533 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x12531))+((r02*sj0)))),IkReal((((cj0*gconst8*r10))+((gconst7*r01*sj0))+(((-1.0)*gconst7*r11*x12531))+(((-1.0)*r00*sj0*x12532)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12533.valid){
continue;
}
CheckValue<IkReal> x12534=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12532))+(((-1.0)*gconst7*r20)))),-1);
if(!x12534.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12533.value)+(((1.5707963267949)*(x12534.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12535=IKsin(j4);
IkReal x12536=IKcos(j4);
IkReal x12537=(cj1*cj2);
IkReal x12538=(sj1*sj2);
IkReal x12539=(gconst8*r20);
IkReal x12540=((1.0)*cj0);
IkReal x12541=((1.0)*sj0);
IkReal x12542=(gconst8*r00);
IkReal x12543=(gconst8*r10);
IkReal x12544=((1.0)*x12536);
IkReal x12545=((1.0)*x12535);
IkReal x12546=(gconst7*x12535);
IkReal x12547=(gconst7*x12536);
evalcond[0]=((((-1.0)*r22*x12544))+(((-1.0)*x12539*x12545))+((r21*x12546)));
evalcond[1]=(((r01*x12546))+(((-1.0)*x12542*x12545))+(((-1.0)*r02*x12544))+(((-1.0)*x12540)));
evalcond[2]=(((r11*x12546))+(((-1.0)*x12543*x12545))+(((-1.0)*r12*x12544))+(((-1.0)*x12541)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x12539*x12544))+((r22*x12535))+((r21*x12547)));
evalcond[4]=((((-1.0)*x12538*x12541))+((r01*x12547))+(((-1.0)*x12542*x12544))+((r02*x12535))+((sj0*x12537)));
evalcond[5]=((((-1.0)*x12537*x12540))+((r11*x12547))+(((-1.0)*x12543*x12544))+((r12*x12535))+((cj0*x12538)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12548 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst8*r20*sj0))+((gconst7*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12548.valid){
continue;
}
CheckValue<IkReal> x12549=IKPowWithIntegerCheck(IKsign((((gconst7*r00))+((gconst8*r01)))),-1);
if(!x12549.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12548.value)+(((1.5707963267949)*(x12549.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12550=IKsin(j4);
IkReal x12551=IKcos(j4);
IkReal x12552=(cj1*cj2);
IkReal x12553=(sj1*sj2);
IkReal x12554=(gconst8*r20);
IkReal x12555=((1.0)*cj0);
IkReal x12556=((1.0)*sj0);
IkReal x12557=(gconst8*r00);
IkReal x12558=(gconst8*r10);
IkReal x12559=((1.0)*x12551);
IkReal x12560=((1.0)*x12550);
IkReal x12561=(gconst7*x12550);
IkReal x12562=(gconst7*x12551);
evalcond[0]=((((-1.0)*r22*x12559))+((r21*x12561))+(((-1.0)*x12554*x12560)));
evalcond[1]=(((r01*x12561))+(((-1.0)*x12557*x12560))+(((-1.0)*r02*x12559))+(((-1.0)*x12555)));
evalcond[2]=(((r11*x12561))+(((-1.0)*r12*x12559))+(((-1.0)*x12558*x12560))+(((-1.0)*x12556)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x12554*x12559))+((r22*x12550))+((r21*x12562)));
evalcond[4]=(((sj0*x12552))+((r01*x12562))+(((-1.0)*x12553*x12556))+(((-1.0)*x12557*x12559))+((r02*x12550)));
evalcond[5]=(((r11*x12562))+((r12*x12550))+(((-1.0)*x12558*x12559))+((cj0*x12553))+(((-1.0)*x12552*x12555)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x12563=((-1.0)*r10);
IkReal x12564=x12253;
CheckValue<IkReal> x12566 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12563),IKFAST_ATAN2_MAGTHRESH);
if(!x12566.valid){
continue;
}
IkReal x12565=((-1.0)*(x12566.value));
sj5=gconst7;
cj5=gconst8;
j5=x12565;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst6=x12565;
IkReal gconst7=(r11*x12564);
IkReal gconst8=(x12563*x12564);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12567=((-1.0)*r10);
IkReal x12568=x12253;
CheckValue<IkReal> x12570 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12567),IKFAST_ATAN2_MAGTHRESH);
if(!x12570.valid){
continue;
}
IkReal x12569=((-1.0)*(x12570.value));
sj5=gconst7;
cj5=gconst8;
j5=x12569;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst6=x12569;
IkReal gconst7=(r11*x12568);
IkReal gconst8=(x12567*x12568);
IkReal x12571=r12*r12;
IkReal x12572=((1.0)*cj0);
IkReal x12573=(r02*sj0);
CheckValue<IkReal> x12577=IKPowWithIntegerCheck(((-1.0)+x12571),-1);
if(!x12577.valid){
continue;
}
IkReal x12574=x12577.value;
if((((1.0)+(((-1.0)*x12571)))) < -0.00001)
continue;
IkReal x12575=IKsqrt(((1.0)+(((-1.0)*x12571))));
IkReal x12576=(x12574*x12575);
j4eval[0]=((IKabs(((((-1.0)*r12*x12572))+x12573)))+(IKabs((((cj0*x12576))+(((-1.0)*x12571*x12572*x12576))+((r12*x12573*x12576))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12578=((-1.0)*r10);
IkReal x12579=x12253;
CheckValue<IkReal> x12581 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12578),IKFAST_ATAN2_MAGTHRESH);
if(!x12581.valid){
continue;
}
IkReal x12580=((-1.0)*(x12581.value));
sj5=gconst7;
cj5=gconst8;
j5=x12580;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst6=x12580;
IkReal gconst7=(r11*x12579);
IkReal gconst8=(x12578*x12579);
IkReal x12582=(cj1*r22*sj2);
IkReal x12583=(cj2*r22*sj1);
IkReal x12584=x12253;
IkReal x12585=(r12*x12584);
j4eval[0]=((IKabs((((x12583*x12585))+((x12582*x12585)))))+(IKabs((x12583+x12582))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12586=((-1.0)*r10);
IkReal x12587=x12253;
CheckValue<IkReal> x12589 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12586),IKFAST_ATAN2_MAGTHRESH);
if(!x12589.valid){
continue;
}
IkReal x12588=((-1.0)*(x12589.value));
sj5=gconst7;
cj5=gconst8;
j5=x12588;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst6=x12588;
IkReal gconst7=(r11*x12587);
IkReal gconst8=(x12586*x12587);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x12590=((-1.0)*r10);
IkReal x12591=x12253;
CheckValue<IkReal> x12593 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12590),IKFAST_ATAN2_MAGTHRESH);
if(!x12593.valid){
continue;
}
IkReal x12592=((-1.0)*(x12593.value));
sj5=gconst7;
cj5=gconst8;
j5=x12592;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst6=x12592;
IkReal gconst7=(r11*x12591);
IkReal gconst8=(x12590*x12591);
IkReal x12594=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x12598=IKPowWithIntegerCheck(x12594,-1);
if(!x12598.valid){
continue;
}
IkReal x12595=x12598.value;
IkReal x12596=((1.0)*x12595);
IkReal x12597=((((-1.0)*x12596*(r00*r00)*(r10*r10)))+(((-1.0)*(r02*r02)))+(((-1.0)*x12596*(r01*r01)*(r11*r11)))+(((-2.0)*r00*r01*r10*r11*x12595)));
j4eval[0]=x12597;
j4eval[1]=r02;
j4eval[2]=x12594;
j4eval[3]=IKsign(x12597);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12599=((-1.0)*r10);
IkReal x12600=x12253;
CheckValue<IkReal> x12602 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12599),IKFAST_ATAN2_MAGTHRESH);
if(!x12602.valid){
continue;
}
IkReal x12601=((-1.0)*(x12602.value));
sj5=gconst7;
cj5=gconst8;
j5=x12601;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst6=x12601;
IkReal gconst7=(r11*x12600);
IkReal gconst8=(x12599*x12600);
IkReal x12603=(cj1*r22*sj2);
IkReal x12604=(cj2*r22*sj1);
IkReal x12605=x12253;
IkReal x12606=(r12*x12605);
j4eval[0]=((IKabs((x12603+x12604)))+(IKabs((((x12604*x12606))+((x12603*x12606))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12607=(gconst8*r20);
IkReal x12608=(gconst7*r21);
IkReal x12609=(cj2*sj1);
IkReal x12610=(cj1*sj2);
CheckValue<IkReal> x12611 = IKatan2WithCheck(IkReal((((r22*x12609))+((r22*x12610)))),IkReal(((((-1.0)*x12607*x12610))+((x12608*x12610))+(((-1.0)*x12607*x12609))+((x12608*x12609)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12611.valid){
continue;
}
CheckValue<IkReal> x12612=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x12607*x12607)+(((-2.0)*x12607*x12608))+(x12608*x12608))),-1);
if(!x12612.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12611.value)+(((1.5707963267949)*(x12612.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12613=IKsin(j4);
IkReal x12614=IKcos(j4);
IkReal x12615=(gconst8*r20);
IkReal x12616=((1.0)*x12614);
IkReal x12617=((1.0)*x12613);
IkReal x12618=(gconst7*x12613);
IkReal x12619=(gconst8*x12614);
evalcond[0]=((((-1.0)*r22*x12616))+(((-1.0)*x12615*x12617))+((r21*x12618)));
evalcond[1]=((((-1.0)*r12*x12616))+((r11*x12618))+(((-1.0)*gconst8*r10*x12617)));
evalcond[2]=((((-1.0)*gconst7*r01*x12616))+(((-1.0)*r02*x12617))+((r00*x12619)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x12616))+(((-1.0)*gconst8*r00*x12617))+((r01*x12618)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x12617))+((cj1*sj2))+((x12614*x12615))+(((-1.0)*gconst7*r21*x12616)));
evalcond[5]=((((-1.0)*r12*x12617))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst7*r11*x12616))+((r10*x12619)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12620=(gconst7*r01);
IkReal x12621=(gconst8*r00);
CheckValue<IkReal> x12622 = IKatan2WithCheck(IkReal(((((-1.0)*x12620))+x12621)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x12622.valid){
continue;
}
CheckValue<IkReal> x12623=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x12620*x12620)))+(((2.0)*x12620*x12621))+(((-1.0)*(r02*r02)))+(((-1.0)*(x12621*x12621))))),-1);
if(!x12623.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12622.value)+(((1.5707963267949)*(x12623.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12624=IKsin(j4);
IkReal x12625=IKcos(j4);
IkReal x12626=(gconst8*r20);
IkReal x12627=((1.0)*x12625);
IkReal x12628=((1.0)*x12624);
IkReal x12629=(gconst7*x12624);
IkReal x12630=(gconst8*x12625);
evalcond[0]=((((-1.0)*r22*x12627))+((r21*x12629))+(((-1.0)*x12626*x12628)));
evalcond[1]=((((-1.0)*r12*x12627))+(((-1.0)*gconst8*r10*x12628))+((r11*x12629)));
evalcond[2]=((((-1.0)*r02*x12628))+(((-1.0)*gconst7*r01*x12627))+((r00*x12630)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x12627))+(((-1.0)*gconst8*r00*x12628))+((r01*x12629)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x12628))+((cj1*sj2))+((x12625*x12626))+(((-1.0)*gconst7*r21*x12627)));
evalcond[5]=((((-1.0)*r12*x12628))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst7*r11*x12627))+((r10*x12630)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12631=IKPowWithIntegerCheck(IKsign((((gconst7*r20))+((gconst8*r21)))),-1);
if(!x12631.valid){
continue;
}
CheckValue<IkReal> x12632 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst7*r11))+(((-1.0)*gconst8*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12632.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12631.value)))+(x12632.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12633=IKsin(j4);
IkReal x12634=IKcos(j4);
IkReal x12635=(gconst8*r20);
IkReal x12636=((1.0)*x12634);
IkReal x12637=((1.0)*x12633);
IkReal x12638=(gconst7*x12633);
IkReal x12639=(gconst8*x12634);
evalcond[0]=((((-1.0)*r22*x12636))+((r21*x12638))+(((-1.0)*x12635*x12637)));
evalcond[1]=(((r11*x12638))+(((-1.0)*gconst8*r10*x12637))+(((-1.0)*r12*x12636)));
evalcond[2]=((((-1.0)*gconst7*r01*x12636))+((r00*x12639))+(((-1.0)*r02*x12637)));
evalcond[3]=((-1.0)+((r01*x12638))+(((-1.0)*gconst8*r00*x12637))+(((-1.0)*r02*x12636)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x12637))+((cj1*sj2))+((x12634*x12635))+(((-1.0)*gconst7*r21*x12636)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst7*r11*x12636))+((r10*x12639))+(((-1.0)*r12*x12637)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12640=((-1.0)*r10);
IkReal x12641=x12253;
CheckValue<IkReal> x12643 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12640),IKFAST_ATAN2_MAGTHRESH);
if(!x12643.valid){
continue;
}
IkReal x12642=((-1.0)*(x12643.value));
sj5=gconst7;
cj5=gconst8;
j5=x12642;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst6=x12642;
IkReal gconst7=(r11*x12641);
IkReal gconst8=(x12640*x12641);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12644=((-1.0)*r10);
IkReal x12645=x12253;
CheckValue<IkReal> x12647 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12644),IKFAST_ATAN2_MAGTHRESH);
if(!x12647.valid){
continue;
}
IkReal x12646=((-1.0)*(x12647.value));
sj5=gconst7;
cj5=gconst8;
j5=x12646;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst6=x12646;
IkReal gconst7=(r11*x12645);
IkReal gconst8=(x12644*x12645);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12648=((-1.0)*r10);
IkReal x12649=x12253;
CheckValue<IkReal> x12651 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12648),IKFAST_ATAN2_MAGTHRESH);
if(!x12651.valid){
continue;
}
IkReal x12650=((-1.0)*(x12651.value));
sj5=gconst7;
cj5=gconst8;
j5=x12650;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst6=x12650;
IkReal gconst7=(r11*x12649);
IkReal gconst8=(x12648*x12649);
IkReal x12652=(cj1*r22*sj2);
IkReal x12653=(cj2*r22*sj1);
IkReal x12654=x12253;
IkReal x12655=(r12*x12654);
j4eval[0]=((IKabs((x12653+x12652)))+(IKabs((((x12652*x12655))+((x12653*x12655))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12656=(gconst8*r20);
IkReal x12657=(gconst7*r21);
IkReal x12658=(cj2*sj1);
IkReal x12659=(cj1*sj2);
CheckValue<IkReal> x12660=IKPowWithIntegerCheck(IKsign(((((-2.0)*x12656*x12657))+(r22*r22)+(x12656*x12656)+(x12657*x12657))),-1);
if(!x12660.valid){
continue;
}
CheckValue<IkReal> x12661 = IKatan2WithCheck(IkReal((((r22*x12659))+((r22*x12658)))),IkReal((((x12657*x12658))+((x12657*x12659))+(((-1.0)*x12656*x12659))+(((-1.0)*x12656*x12658)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12661.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12660.value)))+(x12661.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12662=IKsin(j4);
IkReal x12663=IKcos(j4);
IkReal x12664=(gconst8*r20);
IkReal x12665=((1.0)*x12663);
IkReal x12666=((1.0)*x12662);
IkReal x12667=(gconst7*x12662);
IkReal x12668=(gconst8*x12663);
evalcond[0]=((((-1.0)*r22*x12665))+((r21*x12667))+(((-1.0)*x12664*x12666)));
evalcond[1]=(((r11*x12667))+(((-1.0)*r12*x12665))+(((-1.0)*gconst8*r10*x12666)));
evalcond[2]=((((-1.0)*gconst7*r01*x12665))+(((-1.0)*r02*x12666))+((r00*x12668)));
evalcond[3]=((1.0)+(((-1.0)*gconst8*r00*x12666))+(((-1.0)*r02*x12665))+((r01*x12667)));
evalcond[4]=((((-1.0)*r22*x12666))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst7*r21*x12665))+((x12663*x12664)));
evalcond[5]=(((r10*x12668))+(((-1.0)*sj1*sj2))+(((-1.0)*gconst7*r11*x12665))+(((-1.0)*r12*x12666))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12669=(gconst8*r00);
IkReal x12670=(gconst7*r01);
CheckValue<IkReal> x12671 = IKatan2WithCheck(IkReal(((((-1.0)*x12670))+x12669)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x12671.valid){
continue;
}
CheckValue<IkReal> x12672=IKPowWithIntegerCheck(IKsign(((((-2.0)*x12669*x12670))+(x12670*x12670)+(x12669*x12669)+(r02*r02))),-1);
if(!x12672.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12671.value)+(((1.5707963267949)*(x12672.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12673=IKsin(j4);
IkReal x12674=IKcos(j4);
IkReal x12675=(gconst8*r20);
IkReal x12676=((1.0)*x12674);
IkReal x12677=((1.0)*x12673);
IkReal x12678=(gconst7*x12673);
IkReal x12679=(gconst8*x12674);
evalcond[0]=(((r21*x12678))+(((-1.0)*r22*x12676))+(((-1.0)*x12675*x12677)));
evalcond[1]=((((-1.0)*r12*x12676))+((r11*x12678))+(((-1.0)*gconst8*r10*x12677)));
evalcond[2]=((((-1.0)*gconst7*r01*x12676))+(((-1.0)*r02*x12677))+((r00*x12679)));
evalcond[3]=((1.0)+(((-1.0)*gconst8*r00*x12677))+(((-1.0)*r02*x12676))+((r01*x12678)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x12677))+((cj1*sj2))+(((-1.0)*gconst7*r21*x12676))+((x12674*x12675)));
evalcond[5]=(((r10*x12679))+(((-1.0)*sj1*sj2))+(((-1.0)*gconst7*r11*x12676))+(((-1.0)*r12*x12677))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12680=((1.0)*gconst8);
CheckValue<IkReal> x12681=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12680))+(((-1.0)*gconst7*r20)))),-1);
if(!x12681.valid){
continue;
}
CheckValue<IkReal> x12682 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst7*r11))+(((-1.0)*r10*x12680)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12682.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12681.value)))+(x12682.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12683=IKsin(j4);
IkReal x12684=IKcos(j4);
IkReal x12685=(gconst8*r20);
IkReal x12686=((1.0)*x12684);
IkReal x12687=((1.0)*x12683);
IkReal x12688=(gconst7*x12683);
IkReal x12689=(gconst8*x12684);
evalcond[0]=(((r21*x12688))+(((-1.0)*x12685*x12687))+(((-1.0)*r22*x12686)));
evalcond[1]=(((r11*x12688))+(((-1.0)*r12*x12686))+(((-1.0)*gconst8*r10*x12687)));
evalcond[2]=(((r00*x12689))+(((-1.0)*r02*x12687))+(((-1.0)*gconst7*r01*x12686)));
evalcond[3]=((1.0)+((r01*x12688))+(((-1.0)*gconst8*r00*x12687))+(((-1.0)*r02*x12686)));
evalcond[4]=(((cj2*sj1))+((x12684*x12685))+((cj1*sj2))+(((-1.0)*gconst7*r21*x12686))+(((-1.0)*r22*x12687)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r10*x12689))+(((-1.0)*r12*x12687))+(((-1.0)*gconst7*r11*x12686))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12690=((-1.0)*r10);
IkReal x12691=((-1.0)*r11);
CheckValue<IkReal> x12693 = IKatan2WithCheck(IkReal(x12691),IkReal(x12690),IKFAST_ATAN2_MAGTHRESH);
if(!x12693.valid){
continue;
}
IkReal x12692=((-1.0)*(x12693.value));
sj5=gconst7;
cj5=gconst8;
j5=x12692;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12690);
rxp1_1=(px*r21);
rxp1_2=(px*x12691);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst6=x12692;
IkReal gconst7=r11;
IkReal gconst8=x12690;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12694=((-1.0)*r10);
IkReal x12695=((-1.0)*r11);
CheckValue<IkReal> x12697 = IKatan2WithCheck(IkReal(x12695),IkReal(x12694),IKFAST_ATAN2_MAGTHRESH);
if(!x12697.valid){
continue;
}
IkReal x12696=((-1.0)*(x12697.value));
sj5=gconst7;
cj5=gconst8;
j5=x12696;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12694);
rxp1_1=(px*r21);
rxp1_2=(px*x12695);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst6=x12696;
IkReal gconst7=r11;
IkReal gconst8=x12694;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12698=((-1.0)*r10);
IkReal x12699=((-1.0)*r11);
CheckValue<IkReal> x12701 = IKatan2WithCheck(IkReal(x12699),IkReal(x12698),IKFAST_ATAN2_MAGTHRESH);
if(!x12701.valid){
continue;
}
IkReal x12700=((-1.0)*(x12701.value));
sj5=gconst7;
cj5=gconst8;
j5=x12700;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12698);
rxp1_1=(px*r21);
rxp1_2=(px*x12699);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst6=x12700;
IkReal gconst7=r11;
IkReal gconst8=x12698;
j4eval[0]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12704=IKPowWithIntegerCheck(((((-1.0)*gconst7*r11))+((gconst8*r10))),-1);
if(!x12704.valid){
continue;
}
IkReal x12702=x12704.value;
IkReal x12703=(cj0*x12702);
cj4array[0]=(((cj1*cj2*x12703))+(((-1.0)*sj1*sj2*x12703)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12705=IKsin(j4);
IkReal x12706=IKcos(j4);
IkReal x12707=(gconst8*r20);
IkReal x12708=((1.0)*x12705);
IkReal x12709=((1.0)*x12706);
IkReal x12710=(gconst7*x12705);
evalcond[0]=((-1.0)*r02*x12705);
evalcond[1]=((((-1.0)*cj0))+(((-1.0)*r02*x12709)));
evalcond[2]=(((r21*x12710))+(((-1.0)*x12707*x12708)));
evalcond[3]=((((-1.0)*gconst8*r10*x12708))+((r11*x12710)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst7*r21*x12709))+((cj1*sj2))+((x12706*x12707)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12713=IKPowWithIntegerCheck(((((-1.0)*gconst7*r21))+((gconst8*r20))),-1);
if(!x12713.valid){
continue;
}
IkReal x12711=x12713.value;
IkReal x12712=((1.0)*x12711);
cj4array[0]=((((-1.0)*cj2*sj1*x12712))+(((-1.0)*cj1*sj2*x12712)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12714=IKsin(j4);
IkReal x12715=IKcos(j4);
IkReal x12716=(gconst8*r10);
IkReal x12717=((1.0)*cj0);
IkReal x12718=((1.0)*x12714);
IkReal x12719=((1.0)*x12715);
IkReal x12720=(gconst7*x12714);
evalcond[0]=((-1.0)*r02*x12714);
evalcond[1]=((((-1.0)*x12717))+(((-1.0)*r02*x12719)));
evalcond[2]=(((r21*x12720))+(((-1.0)*gconst8*r20*x12718)));
evalcond[3]=((((-1.0)*x12716*x12718))+((r11*x12720)));
evalcond[4]=(((x12715*x12716))+(((-1.0)*cj1*cj2*x12717))+(((-1.0)*gconst7*r11*x12719))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12721=IKPowWithIntegerCheck(r02,-1);
if(!x12721.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x12721.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12722=IKsin(j4);
IkReal x12723=IKcos(j4);
IkReal x12724=(gconst8*x12723);
IkReal x12725=(gconst7*x12722);
IkReal x12726=((1.0)*gconst8*x12722);
IkReal x12727=((1.0)*gconst7*x12723);
evalcond[0]=((-1.0)*r02*x12722);
evalcond[1]=(((r21*x12725))+(((-1.0)*r20*x12726)));
evalcond[2]=(((r11*x12725))+(((-1.0)*r10*x12726)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x12724))+(((-1.0)*r21*x12727)));
evalcond[4]=((((-1.0)*cj0*cj1*cj2))+((r10*x12724))+((cj0*sj1*sj2))+(((-1.0)*r11*x12727)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12728=((-1.0)*r10);
IkReal x12729=x12253;
CheckValue<IkReal> x12731 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12728),IKFAST_ATAN2_MAGTHRESH);
if(!x12731.valid){
continue;
}
IkReal x12730=((-1.0)*(x12731.value));
sj5=gconst7;
cj5=gconst8;
j5=x12730;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst6=x12730;
IkReal gconst7=(r11*x12729);
IkReal gconst8=(x12728*x12729);
IkReal x12732=r12*r12;
IkReal x12733=((1.0)*cj0);
IkReal x12734=(r02*sj0);
CheckValue<IkReal> x12738=IKPowWithIntegerCheck(((-1.0)+x12732),-1);
if(!x12738.valid){
continue;
}
IkReal x12735=x12738.value;
if((((1.0)+(((-1.0)*x12732)))) < -0.00001)
continue;
IkReal x12736=IKsqrt(((1.0)+(((-1.0)*x12732))));
IkReal x12737=(x12735*x12736);
j4eval[0]=((IKabs((((r12*x12734*x12737))+(((-1.0)*x12732*x12733*x12737))+((cj0*x12737)))))+(IKabs((x12734+(((-1.0)*r12*x12733))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12739=(gconst7*r01);
IkReal x12740=(gconst8*r00);
IkReal x12741=((1.0)*r02);
IkReal x12742=((1.0)*x12740);
IkReal x12743=(cj1*cj2*sj0);
IkReal x12744=(sj0*sj1*sj2);
CheckValue<IkReal> x12745 = IKatan2WithCheck(IkReal(((((-1.0)*x12741*x12744))+(((-1.0)*cj0*x12742))+((r02*x12743))+((cj0*x12739)))),IkReal(((((-1.0)*cj0*x12741))+(((-1.0)*x12739*x12744))+(((-1.0)*x12742*x12743))+((x12739*x12743))+((x12740*x12744)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12745.valid){
continue;
}
CheckValue<IkReal> x12746=IKPowWithIntegerCheck(IKsign(((x12739*x12739)+(((-2.0)*x12739*x12740))+(r02*r02)+(x12740*x12740))),-1);
if(!x12746.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12745.value)+(((1.5707963267949)*(x12746.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12747=IKsin(j4);
IkReal x12748=IKcos(j4);
IkReal x12749=(cj1*cj2);
IkReal x12750=(sj1*sj2);
IkReal x12751=(gconst8*r20);
IkReal x12752=((1.0)*cj0);
IkReal x12753=((1.0)*sj0);
IkReal x12754=((1.0)*x12747);
IkReal x12755=(gconst7*x12747);
IkReal x12756=((1.0)*x12748);
IkReal x12757=(gconst8*x12748);
evalcond[0]=(((r21*x12755))+(((-1.0)*x12751*x12754)));
evalcond[1]=(((cj2*sj1))+(((-1.0)*gconst7*r21*x12756))+((cj1*sj2))+((x12748*x12751)));
evalcond[2]=((((-1.0)*r02*x12756))+(((-1.0)*x12752))+((r01*x12755))+(((-1.0)*gconst8*r00*x12754)));
evalcond[3]=(((r11*x12755))+(((-1.0)*gconst8*r10*x12754))+(((-1.0)*r12*x12756))+(((-1.0)*x12753)));
evalcond[4]=((((-1.0)*r02*x12754))+((sj0*x12749))+((r00*x12757))+(((-1.0)*x12750*x12753))+(((-1.0)*gconst7*r01*x12756)));
evalcond[5]=((((-1.0)*r12*x12754))+(((-1.0)*x12749*x12752))+(((-1.0)*gconst7*r11*x12756))+((r10*x12757))+((cj0*x12750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12758=((1.0)*cj0);
IkReal x12759=((1.0)*gconst8);
CheckValue<IkReal> x12760=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst7*r20))+(((-1.0)*r21*x12759)))),-1);
if(!x12760.valid){
continue;
}
CheckValue<IkReal> x12761 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x12758))+((r02*sj0)))),IkReal((((cj0*gconst8*r10))+((gconst7*r01*sj0))+(((-1.0)*r00*sj0*x12759))+(((-1.0)*gconst7*r11*x12758)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12761.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12760.value)))+(x12761.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12762=IKsin(j4);
IkReal x12763=IKcos(j4);
IkReal x12764=(cj1*cj2);
IkReal x12765=(sj1*sj2);
IkReal x12766=(gconst8*r20);
IkReal x12767=((1.0)*cj0);
IkReal x12768=((1.0)*sj0);
IkReal x12769=((1.0)*x12762);
IkReal x12770=(gconst7*x12762);
IkReal x12771=((1.0)*x12763);
IkReal x12772=(gconst8*x12763);
evalcond[0]=((((-1.0)*x12766*x12769))+((r21*x12770)));
evalcond[1]=(((cj2*sj1))+((x12763*x12766))+((cj1*sj2))+(((-1.0)*gconst7*r21*x12771)));
evalcond[2]=(((r01*x12770))+(((-1.0)*x12767))+(((-1.0)*r02*x12771))+(((-1.0)*gconst8*r00*x12769)));
evalcond[3]=((((-1.0)*gconst8*r10*x12769))+(((-1.0)*x12768))+(((-1.0)*r12*x12771))+((r11*x12770)));
evalcond[4]=((((-1.0)*r02*x12769))+(((-1.0)*gconst7*r01*x12771))+((sj0*x12764))+(((-1.0)*x12765*x12768))+((r00*x12772)));
evalcond[5]=((((-1.0)*gconst7*r11*x12771))+((cj0*x12765))+(((-1.0)*r12*x12769))+(((-1.0)*x12764*x12767))+((r10*x12772)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12773=(gconst8*r20);
IkReal x12774=(gconst7*r21);
IkReal x12775=(cj2*sj1);
IkReal x12776=(cj1*sj2);
CheckValue<IkReal> x12777=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x12773*x12773)+(((-2.0)*x12773*x12774))+(x12774*x12774))),-1);
if(!x12777.valid){
continue;
}
CheckValue<IkReal> x12778 = IKatan2WithCheck(IkReal((((r22*x12776))+((r22*x12775)))),IkReal(((((-1.0)*x12773*x12776))+(((-1.0)*x12773*x12775))+((x12774*x12775))+((x12774*x12776)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12778.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12777.value)))+(x12778.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12779=IKsin(j4);
IkReal x12780=IKcos(j4);
IkReal x12781=(cj1*cj2);
IkReal x12782=(sj1*sj2);
IkReal x12783=(gconst8*r20);
IkReal x12784=((1.0)*cj0);
IkReal x12785=((1.0)*sj0);
IkReal x12786=((1.0)*x12780);
IkReal x12787=((1.0)*x12779);
IkReal x12788=(gconst7*x12779);
IkReal x12789=(gconst8*x12780);
evalcond[0]=((((-1.0)*x12783*x12787))+((r21*x12788))+(((-1.0)*r22*x12786)));
evalcond[1]=(((r01*x12788))+(((-1.0)*gconst8*r00*x12787))+(((-1.0)*r02*x12786))+(((-1.0)*x12784)));
evalcond[2]=(((r11*x12788))+(((-1.0)*r12*x12786))+(((-1.0)*gconst8*r10*x12787))+(((-1.0)*x12785)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x12787))+((x12780*x12783))+(((-1.0)*gconst7*r21*x12786)));
evalcond[4]=(((sj0*x12781))+(((-1.0)*x12782*x12785))+(((-1.0)*gconst7*r01*x12786))+((r00*x12789))+(((-1.0)*r02*x12787)));
evalcond[5]=(((r10*x12789))+((cj0*x12782))+(((-1.0)*r12*x12787))+(((-1.0)*gconst7*r11*x12786))+(((-1.0)*x12781*x12784)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12790=((1.0)*cj0);
IkReal x12791=((1.0)*gconst8);
CheckValue<IkReal> x12792 = IKatan2WithCheck(IkReal((((r02*sj0))+(((-1.0)*r12*x12790)))),IkReal((((cj0*gconst8*r10))+(((-1.0)*r00*sj0*x12791))+((gconst7*r01*sj0))+(((-1.0)*gconst7*r11*x12790)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12792.valid){
continue;
}
CheckValue<IkReal> x12793=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12791))+(((-1.0)*gconst7*r20)))),-1);
if(!x12793.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12792.value)+(((1.5707963267949)*(x12793.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12794=IKsin(j4);
IkReal x12795=IKcos(j4);
IkReal x12796=(cj1*cj2);
IkReal x12797=(sj1*sj2);
IkReal x12798=(gconst8*r20);
IkReal x12799=((1.0)*cj0);
IkReal x12800=((1.0)*sj0);
IkReal x12801=((1.0)*x12795);
IkReal x12802=((1.0)*x12794);
IkReal x12803=(gconst7*x12794);
IkReal x12804=(gconst8*x12795);
evalcond[0]=(((r21*x12803))+(((-1.0)*r22*x12801))+(((-1.0)*x12798*x12802)));
evalcond[1]=((((-1.0)*x12799))+(((-1.0)*gconst8*r00*x12802))+(((-1.0)*r02*x12801))+((r01*x12803)));
evalcond[2]=((((-1.0)*gconst8*r10*x12802))+(((-1.0)*x12800))+(((-1.0)*r12*x12801))+((r11*x12803)));
evalcond[3]=(((cj2*sj1))+((x12795*x12798))+((cj1*sj2))+(((-1.0)*gconst7*r21*x12801))+(((-1.0)*r22*x12802)));
evalcond[4]=(((sj0*x12796))+(((-1.0)*r02*x12802))+((r00*x12804))+(((-1.0)*x12797*x12800))+(((-1.0)*gconst7*r01*x12801)));
evalcond[5]=(((r10*x12804))+(((-1.0)*gconst7*r11*x12801))+(((-1.0)*r12*x12802))+((cj0*x12797))+(((-1.0)*x12796*x12799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12805 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst8*r20*sj0))+((gconst7*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12805.valid){
continue;
}
CheckValue<IkReal> x12806=IKPowWithIntegerCheck(IKsign((((gconst7*r00))+((gconst8*r01)))),-1);
if(!x12806.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12805.value)+(((1.5707963267949)*(x12806.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12807=IKsin(j4);
IkReal x12808=IKcos(j4);
IkReal x12809=(cj1*cj2);
IkReal x12810=(sj1*sj2);
IkReal x12811=(gconst8*r20);
IkReal x12812=((1.0)*cj0);
IkReal x12813=((1.0)*sj0);
IkReal x12814=((1.0)*x12808);
IkReal x12815=((1.0)*x12807);
IkReal x12816=(gconst7*x12807);
IkReal x12817=(gconst8*x12808);
evalcond[0]=((((-1.0)*x12811*x12815))+((r21*x12816))+(((-1.0)*r22*x12814)));
evalcond[1]=((((-1.0)*gconst8*r00*x12815))+(((-1.0)*x12812))+(((-1.0)*r02*x12814))+((r01*x12816)));
evalcond[2]=((((-1.0)*x12813))+(((-1.0)*r12*x12814))+((r11*x12816))+(((-1.0)*gconst8*r10*x12815)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst7*r21*x12814))+((x12808*x12811))+(((-1.0)*r22*x12815)));
evalcond[4]=((((-1.0)*gconst7*r01*x12814))+(((-1.0)*r02*x12815))+((sj0*x12809))+(((-1.0)*x12810*x12813))+((r00*x12817)));
evalcond[5]=((((-1.0)*x12809*x12812))+(((-1.0)*gconst7*r11*x12814))+(((-1.0)*r12*x12815))+((cj0*x12810))+((r10*x12817)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12818=((-1.0)*r10);
IkReal x12819=x12253;
CheckValue<IkReal> x12821 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12818),IKFAST_ATAN2_MAGTHRESH);
if(!x12821.valid){
continue;
}
IkReal x12820=((-1.0)*(x12821.value));
sj5=gconst7;
cj5=gconst8;
j5=x12820;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst6=x12820;
IkReal gconst7=(r11*x12819);
IkReal gconst8=(x12818*x12819);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12822=((-1.0)*r10);
IkReal x12823=x12253;
CheckValue<IkReal> x12825 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12822),IKFAST_ATAN2_MAGTHRESH);
if(!x12825.valid){
continue;
}
IkReal x12824=((-1.0)*(x12825.value));
sj5=gconst7;
cj5=gconst8;
j5=x12824;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst6=x12824;
IkReal gconst7=(r11*x12823);
IkReal gconst8=(x12822*x12823);
CheckValue<IkReal> x12833=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x12833.valid){
continue;
}
IkReal x12826=x12833.value;
IkReal x12827=(sj3*x12826);
IkReal x12828=(r20*x12827);
IkReal x12829=(r00*x12827);
IkReal x12830=(r01*x12827);
IkReal x12831=(r21*x12827);
IkReal x12832=(r10*r11*x12827);
j4eval[0]=IKsign((((r10*r11*r21*x12829))+((r21*x12830*(r11*r11)))+((r00*x12828*(r10*r10)))+((r01*r10*r11*x12828))+((r02*r22*sj3))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12834=gconst7*gconst7;
IkReal x12835=gconst8*gconst8;
IkReal x12836=(r01*r20);
IkReal x12837=(gconst7*gconst8);
IkReal x12838=((1.0)*cj3);
IkReal x12839=(r22*sj3);
IkReal x12840=(r01*r21);
IkReal x12841=(cj3*r00);
IkReal x12842=(r00*sj3);
IkReal x12843=((1.0)*x12835);
CheckValue<IkReal> x12844 = IKatan2WithCheck(IkReal((((gconst8*r01*x12839))+((gconst7*r00*x12839)))),IkReal((((r21*x12834*x12842))+((sj3*x12837*x12840))+(((-1.0)*sj3*x12836*x12843))+(((-1.0)*r20*x12837*x12842)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12844.valid){
continue;
}
CheckValue<IkReal> x12845=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*r20*x12835*x12838))+(((-1.0)*r02*r22*x12838))+((r21*x12837*x12841))+((cj3*x12836*x12837))+(((-1.0)*x12834*x12838*x12840)))),-1);
if(!x12845.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12844.value)+(((1.5707963267949)*(x12845.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12846=IKsin(j4);
IkReal x12847=IKcos(j4);
IkReal x12848=(sj1*sj2);
IkReal x12849=(gconst7*sj3);
IkReal x12850=(cj3*gconst8);
IkReal x12851=(gconst8*sj3);
IkReal x12852=(gconst7*r01);
IkReal x12853=(gconst7*r11);
IkReal x12854=(cj3*gconst7);
IkReal x12855=((1.0)*cj2);
IkReal x12856=(cj1*sj2);
IkReal x12857=(gconst7*r21);
IkReal x12858=(cj1*x12855);
IkReal x12859=((1.0)*x12847);
IkReal x12860=((1.0)*x12846);
IkReal x12861=(cj3*x12847);
IkReal x12862=(cj3*x12846);
evalcond[0]=((((-1.0)*r22*x12859))+(((-1.0)*gconst8*r20*x12860))+((x12846*x12857)));
evalcond[1]=((((-1.0)*r12*x12859))+((x12846*x12853))+(((-1.0)*gconst8*r10*x12860)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x12859))+(((-1.0)*gconst8*r00*x12860))+((x12846*x12852)));
evalcond[3]=(((r00*x12849))+((r01*x12851))+((x12852*x12861))+(((-1.0)*r00*x12850*x12859))+((r02*x12862)));
evalcond[4]=((((-1.0)*r01*x12849*x12859))+((r00*x12854))+((r01*x12850))+((r00*x12847*x12851))+(((-1.0)*r02*sj3*x12860)));
evalcond[5]=((((-1.0)*r20*x12850*x12859))+((cj2*sj1))+x12856+((r21*x12851))+((r22*x12862))+((r20*x12849))+((r21*x12847*x12854)));
evalcond[6]=(x12848+((r12*x12862))+((r10*x12849))+((r11*x12851))+(((-1.0)*r10*x12850*x12859))+((x12853*x12861))+(((-1.0)*x12858)));
evalcond[7]=(x12848+(((-1.0)*r22*sj3*x12860))+(((-1.0)*r21*x12849*x12859))+((r20*x12847*x12851))+((r21*x12850))+(((-1.0)*x12858))+((r20*x12854)));
evalcond[8]=((((-1.0)*r11*x12849*x12859))+((r10*x12854))+((r10*x12847*x12851))+(((-1.0)*x12856))+((r11*x12850))+(((-1.0)*r12*sj3*x12860))+(((-1.0)*sj1*x12855)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12863=gconst7*gconst7;
IkReal x12864=gconst8*gconst8;
IkReal x12865=(r01*sj3);
IkReal x12866=(gconst7*r00);
IkReal x12867=(cj3*r22);
IkReal x12868=(gconst8*r01);
IkReal x12869=((1.0)*gconst8);
IkReal x12870=(r21*x12863);
IkReal x12871=((1.0)*cj3*r20);
CheckValue<IkReal> x12872 = IKatan2WithCheck(IkReal((((x12867*x12868))+((x12866*x12867)))),IkReal(((((-1.0)*r01*x12864*x12871))+((cj3*r00*x12870))+(((-1.0)*cj3*r20*x12866*x12869))+((cj3*gconst7*r21*x12868)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12872.valid){
continue;
}
CheckValue<IkReal> x12873=IKPowWithIntegerCheck(IKsign((((r00*r20*sj3*x12864))+(((-1.0)*gconst7*r20*x12865*x12869))+((x12865*x12870))+(((-1.0)*r21*sj3*x12866*x12869))+((r02*r22*sj3)))),-1);
if(!x12873.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12872.value)+(((1.5707963267949)*(x12873.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12874=IKsin(j4);
IkReal x12875=IKcos(j4);
IkReal x12876=(sj1*sj2);
IkReal x12877=(gconst7*sj3);
IkReal x12878=(cj3*gconst8);
IkReal x12879=(gconst8*sj3);
IkReal x12880=(gconst7*r01);
IkReal x12881=(gconst7*r11);
IkReal x12882=(cj3*gconst7);
IkReal x12883=((1.0)*cj2);
IkReal x12884=(cj1*sj2);
IkReal x12885=(gconst7*r21);
IkReal x12886=(cj1*x12883);
IkReal x12887=((1.0)*x12875);
IkReal x12888=((1.0)*x12874);
IkReal x12889=(cj3*x12875);
IkReal x12890=(cj3*x12874);
evalcond[0]=((((-1.0)*r22*x12887))+((x12874*x12885))+(((-1.0)*gconst8*r20*x12888)));
evalcond[1]=((((-1.0)*gconst8*r10*x12888))+(((-1.0)*r12*x12887))+((x12874*x12881)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x12887))+((x12874*x12880))+(((-1.0)*gconst8*r00*x12888)));
evalcond[3]=(((r01*x12879))+((r00*x12877))+((r02*x12890))+((x12880*x12889))+(((-1.0)*r00*x12878*x12887)));
evalcond[4]=(((r01*x12878))+((r00*x12882))+(((-1.0)*r01*x12877*x12887))+((r00*x12875*x12879))+(((-1.0)*r02*sj3*x12888)));
evalcond[5]=(((cj2*sj1))+x12884+((r22*x12890))+((r21*x12875*x12882))+((r21*x12879))+((r20*x12877))+(((-1.0)*r20*x12878*x12887)));
evalcond[6]=(((r12*x12890))+(((-1.0)*r10*x12878*x12887))+x12876+(((-1.0)*x12886))+((r10*x12877))+((r11*x12879))+((x12881*x12889)));
evalcond[7]=(x12876+(((-1.0)*x12886))+((r20*x12882))+(((-1.0)*r21*x12877*x12887))+((r20*x12875*x12879))+((r21*x12878))+(((-1.0)*r22*sj3*x12888)));
evalcond[8]=((((-1.0)*sj1*x12883))+(((-1.0)*x12884))+((r11*x12878))+((r10*x12875*x12879))+((r10*x12882))+(((-1.0)*r12*sj3*x12888))+(((-1.0)*r11*x12877*x12887)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12891=IKPowWithIntegerCheck(IKsign((((gconst7*r20))+((gconst8*r21)))),-1);
if(!x12891.valid){
continue;
}
CheckValue<IkReal> x12892 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst7*r11))+(((-1.0)*gconst8*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12892.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12891.value)))+(x12892.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12893=IKsin(j4);
IkReal x12894=IKcos(j4);
IkReal x12895=(sj1*sj2);
IkReal x12896=(gconst7*sj3);
IkReal x12897=(cj3*gconst8);
IkReal x12898=(gconst8*sj3);
IkReal x12899=(gconst7*r01);
IkReal x12900=(gconst7*r11);
IkReal x12901=(cj3*gconst7);
IkReal x12902=((1.0)*cj2);
IkReal x12903=(cj1*sj2);
IkReal x12904=(gconst7*r21);
IkReal x12905=(cj1*x12902);
IkReal x12906=((1.0)*x12894);
IkReal x12907=((1.0)*x12893);
IkReal x12908=(cj3*x12894);
IkReal x12909=(cj3*x12893);
evalcond[0]=(((x12893*x12904))+(((-1.0)*r22*x12906))+(((-1.0)*gconst8*r20*x12907)));
evalcond[1]=(((x12893*x12900))+(((-1.0)*gconst8*r10*x12907))+(((-1.0)*r12*x12906)));
evalcond[2]=((-1.0)+(((-1.0)*gconst8*r00*x12907))+(((-1.0)*r02*x12906))+((x12893*x12899)));
evalcond[3]=(((r01*x12898))+((r00*x12896))+((r02*x12909))+((x12899*x12908))+(((-1.0)*r00*x12897*x12906)));
evalcond[4]=(((r00*x12901))+((r01*x12897))+(((-1.0)*r01*x12896*x12906))+((r00*x12894*x12898))+(((-1.0)*r02*sj3*x12907)));
evalcond[5]=(x12903+((cj2*sj1))+((r21*x12898))+((r21*x12894*x12901))+(((-1.0)*r20*x12897*x12906))+((r20*x12896))+((r22*x12909)));
evalcond[6]=(x12895+(((-1.0)*x12905))+(((-1.0)*r10*x12897*x12906))+((r10*x12896))+((r12*x12909))+((x12900*x12908))+((r11*x12898)));
evalcond[7]=(x12895+((r21*x12897))+(((-1.0)*x12905))+(((-1.0)*r21*x12896*x12906))+((r20*x12901))+((r20*x12894*x12898))+(((-1.0)*r22*sj3*x12907)));
evalcond[8]=((((-1.0)*r12*sj3*x12907))+(((-1.0)*x12903))+((r10*x12894*x12898))+(((-1.0)*sj1*x12902))+(((-1.0)*r11*x12896*x12906))+((r10*x12901))+((r11*x12897)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12910=((-1.0)*r10);
IkReal x12911=x12253;
CheckValue<IkReal> x12913 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12910),IKFAST_ATAN2_MAGTHRESH);
if(!x12913.valid){
continue;
}
IkReal x12912=((-1.0)*(x12913.value));
sj5=gconst7;
cj5=gconst8;
j5=x12912;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst6=x12912;
IkReal gconst7=(r11*x12911);
IkReal gconst8=(x12910*x12911);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12914=((-1.0)*r10);
IkReal x12915=x12253;
CheckValue<IkReal> x12917 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12914),IKFAST_ATAN2_MAGTHRESH);
if(!x12917.valid){
continue;
}
IkReal x12916=((-1.0)*(x12917.value));
sj5=gconst7;
cj5=gconst8;
j5=x12916;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst6=x12916;
IkReal gconst7=(r11*x12915);
IkReal gconst8=(x12914*x12915);
CheckValue<IkReal> x12925=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x12925.valid){
continue;
}
IkReal x12918=x12925.value;
IkReal x12919=(sj3*x12918);
IkReal x12920=(r20*x12919);
IkReal x12921=(r00*x12919);
IkReal x12922=(r01*x12919);
IkReal x12923=(r21*x12919);
IkReal x12924=(r10*r11*x12919);
j4eval[0]=IKsign((((r01*r10*r11*x12920))+((r00*x12920*(r10*r10)))+((r10*r11*r21*x12921))+((r02*r22*sj3))+((r21*x12922*(r11*r11)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12926=gconst7*gconst7;
IkReal x12927=gconst8*gconst8;
IkReal x12928=(r01*r20);
IkReal x12929=(gconst7*gconst8);
IkReal x12930=((1.0)*cj3);
IkReal x12931=(r22*sj3);
IkReal x12932=(r01*r21);
IkReal x12933=(cj3*r00);
IkReal x12934=(r00*sj3);
IkReal x12935=((1.0)*x12927);
CheckValue<IkReal> x12936=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22*x12930))+((r21*x12929*x12933))+(((-1.0)*x12926*x12930*x12932))+((cj3*x12928*x12929))+(((-1.0)*r00*r20*x12927*x12930)))),-1);
if(!x12936.valid){
continue;
}
CheckValue<IkReal> x12937 = IKatan2WithCheck(IkReal((((gconst8*r01*x12931))+((gconst7*r00*x12931)))),IkReal(((((-1.0)*sj3*x12928*x12935))+((r21*x12926*x12934))+((sj3*x12929*x12932))+(((-1.0)*r20*x12929*x12934)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12937.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12936.value)))+(x12937.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12938=IKsin(j4);
IkReal x12939=IKcos(j4);
IkReal x12940=(cj2*sj1);
IkReal x12941=(cj1*sj2);
IkReal x12942=(gconst7*sj3);
IkReal x12943=(cj3*gconst8);
IkReal x12944=(gconst8*sj3);
IkReal x12945=(gconst7*r01);
IkReal x12946=(sj1*sj2);
IkReal x12947=(gconst7*r11);
IkReal x12948=(cj3*gconst7);
IkReal x12949=(cj1*cj2);
IkReal x12950=(gconst7*r21);
IkReal x12951=((1.0)*x12939);
IkReal x12952=((1.0)*x12938);
IkReal x12953=(cj3*x12939);
IkReal x12954=(cj3*x12938);
IkReal x12955=(x12941+x12940);
evalcond[0]=((((-1.0)*gconst8*r20*x12952))+((x12938*x12950))+(((-1.0)*r22*x12951)));
evalcond[1]=((((-1.0)*r12*x12951))+((x12938*x12947))+(((-1.0)*gconst8*r10*x12952)));
evalcond[2]=((1.0)+((x12938*x12945))+(((-1.0)*gconst8*r00*x12952))+(((-1.0)*r02*x12951)));
evalcond[3]=(((x12945*x12953))+((r00*x12942))+((r01*x12944))+((r02*x12954))+(((-1.0)*r00*x12943*x12951)));
evalcond[4]=(((r00*x12948))+((r01*x12943))+(((-1.0)*r02*sj3*x12952))+(((-1.0)*r01*x12942*x12951))+((r00*x12939*x12944)));
evalcond[5]=(x12955+((r22*x12954))+((r21*x12944))+(((-1.0)*r20*x12943*x12951))+((r20*x12942))+((r21*x12939*x12948)));
evalcond[6]=(x12949+((r10*x12942))+((x12947*x12953))+((r12*x12954))+(((-1.0)*r10*x12943*x12951))+((r11*x12944))+(((-1.0)*x12946)));
evalcond[7]=(x12955+((r10*x12939*x12944))+((r10*x12948))+(((-1.0)*r12*sj3*x12952))+((r11*x12943))+(((-1.0)*r11*x12942*x12951)));
evalcond[8]=(x12946+(((-1.0)*r22*sj3*x12952))+(((-1.0)*r21*x12942*x12951))+((r20*x12939*x12944))+((r21*x12943))+(((-1.0)*x12949))+((r20*x12948)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12956=gconst7*gconst7;
IkReal x12957=gconst8*gconst8;
IkReal x12958=(r01*sj3);
IkReal x12959=(gconst7*r00);
IkReal x12960=(cj3*r22);
IkReal x12961=(gconst8*r01);
IkReal x12962=((1.0)*gconst8);
IkReal x12963=(r21*x12956);
IkReal x12964=((1.0)*cj3*r20);
CheckValue<IkReal> x12965 = IKatan2WithCheck(IkReal((((x12959*x12960))+((x12960*x12961)))),IkReal((((cj3*r00*x12963))+((cj3*gconst7*r21*x12961))+(((-1.0)*cj3*r20*x12959*x12962))+(((-1.0)*r01*x12957*x12964)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12965.valid){
continue;
}
CheckValue<IkReal> x12966=IKPowWithIntegerCheck(IKsign((((r00*r20*sj3*x12957))+(((-1.0)*gconst7*r20*x12958*x12962))+(((-1.0)*r21*sj3*x12959*x12962))+((r02*r22*sj3))+((x12958*x12963)))),-1);
if(!x12966.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12965.value)+(((1.5707963267949)*(x12966.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12967=IKsin(j4);
IkReal x12968=IKcos(j4);
IkReal x12969=(cj2*sj1);
IkReal x12970=(cj1*sj2);
IkReal x12971=(gconst7*sj3);
IkReal x12972=(cj3*gconst8);
IkReal x12973=(gconst8*sj3);
IkReal x12974=(gconst7*r01);
IkReal x12975=(sj1*sj2);
IkReal x12976=(gconst7*r11);
IkReal x12977=(cj3*gconst7);
IkReal x12978=(cj1*cj2);
IkReal x12979=(gconst7*r21);
IkReal x12980=((1.0)*x12968);
IkReal x12981=((1.0)*x12967);
IkReal x12982=(cj3*x12968);
IkReal x12983=(cj3*x12967);
IkReal x12984=(x12969+x12970);
evalcond[0]=((((-1.0)*r22*x12980))+((x12967*x12979))+(((-1.0)*gconst8*r20*x12981)));
evalcond[1]=((((-1.0)*gconst8*r10*x12981))+((x12967*x12976))+(((-1.0)*r12*x12980)));
evalcond[2]=((1.0)+((x12967*x12974))+(((-1.0)*r02*x12980))+(((-1.0)*gconst8*r00*x12981)));
evalcond[3]=(((r01*x12973))+((r00*x12971))+(((-1.0)*r00*x12972*x12980))+((x12974*x12982))+((r02*x12983)));
evalcond[4]=(((r01*x12972))+((r00*x12977))+((r00*x12968*x12973))+(((-1.0)*r01*x12971*x12980))+(((-1.0)*r02*sj3*x12981)));
evalcond[5]=(x12984+(((-1.0)*r20*x12972*x12980))+((r22*x12983))+((r20*x12971))+((r21*x12973))+((r21*x12968*x12977)));
evalcond[6]=(x12978+(((-1.0)*r10*x12972*x12980))+(((-1.0)*x12975))+((r12*x12983))+((x12976*x12982))+((r11*x12973))+((r10*x12971)));
evalcond[7]=(x12984+(((-1.0)*r11*x12971*x12980))+(((-1.0)*r12*sj3*x12981))+((r10*x12968*x12973))+((r11*x12972))+((r10*x12977)));
evalcond[8]=(x12975+(((-1.0)*r21*x12971*x12980))+((r20*x12977))+(((-1.0)*x12978))+(((-1.0)*r22*sj3*x12981))+((r20*x12968*x12973))+((r21*x12972)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12985=((1.0)*gconst8);
CheckValue<IkReal> x12986=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst7*r20))+(((-1.0)*r21*x12985)))),-1);
if(!x12986.valid){
continue;
}
CheckValue<IkReal> x12987 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst7*r11))+(((-1.0)*r10*x12985)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12987.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12986.value)))+(x12987.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12988=IKsin(j4);
IkReal x12989=IKcos(j4);
IkReal x12990=(cj2*sj1);
IkReal x12991=(cj1*sj2);
IkReal x12992=(gconst7*sj3);
IkReal x12993=(cj3*gconst8);
IkReal x12994=(gconst8*sj3);
IkReal x12995=(gconst7*r01);
IkReal x12996=(sj1*sj2);
IkReal x12997=(gconst7*r11);
IkReal x12998=(cj3*gconst7);
IkReal x12999=(cj1*cj2);
IkReal x13000=(gconst7*r21);
IkReal x13001=((1.0)*x12989);
IkReal x13002=((1.0)*x12988);
IkReal x13003=(cj3*x12989);
IkReal x13004=(cj3*x12988);
IkReal x13005=(x12990+x12991);
evalcond[0]=((((-1.0)*gconst8*r20*x13002))+(((-1.0)*r22*x13001))+((x12988*x13000)));
evalcond[1]=((((-1.0)*r12*x13001))+((x12988*x12997))+(((-1.0)*gconst8*r10*x13002)));
evalcond[2]=((1.0)+((x12988*x12995))+(((-1.0)*r02*x13001))+(((-1.0)*gconst8*r00*x13002)));
evalcond[3]=(((r01*x12994))+((r00*x12992))+((r02*x13004))+((x12995*x13003))+(((-1.0)*r00*x12993*x13001)));
evalcond[4]=((((-1.0)*r02*sj3*x13002))+((r01*x12993))+((r00*x12998))+(((-1.0)*r01*x12992*x13001))+((r00*x12989*x12994)));
evalcond[5]=(((r21*x12989*x12998))+(((-1.0)*r20*x12993*x13001))+((r21*x12994))+((r20*x12992))+x13005+((r22*x13004)));
evalcond[6]=(x12999+((r10*x12992))+((r12*x13004))+((r11*x12994))+(((-1.0)*r10*x12993*x13001))+((x12997*x13003))+(((-1.0)*x12996)));
evalcond[7]=(((r10*x12998))+((r10*x12989*x12994))+((r11*x12993))+x13005+(((-1.0)*r12*sj3*x13002))+(((-1.0)*r11*x12992*x13001)));
evalcond[8]=(x12996+(((-1.0)*r22*sj3*x13002))+(((-1.0)*r21*x12992*x13001))+((r21*x12993))+((r20*x12989*x12994))+((r20*x12998))+(((-1.0)*x12999)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13006=((-1.0)*r10);
IkReal x13007=((-1.0)*r11);
CheckValue<IkReal> x13009 = IKatan2WithCheck(IkReal(x13007),IkReal(x13006),IKFAST_ATAN2_MAGTHRESH);
if(!x13009.valid){
continue;
}
IkReal x13008=((-1.0)*(x13009.value));
sj5=gconst7;
cj5=gconst8;
j5=x13008;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x13006);
rxp1_1=(px*r21);
rxp1_2=(px*x13007);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst6=x13008;
IkReal gconst7=r11;
IkReal gconst8=x13006;
j4eval[0]=1.0;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13010=((-1.0)*r10);
IkReal x13011=((-1.0)*r11);
CheckValue<IkReal> x13013 = IKatan2WithCheck(IkReal(x13011),IkReal(x13010),IKFAST_ATAN2_MAGTHRESH);
if(!x13013.valid){
continue;
}
IkReal x13012=((-1.0)*(x13013.value));
sj5=gconst7;
cj5=gconst8;
j5=x13012;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x13010);
rxp1_1=(px*r21);
rxp1_2=(px*x13011);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst6=x13012;
IkReal gconst7=r11;
IkReal gconst8=x13010;
j4eval[0]=1.0;
j4eval[1]=(((cj3*r10*r20))+((cj3*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13014=((-1.0)*r10);
IkReal x13015=((-1.0)*r11);
CheckValue<IkReal> x13017 = IKatan2WithCheck(IkReal(x13015),IkReal(x13014),IKFAST_ATAN2_MAGTHRESH);
if(!x13017.valid){
continue;
}
IkReal x13016=((-1.0)*(x13017.value));
sj5=gconst7;
cj5=gconst8;
j5=x13016;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x13014);
rxp1_1=(px*r21);
rxp1_2=(px*x13015);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst6=x13016;
IkReal gconst7=r11;
IkReal gconst8=x13014;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13018=((-1.0)*r10);
IkReal x13019=((-1.0)*r11);
CheckValue<IkReal> x13021 = IKatan2WithCheck(IkReal(x13019),IkReal(x13018),IKFAST_ATAN2_MAGTHRESH);
if(!x13021.valid){
continue;
}
IkReal x13020=((-1.0)*(x13021.value));
sj5=gconst7;
cj5=gconst8;
j5=x13020;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x13018);
rxp1_1=(px*r21);
rxp1_2=(px*x13019);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst6=x13020;
IkReal gconst7=r11;
IkReal gconst8=x13018;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13022=((-1.0)*r10);
IkReal x13023=((-1.0)*r11);
CheckValue<IkReal> x13025 = IKatan2WithCheck(IkReal(x13023),IkReal(x13022),IKFAST_ATAN2_MAGTHRESH);
if(!x13025.valid){
continue;
}
IkReal x13024=((-1.0)*(x13025.value));
sj5=gconst7;
cj5=gconst8;
j5=x13024;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x13022);
rxp1_1=(px*r21);
rxp1_2=(px*x13023);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst6=x13024;
IkReal gconst7=r11;
IkReal gconst8=x13022;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13026=((-1.0)*r10);
IkReal x13027=((-1.0)*r11);
CheckValue<IkReal> x13029 = IKatan2WithCheck(IkReal(x13027),IkReal(x13026),IKFAST_ATAN2_MAGTHRESH);
if(!x13029.valid){
continue;
}
IkReal x13028=((-1.0)*(x13029.value));
sj5=gconst7;
cj5=gconst8;
j5=x13028;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x13026);
rxp1_1=(px*r21);
rxp1_2=(px*x13027);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst6=x13028;
IkReal gconst7=r11;
IkReal gconst8=x13026;
j4eval[0]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x13032=IKPowWithIntegerCheck(((((-1.0)*gconst7*r11))+((gconst8*r10))),-1);
if(!x13032.valid){
continue;
}
IkReal x13030=x13032.value;
IkReal x13031=(cj0*x13030);
cj4array[0]=(((cj1*sj2*x13031))+((cj2*sj1*x13031)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x13033=IKsin(j4);
IkReal x13034=IKcos(j4);
IkReal x13035=(gconst7*r21);
IkReal x13036=(gconst8*r20);
IkReal x13037=((1.0)*x13034);
IkReal x13038=((1.0)*x13033);
evalcond[0]=((-1.0)*r02*x13033);
evalcond[1]=((((-1.0)*r02*x13037))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*x13036*x13038))+((x13033*x13035)));
evalcond[3]=(((gconst7*r11*x13033))+(((-1.0)*gconst8*r10*x13038)));
evalcond[4]=((((-1.0)*x13035*x13037))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x13034*x13036)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x13040=IKPowWithIntegerCheck(((((-1.0)*gconst7*r21))+((gconst8*r20))),-1);
if(!x13040.valid){
continue;
}
IkReal x13039=x13040.value;
cj4array[0]=((((-1.0)*sj1*sj2*x13039))+((cj1*cj2*x13039)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x13041=IKsin(j4);
IkReal x13042=IKcos(j4);
IkReal x13043=(gconst8*r10);
IkReal x13044=((1.0)*cj0);
IkReal x13045=((1.0)*x13041);
IkReal x13046=((1.0)*x13042);
IkReal x13047=(gconst7*x13041);
evalcond[0]=((-1.0)*r02*x13041);
evalcond[1]=((((-1.0)*r02*x13046))+(((-1.0)*x13044)));
evalcond[2]=(((r21*x13047))+(((-1.0)*gconst8*r20*x13045)));
evalcond[3]=(((r11*x13047))+(((-1.0)*x13043*x13045)));
evalcond[4]=((((-1.0)*cj2*sj1*x13044))+((x13042*x13043))+(((-1.0)*cj1*sj2*x13044))+(((-1.0)*gconst7*r11*x13046)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x13048=IKPowWithIntegerCheck(r02,-1);
if(!x13048.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x13048.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x13049=IKsin(j4);
IkReal x13050=IKcos(j4);
IkReal x13051=(gconst7*r21);
IkReal x13052=((1.0)*cj0);
IkReal x13053=(gconst7*r11);
IkReal x13054=(gconst8*x13050);
IkReal x13055=((1.0)*x13050);
IkReal x13056=((1.0)*gconst8*x13049);
evalcond[0]=((-1.0)*r02*x13049);
evalcond[1]=((((-1.0)*r20*x13056))+((x13049*x13051)));
evalcond[2]=((((-1.0)*r10*x13056))+((x13049*x13053)));
evalcond[3]=(((r20*x13054))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x13051*x13055)));
evalcond[4]=((((-1.0)*cj2*sj1*x13052))+((r10*x13054))+(((-1.0)*cj1*sj2*x13052))+(((-1.0)*x13053*x13055)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13057=((-1.0)*r10);
IkReal x13058=((-1.0)*r11);
CheckValue<IkReal> x13060 = IKatan2WithCheck(IkReal(x13058),IkReal(x13057),IKFAST_ATAN2_MAGTHRESH);
if(!x13060.valid){
continue;
}
IkReal x13059=((-1.0)*(x13060.value));
sj5=gconst7;
cj5=gconst8;
j5=x13059;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x13057);
rxp1_1=(px*r21);
rxp1_2=(px*x13058);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst6=x13059;
IkReal gconst7=r11;
IkReal gconst8=x13057;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13061=((-1.0)*r10);
IkReal x13062=((-1.0)*r11);
CheckValue<IkReal> x13064 = IKatan2WithCheck(IkReal(x13062),IkReal(x13061),IKFAST_ATAN2_MAGTHRESH);
if(!x13064.valid){
continue;
}
IkReal x13063=((-1.0)*(x13064.value));
sj5=gconst7;
cj5=gconst8;
j5=x13063;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x13061);
rxp1_1=(px*r21);
rxp1_2=(px*x13062);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst6=x13063;
IkReal gconst7=r11;
IkReal gconst8=x13061;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13065=((-1.0)*r10);
IkReal x13066=((-1.0)*r11);
CheckValue<IkReal> x13068 = IKatan2WithCheck(IkReal(x13066),IkReal(x13065),IKFAST_ATAN2_MAGTHRESH);
if(!x13068.valid){
continue;
}
IkReal x13067=((-1.0)*(x13068.value));
sj5=gconst7;
cj5=gconst8;
j5=x13067;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x13065);
rxp1_1=(px*r21);
rxp1_2=(px*x13066);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst6=x13067;
IkReal gconst7=r11;
IkReal gconst8=x13065;
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x13071=IKPowWithIntegerCheck((((gconst7*r11))+(((-1.0)*gconst8*r10))),-1);
if(!x13071.valid){
continue;
}
IkReal x13069=x13071.value;
IkReal x13070=(cj0*x13069);
cj4array[0]=(((cj1*sj2*x13070))+((cj2*sj1*x13070)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x13072=IKsin(j4);
IkReal x13073=IKcos(j4);
IkReal x13074=(gconst7*r21);
IkReal x13075=((1.0)*gconst8*r20);
evalcond[0]=(r02*x13072);
evalcond[1]=((((-1.0)*r02*x13073))+(((-1.0)*cj0)));
evalcond[2]=(((x13072*x13074))+(((-1.0)*x13072*x13075)));
evalcond[3]=(((gconst7*r11*x13072))+(((-1.0)*gconst8*r10*x13072)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x13073*x13074))+(((-1.0)*x13073*x13075)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x13077=IKPowWithIntegerCheck((((gconst7*r21))+(((-1.0)*gconst8*r20))),-1);
if(!x13077.valid){
continue;
}
IkReal x13076=x13077.value;
cj4array[0]=((((-1.0)*sj1*sj2*x13076))+((cj1*cj2*x13076)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x13078=IKsin(j4);
IkReal x13079=IKcos(j4);
IkReal x13080=((1.0)*cj0);
IkReal x13081=((1.0)*gconst8);
IkReal x13082=(gconst7*x13078);
evalcond[0]=(r02*x13078);
evalcond[1]=((((-1.0)*x13080))+(((-1.0)*r02*x13079)));
evalcond[2]=((((-1.0)*r20*x13078*x13081))+((r21*x13082)));
evalcond[3]=(((r11*x13082))+(((-1.0)*r10*x13078*x13081)));
evalcond[4]=(((gconst7*r11*x13079))+(((-1.0)*r10*x13079*x13081))+(((-1.0)*cj1*sj2*x13080))+(((-1.0)*cj2*sj1*x13080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x13083=IKPowWithIntegerCheck(r02,-1);
if(!x13083.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x13083.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x13084=IKsin(j4);
IkReal x13085=IKcos(j4);
IkReal x13086=((1.0)*cj2);
IkReal x13087=(gconst7*x13084);
IkReal x13088=(gconst7*x13085);
IkReal x13089=((1.0)*gconst8*x13085);
IkReal x13090=((1.0)*gconst8*x13084);
evalcond[0]=(r02*x13084);
evalcond[1]=((((-1.0)*r20*x13090))+((r21*x13087)));
evalcond[2]=(((r11*x13087))+(((-1.0)*r10*x13090)));
evalcond[3]=((((-1.0)*cj1*x13086))+((sj1*sj2))+(((-1.0)*r20*x13089))+((r21*x13088)));
evalcond[4]=(((r11*x13088))+(((-1.0)*cj0*cj1*sj2))+(((-1.0)*r10*x13089))+(((-1.0)*cj0*sj1*x13086)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13092=IKPowWithIntegerCheck(r02,-1);
if(!x13092.valid){
continue;
}
IkReal x13091=x13092.value;
CheckValue<IkReal> x13093=IKPowWithIntegerCheck(sj3,-1);
if(!x13093.valid){
continue;
}
if( IKabs((x13091*(x13093.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x13091)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x13091*(x13093.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((-1.0)*cj0*x13091))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x13091*(x13093.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((-1.0)*cj0*x13091));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13094=IKsin(j4);
IkReal x13095=IKcos(j4);
IkReal x13096=(gconst7*sj3);
IkReal x13097=(cj3*gconst8);
IkReal x13098=(gconst8*r20);
IkReal x13099=(cj2*sj0);
IkReal x13100=(sj1*sj2);
IkReal x13101=(cj3*gconst7);
IkReal x13102=(cj2*sj1);
IkReal x13103=((1.0)*cj0);
IkReal x13104=((1.0)*sj0);
IkReal x13105=(gconst8*r10);
IkReal x13106=(gconst8*sj3);
IkReal x13107=(cj1*sj2);
IkReal x13108=(sj3*x13095);
IkReal x13109=((1.0)*x13095);
IkReal x13110=((1.0)*x13094);
IkReal x13111=((1.0)*cj1*cj2);
IkReal x13112=(gconst7*x13094);
evalcond[0]=((((-1.0)*x13103))+(((-1.0)*r02*x13109)));
evalcond[1]=(((r21*x13112))+(((-1.0)*x13098*x13110)));
evalcond[2]=(((sj1*x13099))+((sj0*x13107))+(((-1.0)*r02*sj3*x13110)));
evalcond[3]=(((cj1*x13099))+(((-1.0)*x13100*x13104))+((cj3*r02*x13094)));
evalcond[4]=((((-1.0)*x13105*x13110))+(((-1.0)*x13104))+((r11*x13112)));
evalcond[5]=(((r21*x13095*x13101))+(((-1.0)*r20*x13097*x13109))+x13107+x13102+((r21*x13106))+((r20*x13096)));
evalcond[6]=(((x13098*x13108))+((r20*x13101))+(((-1.0)*x13111))+(((-1.0)*r21*x13096*x13109))+x13100+((r21*x13097)));
evalcond[7]=(((r11*x13095*x13101))+(((-1.0)*cj1*cj2*x13103))+((cj0*x13100))+((r11*x13106))+(((-1.0)*r10*x13097*x13109))+((r10*x13096)));
evalcond[8]=(((x13105*x13108))+(((-1.0)*r11*x13096*x13109))+((r11*x13097))+(((-1.0)*x13102*x13103))+(((-1.0)*x13103*x13107))+((r10*x13101)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13113=((1.0)*gconst8);
CheckValue<IkReal> x13114=IKPowWithIntegerCheck((((gconst7*r11))+(((-1.0)*r10*x13113))),-1);
if(!x13114.valid){
continue;
}
CheckValue<IkReal> x13115=IKPowWithIntegerCheck(((((-1.0)*cj3*r20*x13113))+((cj3*gconst7*r21))),-1);
if(!x13115.valid){
continue;
}
if( IKabs((sj0*(x13114.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13115.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst7*r20*sj3))+(((-1.0)*r21*sj3*x13113)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*(x13114.value)))+IKsqr(((x13115.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst7*r20*sj3))+(((-1.0)*r21*sj3*x13113))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*(x13114.value)), ((x13115.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst7*r20*sj3))+(((-1.0)*r21*sj3*x13113))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13116=IKsin(j4);
IkReal x13117=IKcos(j4);
IkReal x13118=(gconst7*sj3);
IkReal x13119=(cj3*gconst8);
IkReal x13120=(gconst8*r20);
IkReal x13121=(cj2*sj0);
IkReal x13122=(sj1*sj2);
IkReal x13123=(cj3*gconst7);
IkReal x13124=(cj2*sj1);
IkReal x13125=((1.0)*cj0);
IkReal x13126=((1.0)*sj0);
IkReal x13127=(gconst8*r10);
IkReal x13128=(gconst8*sj3);
IkReal x13129=(cj1*sj2);
IkReal x13130=(sj3*x13117);
IkReal x13131=((1.0)*x13117);
IkReal x13132=((1.0)*x13116);
IkReal x13133=((1.0)*cj1*cj2);
IkReal x13134=(gconst7*x13116);
evalcond[0]=((((-1.0)*x13125))+(((-1.0)*r02*x13131)));
evalcond[1]=(((r21*x13134))+(((-1.0)*x13120*x13132)));
evalcond[2]=((((-1.0)*r02*sj3*x13132))+((sj1*x13121))+((sj0*x13129)));
evalcond[3]=(((cj3*r02*x13116))+((cj1*x13121))+(((-1.0)*x13122*x13126)));
evalcond[4]=(((r11*x13134))+(((-1.0)*x13126))+(((-1.0)*x13127*x13132)));
evalcond[5]=(((r21*x13128))+((r20*x13118))+x13124+x13129+((r21*x13117*x13123))+(((-1.0)*r20*x13119*x13131)));
evalcond[6]=(((r20*x13123))+((r21*x13119))+((x13120*x13130))+(((-1.0)*x13133))+x13122+(((-1.0)*r21*x13118*x13131)));
evalcond[7]=((((-1.0)*r10*x13119*x13131))+((r11*x13128))+((r11*x13117*x13123))+((r10*x13118))+(((-1.0)*cj1*cj2*x13125))+((cj0*x13122)));
evalcond[8]=(((r10*x13123))+(((-1.0)*x13124*x13125))+(((-1.0)*x13125*x13129))+(((-1.0)*r11*x13118*x13131))+((x13127*x13130))+((r11*x13119)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13135=IKPowWithIntegerCheck((((gconst7*r11))+(((-1.0)*gconst8*r10))),-1);
if(!x13135.valid){
continue;
}
CheckValue<IkReal> x13136=IKPowWithIntegerCheck(r02,-1);
if(!x13136.valid){
continue;
}
if( IKabs((sj0*(x13135.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x13136.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*(x13135.value)))+IKsqr(((-1.0)*cj0*(x13136.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*(x13135.value)), ((-1.0)*cj0*(x13136.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13137=IKsin(j4);
IkReal x13138=IKcos(j4);
IkReal x13139=(gconst7*sj3);
IkReal x13140=(cj3*gconst8);
IkReal x13141=(gconst8*r20);
IkReal x13142=(cj2*sj0);
IkReal x13143=(sj1*sj2);
IkReal x13144=(cj3*gconst7);
IkReal x13145=(cj2*sj1);
IkReal x13146=((1.0)*cj0);
IkReal x13147=((1.0)*sj0);
IkReal x13148=(gconst8*r10);
IkReal x13149=(gconst8*sj3);
IkReal x13150=(cj1*sj2);
IkReal x13151=(sj3*x13138);
IkReal x13152=((1.0)*x13138);
IkReal x13153=((1.0)*x13137);
IkReal x13154=((1.0)*cj1*cj2);
IkReal x13155=(gconst7*x13137);
evalcond[0]=((((-1.0)*r02*x13152))+(((-1.0)*x13146)));
evalcond[1]=(((r21*x13155))+(((-1.0)*x13141*x13153)));
evalcond[2]=(((sj0*x13150))+(((-1.0)*r02*sj3*x13153))+((sj1*x13142)));
evalcond[3]=((((-1.0)*x13143*x13147))+((cj1*x13142))+((cj3*r02*x13137)));
evalcond[4]=((((-1.0)*x13148*x13153))+((r11*x13155))+(((-1.0)*x13147)));
evalcond[5]=(((r20*x13139))+(((-1.0)*r20*x13140*x13152))+x13150+x13145+((r21*x13149))+((r21*x13138*x13144)));
evalcond[6]=((((-1.0)*x13154))+((x13141*x13151))+((r20*x13144))+(((-1.0)*r21*x13139*x13152))+x13143+((r21*x13140)));
evalcond[7]=(((r10*x13139))+((r11*x13149))+(((-1.0)*r10*x13140*x13152))+((r11*x13138*x13144))+(((-1.0)*cj1*cj2*x13146))+((cj0*x13143)));
evalcond[8]=((((-1.0)*x13146*x13150))+((r11*x13140))+(((-1.0)*r11*x13139*x13152))+(((-1.0)*x13145*x13146))+((x13148*x13151))+((r10*x13144)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13156=((-1.0)*r10);
IkReal x13157=x12253;
CheckValue<IkReal> x13159 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x13156),IKFAST_ATAN2_MAGTHRESH);
if(!x13159.valid){
continue;
}
IkReal x13158=((-1.0)*(x13159.value));
sj5=gconst7;
cj5=gconst8;
j5=x13158;
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst6=x13158;
IkReal gconst7=(r11*x13157);
IkReal gconst8=(x13156*x13157);
IkReal x13160=r12*r12;
IkReal x13161=((1.0)*cj0);
IkReal x13162=(r02*sj0);
CheckValue<IkReal> x13166=IKPowWithIntegerCheck(((-1.0)+x13160),-1);
if(!x13166.valid){
continue;
}
IkReal x13163=x13166.value;
if((((1.0)+(((-1.0)*x13160)))) < -0.00001)
continue;
IkReal x13164=IKsqrt(((1.0)+(((-1.0)*x13160))));
IkReal x13165=(x13163*x13164);
j4eval[0]=((IKabs(((((-1.0)*r12*x13161))+x13162)))+(IKabs(((((-1.0)*x13160*x13161*x13165))+((r12*x13162*x13165))+((cj0*x13165))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13167=(cj1*cj2);
IkReal x13168=((1.0)*sj3);
IkReal x13169=(gconst7*r21);
IkReal x13170=((1.0)*sj1*sj2);
IkReal x13171=(gconst8*r20*sj3);
IkReal x13172=((1.0)*cj3*gconst8*r21);
IkReal x13173=((1.0)*cj3*gconst7*r20);
CheckValue<IkReal> x13174=IKPowWithIntegerCheck((((gconst8*r00*sj3*x13169))+(((-1.0)*gconst7*r01*x13168*x13169))+(((-1.0)*r00*r20*x13168*(gconst8*gconst8)))+((gconst7*r01*x13171))),-1);
if(!x13174.valid){
continue;
}
CheckValue<IkReal> x13175=IKPowWithIntegerCheck(((((-1.0)*x13168*x13169))+x13171),-1);
if(!x13175.valid){
continue;
}
if( IKabs(((x13174.value)*((((r02*x13167))+(((-1.0)*cj0*x13168*x13169))+((cj0*x13171))+(((-1.0)*r02*x13170))+(((-1.0)*r02*x13172))+(((-1.0)*r02*x13173)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13175.value)*(((((-1.0)*x13170))+(((-1.0)*x13172))+(((-1.0)*x13173))+x13167)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13174.value)*((((r02*x13167))+(((-1.0)*cj0*x13168*x13169))+((cj0*x13171))+(((-1.0)*r02*x13170))+(((-1.0)*r02*x13172))+(((-1.0)*r02*x13173))))))+IKsqr(((x13175.value)*(((((-1.0)*x13170))+(((-1.0)*x13172))+(((-1.0)*x13173))+x13167))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13174.value)*((((r02*x13167))+(((-1.0)*cj0*x13168*x13169))+((cj0*x13171))+(((-1.0)*r02*x13170))+(((-1.0)*r02*x13172))+(((-1.0)*r02*x13173))))), ((x13175.value)*(((((-1.0)*x13170))+(((-1.0)*x13172))+(((-1.0)*x13173))+x13167))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13176=IKsin(j4);
IkReal x13177=IKcos(j4);
IkReal x13178=((1.0)*sj3);
IkReal x13179=(gconst7*sj3);
IkReal x13180=(cj3*gconst8);
IkReal x13181=(gconst8*r20);
IkReal x13182=(cj2*sj0);
IkReal x13183=(sj1*sj2);
IkReal x13184=(cj3*gconst7);
IkReal x13185=(cj2*sj1);
IkReal x13186=((1.0)*cj0);
IkReal x13187=((1.0)*sj0);
IkReal x13188=(gconst8*r10);
IkReal x13189=(gconst8*r00);
IkReal x13190=(gconst8*sj3);
IkReal x13191=(cj1*sj2);
IkReal x13192=(r12*x13176);
IkReal x13193=(sj3*x13177);
IkReal x13194=(gconst7*x13177);
IkReal x13195=((1.0)*x13176);
IkReal x13196=((1.0)*cj1*cj2);
IkReal x13197=(gconst7*x13176);
IkReal x13198=((1.0)*x13177);
IkReal x13199=(r02*x13176);
evalcond[0]=(((r21*x13197))+(((-1.0)*x13181*x13195)));
evalcond[1]=((((-1.0)*x13186))+(((-1.0)*r02*x13198))+((r01*x13197))+(((-1.0)*x13189*x13195)));
evalcond[2]=((((-1.0)*x13187))+(((-1.0)*r12*x13198))+((r11*x13197))+(((-1.0)*x13188*x13195)));
evalcond[3]=(((r20*x13179))+((r21*x13190))+(((-1.0)*r20*x13180*x13198))+((r21*x13177*x13184))+x13191+x13185);
evalcond[4]=((((-1.0)*x13196))+((r21*x13180))+(((-1.0)*r21*x13178*x13194))+((r20*x13184))+x13183+((x13181*x13193)));
evalcond[5]=((((-1.0)*x13178*x13199))+(((-1.0)*r01*x13178*x13194))+((sj0*x13191))+((r01*x13180))+((sj1*x13182))+((r00*x13184))+((x13189*x13193)));
evalcond[6]=(((r00*x13179))+(((-1.0)*x13183*x13187))+((r01*x13190))+((cj1*x13182))+((r01*x13177*x13184))+(((-1.0)*r00*x13180*x13198))+((cj3*x13199)));
evalcond[7]=(((cj0*x13183))+((r11*x13190))+((r11*x13177*x13184))+(((-1.0)*r10*x13180*x13198))+(((-1.0)*cj1*cj2*x13186))+((r10*x13179))+((cj3*x13192)));
evalcond[8]=((((-1.0)*x13178*x13192))+((r11*x13180))+((r10*x13184))+((x13188*x13193))+(((-1.0)*x13185*x13186))+(((-1.0)*r11*x13178*x13194))+(((-1.0)*x13186*x13191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13200=((1.0)*cj0);
IkReal x13201=((1.0)*gconst8);
CheckValue<IkReal> x13202 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x13200))+((r02*sj0)))),IkReal((((cj0*gconst8*r10))+(((-1.0)*r00*sj0*x13201))+((gconst7*r01*sj0))+(((-1.0)*gconst7*r11*x13200)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13202.valid){
continue;
}
CheckValue<IkReal> x13203=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst7*r20))+(((-1.0)*r21*x13201)))),-1);
if(!x13203.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13202.value)+(((1.5707963267949)*(x13203.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13204=IKsin(j4);
IkReal x13205=IKcos(j4);
IkReal x13206=((1.0)*sj3);
IkReal x13207=(gconst7*sj3);
IkReal x13208=(cj3*gconst8);
IkReal x13209=(gconst8*r20);
IkReal x13210=(cj2*sj0);
IkReal x13211=(sj1*sj2);
IkReal x13212=(cj3*gconst7);
IkReal x13213=(cj2*sj1);
IkReal x13214=((1.0)*cj0);
IkReal x13215=((1.0)*sj0);
IkReal x13216=(gconst8*r10);
IkReal x13217=(gconst8*r00);
IkReal x13218=(gconst8*sj3);
IkReal x13219=(cj1*sj2);
IkReal x13220=(r12*x13204);
IkReal x13221=(sj3*x13205);
IkReal x13222=(gconst7*x13205);
IkReal x13223=((1.0)*x13204);
IkReal x13224=((1.0)*cj1*cj2);
IkReal x13225=(gconst7*x13204);
IkReal x13226=((1.0)*x13205);
IkReal x13227=(r02*x13204);
evalcond[0]=((((-1.0)*x13209*x13223))+((r21*x13225)));
evalcond[1]=((((-1.0)*x13214))+(((-1.0)*r02*x13226))+(((-1.0)*x13217*x13223))+((r01*x13225)));
evalcond[2]=((((-1.0)*x13215))+(((-1.0)*r12*x13226))+((r11*x13225))+(((-1.0)*x13216*x13223)));
evalcond[3]=(((r21*x13218))+((r21*x13205*x13212))+(((-1.0)*r20*x13208*x13226))+x13213+x13219+((r20*x13207)));
evalcond[4]=(((r21*x13208))+((r20*x13212))+(((-1.0)*r21*x13206*x13222))+(((-1.0)*x13224))+((x13209*x13221))+x13211);
evalcond[5]=(((r01*x13208))+((r00*x13212))+((sj1*x13210))+((x13217*x13221))+((sj0*x13219))+(((-1.0)*x13206*x13227))+(((-1.0)*r01*x13206*x13222)));
evalcond[6]=(((r00*x13207))+((cj1*x13210))+((r01*x13218))+((r01*x13205*x13212))+(((-1.0)*x13211*x13215))+(((-1.0)*r00*x13208*x13226))+((cj3*x13227)));
evalcond[7]=(((r10*x13207))+((r11*x13218))+(((-1.0)*cj1*cj2*x13214))+((r11*x13205*x13212))+((cj0*x13211))+(((-1.0)*r10*x13208*x13226))+((cj3*x13220)));
evalcond[8]=((((-1.0)*x13214*x13219))+((r10*x13212))+(((-1.0)*x13213*x13214))+(((-1.0)*r11*x13206*x13222))+((r11*x13208))+(((-1.0)*x13206*x13220))+((x13216*x13221)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13228=r21*r21;
IkReal x13229=gconst7*gconst7;
IkReal x13230=r20*r20;
IkReal x13231=gconst8*gconst8;
IkReal x13232=(gconst7*r20);
IkReal x13233=(gconst8*r21);
IkReal x13234=(cj3*r22);
IkReal x13235=((1.0)*gconst8);
IkReal x13236=(cj3*gconst7);
IkReal x13237=(sj1*sj2);
IkReal x13238=(gconst7*r21);
IkReal x13239=(cj3*r20*r21);
IkReal x13240=((1.0)*cj1*cj2);
CheckValue<IkReal> x13241 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x13240))+((r22*x13237))+((x13232*x13234))+((x13233*x13234)))),IkReal(((((-1.0)*x13231*x13239))+((x13229*x13239))+(((-1.0)*x13230*x13235*x13236))+((gconst8*x13228*x13236))+((x13237*x13238))+(((-1.0)*r20*x13235*x13237))+(((-1.0)*x13238*x13240))+((cj1*cj2*gconst8*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13241.valid){
continue;
}
CheckValue<IkReal> x13242=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+(((-2.0)*sj3*x13232*x13233))+((sj3*x13230*x13231))+((sj3*x13228*x13229)))),-1);
if(!x13242.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13241.value)+(((1.5707963267949)*(x13242.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13243=IKsin(j4);
IkReal x13244=IKcos(j4);
IkReal x13245=(gconst7*sj3);
IkReal x13246=(cj3*gconst8);
IkReal x13247=(cj2*sj0);
IkReal x13248=(cj3*gconst7);
IkReal x13249=(sj1*sj2);
IkReal x13250=(cj2*sj1);
IkReal x13251=((1.0)*cj0);
IkReal x13252=((1.0)*sj0);
IkReal x13253=(gconst8*sj3);
IkReal x13254=(cj1*sj2);
IkReal x13255=((1.0)*x13244);
IkReal x13256=((1.0)*x13243);
IkReal x13257=(cj3*x13243);
IkReal x13258=((1.0)*cj1*cj2);
IkReal x13259=(gconst7*x13243);
IkReal x13260=(x13244*x13253);
evalcond[0]=(((r21*x13259))+(((-1.0)*r22*x13255))+(((-1.0)*gconst8*r20*x13256)));
evalcond[1]=((((-1.0)*gconst8*r00*x13256))+(((-1.0)*r02*x13255))+((r01*x13259))+(((-1.0)*x13251)));
evalcond[2]=(((r11*x13259))+(((-1.0)*gconst8*r10*x13256))+(((-1.0)*r12*x13255))+(((-1.0)*x13252)));
evalcond[3]=(((r21*x13253))+((r21*x13244*x13248))+(((-1.0)*r20*x13246*x13255))+((r22*x13257))+x13254+x13250+((r20*x13245)));
evalcond[4]=((((-1.0)*r22*sj3*x13256))+((r21*x13246))+((r20*x13260))+(((-1.0)*x13258))+x13249+(((-1.0)*r21*x13245*x13255))+((r20*x13248)));
evalcond[5]=(((sj0*x13254))+((sj1*x13247))+(((-1.0)*r02*sj3*x13256))+((r00*x13260))+(((-1.0)*r01*x13245*x13255))+((r00*x13248))+((r01*x13246)));
evalcond[6]=(((r02*x13257))+((cj1*x13247))+((r00*x13245))+((r01*x13253))+(((-1.0)*x13249*x13252))+(((-1.0)*r00*x13246*x13255))+((r01*x13244*x13248)));
evalcond[7]=(((r11*x13244*x13248))+((r10*x13245))+(((-1.0)*r10*x13246*x13255))+((r12*x13257))+((r11*x13253))+(((-1.0)*cj1*cj2*x13251))+((cj0*x13249)));
evalcond[8]=(((r10*x13248))+((r10*x13260))+(((-1.0)*r12*sj3*x13256))+((r11*x13246))+(((-1.0)*x13251*x13254))+(((-1.0)*r11*x13245*x13255))+(((-1.0)*x13250*x13251)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13261=((1.0)*cj0);
IkReal x13262=((1.0)*gconst8);
CheckValue<IkReal> x13263=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13262))+(((-1.0)*gconst7*r20)))),-1);
if(!x13263.valid){
continue;
}
CheckValue<IkReal> x13264 = IKatan2WithCheck(IkReal((((r02*sj0))+(((-1.0)*r12*x13261)))),IkReal((((cj0*gconst8*r10))+((gconst7*r01*sj0))+(((-1.0)*r00*sj0*x13262))+(((-1.0)*gconst7*r11*x13261)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13264.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13263.value)))+(x13264.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13265=IKsin(j4);
IkReal x13266=IKcos(j4);
IkReal x13267=(gconst7*sj3);
IkReal x13268=(cj3*gconst8);
IkReal x13269=(cj2*sj0);
IkReal x13270=(cj3*gconst7);
IkReal x13271=(sj1*sj2);
IkReal x13272=(cj2*sj1);
IkReal x13273=((1.0)*cj0);
IkReal x13274=((1.0)*sj0);
IkReal x13275=(gconst8*sj3);
IkReal x13276=(cj1*sj2);
IkReal x13277=((1.0)*x13266);
IkReal x13278=((1.0)*x13265);
IkReal x13279=(cj3*x13265);
IkReal x13280=((1.0)*cj1*cj2);
IkReal x13281=(gconst7*x13265);
IkReal x13282=(x13266*x13275);
evalcond[0]=((((-1.0)*gconst8*r20*x13278))+(((-1.0)*r22*x13277))+((r21*x13281)));
evalcond[1]=((((-1.0)*gconst8*r00*x13278))+(((-1.0)*x13273))+(((-1.0)*r02*x13277))+((r01*x13281)));
evalcond[2]=((((-1.0)*x13274))+((r11*x13281))+(((-1.0)*r12*x13277))+(((-1.0)*gconst8*r10*x13278)));
evalcond[3]=(((r21*x13275))+(((-1.0)*r20*x13268*x13277))+((r20*x13267))+((r21*x13266*x13270))+((r22*x13279))+x13276+x13272);
evalcond[4]=(((r20*x13282))+((r21*x13268))+((r20*x13270))+(((-1.0)*r22*sj3*x13278))+(((-1.0)*r21*x13267*x13277))+x13271+(((-1.0)*x13280)));
evalcond[5]=((((-1.0)*r01*x13267*x13277))+((r01*x13268))+((sj1*x13269))+((sj0*x13276))+((r00*x13270))+(((-1.0)*r02*sj3*x13278))+((r00*x13282)));
evalcond[6]=(((r01*x13275))+((r00*x13267))+((cj1*x13269))+((r02*x13279))+(((-1.0)*r00*x13268*x13277))+((r01*x13266*x13270))+(((-1.0)*x13271*x13274)));
evalcond[7]=(((r11*x13275))+((r12*x13279))+(((-1.0)*cj1*cj2*x13273))+(((-1.0)*r10*x13268*x13277))+((r10*x13267))+((r11*x13266*x13270))+((cj0*x13271)));
evalcond[8]=(((r11*x13268))+(((-1.0)*r11*x13267*x13277))+((r10*x13270))+((r10*x13282))+(((-1.0)*x13273*x13276))+(((-1.0)*x13272*x13273))+(((-1.0)*r12*sj3*x13278)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13283 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst8*r20*sj0))+((gconst7*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13283.valid){
continue;
}
CheckValue<IkReal> x13284=IKPowWithIntegerCheck(IKsign((((gconst7*r00))+((gconst8*r01)))),-1);
if(!x13284.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13283.value)+(((1.5707963267949)*(x13284.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13285=IKsin(j4);
IkReal x13286=IKcos(j4);
IkReal x13287=(gconst7*sj3);
IkReal x13288=(cj3*gconst8);
IkReal x13289=(cj2*sj0);
IkReal x13290=(cj3*gconst7);
IkReal x13291=(sj1*sj2);
IkReal x13292=(cj2*sj1);
IkReal x13293=((1.0)*cj0);
IkReal x13294=((1.0)*sj0);
IkReal x13295=(gconst8*sj3);
IkReal x13296=(cj1*sj2);
IkReal x13297=((1.0)*x13286);
IkReal x13298=((1.0)*x13285);
IkReal x13299=(cj3*x13285);
IkReal x13300=((1.0)*cj1*cj2);
IkReal x13301=(gconst7*x13285);
IkReal x13302=(x13286*x13295);
evalcond[0]=(((r21*x13301))+(((-1.0)*gconst8*r20*x13298))+(((-1.0)*r22*x13297)));
evalcond[1]=((((-1.0)*gconst8*r00*x13298))+((r01*x13301))+(((-1.0)*r02*x13297))+(((-1.0)*x13293)));
evalcond[2]=((((-1.0)*gconst8*r10*x13298))+(((-1.0)*r12*x13297))+((r11*x13301))+(((-1.0)*x13294)));
evalcond[3]=(((r20*x13287))+(((-1.0)*r20*x13288*x13297))+((r22*x13299))+x13292+x13296+((r21*x13286*x13290))+((r21*x13295)));
evalcond[4]=(((r20*x13290))+((r20*x13302))+(((-1.0)*r22*sj3*x13298))+((r21*x13288))+(((-1.0)*x13300))+(((-1.0)*r21*x13287*x13297))+x13291);
evalcond[5]=(((sj0*x13296))+(((-1.0)*r01*x13287*x13297))+((r00*x13302))+((r01*x13288))+((sj1*x13289))+(((-1.0)*r02*sj3*x13298))+((r00*x13290)));
evalcond[6]=((((-1.0)*r00*x13288*x13297))+((r02*x13299))+((cj1*x13289))+(((-1.0)*x13291*x13294))+((r00*x13287))+((r01*x13286*x13290))+((r01*x13295)));
evalcond[7]=(((r11*x13295))+((cj0*x13291))+(((-1.0)*cj1*cj2*x13293))+((r12*x13299))+(((-1.0)*r10*x13288*x13297))+((r10*x13287))+((r11*x13286*x13290)));
evalcond[8]=((((-1.0)*x13293*x13296))+((r10*x13302))+((r11*x13288))+(((-1.0)*x13292*x13293))+((r10*x13290))+(((-1.0)*r11*x13287*x13297))+(((-1.0)*r12*sj3*x13298)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13303=((-1.0)*r11);
IkReal x13305 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x13305)==0){
continue;
}
IkReal x13304=pow(x13305,-0.5);
CheckValue<IkReal> x13306 = IKatan2WithCheck(IkReal(x13303),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x13306.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x13306.value))));
IkReal gconst10=(x13303*x13304);
IkReal gconst11=((1.0)*r10*x13304);
CheckValue<IkReal> x13307 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x13307.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13307.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x13308=((-1.0)*r11);
CheckValue<IkReal> x13311 = IKatan2WithCheck(IkReal(x13308),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x13311.valid){
continue;
}
IkReal x13309=((1.0)*(x13311.value));
IkReal x13310=x13304;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x13309)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x13309)));
IkReal gconst10=(x13308*x13310);
IkReal gconst11=((1.0)*r10*x13310);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x13312=((-1.0)*r11);
CheckValue<IkReal> x13315 = IKatan2WithCheck(IkReal(x13312),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x13315.valid){
continue;
}
IkReal x13313=((1.0)*(x13315.value));
IkReal x13314=x13304;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x13313)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x13313)));
IkReal gconst10=(x13312*x13314);
IkReal gconst11=((1.0)*r10*x13314);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13316=((1.0)*cj0);
IkReal x13317=((1.0)*gconst11);
CheckValue<IkReal> x13318 = IKatan2WithCheck(IkReal((((r02*sj0))+(((-1.0)*r12*x13316)))),IkReal(((((-1.0)*r00*sj0*x13317))+(((-1.0)*gconst10*r11*x13316))+((gconst10*r01*sj0))+((cj0*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13318.valid){
continue;
}
CheckValue<IkReal> x13319=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13317))+(((-1.0)*gconst10*r20)))),-1);
if(!x13319.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13318.value)+(((1.5707963267949)*(x13319.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13320=IKsin(j4);
IkReal x13321=IKcos(j4);
IkReal x13322=(gconst10*sj3);
IkReal x13323=(cj3*r10);
IkReal x13324=(cj1*cj2);
IkReal x13325=(gconst11*r20);
IkReal x13326=(gconst11*sj3);
IkReal x13327=(cj3*gconst11);
IkReal x13328=(sj1*sj2);
IkReal x13329=(cj3*gconst10);
IkReal x13330=((1.0)*cj0);
IkReal x13331=(cj2*sj1);
IkReal x13332=((1.0)*sj0);
IkReal x13333=(cj1*sj2);
IkReal x13334=((1.0)*x13321);
IkReal x13335=((1.0)*x13320);
IkReal x13336=(cj3*x13320);
IkReal x13337=(gconst10*x13320);
evalcond[0]=((((-1.0)*r22*x13334))+(((-1.0)*x13325*x13335))+((r21*x13337)));
evalcond[1]=((((-1.0)*x13330))+((r01*x13337))+(((-1.0)*gconst11*r00*x13335))+(((-1.0)*r02*x13334)));
evalcond[2]=((((-1.0)*x13332))+(((-1.0)*r12*x13334))+(((-1.0)*gconst11*r10*x13335))+((r11*x13337)));
evalcond[3]=(((r22*x13336))+(((-1.0)*cj3*x13325*x13334))+((r20*x13322))+((r21*x13326))+((r21*x13321*x13329))+x13331+x13333);
evalcond[4]=((((-1.0)*r21*x13322*x13334))+(((-1.0)*x13324))+((r20*x13329))+((sj3*x13321*x13325))+((r21*x13327))+(((-1.0)*r22*sj3*x13335))+x13328);
evalcond[5]=((((-1.0)*r01*x13322*x13334))+(((-1.0)*r02*sj3*x13335))+((r00*x13329))+((r01*x13327))+((r00*x13321*x13326))+((sj0*x13331))+((sj0*x13333)));
evalcond[6]=(((r02*x13336))+((r00*x13322))+((r01*x13321*x13329))+((r01*x13326))+(((-1.0)*x13328*x13332))+(((-1.0)*r00*x13327*x13334))+((sj0*x13324)));
evalcond[7]=(((cj0*x13328))+((r10*x13322))+(((-1.0)*x13324*x13330))+(((-1.0)*gconst11*x13323*x13334))+((r11*x13326))+((r12*x13336))+((r11*x13321*x13329)));
evalcond[8]=(((r10*x13321*x13326))+(((-1.0)*r12*sj3*x13335))+((gconst10*x13323))+((r11*x13327))+(((-1.0)*r11*x13322*x13334))+(((-1.0)*x13330*x13331))+(((-1.0)*x13330*x13333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13338=((1.0)*gconst11);
CheckValue<IkReal> x13339 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst10*r21))+(((-1.0)*cj0*r20*x13338)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13339.valid){
continue;
}
CheckValue<IkReal> x13340=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r10))+(((-1.0)*r11*x13338)))),-1);
if(!x13340.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13339.value)+(((1.5707963267949)*(x13340.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13341=IKsin(j4);
IkReal x13342=IKcos(j4);
IkReal x13343=(gconst10*sj3);
IkReal x13344=(cj3*r10);
IkReal x13345=(cj1*cj2);
IkReal x13346=(gconst11*r20);
IkReal x13347=(gconst11*sj3);
IkReal x13348=(cj3*gconst11);
IkReal x13349=(sj1*sj2);
IkReal x13350=(cj3*gconst10);
IkReal x13351=((1.0)*cj0);
IkReal x13352=(cj2*sj1);
IkReal x13353=((1.0)*sj0);
IkReal x13354=(cj1*sj2);
IkReal x13355=((1.0)*x13342);
IkReal x13356=((1.0)*x13341);
IkReal x13357=(cj3*x13341);
IkReal x13358=(gconst10*x13341);
evalcond[0]=((((-1.0)*r22*x13355))+(((-1.0)*x13346*x13356))+((r21*x13358)));
evalcond[1]=((((-1.0)*r02*x13355))+((r01*x13358))+(((-1.0)*x13351))+(((-1.0)*gconst11*r00*x13356)));
evalcond[2]=((((-1.0)*r12*x13355))+(((-1.0)*gconst11*r10*x13356))+(((-1.0)*x13353))+((r11*x13358)));
evalcond[3]=(((r21*x13342*x13350))+((r22*x13357))+((r21*x13347))+((r20*x13343))+(((-1.0)*cj3*x13346*x13355))+x13352+x13354);
evalcond[4]=(((r20*x13350))+((r21*x13348))+(((-1.0)*r21*x13343*x13355))+(((-1.0)*x13345))+(((-1.0)*r22*sj3*x13356))+((sj3*x13342*x13346))+x13349);
evalcond[5]=((((-1.0)*r01*x13343*x13355))+((r00*x13350))+(((-1.0)*r02*sj3*x13356))+((r00*x13342*x13347))+((r01*x13348))+((sj0*x13354))+((sj0*x13352)));
evalcond[6]=(((r02*x13357))+(((-1.0)*r00*x13348*x13355))+((sj0*x13345))+((r00*x13343))+((r01*x13347))+(((-1.0)*x13349*x13353))+((r01*x13342*x13350)));
evalcond[7]=((((-1.0)*x13345*x13351))+((cj0*x13349))+((r10*x13343))+((r11*x13342*x13350))+(((-1.0)*gconst11*x13344*x13355))+((r11*x13347))+((r12*x13357)));
evalcond[8]=((((-1.0)*r11*x13343*x13355))+(((-1.0)*x13351*x13352))+(((-1.0)*x13351*x13354))+((r10*x13342*x13347))+((gconst10*x13344))+((r11*x13348))+(((-1.0)*r12*sj3*x13356)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13359=IKPowWithIntegerCheck(IKsign((((gconst10*r00))+((gconst11*r01)))),-1);
if(!x13359.valid){
continue;
}
CheckValue<IkReal> x13360 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst11*r20*sj0))+((gconst10*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13360.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13359.value)))+(x13360.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13361=IKsin(j4);
IkReal x13362=IKcos(j4);
IkReal x13363=(gconst10*sj3);
IkReal x13364=(cj3*r10);
IkReal x13365=(cj1*cj2);
IkReal x13366=(gconst11*r20);
IkReal x13367=(gconst11*sj3);
IkReal x13368=(cj3*gconst11);
IkReal x13369=(sj1*sj2);
IkReal x13370=(cj3*gconst10);
IkReal x13371=((1.0)*cj0);
IkReal x13372=(cj2*sj1);
IkReal x13373=((1.0)*sj0);
IkReal x13374=(cj1*sj2);
IkReal x13375=((1.0)*x13362);
IkReal x13376=((1.0)*x13361);
IkReal x13377=(cj3*x13361);
IkReal x13378=(gconst10*x13361);
evalcond[0]=((((-1.0)*x13366*x13376))+(((-1.0)*r22*x13375))+((r21*x13378)));
evalcond[1]=(((r01*x13378))+(((-1.0)*r02*x13375))+(((-1.0)*gconst11*r00*x13376))+(((-1.0)*x13371)));
evalcond[2]=(((r11*x13378))+(((-1.0)*gconst11*r10*x13376))+(((-1.0)*x13373))+(((-1.0)*r12*x13375)));
evalcond[3]=(((r21*x13362*x13370))+((r20*x13363))+(((-1.0)*cj3*x13366*x13375))+((r22*x13377))+((r21*x13367))+x13374+x13372);
evalcond[4]=((((-1.0)*x13365))+((sj3*x13362*x13366))+((r20*x13370))+(((-1.0)*r22*sj3*x13376))+(((-1.0)*r21*x13363*x13375))+((r21*x13368))+x13369);
evalcond[5]=(((sj0*x13374))+((sj0*x13372))+((r01*x13368))+((r00*x13370))+((r00*x13362*x13367))+(((-1.0)*r02*sj3*x13376))+(((-1.0)*r01*x13363*x13375)));
evalcond[6]=(((sj0*x13365))+((r02*x13377))+((r01*x13367))+(((-1.0)*r00*x13368*x13375))+((r00*x13363))+((r01*x13362*x13370))+(((-1.0)*x13369*x13373)));
evalcond[7]=(((r10*x13363))+((r12*x13377))+(((-1.0)*x13365*x13371))+((r11*x13367))+(((-1.0)*gconst11*x13364*x13375))+((cj0*x13369))+((r11*x13362*x13370)));
evalcond[8]=(((gconst10*x13364))+((r11*x13368))+(((-1.0)*r11*x13363*x13375))+(((-1.0)*r12*sj3*x13376))+((r10*x13362*x13367))+(((-1.0)*x13371*x13372))+(((-1.0)*x13371*x13374)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x13379=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13379;
j4eval[1]=IKsign(x13379);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x13380=((1.0)*cj5);
IkReal x13381=((((-1.0)*r21*x13380))+(((-1.0)*r20*sj5)));
j4eval[0]=x13381;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13380))))));
j4eval[2]=IKsign(x13381);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x13382=cj5*cj5;
IkReal x13383=(cj3*r21);
IkReal x13384=(cj5*sj5);
IkReal x13385=((1.0)*cj3);
IkReal x13386=((((-1.0)*r11*x13383))+((r11*x13382*x13383))+((r10*x13383*x13384))+(((-1.0)*r12*r22*x13385))+(((-1.0)*r10*r20*x13382*x13385))+((cj3*r11*r20*x13384)));
j4eval[0]=x13386;
j4eval[1]=IKsign(x13386);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13387=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13387;
j4eval[1]=IKsign(x13387);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13388=((1.0)*cj5);
IkReal x13389=((((-1.0)*r21*x13388))+(((-1.0)*r20*sj5)));
j4eval[0]=x13389;
j4eval[1]=((IKabs((((r01*sj5))+(((-1.0)*r00*x13388)))))+(IKabs(r02)));
j4eval[2]=IKsign(x13389);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13390=cj5*cj5;
IkReal x13391=r11*r11;
IkReal x13392=(cj5*r10);
IkReal x13393=(r11*sj5);
IkReal x13394=((((-1.0)*x13391))+(((-1.0)*x13390*(r10*r10)))+(((-1.0)*(r12*r12)))+((x13390*x13391))+(((2.0)*x13392*x13393)));
j4eval[0]=x13394;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x13393))+x13392))));
j4eval[2]=IKsign(x13394);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13395=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13395);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13395);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13396=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13396);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13396);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13397=((1.0)*cj2);
CheckValue<IkReal> x13398=IKPowWithIntegerCheck(r22,-1);
if(!x13398.valid){
continue;
}
CheckValue<IkReal> x13399=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13399.valid){
continue;
}
if( IKabs(((x13398.value)*((((sj1*sj2))+(((-1.0)*cj1*x13397)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13399.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13397)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13398.value)*((((sj1*sj2))+(((-1.0)*cj1*x13397))))))+IKsqr(((x13399.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13397))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13398.value)*((((sj1*sj2))+(((-1.0)*cj1*x13397))))), ((x13399.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13397))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13400=IKsin(j4);
IkReal x13401=IKcos(j4);
IkReal x13402=(cj5*x13401);
IkReal x13403=(sj5*x13400);
IkReal x13404=((1.0)*sj5*x13401);
IkReal x13405=((1.0)*cj5*x13400);
evalcond[0]=((-1.0)*r22*x13401);
evalcond[1]=(((r01*x13403))+(((-1.0)*r00*x13405)));
evalcond[2]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x13400)));
evalcond[3]=(((r10*x13402))+(((-1.0)*r11*x13404)));
evalcond[4]=((-1.0)+((r11*x13403))+(((-1.0)*r10*x13405)));
evalcond[5]=(((cj2*sj1))+((r00*x13402))+((cj1*sj2))+(((-1.0)*r01*x13404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13406=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x13406.valid){
continue;
}
CheckValue<IkReal> x13407=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13407.valid){
continue;
}
if( IKabs(x13406.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13407.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13406.value)+IKsqr(((x13407.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x13406.value, ((x13407.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13408=IKsin(j4);
IkReal x13409=IKcos(j4);
IkReal x13410=(cj5*x13409);
IkReal x13411=(sj5*x13408);
IkReal x13412=((1.0)*sj5*x13409);
IkReal x13413=((1.0)*cj5*x13408);
evalcond[0]=((-1.0)*r22*x13409);
evalcond[1]=((((-1.0)*r00*x13413))+((r01*x13411)));
evalcond[2]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x13408)));
evalcond[3]=((((-1.0)*r11*x13412))+((r10*x13410)));
evalcond[4]=((-1.0)+(((-1.0)*r10*x13413))+((r11*x13411)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r01*x13412))+((cj1*sj2))+((r00*x13410)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13414=((-1.0)*px);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13414);
rxp1_1=(px*r21);
rxp1_2=(r11*x13414);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13415=((-1.0)*px);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13415);
rxp1_1=(px*r21);
rxp1_2=(r11*x13415);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13416=IKPowWithIntegerCheck(r02,-1);
if(!x13416.valid){
continue;
}
CheckValue<IkReal> x13417=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x13417.valid){
continue;
}
if( IKabs(((x13416.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13417.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13416.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x13417.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13416.value)*((((cj2*sj1))+((cj1*sj2))))), ((x13417.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13418=IKsin(j4);
IkReal x13419=IKcos(j4);
IkReal x13420=(cj5*r20);
IkReal x13421=(cj5*r10);
IkReal x13422=((1.0)*x13418);
IkReal x13423=(sj5*x13418);
IkReal x13424=((1.0)*sj5*x13419);
evalcond[0]=((-1.0)*r02*x13419);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x13422)));
evalcond[2]=((((-1.0)*x13420*x13422))+((r21*x13423)));
evalcond[3]=(((x13419*x13421))+(((-1.0)*r11*x13424)));
evalcond[4]=((-1.0)+(((-1.0)*x13421*x13422))+((r11*x13423)));
evalcond[5]=(((x13419*x13420))+(((-1.0)*cj1*cj2))+(((-1.0)*r21*x13424))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13425=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x13425.valid){
continue;
}
CheckValue<IkReal> x13426=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x13426.valid){
continue;
}
if( IKabs(x13425.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13426.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13425.value)+IKsqr(((x13426.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x13425.value, ((x13426.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13427=IKsin(j4);
IkReal x13428=IKcos(j4);
IkReal x13429=(cj5*r20);
IkReal x13430=(cj5*r10);
IkReal x13431=((1.0)*x13427);
IkReal x13432=(sj5*x13427);
IkReal x13433=((1.0)*sj5*x13428);
evalcond[0]=((-1.0)*r02*x13428);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x13431)));
evalcond[2]=((((-1.0)*x13429*x13431))+((r21*x13432)));
evalcond[3]=(((x13428*x13430))+(((-1.0)*r11*x13433)));
evalcond[4]=((-1.0)+((r11*x13432))+(((-1.0)*x13430*x13431)));
evalcond[5]=(((x13428*x13429))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x13433)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13434=cj5*cj5;
IkReal x13435=r11*r11;
IkReal x13436=(cj5*r10);
IkReal x13437=(r11*sj5);
CheckValue<IkReal> x13438=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13435))+(((2.0)*x13436*x13437))+(((-1.0)*(r12*r12)))+(((-1.0)*x13434*(r10*r10)))+((x13434*x13435)))),-1);
if(!x13438.valid){
continue;
}
CheckValue<IkReal> x13439 = IKatan2WithCheck(IkReal((x13436+(((-1.0)*x13437)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13439.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13438.value)))+(x13439.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13440=IKsin(j4);
IkReal x13441=IKcos(j4);
IkReal x13442=(cj5*r10);
IkReal x13443=(r01*sj5);
IkReal x13444=(cj5*r00);
IkReal x13445=(cj5*r20);
IkReal x13446=((1.0)*x13441);
IkReal x13447=((1.0)*x13440);
IkReal x13448=(sj5*x13440);
evalcond[0]=((((-1.0)*r22*x13446))+(((-1.0)*x13445*x13447))+((r21*x13448)));
evalcond[1]=((((-1.0)*r02*x13446))+(((-1.0)*x13444*x13447))+((x13440*x13443)));
evalcond[2]=((((-1.0)*r12*x13447))+(((-1.0)*r11*sj5*x13446))+((x13441*x13442)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x13446))+((r11*x13448))+(((-1.0)*x13442*x13447)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x13447))+((x13441*x13444))+(((-1.0)*x13443*x13446)));
evalcond[5]=((((-1.0)*r21*sj5*x13446))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x13447))+((x13441*x13445)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13449=((1.0)*cj5);
CheckValue<IkReal> x13450=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13449))+(((-1.0)*r20*sj5)))),-1);
if(!x13450.valid){
continue;
}
CheckValue<IkReal> x13451 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x13449)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13451.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13450.value)))+(x13451.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13452=IKsin(j4);
IkReal x13453=IKcos(j4);
IkReal x13454=(cj5*r10);
IkReal x13455=(r01*sj5);
IkReal x13456=(cj5*r00);
IkReal x13457=(cj5*r20);
IkReal x13458=((1.0)*x13453);
IkReal x13459=((1.0)*x13452);
IkReal x13460=(sj5*x13452);
evalcond[0]=((((-1.0)*r22*x13458))+((r21*x13460))+(((-1.0)*x13457*x13459)));
evalcond[1]=((((-1.0)*x13456*x13459))+((x13452*x13455))+(((-1.0)*r02*x13458)));
evalcond[2]=(((x13453*x13454))+(((-1.0)*r11*sj5*x13458))+(((-1.0)*r12*x13459)));
evalcond[3]=((-1.0)+((r11*x13460))+(((-1.0)*x13454*x13459))+(((-1.0)*r12*x13458)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x13453*x13456))+(((-1.0)*x13455*x13458))+(((-1.0)*r02*x13459)));
evalcond[5]=((((-1.0)*r22*x13459))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x13453*x13457))+(((-1.0)*r21*sj5*x13458)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13461 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13461.valid){
continue;
}
CheckValue<IkReal> x13462=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x13462.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13461.value)+(((1.5707963267949)*(x13462.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13463=IKsin(j4);
IkReal x13464=IKcos(j4);
IkReal x13465=(cj5*r10);
IkReal x13466=(r01*sj5);
IkReal x13467=(cj5*r00);
IkReal x13468=(cj5*r20);
IkReal x13469=((1.0)*x13464);
IkReal x13470=((1.0)*x13463);
IkReal x13471=(sj5*x13463);
evalcond[0]=((((-1.0)*r22*x13469))+((r21*x13471))+(((-1.0)*x13468*x13470)));
evalcond[1]=(((x13463*x13466))+(((-1.0)*x13467*x13470))+(((-1.0)*r02*x13469)));
evalcond[2]=(((x13464*x13465))+(((-1.0)*r12*x13470))+(((-1.0)*r11*sj5*x13469)));
evalcond[3]=((-1.0)+((r11*x13471))+(((-1.0)*x13465*x13470))+(((-1.0)*r12*x13469)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x13470))+((x13464*x13467))+((cj1*sj2))+(((-1.0)*x13466*x13469)));
evalcond[5]=(((x13464*x13468))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x13469))+(((-1.0)*r22*x13470)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13472=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13472;
j4eval[1]=IKsign(x13472);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13473=((1.0)*cj5);
IkReal x13474=((((-1.0)*r21*x13473))+(((-1.0)*r20*sj5)));
j4eval[0]=x13474;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13473))))));
j4eval[2]=IKsign(x13474);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13475=cj5*cj5;
IkReal x13476=r11*r11;
IkReal x13477=(r11*sj5);
IkReal x13478=(cj5*r10);
IkReal x13479=((((-1.0)*x13475*x13476))+x13476+(r12*r12)+((x13475*(r10*r10)))+(((-2.0)*x13477*x13478)));
j4eval[0]=x13479;
j4eval[1]=IKsign(x13479);
j4eval[2]=((IKabs(r12))+(IKabs((x13477+(((-1.0)*x13478))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13480=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13480);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13480);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13481=((1.0)*cj5);
j4eval[0]=((((-1.0)*r10*x13481))+((r11*sj5)));
j4eval[1]=((((-1.0)*r00*x13481))+((r01*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13482=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13482);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13482);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13483=((1.0)*sj1);
CheckValue<IkReal> x13484=IKPowWithIntegerCheck(r22,-1);
if(!x13484.valid){
continue;
}
CheckValue<IkReal> x13485=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x13485.valid){
continue;
}
if( IKabs(((x13484.value)*((((cj1*cj2))+(((-1.0)*sj2*x13483)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13485.value)*(((((-1.0)*cj2*x13483))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13484.value)*((((cj1*cj2))+(((-1.0)*sj2*x13483))))))+IKsqr(((x13485.value)*(((((-1.0)*cj2*x13483))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13484.value)*((((cj1*cj2))+(((-1.0)*sj2*x13483))))), ((x13485.value)*(((((-1.0)*cj2*x13483))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13486=IKsin(j4);
IkReal x13487=IKcos(j4);
IkReal x13488=((1.0)*cj5);
IkReal x13489=(sj5*x13487);
IkReal x13490=(sj5*x13486);
evalcond[0]=((-1.0)*r22*x13487);
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x13486)));
evalcond[2]=((((-1.0)*r00*x13486*x13488))+((r01*x13490)));
evalcond[3]=((((-1.0)*r10*x13487*x13488))+((r11*x13489)));
evalcond[4]=((-1.0)+((r11*x13490))+(((-1.0)*r10*x13486*x13488)));
evalcond[5]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r00*x13487*x13488))+((r01*x13489)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13491=((1.0)*cj5);
CheckValue<IkReal> x13492=IKPowWithIntegerCheck(((((-1.0)*r10*x13491))+((r11*sj5))),-1);
if(!x13492.valid){
continue;
}
CheckValue<IkReal> x13493=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x13491))),-1);
if(!x13493.valid){
continue;
}
if( IKabs(x13492.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13493.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13492.value)+IKsqr(((x13493.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x13492.value, ((x13493.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13494=IKsin(j4);
IkReal x13495=IKcos(j4);
IkReal x13496=((1.0)*cj5);
IkReal x13497=(sj5*x13495);
IkReal x13498=(sj5*x13494);
evalcond[0]=((-1.0)*r22*x13495);
evalcond[1]=(((r22*x13494))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[2]=(((r01*x13498))+(((-1.0)*r00*x13494*x13496)));
evalcond[3]=((((-1.0)*r10*x13495*x13496))+((r11*x13497)));
evalcond[4]=((-1.0)+(((-1.0)*r10*x13494*x13496))+((r11*x13498)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r00*x13495*x13496))+((cj1*sj2))+((r01*x13497)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13499=((-1.0)*px);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13499);
rxp1_1=(px*r21);
rxp1_2=(r11*x13499);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x13500=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x13500)));
j4eval[1]=(((r21*sj5))+(((-1.0)*r20*x13500)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13501=((-1.0)*px);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13501);
rxp1_1=(px*r21);
rxp1_2=(r11*x13501);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13502=((1.0)*sj1);
CheckValue<IkReal> x13503=IKPowWithIntegerCheck(r02,-1);
if(!x13503.valid){
continue;
}
CheckValue<IkReal> x13504=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x13504.valid){
continue;
}
if( IKabs(((x13503.value)*(((((-1.0)*cj2*x13502))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13504.value)*(((((-1.0)*sj2*x13502))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13503.value)*(((((-1.0)*cj2*x13502))+(((-1.0)*cj1*sj2))))))+IKsqr(((x13504.value)*(((((-1.0)*sj2*x13502))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13503.value)*(((((-1.0)*cj2*x13502))+(((-1.0)*cj1*sj2))))), ((x13504.value)*(((((-1.0)*sj2*x13502))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13505=IKsin(j4);
IkReal x13506=IKcos(j4);
IkReal x13507=(r21*sj5);
IkReal x13508=(r11*sj5);
IkReal x13509=((1.0)*cj5*x13505);
IkReal x13510=((1.0)*cj5*x13506);
evalcond[0]=((-1.0)*r02*x13506);
evalcond[1]=(((cj2*sj1))+((r02*x13505))+((cj1*sj2)));
evalcond[2]=((((-1.0)*r20*x13509))+((x13505*x13507)));
evalcond[3]=((((-1.0)*r10*x13510))+((x13506*x13508)));
evalcond[4]=((-1.0)+(((-1.0)*r10*x13509))+((x13505*x13508)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r20*x13510))+((x13506*x13507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13511=((1.0)*cj5);
CheckValue<IkReal> x13512=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x13511))),-1);
if(!x13512.valid){
continue;
}
CheckValue<IkReal> x13513=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*r20*x13511))),-1);
if(!x13513.valid){
continue;
}
if( IKabs(x13512.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13513.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13512.value)+IKsqr(((x13513.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x13512.value, ((x13513.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13514=IKsin(j4);
IkReal x13515=IKcos(j4);
IkReal x13516=(r21*sj5);
IkReal x13517=(r11*sj5);
IkReal x13518=((1.0)*cj5*x13514);
IkReal x13519=((1.0)*cj5*x13515);
evalcond[0]=((-1.0)*r02*x13515);
evalcond[1]=(((cj2*sj1))+((r02*x13514))+((cj1*sj2)));
evalcond[2]=((((-1.0)*r20*x13518))+((x13514*x13516)));
evalcond[3]=((((-1.0)*r10*x13519))+((x13515*x13517)));
evalcond[4]=((-1.0)+(((-1.0)*r10*x13518))+((x13514*x13517)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r20*x13519))+((x13515*x13516)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13520=cj5*cj5;
IkReal x13521=r11*r11;
IkReal x13522=(cj5*r10);
IkReal x13523=(r11*sj5);
CheckValue<IkReal> x13524 = IKatan2WithCheck(IkReal((x13523+(((-1.0)*x13522)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13524.valid){
continue;
}
CheckValue<IkReal> x13525=IKPowWithIntegerCheck(IKsign((x13521+(r12*r12)+((x13520*(r10*r10)))+(((-2.0)*x13522*x13523))+(((-1.0)*x13520*x13521)))),-1);
if(!x13525.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13524.value)+(((1.5707963267949)*(x13525.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13526=IKcos(j4);
IkReal x13527=IKsin(j4);
IkReal x13528=(cj5*r00);
IkReal x13529=(cj5*r10);
IkReal x13530=(r21*sj5);
IkReal x13531=(cj5*r20);
IkReal x13532=((1.0)*x13526);
IkReal x13533=((1.0)*x13527);
IkReal x13534=(sj5*x13527);
IkReal x13535=(sj5*x13526);
evalcond[0]=((((-1.0)*x13529*x13532))+((r12*x13527))+((r11*x13535)));
evalcond[1]=((((-1.0)*r22*x13532))+((x13527*x13530))+(((-1.0)*x13531*x13533)));
evalcond[2]=((((-1.0)*x13528*x13533))+(((-1.0)*r02*x13532))+((r01*x13534)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x13532))+(((-1.0)*x13529*x13533))+((r11*x13534)));
evalcond[4]=(((cj2*sj1))+((r02*x13527))+((cj1*sj2))+(((-1.0)*x13528*x13532))+((r01*x13535)));
evalcond[5]=(((x13526*x13530))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x13527))+(((-1.0)*x13531*x13532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13536=((1.0)*cj5);
CheckValue<IkReal> x13537 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x13536)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13537.valid){
continue;
}
CheckValue<IkReal> x13538=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13536))+(((-1.0)*r20*sj5)))),-1);
if(!x13538.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13537.value)+(((1.5707963267949)*(x13538.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13539=IKcos(j4);
IkReal x13540=IKsin(j4);
IkReal x13541=(cj5*r00);
IkReal x13542=(cj5*r10);
IkReal x13543=(r21*sj5);
IkReal x13544=(cj5*r20);
IkReal x13545=((1.0)*x13539);
IkReal x13546=((1.0)*x13540);
IkReal x13547=(sj5*x13540);
IkReal x13548=(sj5*x13539);
evalcond[0]=(((r12*x13540))+((r11*x13548))+(((-1.0)*x13542*x13545)));
evalcond[1]=((((-1.0)*x13544*x13546))+(((-1.0)*r22*x13545))+((x13540*x13543)));
evalcond[2]=(((r01*x13547))+(((-1.0)*r02*x13545))+(((-1.0)*x13541*x13546)));
evalcond[3]=((-1.0)+((r11*x13547))+(((-1.0)*x13542*x13546))+(((-1.0)*r12*x13545)));
evalcond[4]=(((cj2*sj1))+((r01*x13548))+((cj1*sj2))+((r02*x13540))+(((-1.0)*x13541*x13545)));
evalcond[5]=((((-1.0)*x13544*x13545))+((r22*x13540))+((x13539*x13543))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13549 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13549.valid){
continue;
}
CheckValue<IkReal> x13550=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x13550.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13549.value)+(((1.5707963267949)*(x13550.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13551=IKcos(j4);
IkReal x13552=IKsin(j4);
IkReal x13553=(cj5*r00);
IkReal x13554=(cj5*r10);
IkReal x13555=(r21*sj5);
IkReal x13556=(cj5*r20);
IkReal x13557=((1.0)*x13551);
IkReal x13558=((1.0)*x13552);
IkReal x13559=(sj5*x13552);
IkReal x13560=(sj5*x13551);
evalcond[0]=(((r12*x13552))+((r11*x13560))+(((-1.0)*x13554*x13557)));
evalcond[1]=((((-1.0)*x13556*x13558))+(((-1.0)*r22*x13557))+((x13552*x13555)));
evalcond[2]=((((-1.0)*x13553*x13558))+((r01*x13559))+(((-1.0)*r02*x13557)));
evalcond[3]=((-1.0)+((r11*x13559))+(((-1.0)*x13554*x13558))+(((-1.0)*r12*x13557)));
evalcond[4]=(((cj2*sj1))+((r01*x13560))+(((-1.0)*x13553*x13557))+((cj1*sj2))+((r02*x13552)));
evalcond[5]=(((r22*x13552))+((x13551*x13555))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x13556*x13557)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13562 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13562)==0){
continue;
}
IkReal x13561=pow(x13562,-0.5);
CheckValue<IkReal> x13563 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13563.valid){
continue;
}
IkReal gconst24=((-1.0)*(x13563.value));
IkReal gconst25=((-1.0)*r01*x13561);
IkReal gconst26=(r00*x13561);
CheckValue<IkReal> x13564 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13564.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13564.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13567 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13567.valid){
continue;
}
IkReal x13565=((-1.0)*(x13567.value));
IkReal x13566=x13561;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst25;
cj5=gconst26;
j5=x13565;
IkReal gconst24=x13565;
IkReal gconst25=((-1.0)*r01*x13566);
IkReal gconst26=(r00*x13566);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13570 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13570.valid){
continue;
}
IkReal x13568=((-1.0)*(x13570.value));
IkReal x13569=x13561;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst25;
cj5=gconst26;
j5=x13568;
IkReal gconst24=x13568;
IkReal gconst25=((-1.0)*r01*x13569);
IkReal gconst26=(r00*x13569);
CheckValue<IkReal> x13578=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x13578.valid){
continue;
}
IkReal x13571=x13578.value;
IkReal x13572=(sj3*x13571);
IkReal x13573=(r11*x13572);
IkReal x13574=(r21*x13572);
IkReal x13575=(r20*x13572);
IkReal x13576=(r10*x13572);
IkReal x13577=(r00*r01*x13572);
j4eval[0]=IKsign((((r00*r01*r20*x13573))+((r21*x13573*(r01*r01)))+((r10*x13575*(r00*r00)))+((r12*r22*sj3))+((r00*r01*r10*x13574))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13579=gconst25*gconst25;
IkReal x13580=gconst26*gconst26;
IkReal x13581=(r10*sj3);
IkReal x13582=((1.0)*cj3);
IkReal x13583=(r11*sj3);
IkReal x13584=(r21*x13579);
IkReal x13585=(r20*x13580);
IkReal x13586=(gconst25*gconst26*r21);
IkReal x13587=(gconst25*gconst26*r20);
CheckValue<IkReal> x13588 = IKatan2WithCheck(IkReal((((gconst25*r22*x13581))+((gconst26*r22*x13583)))),IkReal(((((-1.0)*x13581*x13587))+((x13583*x13586))+(((-1.0)*x13583*x13585))+((x13581*x13584)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13588.valid){
continue;
}
CheckValue<IkReal> x13589=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x13582))+(((-1.0)*r11*x13582*x13584))+((cj3*r10*x13586))+((cj3*r11*x13587))+(((-1.0)*r10*x13582*x13585)))),-1);
if(!x13589.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13588.value)+(((1.5707963267949)*(x13589.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13590=IKsin(j4);
IkReal x13591=IKcos(j4);
IkReal x13592=(cj2*sj1);
IkReal x13593=(cj1*sj2);
IkReal x13594=(gconst26*sj3);
IkReal x13595=(gconst25*sj3);
IkReal x13596=(gconst26*r10);
IkReal x13597=(gconst25*r11);
IkReal x13598=(sj1*sj2);
IkReal x13599=(cj3*gconst25);
IkReal x13600=(cj1*cj2);
IkReal x13601=(gconst26*r00);
IkReal x13602=(gconst26*r20);
IkReal x13603=(cj3*gconst26);
IkReal x13604=((1.0)*x13591);
IkReal x13605=((1.0)*x13590);
IkReal x13606=(cj3*x13590);
IkReal x13607=(gconst25*x13590);
IkReal x13608=(x13593+x13592);
evalcond[0]=((((-1.0)*r22*x13604))+((r21*x13607))+(((-1.0)*x13602*x13605)));
evalcond[1]=((((-1.0)*r02*x13604))+(((-1.0)*x13601*x13605))+((r01*x13607)));
evalcond[2]=((-1.0)+(((-1.0)*x13596*x13605))+(((-1.0)*r12*x13604))+((x13590*x13597)));
evalcond[3]=(((r11*x13594))+((r10*x13595))+((r12*x13606))+(((-1.0)*cj3*x13596*x13604))+((cj3*x13591*x13597)));
evalcond[4]=(((r11*x13603))+(((-1.0)*r11*x13595*x13604))+((r10*x13599))+((r10*x13591*x13594))+(((-1.0)*r12*sj3*x13605)));
evalcond[5]=(x13608+((r21*x13594))+((r22*x13606))+((r21*x13591*x13599))+(((-1.0)*cj3*x13602*x13604))+((r20*x13595)));
evalcond[6]=((((-1.0)*r01*x13595*x13604))+x13608+(((-1.0)*r02*sj3*x13605))+((r00*x13599))+((r00*x13591*x13594))+((r01*x13603)));
evalcond[7]=(x13600+((r01*x13594))+(((-1.0)*cj3*x13601*x13604))+((r00*x13595))+(((-1.0)*x13598))+((r02*x13606))+((r01*x13591*x13599)));
evalcond[8]=(((r20*x13591*x13594))+(((-1.0)*x13600))+x13598+(((-1.0)*r21*x13595*x13604))+(((-1.0)*r22*sj3*x13605))+((r21*x13603))+((r20*x13599)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13609=gconst25*gconst25;
IkReal x13610=gconst26*gconst26;
IkReal x13611=(gconst25*r10);
IkReal x13612=(gconst26*r21);
IkReal x13613=((1.0)*sj3);
IkReal x13614=(cj3*r22);
IkReal x13615=(gconst26*r11);
IkReal x13616=(cj3*r11);
IkReal x13617=(r20*x13610);
IkReal x13618=(r21*x13609);
CheckValue<IkReal> x13619=IKPowWithIntegerCheck(IKsign((((r10*sj3*x13617))+((r12*r22*sj3))+((r11*sj3*x13618))+(((-1.0)*x13611*x13612*x13613))+(((-1.0)*gconst25*r20*x13613*x13615)))),-1);
if(!x13619.valid){
continue;
}
CheckValue<IkReal> x13620 = IKatan2WithCheck(IkReal((((x13614*x13615))+((x13611*x13614)))),IkReal(((((-1.0)*cj3*gconst26*r20*x13611))+((gconst25*x13612*x13616))+((cj3*r10*x13618))+(((-1.0)*x13616*x13617)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13620.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13619.value)))+(x13620.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13621=IKsin(j4);
IkReal x13622=IKcos(j4);
IkReal x13623=(cj2*sj1);
IkReal x13624=(cj1*sj2);
IkReal x13625=(gconst26*sj3);
IkReal x13626=(gconst25*sj3);
IkReal x13627=(gconst26*r10);
IkReal x13628=(gconst25*r11);
IkReal x13629=(sj1*sj2);
IkReal x13630=(cj3*gconst25);
IkReal x13631=(cj1*cj2);
IkReal x13632=(gconst26*r00);
IkReal x13633=(gconst26*r20);
IkReal x13634=(cj3*gconst26);
IkReal x13635=((1.0)*x13622);
IkReal x13636=((1.0)*x13621);
IkReal x13637=(cj3*x13621);
IkReal x13638=(gconst25*x13621);
IkReal x13639=(x13624+x13623);
evalcond[0]=((((-1.0)*r22*x13635))+((r21*x13638))+(((-1.0)*x13633*x13636)));
evalcond[1]=((((-1.0)*r02*x13635))+((r01*x13638))+(((-1.0)*x13632*x13636)));
evalcond[2]=((-1.0)+(((-1.0)*x13627*x13636))+((x13621*x13628))+(((-1.0)*r12*x13635)));
evalcond[3]=(((r10*x13626))+(((-1.0)*cj3*x13627*x13635))+((cj3*x13622*x13628))+((r11*x13625))+((r12*x13637)));
evalcond[4]=(((r11*x13634))+((r10*x13630))+((r10*x13622*x13625))+(((-1.0)*r12*sj3*x13636))+(((-1.0)*r11*x13626*x13635)));
evalcond[5]=(x13639+(((-1.0)*cj3*x13633*x13635))+((r22*x13637))+((r21*x13625))+((r21*x13622*x13630))+((r20*x13626)));
evalcond[6]=((((-1.0)*r01*x13626*x13635))+x13639+(((-1.0)*r02*sj3*x13636))+((r00*x13622*x13625))+((r00*x13630))+((r01*x13634)));
evalcond[7]=(x13631+(((-1.0)*cj3*x13632*x13635))+((r02*x13637))+((r01*x13622*x13630))+((r01*x13625))+((r00*x13626))+(((-1.0)*x13629)));
evalcond[8]=((((-1.0)*r21*x13626*x13635))+(((-1.0)*x13631))+x13629+(((-1.0)*r22*sj3*x13636))+((r21*x13634))+((r20*x13622*x13625))+((r20*x13630)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13640=((1.0)*gconst26);
CheckValue<IkReal> x13641 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst25*r01))+(((-1.0)*r00*x13640)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13641.valid){
continue;
}
CheckValue<IkReal> x13642=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst25*r20))+(((-1.0)*r21*x13640)))),-1);
if(!x13642.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13641.value)+(((1.5707963267949)*(x13642.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13643=IKsin(j4);
IkReal x13644=IKcos(j4);
IkReal x13645=(cj2*sj1);
IkReal x13646=(cj1*sj2);
IkReal x13647=(gconst26*sj3);
IkReal x13648=(gconst25*sj3);
IkReal x13649=(gconst26*r10);
IkReal x13650=(gconst25*r11);
IkReal x13651=(sj1*sj2);
IkReal x13652=(cj3*gconst25);
IkReal x13653=(cj1*cj2);
IkReal x13654=(gconst26*r00);
IkReal x13655=(gconst26*r20);
IkReal x13656=(cj3*gconst26);
IkReal x13657=((1.0)*x13644);
IkReal x13658=((1.0)*x13643);
IkReal x13659=(cj3*x13643);
IkReal x13660=(gconst25*x13643);
IkReal x13661=(x13645+x13646);
evalcond[0]=((((-1.0)*r22*x13657))+(((-1.0)*x13655*x13658))+((r21*x13660)));
evalcond[1]=((((-1.0)*r02*x13657))+(((-1.0)*x13654*x13658))+((r01*x13660)));
evalcond[2]=((-1.0)+((x13643*x13650))+(((-1.0)*x13649*x13658))+(((-1.0)*r12*x13657)));
evalcond[3]=(((r12*x13659))+(((-1.0)*cj3*x13649*x13657))+((r11*x13647))+((r10*x13648))+((cj3*x13644*x13650)));
evalcond[4]=(((r10*x13644*x13647))+((r10*x13652))+(((-1.0)*r11*x13648*x13657))+(((-1.0)*r12*sj3*x13658))+((r11*x13656)));
evalcond[5]=(x13661+((r20*x13648))+((r22*x13659))+((r21*x13644*x13652))+(((-1.0)*cj3*x13655*x13657))+((r21*x13647)));
evalcond[6]=(x13661+((r00*x13652))+((r01*x13656))+(((-1.0)*r02*sj3*x13658))+(((-1.0)*r01*x13648*x13657))+((r00*x13644*x13647)));
evalcond[7]=(x13653+(((-1.0)*x13651))+((r00*x13648))+((r02*x13659))+((r01*x13647))+((r01*x13644*x13652))+(((-1.0)*cj3*x13654*x13657)));
evalcond[8]=(((r20*x13652))+x13651+(((-1.0)*x13653))+((r21*x13656))+(((-1.0)*r22*sj3*x13658))+(((-1.0)*r21*x13648*x13657))+((r20*x13644*x13647)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13663 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13663)==0){
continue;
}
IkReal x13662=pow(x13663,-0.5);
CheckValue<IkReal> x13664 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13664.valid){
continue;
}
IkReal gconst27=((3.14159265358979)+(((-1.0)*(x13664.value))));
IkReal gconst28=((1.0)*r01*x13662);
IkReal gconst29=((-1.0)*r00*x13662);
CheckValue<IkReal> x13665 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13665.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13665.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13668 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13668.valid){
continue;
}
IkReal x13666=((1.0)*(x13668.value));
IkReal x13667=x13662;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13666)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13666)));
IkReal gconst28=((1.0)*r01*x13667);
IkReal gconst29=((-1.0)*r00*x13667);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13671 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13671.valid){
continue;
}
IkReal x13669=((1.0)*(x13671.value));
IkReal x13670=x13662;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13669)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13669)));
IkReal gconst28=((1.0)*r01*x13670);
IkReal gconst29=((-1.0)*r00*x13670);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13672=gconst28*gconst28;
IkReal x13673=gconst29*gconst29;
IkReal x13674=(r11*r21);
IkReal x13675=(gconst29*sj3);
IkReal x13676=((1.0)*cj3);
IkReal x13677=(r10*r20);
IkReal x13678=(r10*r21);
IkReal x13679=(r11*r20);
IkReal x13680=(cj3*gconst28*gconst29);
CheckValue<IkReal> x13681=IKPowWithIntegerCheck(IKsign((((x13679*x13680))+(((-1.0)*x13672*x13674*x13676))+(((-1.0)*x13673*x13676*x13677))+(((-1.0)*r12*r22*x13676))+((x13678*x13680)))),-1);
if(!x13681.valid){
continue;
}
CheckValue<IkReal> x13682 = IKatan2WithCheck(IkReal((((r11*r22*x13675))+((gconst28*r10*r22*sj3)))),IkReal(((((-1.0)*sj3*x13673*x13679))+((gconst28*x13674*x13675))+(((-1.0)*gconst28*x13675*x13677))+((sj3*x13672*x13678)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13682.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13681.value)))+(x13682.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13683=IKsin(j4);
IkReal x13684=IKcos(j4);
IkReal x13685=(cj2*sj1);
IkReal x13686=(cj1*sj2);
IkReal x13687=(gconst29*r20);
IkReal x13688=(gconst28*r20);
IkReal x13689=(sj1*sj2);
IkReal x13690=(cj1*cj2);
IkReal x13691=(r11*sj3);
IkReal x13692=(gconst29*r01);
IkReal x13693=(gconst29*r10);
IkReal x13694=(cj3*gconst28);
IkReal x13695=(cj3*gconst29);
IkReal x13696=(gconst28*sj3);
IkReal x13697=(gconst29*r00);
IkReal x13698=((1.0)*x13684);
IkReal x13699=((1.0)*x13683);
IkReal x13700=(gconst28*x13683);
IkReal x13701=(cj3*x13683);
IkReal x13702=(sj3*x13684);
IkReal x13703=(x13685+x13686);
evalcond[0]=(((r21*x13700))+(((-1.0)*x13687*x13699))+(((-1.0)*r22*x13698)));
evalcond[1]=((((-1.0)*r02*x13698))+((r01*x13700))+(((-1.0)*x13697*x13699)));
evalcond[2]=((-1.0)+(((-1.0)*x13693*x13699))+((r11*x13700))+(((-1.0)*r12*x13698)));
evalcond[3]=(((r12*x13701))+(((-1.0)*cj3*x13693*x13698))+((r10*x13696))+((r11*x13684*x13694))+((gconst29*x13691)));
evalcond[4]=((((-1.0)*gconst28*x13691*x13698))+((x13693*x13702))+((r10*x13694))+(((-1.0)*r12*sj3*x13699))+((r11*x13695)));
evalcond[5]=(((gconst29*r21*sj3))+x13703+((r21*x13684*x13694))+(((-1.0)*cj3*x13687*x13698))+((r22*x13701))+((sj3*x13688)));
evalcond[6]=((((-1.0)*r01*x13696*x13698))+((r00*x13694))+((x13697*x13702))+x13703+((cj3*x13692))+(((-1.0)*r02*sj3*x13699)));
evalcond[7]=(((r00*x13696))+((sj3*x13692))+x13690+(((-1.0)*x13689))+((r02*x13701))+(((-1.0)*r00*x13695*x13698))+((r01*x13684*x13694)));
evalcond[8]=(((x13687*x13702))+(((-1.0)*r22*sj3*x13699))+x13689+((cj3*x13688))+((r21*x13695))+(((-1.0)*x13690))+(((-1.0)*r21*x13696*x13698)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13704=((1.0)*gconst29);
CheckValue<IkReal> x13705=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r20))+(((-1.0)*r21*x13704)))),-1);
if(!x13705.valid){
continue;
}
CheckValue<IkReal> x13706 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x13704))+((gconst28*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13706.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13705.value)))+(x13706.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13707=IKsin(j4);
IkReal x13708=IKcos(j4);
IkReal x13709=(cj2*sj1);
IkReal x13710=(cj1*sj2);
IkReal x13711=(gconst29*r20);
IkReal x13712=(gconst28*r20);
IkReal x13713=(sj1*sj2);
IkReal x13714=(cj1*cj2);
IkReal x13715=(r11*sj3);
IkReal x13716=(gconst29*r01);
IkReal x13717=(gconst29*r10);
IkReal x13718=(cj3*gconst28);
IkReal x13719=(cj3*gconst29);
IkReal x13720=(gconst28*sj3);
IkReal x13721=(gconst29*r00);
IkReal x13722=((1.0)*x13708);
IkReal x13723=((1.0)*x13707);
IkReal x13724=(gconst28*x13707);
IkReal x13725=(cj3*x13707);
IkReal x13726=(sj3*x13708);
IkReal x13727=(x13710+x13709);
evalcond[0]=((((-1.0)*x13711*x13723))+(((-1.0)*r22*x13722))+((r21*x13724)));
evalcond[1]=(((r01*x13724))+(((-1.0)*r02*x13722))+(((-1.0)*x13721*x13723)));
evalcond[2]=((-1.0)+((r11*x13724))+(((-1.0)*r12*x13722))+(((-1.0)*x13717*x13723)));
evalcond[3]=(((r12*x13725))+((r10*x13720))+((gconst29*x13715))+((r11*x13708*x13718))+(((-1.0)*cj3*x13717*x13722)));
evalcond[4]=((((-1.0)*r12*sj3*x13723))+((r10*x13718))+(((-1.0)*gconst28*x13715*x13722))+((x13717*x13726))+((r11*x13719)));
evalcond[5]=(((r21*x13708*x13718))+((gconst29*r21*sj3))+((sj3*x13712))+x13727+((r22*x13725))+(((-1.0)*cj3*x13711*x13722)));
evalcond[6]=(x13727+((cj3*x13716))+((r00*x13718))+((x13721*x13726))+(((-1.0)*r02*sj3*x13723))+(((-1.0)*r01*x13720*x13722)));
evalcond[7]=((((-1.0)*x13713))+((sj3*x13716))+((r00*x13720))+(((-1.0)*r00*x13719*x13722))+x13714+((r01*x13708*x13718))+((r02*x13725)));
evalcond[8]=(((x13711*x13726))+((r21*x13719))+(((-1.0)*r21*x13720*x13722))+(((-1.0)*x13714))+x13713+((cj3*x13712))+(((-1.0)*r22*sj3*x13723)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13728 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst29*r20))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13728.valid){
continue;
}
CheckValue<IkReal> x13729=IKPowWithIntegerCheck(IKsign((((gconst29*r01))+((gconst28*r00)))),-1);
if(!x13729.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13728.value)+(((1.5707963267949)*(x13729.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13730=IKsin(j4);
IkReal x13731=IKcos(j4);
IkReal x13732=(cj2*sj1);
IkReal x13733=(cj1*sj2);
IkReal x13734=(gconst29*r20);
IkReal x13735=(gconst28*r20);
IkReal x13736=(sj1*sj2);
IkReal x13737=(cj1*cj2);
IkReal x13738=(r11*sj3);
IkReal x13739=(gconst29*r01);
IkReal x13740=(gconst29*r10);
IkReal x13741=(cj3*gconst28);
IkReal x13742=(cj3*gconst29);
IkReal x13743=(gconst28*sj3);
IkReal x13744=(gconst29*r00);
IkReal x13745=((1.0)*x13731);
IkReal x13746=((1.0)*x13730);
IkReal x13747=(gconst28*x13730);
IkReal x13748=(cj3*x13730);
IkReal x13749=(sj3*x13731);
IkReal x13750=(x13733+x13732);
evalcond[0]=((((-1.0)*r22*x13745))+(((-1.0)*x13734*x13746))+((r21*x13747)));
evalcond[1]=((((-1.0)*r02*x13745))+((r01*x13747))+(((-1.0)*x13744*x13746)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x13745))+(((-1.0)*x13740*x13746))+((r11*x13747)));
evalcond[3]=((((-1.0)*cj3*x13740*x13745))+((r10*x13743))+((r12*x13748))+((gconst29*x13738))+((r11*x13731*x13741)));
evalcond[4]=(((x13740*x13749))+(((-1.0)*r12*sj3*x13746))+(((-1.0)*gconst28*x13738*x13745))+((r10*x13741))+((r11*x13742)));
evalcond[5]=(((gconst29*r21*sj3))+x13750+((r21*x13731*x13741))+((r22*x13748))+((sj3*x13735))+(((-1.0)*cj3*x13734*x13745)));
evalcond[6]=(((x13744*x13749))+(((-1.0)*r02*sj3*x13746))+x13750+(((-1.0)*r01*x13743*x13745))+((cj3*x13739))+((r00*x13741)));
evalcond[7]=(x13737+(((-1.0)*r00*x13742*x13745))+((r01*x13731*x13741))+((sj3*x13739))+((r02*x13748))+(((-1.0)*x13736))+((r00*x13743)));
evalcond[8]=(x13736+(((-1.0)*r22*sj3*x13746))+((r21*x13742))+(((-1.0)*x13737))+((x13734*x13749))+((cj3*x13735))+(((-1.0)*r21*x13743*x13745)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13751=((-1.0)*px);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13751);
rxp1_1=(px*r21);
rxp1_2=(r11*x13751);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x13752=(r11*sj5);
IkReal x13753=((1.0)*cj5*r10);
j4eval[0]=(x13752+(((-1.0)*x13753)));
j4eval[1]=((((-1.0)*cj3*x13753))+((cj3*x13752)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13754=((-1.0)*px);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13754);
rxp1_1=(px*r21);
rxp1_2=(r11*x13754);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x13755=(cj5*r10);
IkReal x13756=(r11*sj5);
j4eval[0]=(x13756+(((-1.0)*x13755)));
j4eval[1]=((((-1.0)*sj3*x13756))+((sj3*x13755)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13757=((-1.0)*px);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13757);
rxp1_1=(px*r21);
rxp1_2=(r11*x13757);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13758=((-1.0)*px);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13758);
rxp1_1=(px*r21);
rxp1_2=(r11*x13758);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
IkReal x13759=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x13759)));
j4eval[1]=((((-1.0)*r20*x13759))+((r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13760=((-1.0)*px);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13760);
rxp1_1=(px*r21);
rxp1_2=(r11*x13760);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r02;
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13761=((1.0)*cj2);
CheckValue<IkReal> x13762=IKPowWithIntegerCheck(r02,-1);
if(!x13762.valid){
continue;
}
CheckValue<IkReal> x13763=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x13763.valid){
continue;
}
if( IKabs(((x13762.value)*(((((-1.0)*cj1*x13761))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13763.value)*(((((-1.0)*sj1*x13761))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13762.value)*(((((-1.0)*cj1*x13761))+((sj1*sj2))))))+IKsqr(((x13763.value)*(((((-1.0)*sj1*x13761))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13762.value)*(((((-1.0)*cj1*x13761))+((sj1*sj2))))), ((x13763.value)*(((((-1.0)*sj1*x13761))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13764=IKsin(j4);
IkReal x13765=IKcos(j4);
IkReal x13766=(r21*sj5);
IkReal x13767=(r11*sj5);
IkReal x13768=((1.0)*cj5*x13764);
IkReal x13769=((1.0)*cj5*x13765);
evalcond[0]=((-1.0)*r02*x13765);
evalcond[1]=((((-1.0)*sj1*sj2))+((cj1*cj2))+((r02*x13764)));
evalcond[2]=((((-1.0)*r20*x13768))+((x13764*x13766)));
evalcond[3]=((((-1.0)*r10*x13769))+((x13765*x13767)));
evalcond[4]=((-1.0)+(((-1.0)*r10*x13768))+((x13764*x13767)));
evalcond[5]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r20*x13769))+((x13765*x13766)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13770=((1.0)*cj5);
CheckValue<IkReal> x13771=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x13770))),-1);
if(!x13771.valid){
continue;
}
CheckValue<IkReal> x13772=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*r20*x13770))),-1);
if(!x13772.valid){
continue;
}
if( IKabs(x13771.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13772.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13771.value)+IKsqr(((x13772.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x13771.value, ((x13772.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13773=IKsin(j4);
IkReal x13774=IKcos(j4);
IkReal x13775=(r21*sj5);
IkReal x13776=(r11*sj5);
IkReal x13777=((1.0)*cj5*x13773);
IkReal x13778=((1.0)*cj5*x13774);
evalcond[0]=((-1.0)*r02*x13774);
evalcond[1]=((((-1.0)*sj1*sj2))+((cj1*cj2))+((r02*x13773)));
evalcond[2]=((((-1.0)*r20*x13777))+((x13773*x13775)));
evalcond[3]=(((x13774*x13776))+(((-1.0)*r10*x13778)));
evalcond[4]=((-1.0)+(((-1.0)*r10*x13777))+((x13773*x13776)));
evalcond[5]=(((cj2*sj1))+((x13774*x13775))+(((-1.0)*r20*x13778))+((cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13779=((-1.0)*px);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13779);
rxp1_1=(px*r21);
rxp1_2=(r11*x13779);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13780=((-1.0)*px);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13780);
rxp1_1=(px*r21);
rxp1_2=(r11*x13780);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r02;
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13781=((1.0)*sj1);
CheckValue<IkReal> x13782=IKPowWithIntegerCheck(r02,-1);
if(!x13782.valid){
continue;
}
CheckValue<IkReal> x13783=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x13783.valid){
continue;
}
if( IKabs(((x13782.value)*(((((-1.0)*sj2*x13781))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13783.value)*(((((-1.0)*cj2*x13781))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13782.value)*(((((-1.0)*sj2*x13781))+((cj1*cj2))))))+IKsqr(((x13783.value)*(((((-1.0)*cj2*x13781))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13782.value)*(((((-1.0)*sj2*x13781))+((cj1*cj2))))), ((x13783.value)*(((((-1.0)*cj2*x13781))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13784=IKsin(j4);
IkReal x13785=IKcos(j4);
IkReal x13786=(cj5*r20);
IkReal x13787=(cj5*r10);
IkReal x13788=((1.0)*x13784);
IkReal x13789=(sj5*x13784);
IkReal x13790=((1.0)*sj5*x13785);
evalcond[0]=((-1.0)*r02*x13785);
evalcond[1]=((((-1.0)*x13786*x13788))+((r21*x13789)));
evalcond[2]=((((-1.0)*r02*x13788))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
evalcond[3]=((((-1.0)*r11*x13790))+((x13785*x13787)));
evalcond[4]=((-1.0)+(((-1.0)*x13787*x13788))+((r11*x13789)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r21*x13790))+((cj1*sj2))+((x13785*x13786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13791=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x13791.valid){
continue;
}
CheckValue<IkReal> x13792=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x13792.valid){
continue;
}
if( IKabs(x13791.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13792.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13791.value)+IKsqr(((x13792.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x13791.value, ((x13792.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13793=IKsin(j4);
IkReal x13794=IKcos(j4);
IkReal x13795=(cj5*r20);
IkReal x13796=(cj5*r10);
IkReal x13797=((1.0)*x13793);
IkReal x13798=(sj5*x13793);
IkReal x13799=((1.0)*sj5*x13794);
evalcond[0]=((-1.0)*r02*x13794);
evalcond[1]=(((r21*x13798))+(((-1.0)*x13795*x13797)));
evalcond[2]=((((-1.0)*r02*x13797))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
evalcond[3]=(((x13794*x13796))+(((-1.0)*r11*x13799)));
evalcond[4]=((-1.0)+(((-1.0)*x13796*x13797))+((r11*x13798)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r21*x13799))+((cj1*sj2))+((x13794*x13795)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13800=((1.0)*r10);
CheckValue<IkReal> x13801=IKPowWithIntegerCheck(r02,-1);
if(!x13801.valid){
continue;
}
CheckValue<IkReal> x13802=IKPowWithIntegerCheck(sj3,-1);
if(!x13802.valid){
continue;
}
CheckValue<IkReal> x13803=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x13800))+((cj3*r11*sj5))),-1);
if(!x13803.valid){
continue;
}
if( IKabs(((x13801.value)*(x13802.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13803.value)*(((((-1.0)*sj3*sj5*x13800))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13801.value)*(x13802.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x13803.value)*(((((-1.0)*sj3*sj5*x13800))+(((-1.0)*cj5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13801.value)*(x13802.value)*((((cj2*sj1))+((cj1*sj2))))), ((x13803.value)*(((((-1.0)*sj3*sj5*x13800))+(((-1.0)*cj5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13804=IKsin(j4);
IkReal x13805=IKcos(j4);
IkReal x13806=(cj2*sj1);
IkReal x13807=(cj1*sj2);
IkReal x13808=(cj5*r10);
IkReal x13809=(sj1*sj2);
IkReal x13810=(cj5*sj3);
IkReal x13811=(r11*sj5);
IkReal x13812=(cj3*sj5);
IkReal x13813=(r21*sj5);
IkReal x13814=(cj1*cj2);
IkReal x13815=(cj3*cj5);
IkReal x13816=(sj3*sj5);
IkReal x13817=((1.0)*x13804);
IkReal x13818=(r20*x13805);
IkReal x13819=(cj3*x13805);
IkReal x13820=(sj3*x13805);
IkReal x13821=(x13807+x13806);
evalcond[0]=((-1.0)*r02*x13805);
evalcond[1]=((((-1.0)*cj5*r20*x13817))+((x13804*x13813)));
evalcond[2]=(x13821+(((-1.0)*r02*sj3*x13817)));
evalcond[3]=(x13814+(((-1.0)*x13809))+((cj3*r02*x13804)));
evalcond[4]=((-1.0)+((x13804*x13811))+(((-1.0)*x13808*x13817)));
evalcond[5]=(((x13811*x13819))+((r11*x13810))+((r10*x13816))+(((-1.0)*x13808*x13819)));
evalcond[6]=(((r11*x13815))+((r10*x13812))+(((-1.0)*x13811*x13820))+((x13808*x13820)));
evalcond[7]=(x13821+(((-1.0)*x13815*x13818))+((r21*x13810))+((r20*x13816))+((r21*x13805*x13812)));
evalcond[8]=(((x13810*x13818))+x13809+((r21*x13815))+(((-1.0)*x13813*x13820))+(((-1.0)*x13814))+((r20*x13812)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13822=(cj5*r10);
IkReal x13823=((1.0)*r11);
CheckValue<IkReal> x13824=IKPowWithIntegerCheck(((((-1.0)*x13822))+((r11*sj5))),-1);
if(!x13824.valid){
continue;
}
CheckValue<IkReal> x13825=IKPowWithIntegerCheck(((((-1.0)*sj3*sj5*x13823))+((sj3*x13822))),-1);
if(!x13825.valid){
continue;
}
if( IKabs(x13824.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13825.value)*(((((-1.0)*cj3*cj5*x13823))+(((-1.0)*cj3*r10*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13824.value)+IKsqr(((x13825.value)*(((((-1.0)*cj3*cj5*x13823))+(((-1.0)*cj3*r10*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x13824.value, ((x13825.value)*(((((-1.0)*cj3*cj5*x13823))+(((-1.0)*cj3*r10*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13826=IKsin(j4);
IkReal x13827=IKcos(j4);
IkReal x13828=(cj2*sj1);
IkReal x13829=(cj1*sj2);
IkReal x13830=(cj5*r10);
IkReal x13831=(sj1*sj2);
IkReal x13832=(cj5*sj3);
IkReal x13833=(r11*sj5);
IkReal x13834=(cj3*sj5);
IkReal x13835=(r21*sj5);
IkReal x13836=(cj1*cj2);
IkReal x13837=(cj3*cj5);
IkReal x13838=(sj3*sj5);
IkReal x13839=((1.0)*x13826);
IkReal x13840=(r20*x13827);
IkReal x13841=(cj3*x13827);
IkReal x13842=(sj3*x13827);
IkReal x13843=(x13829+x13828);
evalcond[0]=((-1.0)*r02*x13827);
evalcond[1]=(((x13826*x13835))+(((-1.0)*cj5*r20*x13839)));
evalcond[2]=(x13843+(((-1.0)*r02*sj3*x13839)));
evalcond[3]=(x13836+((cj3*r02*x13826))+(((-1.0)*x13831)));
evalcond[4]=((-1.0)+(((-1.0)*x13830*x13839))+((x13826*x13833)));
evalcond[5]=((((-1.0)*x13830*x13841))+((x13833*x13841))+((r11*x13832))+((r10*x13838)));
evalcond[6]=((((-1.0)*x13833*x13842))+((r11*x13837))+((x13830*x13842))+((r10*x13834)));
evalcond[7]=(x13843+((r21*x13832))+((r21*x13827*x13834))+(((-1.0)*x13837*x13840))+((r20*x13838)));
evalcond[8]=(x13831+((r21*x13837))+(((-1.0)*x13835*x13842))+((x13832*x13840))+((r20*x13834))+(((-1.0)*x13836)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13844=((1.0)*r10);
IkReal x13845=(r11*sj5);
CheckValue<IkReal> x13846=IKPowWithIntegerCheck((x13845+(((-1.0)*cj5*x13844))),-1);
if(!x13846.valid){
continue;
}
CheckValue<IkReal> x13847=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x13844))+((cj3*x13845))),-1);
if(!x13847.valid){
continue;
}
if( IKabs(x13846.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13847.value)*(((((-1.0)*sj3*sj5*x13844))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13846.value)+IKsqr(((x13847.value)*(((((-1.0)*sj3*sj5*x13844))+(((-1.0)*cj5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x13846.value, ((x13847.value)*(((((-1.0)*sj3*sj5*x13844))+(((-1.0)*cj5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13848=IKsin(j4);
IkReal x13849=IKcos(j4);
IkReal x13850=(cj2*sj1);
IkReal x13851=(cj1*sj2);
IkReal x13852=(cj5*r10);
IkReal x13853=(sj1*sj2);
IkReal x13854=(cj5*sj3);
IkReal x13855=(r11*sj5);
IkReal x13856=(cj3*sj5);
IkReal x13857=(r21*sj5);
IkReal x13858=(cj1*cj2);
IkReal x13859=(cj3*cj5);
IkReal x13860=(sj3*sj5);
IkReal x13861=((1.0)*x13848);
IkReal x13862=(r20*x13849);
IkReal x13863=(cj3*x13849);
IkReal x13864=(sj3*x13849);
IkReal x13865=(x13850+x13851);
evalcond[0]=((-1.0)*r02*x13849);
evalcond[1]=(((x13848*x13857))+(((-1.0)*cj5*r20*x13861)));
evalcond[2]=(x13865+(((-1.0)*r02*sj3*x13861)));
evalcond[3]=(((cj3*r02*x13848))+(((-1.0)*x13853))+x13858);
evalcond[4]=((-1.0)+(((-1.0)*x13852*x13861))+((x13848*x13855)));
evalcond[5]=((((-1.0)*x13852*x13863))+((r11*x13854))+((x13855*x13863))+((r10*x13860)));
evalcond[6]=((((-1.0)*x13855*x13864))+((r11*x13859))+((x13852*x13864))+((r10*x13856)));
evalcond[7]=(x13865+((r21*x13854))+((r20*x13860))+(((-1.0)*x13859*x13862))+((r21*x13849*x13856)));
evalcond[8]=((((-1.0)*x13858))+(((-1.0)*x13857*x13864))+x13853+((x13854*x13862))+((r21*x13859))+((r20*x13856)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13866=cj5*cj5;
IkReal x13867=((1.0)*cj3);
IkReal x13868=(r10*r21);
IkReal x13869=(cj5*sj5);
IkReal x13870=(r11*r21);
IkReal x13871=(r11*r20);
IkReal x13872=(r22*sj3);
IkReal x13873=(r10*r20);
IkReal x13874=((1.0)*sj3*x13866);
CheckValue<IkReal> x13875 = IKatan2WithCheck(IkReal((((r10*sj5*x13872))+((cj5*r11*x13872)))),IkReal((((sj3*x13868))+(((-1.0)*x13871*x13874))+(((-1.0)*x13868*x13874))+(((-1.0)*sj3*x13869*x13873))+((sj3*x13869*x13870)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13875.valid){
continue;
}
CheckValue<IkReal> x13876=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x13867))+(((-1.0)*x13867*x13870))+((cj3*x13869*x13871))+((cj3*x13866*x13870))+(((-1.0)*x13866*x13867*x13873))+((cj3*x13868*x13869)))),-1);
if(!x13876.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13875.value)+(((1.5707963267949)*(x13876.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13877=IKsin(j4);
IkReal x13878=IKcos(j4);
IkReal x13879=(cj2*sj1);
IkReal x13880=(cj1*sj2);
IkReal x13881=(cj5*sj3);
IkReal x13882=(cj5*r10);
IkReal x13883=(r00*sj5);
IkReal x13884=(sj1*sj2);
IkReal x13885=(r11*sj5);
IkReal x13886=(cj3*cj5);
IkReal x13887=(cj3*sj5);
IkReal x13888=(r21*sj5);
IkReal x13889=(cj1*cj2);
IkReal x13890=(sj3*sj5);
IkReal x13891=(r01*sj5);
IkReal x13892=((1.0)*x13878);
IkReal x13893=((1.0)*x13877);
IkReal x13894=(cj3*x13877);
IkReal x13895=(cj3*x13878);
IkReal x13896=(x13879+x13880);
evalcond[0]=((((-1.0)*cj5*r20*x13893))+(((-1.0)*r22*x13892))+((x13877*x13888)));
evalcond[1]=((((-1.0)*r02*x13892))+((x13877*x13891))+(((-1.0)*cj5*r00*x13893)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x13892))+(((-1.0)*x13882*x13893))+((x13877*x13885)));
evalcond[3]=(((x13885*x13895))+((r10*x13890))+(((-1.0)*cj3*x13882*x13892))+((r12*x13894))+((r11*x13881)));
evalcond[4]=((((-1.0)*r12*sj3*x13893))+(((-1.0)*sj3*x13885*x13892))+((r10*x13878*x13881))+((r10*x13887))+((r11*x13886)));
evalcond[5]=(((r22*x13894))+(((-1.0)*r20*x13886*x13892))+x13896+((r20*x13890))+((r21*x13881))+((r21*x13878*x13887)));
evalcond[6]=((((-1.0)*r02*sj3*x13893))+((r00*x13878*x13881))+((cj3*x13883))+x13896+((r01*x13886))+(((-1.0)*r01*x13890*x13892)));
evalcond[7]=(((sj3*x13883))+x13889+((r02*x13894))+(((-1.0)*r00*x13886*x13892))+(((-1.0)*x13884))+((r01*x13878*x13887))+((r01*x13881)));
evalcond[8]=((((-1.0)*r22*sj3*x13893))+(((-1.0)*sj3*x13888*x13892))+x13884+((r20*x13887))+((r20*x13878*x13881))+(((-1.0)*x13889))+((r21*x13886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13897=((1.0)*cj5);
CheckValue<IkReal> x13898 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x13897)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13898.valid){
continue;
}
CheckValue<IkReal> x13899=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13897))+(((-1.0)*r20*sj5)))),-1);
if(!x13899.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13898.value)+(((1.5707963267949)*(x13899.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13900=IKsin(j4);
IkReal x13901=IKcos(j4);
IkReal x13902=(cj2*sj1);
IkReal x13903=(cj1*sj2);
IkReal x13904=(cj5*sj3);
IkReal x13905=(cj5*r10);
IkReal x13906=(r00*sj5);
IkReal x13907=(sj1*sj2);
IkReal x13908=(r11*sj5);
IkReal x13909=(cj3*cj5);
IkReal x13910=(cj3*sj5);
IkReal x13911=(r21*sj5);
IkReal x13912=(cj1*cj2);
IkReal x13913=(sj3*sj5);
IkReal x13914=(r01*sj5);
IkReal x13915=((1.0)*x13901);
IkReal x13916=((1.0)*x13900);
IkReal x13917=(cj3*x13900);
IkReal x13918=(cj3*x13901);
IkReal x13919=(x13902+x13903);
evalcond[0]=((((-1.0)*r22*x13915))+(((-1.0)*cj5*r20*x13916))+((x13900*x13911)));
evalcond[1]=((((-1.0)*cj5*r00*x13916))+((x13900*x13914))+(((-1.0)*r02*x13915)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x13915))+((x13900*x13908))+(((-1.0)*x13905*x13916)));
evalcond[3]=(((r10*x13913))+(((-1.0)*cj3*x13905*x13915))+((r12*x13917))+((r11*x13904))+((x13908*x13918)));
evalcond[4]=((((-1.0)*sj3*x13908*x13915))+((r10*x13910))+(((-1.0)*r12*sj3*x13916))+((r10*x13901*x13904))+((r11*x13909)));
evalcond[5]=(((r22*x13917))+x13919+(((-1.0)*r20*x13909*x13915))+((r20*x13913))+((r21*x13904))+((r21*x13901*x13910)));
evalcond[6]=((((-1.0)*r01*x13913*x13915))+(((-1.0)*r02*sj3*x13916))+x13919+((r01*x13909))+((cj3*x13906))+((r00*x13901*x13904)));
evalcond[7]=(((r02*x13917))+x13912+(((-1.0)*x13907))+((r01*x13904))+((sj3*x13906))+((r01*x13901*x13910))+(((-1.0)*r00*x13909*x13915)));
evalcond[8]=((((-1.0)*r22*sj3*x13916))+(((-1.0)*x13912))+x13907+((r20*x13910))+((r20*x13901*x13904))+((r21*x13909))+(((-1.0)*sj3*x13911*x13915)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13920 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13920.valid){
continue;
}
CheckValue<IkReal> x13921=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x13921.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13920.value)+(((1.5707963267949)*(x13921.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13922=IKsin(j4);
IkReal x13923=IKcos(j4);
IkReal x13924=(cj2*sj1);
IkReal x13925=(cj1*sj2);
IkReal x13926=(cj5*sj3);
IkReal x13927=(cj5*r10);
IkReal x13928=(r00*sj5);
IkReal x13929=(sj1*sj2);
IkReal x13930=(r11*sj5);
IkReal x13931=(cj3*cj5);
IkReal x13932=(cj3*sj5);
IkReal x13933=(r21*sj5);
IkReal x13934=(cj1*cj2);
IkReal x13935=(sj3*sj5);
IkReal x13936=(r01*sj5);
IkReal x13937=((1.0)*x13923);
IkReal x13938=((1.0)*x13922);
IkReal x13939=(cj3*x13922);
IkReal x13940=(cj3*x13923);
IkReal x13941=(x13924+x13925);
evalcond[0]=((((-1.0)*cj5*r20*x13938))+(((-1.0)*r22*x13937))+((x13922*x13933)));
evalcond[1]=((((-1.0)*cj5*r00*x13938))+(((-1.0)*r02*x13937))+((x13922*x13936)));
evalcond[2]=((-1.0)+(((-1.0)*x13927*x13938))+(((-1.0)*r12*x13937))+((x13922*x13930)));
evalcond[3]=((((-1.0)*cj3*x13927*x13937))+((r10*x13935))+((r11*x13926))+((x13930*x13940))+((r12*x13939)));
evalcond[4]=(((r11*x13931))+(((-1.0)*r12*sj3*x13938))+(((-1.0)*sj3*x13930*x13937))+((r10*x13932))+((r10*x13923*x13926)));
evalcond[5]=(((r20*x13935))+((r21*x13926))+(((-1.0)*r20*x13931*x13937))+x13941+((r22*x13939))+((r21*x13923*x13932)));
evalcond[6]=((((-1.0)*r02*sj3*x13938))+((r01*x13931))+x13941+(((-1.0)*r01*x13935*x13937))+((r00*x13923*x13926))+((cj3*x13928)));
evalcond[7]=(((sj3*x13928))+(((-1.0)*x13929))+x13934+(((-1.0)*r00*x13931*x13937))+((r01*x13926))+((r01*x13923*x13932))+((r02*x13939)));
evalcond[8]=((((-1.0)*sj3*x13933*x13937))+((r20*x13932))+((r21*x13931))+(((-1.0)*r22*sj3*x13938))+x13929+((r20*x13923*x13926))+(((-1.0)*x13934)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x13942=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x13942;
j4eval[1]=IKsign(x13942);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x13943=((1.0)*cj5);
IkReal x13944=((((-1.0)*r00*sj5))+(((-1.0)*r01*x13943)));
j4eval[0]=x13944;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x13943)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13944);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x13945=cj5*cj5;
IkReal x13946=(cj3*r21);
IkReal x13947=(cj5*sj5);
IkReal x13948=((1.0)*cj3);
IkReal x13949=((((-1.0)*r11*x13946))+((r11*x13945*x13946))+((r10*x13946*x13947))+(((-1.0)*r10*r20*x13945*x13948))+(((-1.0)*r12*r22*x13948))+((cj3*r11*r20*x13947)));
j4eval[0]=x13949;
j4eval[1]=IKsign(x13949);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13950=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x13950;
j4eval[1]=IKsign(x13950);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13951=((1.0)*cj5);
IkReal x13952=((((-1.0)*r00*sj5))+(((-1.0)*r01*x13951)));
j4eval[0]=x13952;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x13951)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13952);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13953=cj5*cj5;
IkReal x13954=r11*r11;
IkReal x13955=(r11*sj5);
IkReal x13956=(cj5*r10);
IkReal x13957=((r12*r12)+((x13953*(r10*r10)))+x13954+(((-1.0)*x13953*x13954))+(((-2.0)*x13955*x13956)));
j4eval[0]=x13957;
j4eval[1]=IKsign(x13957);
j4eval[2]=((IKabs(r12))+(IKabs((x13956+(((-1.0)*x13955))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13958=((-1.0)*px);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13958);
rxp1_1=(px*r21);
rxp1_2=(r11*x13958);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13959=((-1.0)*px);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13959);
rxp1_1=(px*r21);
rxp1_2=(r11*x13959);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13960=((1.0)*sj1);
CheckValue<IkReal> x13961=IKPowWithIntegerCheck(r02,-1);
if(!x13961.valid){
continue;
}
CheckValue<IkReal> x13962=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x13962.valid){
continue;
}
if( IKabs(((x13961.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13960)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13962.value)*(((((-1.0)*sj2*x13960))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13961.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13960))))))+IKsqr(((x13962.value)*(((((-1.0)*sj2*x13960))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13961.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13960))))), ((x13962.value)*(((((-1.0)*sj2*x13960))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13963=IKsin(j4);
IkReal x13964=IKcos(j4);
IkReal x13965=(cj5*r20);
IkReal x13966=((1.0)*cj2);
IkReal x13967=(cj5*r10);
IkReal x13968=((1.0)*x13963);
IkReal x13969=(sj5*x13963);
IkReal x13970=((1.0)*sj5*x13964);
evalcond[0]=((-1.0)*r02*x13964);
evalcond[1]=((((-1.0)*x13965*x13968))+((r21*x13969)));
evalcond[2]=((((-1.0)*r11*x13970))+((x13964*x13967)));
evalcond[3]=((1.0)+((r11*x13969))+(((-1.0)*x13967*x13968)));
evalcond[4]=((((-1.0)*r02*x13968))+(((-1.0)*sj1*x13966))+(((-1.0)*cj1*sj2)));
evalcond[5]=((((-1.0)*cj1*x13966))+(((-1.0)*r21*x13970))+((sj1*sj2))+((x13964*x13965)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13971=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x13971.valid){
continue;
}
CheckValue<IkReal> x13972=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x13972.valid){
continue;
}
if( IKabs(((-1.0)*(x13971.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13972.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13971.value)))+IKsqr(((x13972.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13971.value)), ((x13972.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13973=IKsin(j4);
IkReal x13974=IKcos(j4);
IkReal x13975=(cj5*r20);
IkReal x13976=((1.0)*cj2);
IkReal x13977=(cj5*r10);
IkReal x13978=((1.0)*x13973);
IkReal x13979=(sj5*x13973);
IkReal x13980=((1.0)*sj5*x13974);
evalcond[0]=((-1.0)*r02*x13974);
evalcond[1]=((((-1.0)*x13975*x13978))+((r21*x13979)));
evalcond[2]=(((x13974*x13977))+(((-1.0)*r11*x13980)));
evalcond[3]=((1.0)+(((-1.0)*x13977*x13978))+((r11*x13979)));
evalcond[4]=((((-1.0)*r02*x13978))+(((-1.0)*sj1*x13976))+(((-1.0)*cj1*sj2)));
evalcond[5]=(((sj1*sj2))+(((-1.0)*r21*x13980))+((x13974*x13975))+(((-1.0)*cj1*x13976)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13981=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13981);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13981);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13982=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13982);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13982);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13983=IKPowWithIntegerCheck(r22,-1);
if(!x13983.valid){
continue;
}
CheckValue<IkReal> x13984=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13984.valid){
continue;
}
if( IKabs(((x13983.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13984.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13983.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x13984.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13983.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x13984.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13985=IKsin(j4);
IkReal x13986=IKcos(j4);
IkReal x13987=((1.0)*cj2);
IkReal x13988=(cj5*x13986);
IkReal x13989=(sj5*x13985);
IkReal x13990=((1.0)*sj5*x13986);
IkReal x13991=((1.0)*cj5*x13985);
evalcond[0]=((-1.0)*r22*x13986);
evalcond[1]=(((r01*x13989))+(((-1.0)*r00*x13991)));
evalcond[2]=((((-1.0)*r22*x13985))+(((-1.0)*cj1*x13987))+((sj1*sj2)));
evalcond[3]=((((-1.0)*r11*x13990))+((r10*x13988)));
evalcond[4]=((1.0)+((r11*x13989))+(((-1.0)*r10*x13991)));
evalcond[5]=(((r00*x13988))+(((-1.0)*cj1*sj2))+(((-1.0)*r01*x13990))+(((-1.0)*sj1*x13987)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13992=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x13992.valid){
continue;
}
CheckValue<IkReal> x13993=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13993.valid){
continue;
}
if( IKabs(((-1.0)*(x13992.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13993.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13992.value)))+IKsqr(((x13993.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13992.value)), ((x13993.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13994=IKsin(j4);
IkReal x13995=IKcos(j4);
IkReal x13996=((1.0)*cj2);
IkReal x13997=(cj5*x13995);
IkReal x13998=(sj5*x13994);
IkReal x13999=((1.0)*sj5*x13995);
IkReal x14000=((1.0)*cj5*x13994);
evalcond[0]=((-1.0)*r22*x13995);
evalcond[1]=((((-1.0)*r00*x14000))+((r01*x13998)));
evalcond[2]=((((-1.0)*cj1*x13996))+((sj1*sj2))+(((-1.0)*r22*x13994)));
evalcond[3]=((((-1.0)*r11*x13999))+((r10*x13997)));
evalcond[4]=((1.0)+((r11*x13998))+(((-1.0)*r10*x14000)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r01*x13999))+(((-1.0)*sj1*x13996))+((r00*x13997)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14001=cj5*cj5;
IkReal x14002=r11*r11;
IkReal x14003=(cj5*r10);
IkReal x14004=(r11*sj5);
CheckValue<IkReal> x14005=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14001*x14002))+(r12*r12)+(((-2.0)*x14003*x14004))+x14002+((x14001*(r10*r10))))),-1);
if(!x14005.valid){
continue;
}
CheckValue<IkReal> x14006 = IKatan2WithCheck(IkReal(((((-1.0)*x14004))+x14003)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x14006.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14005.value)))+(x14006.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14007=IKsin(j4);
IkReal x14008=IKcos(j4);
IkReal x14009=(cj5*r10);
IkReal x14010=(r01*sj5);
IkReal x14011=((1.0)*cj2);
IkReal x14012=(cj5*r00);
IkReal x14013=(cj5*r20);
IkReal x14014=((1.0)*x14008);
IkReal x14015=((1.0)*x14007);
IkReal x14016=(sj5*x14007);
evalcond[0]=(((r21*x14016))+(((-1.0)*x14013*x14015))+(((-1.0)*r22*x14014)));
evalcond[1]=((((-1.0)*x14012*x14015))+(((-1.0)*r02*x14014))+((x14007*x14010)));
evalcond[2]=((((-1.0)*r11*sj5*x14014))+(((-1.0)*r12*x14015))+((x14008*x14009)));
evalcond[3]=((1.0)+(((-1.0)*x14009*x14015))+((r11*x14016))+(((-1.0)*r12*x14014)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x14011))+((x14008*x14013))+(((-1.0)*r21*sj5*x14014))+(((-1.0)*r22*x14015)));
evalcond[5]=((((-1.0)*r02*x14015))+(((-1.0)*sj1*x14011))+(((-1.0)*cj1*sj2))+(((-1.0)*x14010*x14014))+((x14008*x14012)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14017=((1.0)*cj5);
CheckValue<IkReal> x14018 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x14017)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14018.valid){
continue;
}
CheckValue<IkReal> x14019=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x14017))+(((-1.0)*r00*sj5)))),-1);
if(!x14019.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14018.value)+(((1.5707963267949)*(x14019.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14020=IKsin(j4);
IkReal x14021=IKcos(j4);
IkReal x14022=(cj5*r10);
IkReal x14023=(r01*sj5);
IkReal x14024=((1.0)*cj2);
IkReal x14025=(cj5*r00);
IkReal x14026=(cj5*r20);
IkReal x14027=((1.0)*x14021);
IkReal x14028=((1.0)*x14020);
IkReal x14029=(sj5*x14020);
evalcond[0]=(((r21*x14029))+(((-1.0)*r22*x14027))+(((-1.0)*x14026*x14028)));
evalcond[1]=((((-1.0)*x14025*x14028))+(((-1.0)*r02*x14027))+((x14020*x14023)));
evalcond[2]=((((-1.0)*r11*sj5*x14027))+((x14021*x14022))+(((-1.0)*r12*x14028)));
evalcond[3]=((1.0)+((r11*x14029))+(((-1.0)*r12*x14027))+(((-1.0)*x14022*x14028)));
evalcond[4]=((((-1.0)*cj1*x14024))+((x14021*x14026))+((sj1*sj2))+(((-1.0)*r21*sj5*x14027))+(((-1.0)*r22*x14028)));
evalcond[5]=(((x14021*x14025))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x14028))+(((-1.0)*x14023*x14027))+(((-1.0)*sj1*x14024)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14030=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14030.valid){
continue;
}
CheckValue<IkReal> x14031 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14031.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14030.value)))+(x14031.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14032=IKsin(j4);
IkReal x14033=IKcos(j4);
IkReal x14034=(cj5*r10);
IkReal x14035=(r01*sj5);
IkReal x14036=((1.0)*cj2);
IkReal x14037=(cj5*r00);
IkReal x14038=(cj5*r20);
IkReal x14039=((1.0)*x14033);
IkReal x14040=((1.0)*x14032);
IkReal x14041=(sj5*x14032);
evalcond[0]=((((-1.0)*x14038*x14040))+((r21*x14041))+(((-1.0)*r22*x14039)));
evalcond[1]=((((-1.0)*x14037*x14040))+(((-1.0)*r02*x14039))+((x14032*x14035)));
evalcond[2]=((((-1.0)*r11*sj5*x14039))+(((-1.0)*r12*x14040))+((x14033*x14034)));
evalcond[3]=((1.0)+((r11*x14041))+(((-1.0)*x14034*x14040))+(((-1.0)*r12*x14039)));
evalcond[4]=(((sj1*sj2))+((x14033*x14038))+(((-1.0)*r21*sj5*x14039))+(((-1.0)*r22*x14040))+(((-1.0)*cj1*x14036)));
evalcond[5]=((((-1.0)*x14035*x14039))+(((-1.0)*cj1*sj2))+((x14033*x14037))+(((-1.0)*r02*x14040))+(((-1.0)*sj1*x14036)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14042=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14042;
j4eval[1]=IKsign(x14042);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14043=((1.0)*cj5);
IkReal x14044=((((-1.0)*r00*sj5))+(((-1.0)*r01*x14043)));
j4eval[0]=x14044;
j4eval[1]=((IKabs(((((-1.0)*r20*x14043))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x14044);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14045=(sj1*sj2);
IkReal x14046=(cj5*r10);
IkReal x14047=(r11*sj5);
IkReal x14048=(cj1*cj2);
IkReal x14049=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x14049;
j4eval[1]=((IKabs(((((-1.0)*x14045*x14046))+(((-1.0)*x14047*x14048))+((x14046*x14048))+((x14045*x14047)))))+(IKabs(((((-1.0)*r12*x14045))+((r12*x14048))))));
j4eval[2]=IKsign(x14049);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14050=((-1.0)*px);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14050);
rxp1_1=(px*r21);
rxp1_2=(r11*x14050);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14051=((-1.0)*px);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14051);
rxp1_1=(px*r21);
rxp1_2=(r11*x14051);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x14052=((1.0)*cj5);
j4eval[0]=((((-1.0)*r10*x14052))+((r11*sj5)));
j4eval[1]=((((-1.0)*r20*x14052))+((r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14053=((1.0)*cj5);
CheckValue<IkReal> x14054=IKPowWithIntegerCheck(((((-1.0)*r10*x14053))+((r11*sj5))),-1);
if(!x14054.valid){
continue;
}
CheckValue<IkReal> x14055=IKPowWithIntegerCheck(((((-1.0)*r20*x14053))+((r21*sj5))),-1);
if(!x14055.valid){
continue;
}
if( IKabs(((-1.0)*(x14054.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14055.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x14054.value)))+IKsqr(((x14055.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x14054.value)), ((x14055.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14056=IKsin(j4);
IkReal x14057=IKcos(j4);
IkReal x14058=((1.0)*cj2);
IkReal x14059=(r21*sj5);
IkReal x14060=(r11*sj5);
IkReal x14061=((1.0)*cj5*x14056);
IkReal x14062=((1.0)*cj5*x14057);
evalcond[0]=((-1.0)*r02*x14057);
evalcond[1]=((((-1.0)*r20*x14061))+((x14056*x14059)));
evalcond[2]=((((-1.0)*cj1*sj2))+((r02*x14056))+(((-1.0)*sj1*x14058)));
evalcond[3]=(((x14057*x14060))+(((-1.0)*r10*x14062)));
evalcond[4]=((1.0)+((x14056*x14060))+(((-1.0)*r10*x14061)));
evalcond[5]=((((-1.0)*cj1*x14058))+((x14057*x14059))+((sj1*sj2))+(((-1.0)*r20*x14062)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14063=IKPowWithIntegerCheck(r02,-1);
if(!x14063.valid){
continue;
}
CheckValue<IkReal> x14064=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x14064.valid){
continue;
}
if( IKabs(((x14063.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14064.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14063.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x14064.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14063.value)*((((cj2*sj1))+((cj1*sj2))))), ((x14064.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14065=IKsin(j4);
IkReal x14066=IKcos(j4);
IkReal x14067=((1.0)*cj2);
IkReal x14068=(r21*sj5);
IkReal x14069=(r11*sj5);
IkReal x14070=((1.0)*cj5*x14065);
IkReal x14071=((1.0)*cj5*x14066);
evalcond[0]=((-1.0)*r02*x14066);
evalcond[1]=((((-1.0)*r20*x14070))+((x14065*x14068)));
evalcond[2]=(((r02*x14065))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x14067)));
evalcond[3]=(((x14066*x14069))+(((-1.0)*r10*x14071)));
evalcond[4]=((1.0)+((x14065*x14069))+(((-1.0)*r10*x14070)));
evalcond[5]=(((sj1*sj2))+(((-1.0)*cj1*x14067))+(((-1.0)*r20*x14071))+((x14066*x14068)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x14072=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x14072;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x14072);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x14073=((1.0)*cj5);
IkReal x14074=((((-1.0)*r21*x14073))+(((-1.0)*r20*sj5)));
j4eval[0]=x14074;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x14073))))));
j4eval[2]=IKsign(x14074);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x14075=cj5*cj5;
IkReal x14076=(r11*r21);
IkReal x14077=((1.0)*r20);
IkReal x14078=(cj5*sj5);
IkReal x14079=((((-1.0)*r12*r22))+((r10*r21*x14078))+(((-1.0)*x14076))+((r11*r20*x14078))+((x14075*x14076))+(((-1.0)*r10*x14075*x14077)));
j4eval[0]=x14079;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x14077))))));
j4eval[2]=IKsign(x14079);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14080=cj5*cj5;
IkReal x14081=(r21*sj5);
IkReal x14082=(r11*r21);
IkReal x14083=((1.0)*r20);
CheckValue<IkReal> x14084=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+(((-1.0)*r10*x14080*x14083))+(((-1.0)*x14082))+((x14080*x14082))+((cj5*r10*x14081))+((cj5*r11*r20*sj5)))),-1);
if(!x14084.valid){
continue;
}
CheckValue<IkReal> x14085 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x14083))+x14081)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x14085.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14084.value)))+(x14085.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14086=IKcos(j4);
IkReal x14087=IKsin(j4);
IkReal x14088=(cj5*r00);
IkReal x14089=(cj5*r20);
IkReal x14090=(cj5*r10);
IkReal x14091=((1.0)*x14086);
IkReal x14092=((1.0)*x14087);
IkReal x14093=(sj5*x14086);
IkReal x14094=(sj5*x14087);
evalcond[0]=((((-1.0)*x14089*x14091))+((r21*x14093))+((r22*x14087)));
evalcond[1]=(((r12*x14087))+((r11*x14093))+(((-1.0)*x14090*x14091)));
evalcond[2]=((((-1.0)*x14089*x14092))+(((-1.0)*r22*x14091))+((r21*x14094)));
evalcond[3]=((((-1.0)*r02*x14091))+(((-1.0)*x14088*x14092))+((r01*x14094)));
evalcond[4]=((-1.0)+((r02*x14087))+(((-1.0)*x14088*x14091))+((r01*x14093)));
evalcond[5]=((1.0)+(((-1.0)*r12*x14091))+((r11*x14094))+(((-1.0)*x14090*x14092)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14095=((1.0)*cj5);
CheckValue<IkReal> x14096=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14095))+(((-1.0)*r20*sj5)))),-1);
if(!x14096.valid){
continue;
}
CheckValue<IkReal> x14097 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x14095)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x14097.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14096.value)))+(x14097.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14098=IKcos(j4);
IkReal x14099=IKsin(j4);
IkReal x14100=(cj5*r00);
IkReal x14101=(cj5*r20);
IkReal x14102=(cj5*r10);
IkReal x14103=((1.0)*x14098);
IkReal x14104=((1.0)*x14099);
IkReal x14105=(sj5*x14098);
IkReal x14106=(sj5*x14099);
evalcond[0]=((((-1.0)*x14101*x14103))+((r22*x14099))+((r21*x14105)));
evalcond[1]=(((r12*x14099))+(((-1.0)*x14102*x14103))+((r11*x14105)));
evalcond[2]=((((-1.0)*x14101*x14104))+(((-1.0)*r22*x14103))+((r21*x14106)));
evalcond[3]=(((r01*x14106))+(((-1.0)*x14100*x14104))+(((-1.0)*r02*x14103)));
evalcond[4]=((-1.0)+((r01*x14105))+(((-1.0)*x14100*x14103))+((r02*x14099)));
evalcond[5]=((1.0)+(((-1.0)*r12*x14103))+(((-1.0)*x14102*x14104))+((r11*x14106)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14107 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x14107.valid){
continue;
}
CheckValue<IkReal> x14108=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x14108.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14107.value)+(((1.5707963267949)*(x14108.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14109=IKcos(j4);
IkReal x14110=IKsin(j4);
IkReal x14111=(cj5*r00);
IkReal x14112=(cj5*r20);
IkReal x14113=(cj5*r10);
IkReal x14114=((1.0)*x14109);
IkReal x14115=((1.0)*x14110);
IkReal x14116=(sj5*x14109);
IkReal x14117=(sj5*x14110);
evalcond[0]=(((r22*x14110))+(((-1.0)*x14112*x14114))+((r21*x14116)));
evalcond[1]=(((r11*x14116))+((r12*x14110))+(((-1.0)*x14113*x14114)));
evalcond[2]=((((-1.0)*r22*x14114))+(((-1.0)*x14112*x14115))+((r21*x14117)));
evalcond[3]=(((r01*x14117))+(((-1.0)*r02*x14114))+(((-1.0)*x14111*x14115)));
evalcond[4]=((-1.0)+((r02*x14110))+((r01*x14116))+(((-1.0)*x14111*x14114)));
evalcond[5]=((1.0)+((r11*x14117))+(((-1.0)*r12*x14114))+(((-1.0)*x14113*x14115)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x14118=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14118;
j4eval[1]=IKsign(x14118);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x14119=((1.0)*cj5);
IkReal x14120=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14119)));
j4eval[0]=x14120;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x14119))+((r21*sj5))))));
j4eval[2]=IKsign(x14120);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x14121=cj5*cj5;
IkReal x14122=(r11*r21);
IkReal x14123=((1.0)*r20);
IkReal x14124=(cj5*sj5);
IkReal x14125=((((-1.0)*r12*r22))+((x14121*x14122))+((r10*r21*x14124))+((r11*r20*x14124))+(((-1.0)*x14122))+(((-1.0)*r10*x14121*x14123)));
j4eval[0]=x14125;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x14123))))));
j4eval[2]=IKsign(x14125);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14126=cj5*cj5;
IkReal x14127=(r21*sj5);
IkReal x14128=(r11*r21);
IkReal x14129=((1.0)*r20);
CheckValue<IkReal> x14130=IKPowWithIntegerCheck(IKsign((((cj5*r10*x14127))+(((-1.0)*r12*r22))+((x14126*x14128))+(((-1.0)*r10*x14126*x14129))+(((-1.0)*x14128))+((cj5*r11*r20*sj5)))),-1);
if(!x14130.valid){
continue;
}
CheckValue<IkReal> x14131 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x14129))+x14127)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x14131.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14130.value)))+(x14131.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14132=IKcos(j4);
IkReal x14133=IKsin(j4);
IkReal x14134=(cj5*r00);
IkReal x14135=(cj5*r20);
IkReal x14136=(cj5*r10);
IkReal x14137=((1.0)*x14132);
IkReal x14138=((1.0)*x14133);
IkReal x14139=(sj5*x14132);
IkReal x14140=(sj5*x14133);
evalcond[0]=((((-1.0)*x14135*x14137))+((r21*x14139))+((r22*x14133)));
evalcond[1]=(((r11*x14139))+((r12*x14133))+(((-1.0)*x14136*x14137)));
evalcond[2]=((((-1.0)*x14135*x14138))+((r21*x14140))+(((-1.0)*r22*x14137)));
evalcond[3]=((((-1.0)*r02*x14137))+(((-1.0)*x14134*x14138))+((r01*x14140)));
evalcond[4]=((1.0)+((r02*x14133))+(((-1.0)*x14134*x14137))+((r01*x14139)));
evalcond[5]=((1.0)+(((-1.0)*x14136*x14138))+(((-1.0)*r12*x14137))+((r11*x14140)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14141=((1.0)*cj5);
CheckValue<IkReal> x14142=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x14141)))),-1);
if(!x14142.valid){
continue;
}
CheckValue<IkReal> x14143 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x14141)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x14143.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14142.value)))+(x14143.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14144=IKcos(j4);
IkReal x14145=IKsin(j4);
IkReal x14146=(cj5*r00);
IkReal x14147=(cj5*r20);
IkReal x14148=(cj5*r10);
IkReal x14149=((1.0)*x14144);
IkReal x14150=((1.0)*x14145);
IkReal x14151=(sj5*x14144);
IkReal x14152=(sj5*x14145);
evalcond[0]=((((-1.0)*x14147*x14149))+((r22*x14145))+((r21*x14151)));
evalcond[1]=((((-1.0)*x14148*x14149))+((r11*x14151))+((r12*x14145)));
evalcond[2]=((((-1.0)*r22*x14149))+(((-1.0)*x14147*x14150))+((r21*x14152)));
evalcond[3]=((((-1.0)*x14146*x14150))+((r01*x14152))+(((-1.0)*r02*x14149)));
evalcond[4]=((1.0)+((r02*x14145))+(((-1.0)*x14146*x14149))+((r01*x14151)));
evalcond[5]=((1.0)+(((-1.0)*x14148*x14150))+((r11*x14152))+(((-1.0)*r12*x14149)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14153=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14153.valid){
continue;
}
CheckValue<IkReal> x14154 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x14154.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14153.value)))+(x14154.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14155=IKcos(j4);
IkReal x14156=IKsin(j4);
IkReal x14157=(cj5*r00);
IkReal x14158=(cj5*r20);
IkReal x14159=(cj5*r10);
IkReal x14160=((1.0)*x14155);
IkReal x14161=((1.0)*x14156);
IkReal x14162=(sj5*x14155);
IkReal x14163=(sj5*x14156);
evalcond[0]=(((r22*x14156))+((r21*x14162))+(((-1.0)*x14158*x14160)));
evalcond[1]=(((r11*x14162))+((r12*x14156))+(((-1.0)*x14159*x14160)));
evalcond[2]=((((-1.0)*r22*x14160))+((r21*x14163))+(((-1.0)*x14158*x14161)));
evalcond[3]=((((-1.0)*r02*x14160))+(((-1.0)*x14157*x14161))+((r01*x14163)));
evalcond[4]=((1.0)+(((-1.0)*x14157*x14160))+((r02*x14156))+((r01*x14162)));
evalcond[5]=((1.0)+(((-1.0)*r12*x14160))+((r11*x14163))+(((-1.0)*x14159*x14161)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x14164=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x14164;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x14164);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x14165=((1.0)*cj5);
IkReal x14166=((((-1.0)*r21*x14165))+(((-1.0)*r20*sj5)));
j4eval[0]=x14166;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x14165))))));
j4eval[2]=IKsign(x14166);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x14167=cj5*cj5;
IkReal x14168=(r11*r21);
IkReal x14169=((1.0)*r20);
IkReal x14170=(cj5*sj5);
IkReal x14171=(((r11*r20*x14170))+(((-1.0)*r12*r22))+(((-1.0)*r10*x14167*x14169))+((x14167*x14168))+((r10*r21*x14170))+(((-1.0)*x14168)));
j4eval[0]=x14171;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x14169)))))+(IKabs(r22)));
j4eval[2]=IKsign(x14171);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14172=cj5*cj5;
IkReal x14173=(r21*sj5);
IkReal x14174=(r11*r21);
IkReal x14175=((1.0)*r20);
CheckValue<IkReal> x14176=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+(((-1.0)*r10*x14172*x14175))+(((-1.0)*x14174))+((cj5*r10*x14173))+((x14172*x14174))+((cj5*r11*r20*sj5)))),-1);
if(!x14176.valid){
continue;
}
CheckValue<IkReal> x14177 = IKatan2WithCheck(IkReal((x14173+(((-1.0)*cj5*x14175)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x14177.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14176.value)))+(x14177.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14178=IKcos(j4);
IkReal x14179=IKsin(j4);
IkReal x14180=(cj5*r00);
IkReal x14181=(cj5*r20);
IkReal x14182=(cj5*r10);
IkReal x14183=((1.0)*x14178);
IkReal x14184=((1.0)*x14179);
IkReal x14185=(sj5*x14178);
IkReal x14186=(sj5*x14179);
evalcond[0]=(((r22*x14179))+(((-1.0)*x14181*x14183))+((r21*x14185)));
evalcond[1]=(((r12*x14179))+(((-1.0)*x14182*x14183))+((r11*x14185)));
evalcond[2]=((((-1.0)*r22*x14183))+(((-1.0)*x14181*x14184))+((r21*x14186)));
evalcond[3]=((((-1.0)*x14180*x14184))+((r01*x14186))+(((-1.0)*r02*x14183)));
evalcond[4]=((-1.0)+(((-1.0)*x14180*x14183))+((r01*x14185))+((r02*x14179)));
evalcond[5]=((1.0)+(((-1.0)*x14182*x14184))+(((-1.0)*r12*x14183))+((r11*x14186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14187=((1.0)*cj5);
CheckValue<IkReal> x14188=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14187))+(((-1.0)*r20*sj5)))),-1);
if(!x14188.valid){
continue;
}
CheckValue<IkReal> x14189 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x14187))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x14189.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14188.value)))+(x14189.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14190=IKcos(j4);
IkReal x14191=IKsin(j4);
IkReal x14192=(cj5*r00);
IkReal x14193=(cj5*r20);
IkReal x14194=(cj5*r10);
IkReal x14195=((1.0)*x14190);
IkReal x14196=((1.0)*x14191);
IkReal x14197=(sj5*x14190);
IkReal x14198=(sj5*x14191);
evalcond[0]=((((-1.0)*x14193*x14195))+((r22*x14191))+((r21*x14197)));
evalcond[1]=((((-1.0)*x14194*x14195))+((r11*x14197))+((r12*x14191)));
evalcond[2]=((((-1.0)*r22*x14195))+(((-1.0)*x14193*x14196))+((r21*x14198)));
evalcond[3]=((((-1.0)*x14192*x14196))+(((-1.0)*r02*x14195))+((r01*x14198)));
evalcond[4]=((-1.0)+((r02*x14191))+(((-1.0)*x14192*x14195))+((r01*x14197)));
evalcond[5]=((1.0)+(((-1.0)*r12*x14195))+(((-1.0)*x14194*x14196))+((r11*x14198)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14199 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x14199.valid){
continue;
}
CheckValue<IkReal> x14200=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x14200.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14199.value)+(((1.5707963267949)*(x14200.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14201=IKcos(j4);
IkReal x14202=IKsin(j4);
IkReal x14203=(cj5*r00);
IkReal x14204=(cj5*r20);
IkReal x14205=(cj5*r10);
IkReal x14206=((1.0)*x14201);
IkReal x14207=((1.0)*x14202);
IkReal x14208=(sj5*x14201);
IkReal x14209=(sj5*x14202);
evalcond[0]=(((r21*x14208))+(((-1.0)*x14204*x14206))+((r22*x14202)));
evalcond[1]=((((-1.0)*x14205*x14206))+((r12*x14202))+((r11*x14208)));
evalcond[2]=(((r21*x14209))+(((-1.0)*x14204*x14207))+(((-1.0)*r22*x14206)));
evalcond[3]=((((-1.0)*r02*x14206))+((r01*x14209))+(((-1.0)*x14203*x14207)));
evalcond[4]=((-1.0)+((r02*x14202))+((r01*x14208))+(((-1.0)*x14203*x14206)));
evalcond[5]=((1.0)+(((-1.0)*x14205*x14207))+(((-1.0)*r12*x14206))+((r11*x14209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x14210=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14210;
j4eval[1]=IKsign(x14210);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x14211=((1.0)*cj5);
IkReal x14212=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14211)));
j4eval[0]=x14212;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x14211))))));
j4eval[2]=IKsign(x14212);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x14213=cj5*cj5;
IkReal x14214=(r11*r21);
IkReal x14215=((1.0)*r20);
IkReal x14216=(cj5*sj5);
IkReal x14217=(((r11*r20*x14216))+(((-1.0)*r12*r22))+(((-1.0)*r10*x14213*x14215))+((r10*r21*x14216))+(((-1.0)*x14214))+((x14213*x14214)));
j4eval[0]=x14217;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x14215))))));
j4eval[2]=IKsign(x14217);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14218=cj5*cj5;
IkReal x14219=(r21*sj5);
IkReal x14220=(r11*r21);
IkReal x14221=((1.0)*r20);
CheckValue<IkReal> x14222=IKPowWithIntegerCheck(IKsign((((x14218*x14220))+(((-1.0)*r12*r22))+((cj5*r10*x14219))+(((-1.0)*r10*x14218*x14221))+(((-1.0)*x14220))+((cj5*r11*r20*sj5)))),-1);
if(!x14222.valid){
continue;
}
CheckValue<IkReal> x14223 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x14221))+x14219)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x14223.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14222.value)))+(x14223.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14224=IKcos(j4);
IkReal x14225=IKsin(j4);
IkReal x14226=(cj5*r00);
IkReal x14227=(cj5*r20);
IkReal x14228=(cj5*r10);
IkReal x14229=((1.0)*x14224);
IkReal x14230=((1.0)*x14225);
IkReal x14231=(sj5*x14224);
IkReal x14232=(sj5*x14225);
evalcond[0]=(((r21*x14231))+((r22*x14225))+(((-1.0)*x14227*x14229)));
evalcond[1]=((((-1.0)*x14228*x14229))+((r11*x14231))+((r12*x14225)));
evalcond[2]=((((-1.0)*x14227*x14230))+((r21*x14232))+(((-1.0)*r22*x14229)));
evalcond[3]=(((r01*x14232))+(((-1.0)*r02*x14229))+(((-1.0)*x14226*x14230)));
evalcond[4]=((1.0)+(((-1.0)*x14226*x14229))+((r02*x14225))+((r01*x14231)));
evalcond[5]=((1.0)+(((-1.0)*r12*x14229))+(((-1.0)*x14228*x14230))+((r11*x14232)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14233=((1.0)*cj5);
CheckValue<IkReal> x14234=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x14233)))),-1);
if(!x14234.valid){
continue;
}
CheckValue<IkReal> x14235 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x14233)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x14235.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14234.value)))+(x14235.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14236=IKcos(j4);
IkReal x14237=IKsin(j4);
IkReal x14238=(cj5*r00);
IkReal x14239=(cj5*r20);
IkReal x14240=(cj5*r10);
IkReal x14241=((1.0)*x14236);
IkReal x14242=((1.0)*x14237);
IkReal x14243=(sj5*x14236);
IkReal x14244=(sj5*x14237);
evalcond[0]=(((r21*x14243))+(((-1.0)*x14239*x14241))+((r22*x14237)));
evalcond[1]=(((r11*x14243))+((r12*x14237))+(((-1.0)*x14240*x14241)));
evalcond[2]=(((r21*x14244))+(((-1.0)*x14239*x14242))+(((-1.0)*r22*x14241)));
evalcond[3]=((((-1.0)*x14238*x14242))+((r01*x14244))+(((-1.0)*r02*x14241)));
evalcond[4]=((1.0)+(((-1.0)*x14238*x14241))+((r02*x14237))+((r01*x14243)));
evalcond[5]=((1.0)+((r11*x14244))+(((-1.0)*r12*x14241))+(((-1.0)*x14240*x14242)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14245=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14245.valid){
continue;
}
CheckValue<IkReal> x14246 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x14246.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14245.value)))+(x14246.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14247=IKcos(j4);
IkReal x14248=IKsin(j4);
IkReal x14249=(cj5*r00);
IkReal x14250=(cj5*r20);
IkReal x14251=(cj5*r10);
IkReal x14252=((1.0)*x14247);
IkReal x14253=((1.0)*x14248);
IkReal x14254=(sj5*x14247);
IkReal x14255=(sj5*x14248);
evalcond[0]=(((r21*x14254))+(((-1.0)*x14250*x14252))+((r22*x14248)));
evalcond[1]=(((r12*x14248))+((r11*x14254))+(((-1.0)*x14251*x14252)));
evalcond[2]=(((r21*x14255))+(((-1.0)*x14250*x14253))+(((-1.0)*r22*x14252)));
evalcond[3]=((((-1.0)*r02*x14252))+((r01*x14255))+(((-1.0)*x14249*x14253)));
evalcond[4]=((1.0)+((r02*x14248))+((r01*x14254))+(((-1.0)*x14249*x14252)));
evalcond[5]=((1.0)+((r11*x14255))+(((-1.0)*r12*x14252))+(((-1.0)*x14251*x14253)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x14256=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14256;
j4eval[1]=IKsign(x14256);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x14257=((1.0)*cj5);
IkReal x14258=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14257)));
j4eval[0]=x14258;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x14257)))))+(IKabs(r22)));
j4eval[2]=IKsign(x14258);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x14259=cj5*cj5;
IkReal x14260=(r11*r21);
IkReal x14261=((1.0)*r20);
IkReal x14262=(cj5*sj5);
IkReal x14263=(((r10*r21*x14262))+(((-1.0)*x14260))+(((-1.0)*r12*r22))+((r11*r20*x14262))+(((-1.0)*r10*x14259*x14261))+((x14259*x14260)));
j4eval[0]=x14263;
j4eval[1]=((IKabs(((((-1.0)*cj5*x14261))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x14263);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14264=cj5*cj5;
IkReal x14265=(r21*sj5);
IkReal x14266=(r11*r21);
IkReal x14267=((1.0)*r20);
CheckValue<IkReal> x14268 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x14267))+x14265)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x14268.valid){
continue;
}
CheckValue<IkReal> x14269=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14266))+(((-1.0)*r12*r22))+((cj5*r10*x14265))+((x14264*x14266))+(((-1.0)*r10*x14264*x14267))+((cj5*r11*r20*sj5)))),-1);
if(!x14269.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14268.value)+(((1.5707963267949)*(x14269.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14270=IKcos(j4);
IkReal x14271=IKsin(j4);
IkReal x14272=(cj5*r00);
IkReal x14273=(cj5*r20);
IkReal x14274=(cj5*r10);
IkReal x14275=((1.0)*x14270);
IkReal x14276=((1.0)*x14271);
IkReal x14277=(sj5*x14270);
IkReal x14278=(sj5*x14271);
evalcond[0]=((((-1.0)*x14273*x14275))+((r21*x14277))+((r22*x14271)));
evalcond[1]=((((-1.0)*x14274*x14275))+((r11*x14277))+((r12*x14271)));
evalcond[2]=((((-1.0)*x14273*x14276))+((r21*x14278))+(((-1.0)*r22*x14275)));
evalcond[3]=((((-1.0)*r02*x14275))+((r01*x14278))+(((-1.0)*x14272*x14276)));
evalcond[4]=((1.0)+((r01*x14277))+(((-1.0)*x14272*x14275))+((r02*x14271)));
evalcond[5]=((1.0)+(((-1.0)*x14274*x14276))+((r11*x14278))+(((-1.0)*r12*x14275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14279=((1.0)*cj5);
CheckValue<IkReal> x14280 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x14279)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x14280.valid){
continue;
}
CheckValue<IkReal> x14281=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x14279)))),-1);
if(!x14281.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14280.value)+(((1.5707963267949)*(x14281.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14282=IKcos(j4);
IkReal x14283=IKsin(j4);
IkReal x14284=(cj5*r00);
IkReal x14285=(cj5*r20);
IkReal x14286=(cj5*r10);
IkReal x14287=((1.0)*x14282);
IkReal x14288=((1.0)*x14283);
IkReal x14289=(sj5*x14282);
IkReal x14290=(sj5*x14283);
evalcond[0]=(((r21*x14289))+((r22*x14283))+(((-1.0)*x14285*x14287)));
evalcond[1]=(((r12*x14283))+(((-1.0)*x14286*x14287))+((r11*x14289)));
evalcond[2]=((((-1.0)*r22*x14287))+((r21*x14290))+(((-1.0)*x14285*x14288)));
evalcond[3]=((((-1.0)*x14284*x14288))+((r01*x14290))+(((-1.0)*r02*x14287)));
evalcond[4]=((1.0)+(((-1.0)*x14284*x14287))+((r01*x14289))+((r02*x14283)));
evalcond[5]=((1.0)+(((-1.0)*x14286*x14288))+((r11*x14290))+(((-1.0)*r12*x14287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14291=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14291.valid){
continue;
}
CheckValue<IkReal> x14292 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x14292.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14291.value)))+(x14292.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14293=IKcos(j4);
IkReal x14294=IKsin(j4);
IkReal x14295=(cj5*r00);
IkReal x14296=(cj5*r20);
IkReal x14297=(cj5*r10);
IkReal x14298=((1.0)*x14293);
IkReal x14299=((1.0)*x14294);
IkReal x14300=(sj5*x14293);
IkReal x14301=(sj5*x14294);
evalcond[0]=(((r22*x14294))+(((-1.0)*x14296*x14298))+((r21*x14300)));
evalcond[1]=(((r11*x14300))+((r12*x14294))+(((-1.0)*x14297*x14298)));
evalcond[2]=((((-1.0)*r22*x14298))+(((-1.0)*x14296*x14299))+((r21*x14301)));
evalcond[3]=(((r01*x14301))+(((-1.0)*r02*x14298))+(((-1.0)*x14295*x14299)));
evalcond[4]=((1.0)+((r02*x14294))+((r01*x14300))+(((-1.0)*x14295*x14298)));
evalcond[5]=((1.0)+((r11*x14301))+(((-1.0)*r12*x14298))+(((-1.0)*x14297*x14299)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x14302=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x14302;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x14302);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x14303=((1.0)*cj5);
IkReal x14304=((((-1.0)*r21*x14303))+(((-1.0)*r20*sj5)));
j4eval[0]=x14304;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x14303))))));
j4eval[2]=IKsign(x14304);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x14305=cj5*cj5;
IkReal x14306=(r11*r21);
IkReal x14307=((1.0)*r20);
IkReal x14308=(cj5*sj5);
IkReal x14309=((((-1.0)*r12*r22))+(((-1.0)*r10*x14305*x14307))+((r10*r21*x14308))+(((-1.0)*x14306))+((x14305*x14306))+((r11*r20*x14308)));
j4eval[0]=x14309;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x14307))))));
j4eval[2]=IKsign(x14309);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14310=cj5*cj5;
IkReal x14311=(r21*sj5);
IkReal x14312=(r11*r21);
IkReal x14313=((1.0)*r20);
CheckValue<IkReal> x14314=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+(((-1.0)*r10*x14310*x14313))+(((-1.0)*x14312))+((cj5*r10*x14311))+((x14310*x14312))+((cj5*r11*r20*sj5)))),-1);
if(!x14314.valid){
continue;
}
CheckValue<IkReal> x14315 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x14313))+x14311)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x14315.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14314.value)))+(x14315.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14316=IKcos(j4);
IkReal x14317=IKsin(j4);
IkReal x14318=(cj5*r00);
IkReal x14319=(cj5*r20);
IkReal x14320=(cj5*r10);
IkReal x14321=((1.0)*x14316);
IkReal x14322=((1.0)*x14317);
IkReal x14323=(sj5*x14316);
IkReal x14324=(sj5*x14317);
evalcond[0]=((((-1.0)*x14319*x14321))+((r21*x14323))+((r22*x14317)));
evalcond[1]=((((-1.0)*x14320*x14321))+((r11*x14323))+((r12*x14317)));
evalcond[2]=((((-1.0)*x14319*x14322))+((r21*x14324))+(((-1.0)*r22*x14321)));
evalcond[3]=(((r01*x14324))+(((-1.0)*x14318*x14322))+(((-1.0)*r02*x14321)));
evalcond[4]=((-1.0)+((r01*x14323))+((r02*x14317))+(((-1.0)*x14318*x14321)));
evalcond[5]=((1.0)+(((-1.0)*x14320*x14322))+((r11*x14324))+(((-1.0)*r12*x14321)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14325=((1.0)*cj5);
CheckValue<IkReal> x14326=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14325))+(((-1.0)*r20*sj5)))),-1);
if(!x14326.valid){
continue;
}
CheckValue<IkReal> x14327 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x14325))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x14327.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14326.value)))+(x14327.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14328=IKcos(j4);
IkReal x14329=IKsin(j4);
IkReal x14330=(cj5*r00);
IkReal x14331=(cj5*r20);
IkReal x14332=(cj5*r10);
IkReal x14333=((1.0)*x14328);
IkReal x14334=((1.0)*x14329);
IkReal x14335=(sj5*x14328);
IkReal x14336=(sj5*x14329);
evalcond[0]=((((-1.0)*x14331*x14333))+((r21*x14335))+((r22*x14329)));
evalcond[1]=(((r11*x14335))+(((-1.0)*x14332*x14333))+((r12*x14329)));
evalcond[2]=((((-1.0)*r22*x14333))+(((-1.0)*x14331*x14334))+((r21*x14336)));
evalcond[3]=((((-1.0)*r02*x14333))+((r01*x14336))+(((-1.0)*x14330*x14334)));
evalcond[4]=((-1.0)+((r02*x14329))+((r01*x14335))+(((-1.0)*x14330*x14333)));
evalcond[5]=((1.0)+((r11*x14336))+(((-1.0)*r12*x14333))+(((-1.0)*x14332*x14334)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14337 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x14337.valid){
continue;
}
CheckValue<IkReal> x14338=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x14338.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14337.value)+(((1.5707963267949)*(x14338.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14339=IKcos(j4);
IkReal x14340=IKsin(j4);
IkReal x14341=(cj5*r00);
IkReal x14342=(cj5*r20);
IkReal x14343=(cj5*r10);
IkReal x14344=((1.0)*x14339);
IkReal x14345=((1.0)*x14340);
IkReal x14346=(sj5*x14339);
IkReal x14347=(sj5*x14340);
evalcond[0]=(((r21*x14346))+(((-1.0)*x14342*x14344))+((r22*x14340)));
evalcond[1]=((((-1.0)*x14343*x14344))+((r11*x14346))+((r12*x14340)));
evalcond[2]=(((r21*x14347))+(((-1.0)*x14342*x14345))+(((-1.0)*r22*x14344)));
evalcond[3]=(((r01*x14347))+(((-1.0)*x14341*x14345))+(((-1.0)*r02*x14344)));
evalcond[4]=((-1.0)+((r01*x14346))+(((-1.0)*x14341*x14344))+((r02*x14340)));
evalcond[5]=((1.0)+(((-1.0)*r12*x14344))+(((-1.0)*x14343*x14345))+((r11*x14347)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x14348=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14348;
j4eval[1]=IKsign(x14348);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x14349=((1.0)*cj5);
IkReal x14350=((((-1.0)*r11*x14349))+(((-1.0)*r10*sj5)));
j4eval[0]=x14350;
j4eval[1]=((IKabs(((((-1.0)*r20*x14349))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x14350);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x14351=cj5*cj5;
IkReal x14352=(r11*r21);
IkReal x14353=((1.0)*r20);
IkReal x14354=(cj5*sj5);
IkReal x14355=((((-1.0)*r10*x14351*x14353))+((r11*r20*x14354))+(((-1.0)*r12*r22))+((x14351*x14352))+((r10*r21*x14354))+(((-1.0)*x14352)));
j4eval[0]=x14355;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x14353))))));
j4eval[2]=IKsign(x14355);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14356=cj5*cj5;
IkReal x14357=(r21*sj5);
IkReal x14358=(r11*r21);
IkReal x14359=((1.0)*r20);
CheckValue<IkReal> x14360=IKPowWithIntegerCheck(IKsign((((cj5*r10*x14357))+(((-1.0)*r12*r22))+(((-1.0)*r10*x14356*x14359))+(((-1.0)*x14358))+((x14356*x14358))+((cj5*r11*r20*sj5)))),-1);
if(!x14360.valid){
continue;
}
CheckValue<IkReal> x14361 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x14359))+x14357)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x14361.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14360.value)))+(x14361.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14362=IKcos(j4);
IkReal x14363=IKsin(j4);
IkReal x14364=(cj5*r00);
IkReal x14365=(cj5*r20);
IkReal x14366=(cj5*r10);
IkReal x14367=((1.0)*x14362);
IkReal x14368=((1.0)*x14363);
IkReal x14369=(sj5*x14362);
IkReal x14370=(sj5*x14363);
evalcond[0]=(((r21*x14369))+(((-1.0)*x14365*x14367))+((r22*x14363)));
evalcond[1]=(((r11*x14369))+(((-1.0)*x14366*x14367))+((r12*x14363)));
evalcond[2]=(((r21*x14370))+(((-1.0)*r22*x14367))+(((-1.0)*x14365*x14368)));
evalcond[3]=(((r01*x14370))+(((-1.0)*r02*x14367))+(((-1.0)*x14364*x14368)));
evalcond[4]=((1.0)+((r02*x14363))+(((-1.0)*x14364*x14367))+((r01*x14369)));
evalcond[5]=((1.0)+(((-1.0)*x14366*x14368))+((r11*x14370))+(((-1.0)*r12*x14367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14371=((1.0)*cj5);
CheckValue<IkReal> x14372 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x14371))+((r21*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x14372.valid){
continue;
}
CheckValue<IkReal> x14373=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14371))+(((-1.0)*r10*sj5)))),-1);
if(!x14373.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14372.value)+(((1.5707963267949)*(x14373.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14374=IKcos(j4);
IkReal x14375=IKsin(j4);
IkReal x14376=(cj5*r00);
IkReal x14377=(cj5*r20);
IkReal x14378=(cj5*r10);
IkReal x14379=((1.0)*x14374);
IkReal x14380=((1.0)*x14375);
IkReal x14381=(sj5*x14374);
IkReal x14382=(sj5*x14375);
evalcond[0]=(((r21*x14381))+(((-1.0)*x14377*x14379))+((r22*x14375)));
evalcond[1]=(((r12*x14375))+((r11*x14381))+(((-1.0)*x14378*x14379)));
evalcond[2]=((((-1.0)*x14377*x14380))+((r21*x14382))+(((-1.0)*r22*x14379)));
evalcond[3]=((((-1.0)*x14376*x14380))+((r01*x14382))+(((-1.0)*r02*x14379)));
evalcond[4]=((1.0)+((r01*x14381))+(((-1.0)*x14376*x14379))+((r02*x14375)));
evalcond[5]=((1.0)+(((-1.0)*x14378*x14380))+(((-1.0)*r12*x14379))+((r11*x14382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14383=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14383.valid){
continue;
}
CheckValue<IkReal> x14384 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x14384.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14383.value)))+(x14384.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14385=IKcos(j4);
IkReal x14386=IKsin(j4);
IkReal x14387=(cj5*r00);
IkReal x14388=(cj5*r20);
IkReal x14389=(cj5*r10);
IkReal x14390=((1.0)*x14385);
IkReal x14391=((1.0)*x14386);
IkReal x14392=(sj5*x14385);
IkReal x14393=(sj5*x14386);
evalcond[0]=(((r21*x14392))+((r22*x14386))+(((-1.0)*x14388*x14390)));
evalcond[1]=(((r12*x14386))+((r11*x14392))+(((-1.0)*x14389*x14390)));
evalcond[2]=(((r21*x14393))+(((-1.0)*x14388*x14391))+(((-1.0)*r22*x14390)));
evalcond[3]=(((r01*x14393))+(((-1.0)*x14387*x14391))+(((-1.0)*r02*x14390)));
evalcond[4]=((1.0)+((r01*x14392))+((r02*x14386))+(((-1.0)*x14387*x14390)));
evalcond[5]=((1.0)+(((-1.0)*r12*x14390))+((r11*x14393))+(((-1.0)*x14389*x14391)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x14394=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x14394;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x14394);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x14395=((1.0)*cj5);
IkReal x14396=((((-1.0)*r21*x14395))+(((-1.0)*r20*sj5)));
j4eval[0]=x14396;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x14395))))));
j4eval[2]=IKsign(x14396);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x14397=cj5*cj5;
IkReal x14398=(r11*r21);
IkReal x14399=((1.0)*r20);
IkReal x14400=(cj5*sj5);
IkReal x14401=(((x14397*x14398))+(((-1.0)*x14398))+(((-1.0)*r12*r22))+((r11*r20*x14400))+(((-1.0)*r10*x14397*x14399))+((r10*r21*x14400)));
j4eval[0]=x14401;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x14399))))));
j4eval[2]=IKsign(x14401);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14402=cj5*cj5;
IkReal x14403=(r21*sj5);
IkReal x14404=(r11*r21);
IkReal x14405=((1.0)*r20);
CheckValue<IkReal> x14406=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14404))+(((-1.0)*r12*r22))+((x14402*x14404))+((cj5*r10*x14403))+(((-1.0)*r10*x14402*x14405))+((cj5*r11*r20*sj5)))),-1);
if(!x14406.valid){
continue;
}
CheckValue<IkReal> x14407 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x14405))+x14403)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x14407.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14406.value)))+(x14407.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14408=IKcos(j4);
IkReal x14409=IKsin(j4);
IkReal x14410=(cj5*r00);
IkReal x14411=(cj5*r20);
IkReal x14412=(cj5*r10);
IkReal x14413=((1.0)*x14408);
IkReal x14414=((1.0)*x14409);
IkReal x14415=(sj5*x14408);
IkReal x14416=(sj5*x14409);
evalcond[0]=(((r21*x14415))+((r22*x14409))+(((-1.0)*x14411*x14413)));
evalcond[1]=(((r12*x14409))+((r11*x14415))+(((-1.0)*x14412*x14413)));
evalcond[2]=(((r21*x14416))+(((-1.0)*r22*x14413))+(((-1.0)*x14411*x14414)));
evalcond[3]=((((-1.0)*r02*x14413))+((r01*x14416))+(((-1.0)*x14410*x14414)));
evalcond[4]=((-1.0)+((r02*x14409))+((r01*x14415))+(((-1.0)*x14410*x14413)));
evalcond[5]=((1.0)+((r11*x14416))+(((-1.0)*x14412*x14414))+(((-1.0)*r12*x14413)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14417=((1.0)*cj5);
CheckValue<IkReal> x14418 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x14417)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x14418.valid){
continue;
}
CheckValue<IkReal> x14419=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14417))+(((-1.0)*r20*sj5)))),-1);
if(!x14419.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14418.value)+(((1.5707963267949)*(x14419.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14420=IKcos(j4);
IkReal x14421=IKsin(j4);
IkReal x14422=(cj5*r00);
IkReal x14423=(cj5*r20);
IkReal x14424=(cj5*r10);
IkReal x14425=((1.0)*x14420);
IkReal x14426=((1.0)*x14421);
IkReal x14427=(sj5*x14420);
IkReal x14428=(sj5*x14421);
evalcond[0]=((((-1.0)*x14423*x14425))+((r22*x14421))+((r21*x14427)));
evalcond[1]=(((r11*x14427))+((r12*x14421))+(((-1.0)*x14424*x14425)));
evalcond[2]=((((-1.0)*x14423*x14426))+(((-1.0)*r22*x14425))+((r21*x14428)));
evalcond[3]=((((-1.0)*x14422*x14426))+((r01*x14428))+(((-1.0)*r02*x14425)));
evalcond[4]=((-1.0)+(((-1.0)*x14422*x14425))+((r01*x14427))+((r02*x14421)));
evalcond[5]=((1.0)+((r11*x14428))+(((-1.0)*x14424*x14426))+(((-1.0)*r12*x14425)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14429 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x14429.valid){
continue;
}
CheckValue<IkReal> x14430=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x14430.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14429.value)+(((1.5707963267949)*(x14430.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14431=IKcos(j4);
IkReal x14432=IKsin(j4);
IkReal x14433=(cj5*r00);
IkReal x14434=(cj5*r20);
IkReal x14435=(cj5*r10);
IkReal x14436=((1.0)*x14431);
IkReal x14437=((1.0)*x14432);
IkReal x14438=(sj5*x14431);
IkReal x14439=(sj5*x14432);
evalcond[0]=(((r21*x14438))+((r22*x14432))+(((-1.0)*x14434*x14436)));
evalcond[1]=((((-1.0)*x14435*x14436))+((r11*x14438))+((r12*x14432)));
evalcond[2]=(((r21*x14439))+(((-1.0)*r22*x14436))+(((-1.0)*x14434*x14437)));
evalcond[3]=((((-1.0)*x14433*x14437))+((r01*x14439))+(((-1.0)*r02*x14436)));
evalcond[4]=((-1.0)+(((-1.0)*x14433*x14436))+((r01*x14438))+((r02*x14432)));
evalcond[5]=((1.0)+(((-1.0)*x14435*x14437))+((r11*x14439))+(((-1.0)*r12*x14436)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14440=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14440);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14440);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14441=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14441);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14441);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14442=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x14442)));
j4eval[1]=(((r01*sj5))+(((-1.0)*r00*x14442)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14443=((1.0)*cj5);
CheckValue<IkReal> x14444=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x14443))),-1);
if(!x14444.valid){
continue;
}
CheckValue<IkReal> x14445=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x14443))),-1);
if(!x14445.valid){
continue;
}
if( IKabs(((-1.0)*(x14444.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14445.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x14444.value)))+IKsqr(((x14445.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x14444.value)), ((x14445.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14446=IKsin(j4);
IkReal x14447=IKcos(j4);
IkReal x14448=((1.0)*cj5);
IkReal x14449=((1.0)*cj2);
IkReal x14450=(sj5*x14447);
IkReal x14451=(sj5*x14446);
evalcond[0]=((-1.0)*r22*x14447);
evalcond[1]=(((sj1*sj2))+(((-1.0)*cj1*x14449))+((r22*x14446)));
evalcond[2]=((((-1.0)*r00*x14446*x14448))+((r01*x14451)));
evalcond[3]=((((-1.0)*r10*x14447*x14448))+((r11*x14450)));
evalcond[4]=((1.0)+((r11*x14451))+(((-1.0)*r10*x14446*x14448)));
evalcond[5]=(((r01*x14450))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x14449))+(((-1.0)*r00*x14447*x14448)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14452=IKPowWithIntegerCheck(r22,-1);
if(!x14452.valid){
continue;
}
CheckValue<IkReal> x14453=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x14453.valid){
continue;
}
if( IKabs(((x14452.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14453.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14452.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x14453.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14452.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x14453.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14454=IKsin(j4);
IkReal x14455=IKcos(j4);
IkReal x14456=((1.0)*cj5);
IkReal x14457=((1.0)*cj2);
IkReal x14458=(sj5*x14455);
IkReal x14459=(sj5*x14454);
evalcond[0]=((-1.0)*r22*x14455);
evalcond[1]=((((-1.0)*cj1*x14457))+((sj1*sj2))+((r22*x14454)));
evalcond[2]=(((r01*x14459))+(((-1.0)*r00*x14454*x14456)));
evalcond[3]=(((r11*x14458))+(((-1.0)*r10*x14455*x14456)));
evalcond[4]=((1.0)+((r11*x14459))+(((-1.0)*r10*x14454*x14456)));
evalcond[5]=(((r01*x14458))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x14457))+(((-1.0)*r00*x14455*x14456)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14460=(sj1*sj2);
IkReal x14461=(cj5*r10);
IkReal x14462=(r11*sj5);
IkReal x14463=(cj1*cj2);
CheckValue<IkReal> x14464=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x14464.valid){
continue;
}
CheckValue<IkReal> x14465 = IKatan2WithCheck(IkReal((((x14460*x14462))+((x14461*x14463))+(((-1.0)*x14460*x14461))+(((-1.0)*x14462*x14463)))),IkReal(((((-1.0)*r12*x14460))+((r12*x14463)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14465.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14464.value)))+(x14465.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14466=IKcos(j4);
IkReal x14467=IKsin(j4);
IkReal x14468=(cj5*r00);
IkReal x14469=(cj5*r10);
IkReal x14470=(r21*sj5);
IkReal x14471=((1.0)*cj2);
IkReal x14472=(cj5*r20);
IkReal x14473=((1.0)*x14466);
IkReal x14474=((1.0)*x14467);
IkReal x14475=(sj5*x14467);
IkReal x14476=(sj5*x14466);
evalcond[0]=(((r11*x14476))+(((-1.0)*x14469*x14473))+((r12*x14467)));
evalcond[1]=((((-1.0)*x14472*x14474))+(((-1.0)*r22*x14473))+((x14467*x14470)));
evalcond[2]=(((r01*x14475))+(((-1.0)*x14468*x14474))+(((-1.0)*r02*x14473)));
evalcond[3]=((1.0)+((r11*x14475))+(((-1.0)*r12*x14473))+(((-1.0)*x14469*x14474)));
evalcond[4]=((((-1.0)*cj1*x14471))+((sj1*sj2))+((r22*x14467))+(((-1.0)*x14472*x14473))+((x14466*x14470)));
evalcond[5]=((((-1.0)*sj1*x14471))+((r01*x14476))+(((-1.0)*cj1*sj2))+((r02*x14467))+(((-1.0)*x14468*x14473)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14477=((1.0)*cj5);
CheckValue<IkReal> x14478=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x14477))+(((-1.0)*r00*sj5)))),-1);
if(!x14478.valid){
continue;
}
CheckValue<IkReal> x14479 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x14477)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14479.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14478.value)))+(x14479.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14480=IKcos(j4);
IkReal x14481=IKsin(j4);
IkReal x14482=(cj5*r00);
IkReal x14483=(cj5*r10);
IkReal x14484=(r21*sj5);
IkReal x14485=((1.0)*cj2);
IkReal x14486=(cj5*r20);
IkReal x14487=((1.0)*x14480);
IkReal x14488=((1.0)*x14481);
IkReal x14489=(sj5*x14481);
IkReal x14490=(sj5*x14480);
evalcond[0]=((((-1.0)*x14483*x14487))+((r11*x14490))+((r12*x14481)));
evalcond[1]=((((-1.0)*x14486*x14488))+(((-1.0)*r22*x14487))+((x14481*x14484)));
evalcond[2]=((((-1.0)*r02*x14487))+((r01*x14489))+(((-1.0)*x14482*x14488)));
evalcond[3]=((1.0)+((r11*x14489))+(((-1.0)*x14483*x14488))+(((-1.0)*r12*x14487)));
evalcond[4]=((((-1.0)*x14486*x14487))+(((-1.0)*cj1*x14485))+((x14480*x14484))+((r22*x14481))+((sj1*sj2)));
evalcond[5]=(((r02*x14481))+(((-1.0)*cj1*sj2))+((r01*x14490))+(((-1.0)*sj1*x14485))+(((-1.0)*x14482*x14487)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14491=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14491.valid){
continue;
}
CheckValue<IkReal> x14492 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14492.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14491.value)))+(x14492.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14493=IKcos(j4);
IkReal x14494=IKsin(j4);
IkReal x14495=(cj5*r00);
IkReal x14496=(cj5*r10);
IkReal x14497=(r21*sj5);
IkReal x14498=((1.0)*cj2);
IkReal x14499=(cj5*r20);
IkReal x14500=((1.0)*x14493);
IkReal x14501=((1.0)*x14494);
IkReal x14502=(sj5*x14494);
IkReal x14503=(sj5*x14493);
evalcond[0]=(((r12*x14494))+(((-1.0)*x14496*x14500))+((r11*x14503)));
evalcond[1]=((((-1.0)*x14499*x14501))+((x14494*x14497))+(((-1.0)*r22*x14500)));
evalcond[2]=((((-1.0)*r02*x14500))+(((-1.0)*x14495*x14501))+((r01*x14502)));
evalcond[3]=((1.0)+(((-1.0)*r12*x14500))+(((-1.0)*x14496*x14501))+((r11*x14502)));
evalcond[4]=((((-1.0)*x14499*x14500))+((r22*x14494))+((sj1*sj2))+((x14493*x14497))+(((-1.0)*cj1*x14498)));
evalcond[5]=((((-1.0)*sj1*x14498))+((r02*x14494))+(((-1.0)*cj1*sj2))+(((-1.0)*x14495*x14500))+((r01*x14503)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14504=((-1.0)*r00);
IkReal x14506 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14506)==0){
continue;
}
IkReal x14505=pow(x14506,-0.5);
CheckValue<IkReal> x14507 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14504),IKFAST_ATAN2_MAGTHRESH);
if(!x14507.valid){
continue;
}
IkReal gconst30=((-1.0)*(x14507.value));
IkReal gconst31=(r01*x14505);
IkReal gconst32=(x14504*x14505);
CheckValue<IkReal> x14508 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14508.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14508.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14509=((-1.0)*r00);
IkReal x14510=x14505;
CheckValue<IkReal> x14512 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14509),IKFAST_ATAN2_MAGTHRESH);
if(!x14512.valid){
continue;
}
IkReal x14511=((-1.0)*(x14512.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x14511;
IkReal gconst30=x14511;
IkReal gconst31=(r01*x14510);
IkReal gconst32=(x14509*x14510);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14513=((-1.0)*r00);
IkReal x14514=x14505;
CheckValue<IkReal> x14516 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14513),IKFAST_ATAN2_MAGTHRESH);
if(!x14516.valid){
continue;
}
IkReal x14515=((-1.0)*(x14516.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x14515;
IkReal gconst30=x14515;
IkReal gconst31=(r01*x14514);
IkReal gconst32=(x14513*x14514);
CheckValue<IkReal> x14524=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x14524.valid){
continue;
}
IkReal x14517=x14524.value;
IkReal x14518=(sj3*x14517);
IkReal x14519=(r11*x14518);
IkReal x14520=(r21*x14518);
IkReal x14521=(r20*x14518);
IkReal x14522=(r10*x14518);
IkReal x14523=(r00*r01*x14518);
j4eval[0]=IKsign((((r10*x14521*(r00*r00)))+((r00*r01*r10*x14520))+((r21*x14519*(r01*r01)))+((r12*r22*sj3))+((r00*r01*r20*x14519))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14525=gconst31*gconst31;
IkReal x14526=gconst32*gconst32;
IkReal x14527=((1.0)*cj3);
IkReal x14528=(r21*sj3);
IkReal x14529=(gconst31*gconst32);
IkReal x14530=(r11*r20);
IkReal x14531=(r10*sj3);
CheckValue<IkReal> x14532=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*r20*x14526*x14527))+(((-1.0)*r11*r21*x14525*x14527))+(((-1.0)*r12*r22*x14527))+((cj3*x14529*x14530))+((cj3*r10*r21*x14529)))),-1);
if(!x14532.valid){
continue;
}
CheckValue<IkReal> x14533 = IKatan2WithCheck(IkReal((((gconst31*r22*x14531))+((gconst32*r11*r22*sj3)))),IkReal(((((-1.0)*sj3*x14526*x14530))+(((-1.0)*r20*x14529*x14531))+((r10*x14525*x14528))+((r11*x14528*x14529)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14533.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14532.value)))+(x14533.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14534=IKsin(j4);
IkReal x14535=IKcos(j4);
IkReal x14536=(sj1*sj2);
IkReal x14537=(r21*sj3);
IkReal x14538=(gconst31*r00);
IkReal x14539=(gconst31*r11);
IkReal x14540=(cj3*gconst32);
IkReal x14541=(gconst31*sj3);
IkReal x14542=(gconst31*r01);
IkReal x14543=((1.0)*cj2);
IkReal x14544=(gconst32*r10);
IkReal x14545=(cj1*sj2);
IkReal x14546=(cj3*gconst31);
IkReal x14547=(gconst32*r00);
IkReal x14548=(gconst32*sj3);
IkReal x14549=(gconst32*r20);
IkReal x14550=(gconst31*r21);
IkReal x14551=(cj1*x14543);
IkReal x14552=((1.0)*x14535);
IkReal x14553=((1.0)*x14534);
IkReal x14554=(cj3*x14534);
IkReal x14555=(cj3*x14535);
IkReal x14556=(sj3*x14535);
evalcond[0]=(((x14534*x14550))+(((-1.0)*r22*x14552))+(((-1.0)*x14549*x14553)));
evalcond[1]=((((-1.0)*r02*x14552))+((x14534*x14542))+(((-1.0)*x14547*x14553)));
evalcond[2]=((1.0)+(((-1.0)*x14544*x14553))+((x14534*x14539))+(((-1.0)*r12*x14552)));
evalcond[3]=(((r10*x14541))+((r11*x14548))+((r12*x14554))+(((-1.0)*r10*x14540*x14552))+((x14539*x14555)));
evalcond[4]=(((r10*x14546))+(((-1.0)*sj3*x14539*x14552))+((r11*x14540))+((x14544*x14556))+(((-1.0)*r12*sj3*x14553)));
evalcond[5]=(((cj2*sj1))+((gconst32*x14537))+x14545+((r20*x14541))+((r21*x14535*x14546))+(((-1.0)*r20*x14540*x14552))+((r22*x14554)));
evalcond[6]=((((-1.0)*r00*x14540*x14552))+((r01*x14548))+((r02*x14554))+(((-1.0)*x14551))+x14536+((sj3*x14538))+((x14542*x14555)));
evalcond[7]=((((-1.0)*gconst31*x14537*x14552))+(((-1.0)*r22*sj3*x14553))+((r21*x14540))+(((-1.0)*x14551))+x14536+((r20*x14546))+((r20*x14535*x14548)));
evalcond[8]=(((cj3*x14538))+((r01*x14540))+(((-1.0)*sj1*x14543))+(((-1.0)*x14545))+(((-1.0)*r01*x14541*x14552))+(((-1.0)*r02*sj3*x14553))+((x14547*x14556)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14557=gconst31*gconst31;
IkReal x14558=gconst32*gconst32;
IkReal x14559=(r21*sj3);
IkReal x14560=(gconst31*gconst32);
IkReal x14561=((1.0)*r10);
IkReal x14562=(cj3*r21);
IkReal x14563=(cj3*r11);
IkReal x14564=(r20*x14558);
CheckValue<IkReal> x14565=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*r20*sj3*x14560))+(((-1.0)*x14559*x14560*x14561))+((r12*r22*sj3))+((r10*sj3*x14564))+((r11*x14557*x14559)))),-1);
if(!x14565.valid){
continue;
}
CheckValue<IkReal> x14566 = IKatan2WithCheck(IkReal((((gconst32*r22*x14563))+((cj3*gconst31*r10*r22)))),IkReal(((((-1.0)*cj3*r20*x14560*x14561))+(((-1.0)*x14563*x14564))+((r10*x14557*x14562))+((r11*x14560*x14562)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14566.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14565.value)))+(x14566.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14567=IKsin(j4);
IkReal x14568=IKcos(j4);
IkReal x14569=(sj1*sj2);
IkReal x14570=(r21*sj3);
IkReal x14571=(gconst31*r00);
IkReal x14572=(gconst31*r11);
IkReal x14573=(cj3*gconst32);
IkReal x14574=(gconst31*sj3);
IkReal x14575=(gconst31*r01);
IkReal x14576=((1.0)*cj2);
IkReal x14577=(gconst32*r10);
IkReal x14578=(cj1*sj2);
IkReal x14579=(cj3*gconst31);
IkReal x14580=(gconst32*r00);
IkReal x14581=(gconst32*sj3);
IkReal x14582=(gconst32*r20);
IkReal x14583=(gconst31*r21);
IkReal x14584=(cj1*x14576);
IkReal x14585=((1.0)*x14568);
IkReal x14586=((1.0)*x14567);
IkReal x14587=(cj3*x14567);
IkReal x14588=(cj3*x14568);
IkReal x14589=(sj3*x14568);
evalcond[0]=(((x14567*x14583))+(((-1.0)*r22*x14585))+(((-1.0)*x14582*x14586)));
evalcond[1]=((((-1.0)*r02*x14585))+((x14567*x14575))+(((-1.0)*x14580*x14586)));
evalcond[2]=((1.0)+(((-1.0)*r12*x14585))+((x14567*x14572))+(((-1.0)*x14577*x14586)));
evalcond[3]=((((-1.0)*r10*x14573*x14585))+((x14572*x14588))+((r11*x14581))+((r10*x14574))+((r12*x14587)));
evalcond[4]=((((-1.0)*sj3*x14572*x14585))+((r11*x14573))+((r10*x14579))+(((-1.0)*r12*sj3*x14586))+((x14577*x14589)));
evalcond[5]=(((cj2*sj1))+((r20*x14574))+((r22*x14587))+(((-1.0)*r20*x14573*x14585))+((r21*x14568*x14579))+x14578+((gconst32*x14570)));
evalcond[6]=(((r02*x14587))+((x14575*x14588))+(((-1.0)*x14584))+x14569+(((-1.0)*r00*x14573*x14585))+((r01*x14581))+((sj3*x14571)));
evalcond[7]=(((r21*x14573))+((r20*x14579))+(((-1.0)*x14584))+(((-1.0)*gconst31*x14570*x14585))+x14569+((r20*x14568*x14581))+(((-1.0)*r22*sj3*x14586)));
evalcond[8]=(((x14580*x14589))+(((-1.0)*sj1*x14576))+((cj3*x14571))+(((-1.0)*x14578))+(((-1.0)*r01*x14574*x14585))+(((-1.0)*r02*sj3*x14586))+((r01*x14573)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14590 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst32*r00))+((gconst31*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14590.valid){
continue;
}
CheckValue<IkReal> x14591=IKPowWithIntegerCheck(IKsign((((gconst31*r20))+((gconst32*r21)))),-1);
if(!x14591.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14590.value)+(((1.5707963267949)*(x14591.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14592=IKsin(j4);
IkReal x14593=IKcos(j4);
IkReal x14594=(sj1*sj2);
IkReal x14595=(r21*sj3);
IkReal x14596=(gconst31*r00);
IkReal x14597=(gconst31*r11);
IkReal x14598=(cj3*gconst32);
IkReal x14599=(gconst31*sj3);
IkReal x14600=(gconst31*r01);
IkReal x14601=((1.0)*cj2);
IkReal x14602=(gconst32*r10);
IkReal x14603=(cj1*sj2);
IkReal x14604=(cj3*gconst31);
IkReal x14605=(gconst32*r00);
IkReal x14606=(gconst32*sj3);
IkReal x14607=(gconst32*r20);
IkReal x14608=(gconst31*r21);
IkReal x14609=(cj1*x14601);
IkReal x14610=((1.0)*x14593);
IkReal x14611=((1.0)*x14592);
IkReal x14612=(cj3*x14592);
IkReal x14613=(cj3*x14593);
IkReal x14614=(sj3*x14593);
evalcond[0]=((((-1.0)*r22*x14610))+((x14592*x14608))+(((-1.0)*x14607*x14611)));
evalcond[1]=(((x14592*x14600))+(((-1.0)*x14605*x14611))+(((-1.0)*r02*x14610)));
evalcond[2]=((1.0)+(((-1.0)*r12*x14610))+(((-1.0)*x14602*x14611))+((x14592*x14597)));
evalcond[3]=(((x14597*x14613))+(((-1.0)*r10*x14598*x14610))+((r10*x14599))+((r11*x14606))+((r12*x14612)));
evalcond[4]=((((-1.0)*sj3*x14597*x14610))+((r10*x14604))+((x14602*x14614))+(((-1.0)*r12*sj3*x14611))+((r11*x14598)));
evalcond[5]=(((r20*x14599))+((cj2*sj1))+((r21*x14593*x14604))+(((-1.0)*r20*x14598*x14610))+((r22*x14612))+x14603+((gconst32*x14595)));
evalcond[6]=(((r02*x14612))+((x14600*x14613))+((r01*x14606))+x14594+((sj3*x14596))+(((-1.0)*r00*x14598*x14610))+(((-1.0)*x14609)));
evalcond[7]=((((-1.0)*gconst31*x14595*x14610))+(((-1.0)*r22*sj3*x14611))+((r20*x14593*x14606))+((r21*x14598))+x14594+((r20*x14604))+(((-1.0)*x14609)));
evalcond[8]=((((-1.0)*sj1*x14601))+((cj3*x14596))+(((-1.0)*x14603))+(((-1.0)*r01*x14599*x14610))+((r01*x14598))+(((-1.0)*r02*sj3*x14611))+((x14605*x14614)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14615=((-1.0)*r01);
IkReal x14617 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14617)==0){
continue;
}
IkReal x14616=pow(x14617,-0.5);
CheckValue<IkReal> x14618 = IKatan2WithCheck(IkReal(x14615),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14618.valid){
continue;
}
IkReal gconst33=((3.14159265358979)+(((-1.0)*(x14618.value))));
IkReal gconst34=(x14615*x14616);
IkReal gconst35=((1.0)*r00*x14616);
CheckValue<IkReal> x14619 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14619.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14619.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14620=((-1.0)*r01);
CheckValue<IkReal> x14623 = IKatan2WithCheck(IkReal(x14620),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14623.valid){
continue;
}
IkReal x14621=((1.0)*(x14623.value));
IkReal x14622=x14616;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x14621)));
IkReal gconst33=((3.14159265358979)+(((-1.0)*x14621)));
IkReal gconst34=(x14620*x14622);
IkReal gconst35=((1.0)*r00*x14622);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x14624=((-1.0)*r01);
CheckValue<IkReal> x14627 = IKatan2WithCheck(IkReal(x14624),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14627.valid){
continue;
}
IkReal x14625=((1.0)*(x14627.value));
IkReal x14626=x14616;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x14625)));
IkReal gconst33=((3.14159265358979)+(((-1.0)*x14625)));
IkReal gconst34=(x14624*x14626);
IkReal gconst35=((1.0)*r00*x14626);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14628=gconst35*gconst35;
IkReal x14629=gconst34*gconst34;
IkReal x14630=(gconst34*sj3);
IkReal x14631=((1.0)*cj3);
IkReal x14632=(r10*r20);
IkReal x14633=(gconst35*r11);
IkReal x14634=(cj3*gconst34);
IkReal x14635=(r21*x14629);
CheckValue<IkReal> x14636=IKPowWithIntegerCheck(IKsign((((gconst35*r10*r21*x14634))+(((-1.0)*r11*x14631*x14635))+((r20*x14633*x14634))+(((-1.0)*r12*r22*x14631))+(((-1.0)*x14628*x14631*x14632)))),-1);
if(!x14636.valid){
continue;
}
CheckValue<IkReal> x14637 = IKatan2WithCheck(IkReal((((r10*r22*x14630))+((r22*sj3*x14633)))),IkReal(((((-1.0)*r11*r20*sj3*x14628))+((r21*x14630*x14633))+((r10*sj3*x14635))+(((-1.0)*gconst35*x14630*x14632)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14637.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14636.value)))+(x14637.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14638=IKsin(j4);
IkReal x14639=IKcos(j4);
IkReal x14640=(sj1*sj2);
IkReal x14641=(cj3*gconst35);
IkReal x14642=(gconst35*r20);
IkReal x14643=(gconst35*sj3);
IkReal x14644=(cj3*gconst34);
IkReal x14645=(gconst34*r21);
IkReal x14646=((1.0)*cj1);
IkReal x14647=(cj2*sj1);
IkReal x14648=(gconst34*sj3);
IkReal x14649=(cj2*x14646);
IkReal x14650=((1.0)*x14639);
IkReal x14651=((1.0)*x14638);
IkReal x14652=(cj3*x14638);
IkReal x14653=(gconst34*x14638);
evalcond[0]=((((-1.0)*x14642*x14651))+(((-1.0)*r22*x14650))+((x14638*x14645)));
evalcond[1]=(((r01*x14653))+(((-1.0)*r02*x14650))+(((-1.0)*gconst35*r00*x14651)));
evalcond[2]=((1.0)+(((-1.0)*r12*x14650))+(((-1.0)*gconst35*r10*x14651))+((r11*x14653)));
evalcond[3]=(((r11*x14643))+((r10*x14648))+((r12*x14652))+((r11*x14639*x14644))+(((-1.0)*r10*x14641*x14650)));
evalcond[4]=(((r10*x14639*x14643))+((r11*x14641))+((r10*x14644))+(((-1.0)*r11*x14648*x14650))+(((-1.0)*r12*sj3*x14651)));
evalcond[5]=(((r22*x14652))+((r21*x14639*x14644))+((cj1*sj2))+(((-1.0)*r20*x14641*x14650))+((r21*x14643))+x14647+((r20*x14648)));
evalcond[6]=((((-1.0)*r00*x14641*x14650))+((r01*x14643))+((r00*x14648))+((r01*x14639*x14644))+x14640+(((-1.0)*x14649))+((r02*x14652)));
evalcond[7]=((((-1.0)*sj3*x14645*x14650))+((sj3*x14639*x14642))+((r21*x14641))+x14640+((r20*x14644))+(((-1.0)*x14649))+(((-1.0)*r22*sj3*x14651)));
evalcond[8]=((((-1.0)*r01*x14648*x14650))+(((-1.0)*x14647))+((r01*x14641))+((r00*x14644))+((r00*x14639*x14643))+(((-1.0)*r02*sj3*x14651))+(((-1.0)*sj2*x14646)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14654=((1.0)*gconst35);
CheckValue<IkReal> x14655=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst34*r00))+(((-1.0)*r01*x14654)))),-1);
if(!x14655.valid){
continue;
}
CheckValue<IkReal> x14656 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst34*r21))+(((-1.0)*r20*x14654)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14656.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14655.value)))+(x14656.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14657=IKsin(j4);
IkReal x14658=IKcos(j4);
IkReal x14659=(sj1*sj2);
IkReal x14660=(cj3*gconst35);
IkReal x14661=(gconst35*r20);
IkReal x14662=(gconst35*sj3);
IkReal x14663=(cj3*gconst34);
IkReal x14664=(gconst34*r21);
IkReal x14665=((1.0)*cj1);
IkReal x14666=(cj2*sj1);
IkReal x14667=(gconst34*sj3);
IkReal x14668=(cj2*x14665);
IkReal x14669=((1.0)*x14658);
IkReal x14670=((1.0)*x14657);
IkReal x14671=(cj3*x14657);
IkReal x14672=(gconst34*x14657);
evalcond[0]=(((x14657*x14664))+(((-1.0)*x14661*x14670))+(((-1.0)*r22*x14669)));
evalcond[1]=(((r01*x14672))+(((-1.0)*gconst35*r00*x14670))+(((-1.0)*r02*x14669)));
evalcond[2]=((1.0)+(((-1.0)*r12*x14669))+(((-1.0)*gconst35*r10*x14670))+((r11*x14672)));
evalcond[3]=(((r11*x14658*x14663))+((r10*x14667))+(((-1.0)*r10*x14660*x14669))+((r11*x14662))+((r12*x14671)));
evalcond[4]=(((r10*x14658*x14662))+((r10*x14663))+(((-1.0)*r12*sj3*x14670))+(((-1.0)*r11*x14667*x14669))+((r11*x14660)));
evalcond[5]=((((-1.0)*r20*x14660*x14669))+((cj1*sj2))+((r21*x14662))+((r21*x14658*x14663))+x14666+((r22*x14671))+((r20*x14667)));
evalcond[6]=((((-1.0)*r00*x14660*x14669))+((r02*x14671))+((r01*x14658*x14663))+((r00*x14667))+((r01*x14662))+x14659+(((-1.0)*x14668)));
evalcond[7]=(((sj3*x14658*x14661))+(((-1.0)*r22*sj3*x14670))+((r21*x14660))+x14659+(((-1.0)*sj3*x14664*x14669))+(((-1.0)*x14668))+((r20*x14663)));
evalcond[8]=((((-1.0)*sj2*x14665))+(((-1.0)*r01*x14667*x14669))+(((-1.0)*x14666))+((r00*x14663))+(((-1.0)*r02*sj3*x14670))+((r01*x14660))+((r00*x14658*x14662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14673=IKPowWithIntegerCheck(IKsign((((gconst34*r20))+((gconst35*r21)))),-1);
if(!x14673.valid){
continue;
}
CheckValue<IkReal> x14674 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst35*r00))+((gconst34*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14674.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14673.value)))+(x14674.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14675=IKsin(j4);
IkReal x14676=IKcos(j4);
IkReal x14677=(sj1*sj2);
IkReal x14678=(cj3*gconst35);
IkReal x14679=(gconst35*r20);
IkReal x14680=(gconst35*sj3);
IkReal x14681=(cj3*gconst34);
IkReal x14682=(gconst34*r21);
IkReal x14683=((1.0)*cj1);
IkReal x14684=(cj2*sj1);
IkReal x14685=(gconst34*sj3);
IkReal x14686=(cj2*x14683);
IkReal x14687=((1.0)*x14676);
IkReal x14688=((1.0)*x14675);
IkReal x14689=(cj3*x14675);
IkReal x14690=(gconst34*x14675);
evalcond[0]=(((x14675*x14682))+(((-1.0)*r22*x14687))+(((-1.0)*x14679*x14688)));
evalcond[1]=(((r01*x14690))+(((-1.0)*r02*x14687))+(((-1.0)*gconst35*r00*x14688)));
evalcond[2]=((1.0)+(((-1.0)*gconst35*r10*x14688))+((r11*x14690))+(((-1.0)*r12*x14687)));
evalcond[3]=(((r11*x14680))+((r12*x14689))+((r11*x14676*x14681))+((r10*x14685))+(((-1.0)*r10*x14678*x14687)));
evalcond[4]=((((-1.0)*r12*sj3*x14688))+(((-1.0)*r11*x14685*x14687))+((r10*x14676*x14680))+((r10*x14681))+((r11*x14678)));
evalcond[5]=((((-1.0)*r20*x14678*x14687))+((cj1*sj2))+((r20*x14685))+x14684+((r21*x14680))+((r21*x14676*x14681))+((r22*x14689)));
evalcond[6]=(((r00*x14685))+((r01*x14680))+((r01*x14676*x14681))+(((-1.0)*x14686))+((r02*x14689))+(((-1.0)*r00*x14678*x14687))+x14677);
evalcond[7]=(((sj3*x14676*x14679))+((r21*x14678))+(((-1.0)*sj3*x14682*x14687))+((r20*x14681))+(((-1.0)*x14686))+(((-1.0)*r22*sj3*x14688))+x14677);
evalcond[8]=(((r00*x14681))+(((-1.0)*r02*sj3*x14688))+((r01*x14678))+(((-1.0)*r01*x14685*x14687))+((r00*x14676*x14680))+(((-1.0)*sj2*x14683))+(((-1.0)*x14684)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14692 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14692)==0){
continue;
}
IkReal x14691=pow(x14692,-0.5);
CheckValue<IkReal> x14693 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14693.valid){
continue;
}
IkReal gconst36=((-1.0)*(x14693.value));
IkReal gconst37=((-1.0)*r21*x14691);
IkReal gconst38=(r20*x14691);
CheckValue<IkReal> x14694 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14694.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14694.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14697 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14697.valid){
continue;
}
IkReal x14695=((-1.0)*(x14697.value));
IkReal x14696=x14691;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst37;
cj5=gconst38;
j5=x14695;
IkReal gconst36=x14695;
IkReal gconst37=((-1.0)*r21*x14696);
IkReal gconst38=(r20*x14696);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14700 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14700.valid){
continue;
}
IkReal x14698=((-1.0)*(x14700.value));
IkReal x14699=x14691;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst37;
cj5=gconst38;
j5=x14698;
IkReal gconst36=x14698;
IkReal gconst37=((-1.0)*r21*x14699);
IkReal gconst38=(r20*x14699);
CheckValue<IkReal> x14708=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x14708.valid){
continue;
}
IkReal x14701=x14708.value;
IkReal x14702=(sj3*x14701);
IkReal x14703=(r11*x14702);
IkReal x14704=(r00*x14702);
IkReal x14705=(r01*x14702);
IkReal x14706=(r10*x14702);
IkReal x14707=(r20*r21*x14702);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*x14704*(r20*r20)))+((r01*x14703*(r21*r21)))+((r00*r20*r21*x14703))+((r10*r20*r21*x14705))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14709=gconst37*gconst37;
IkReal x14710=gconst38*gconst38;
IkReal x14711=(gconst37*r10);
IkReal x14712=(r02*sj3);
IkReal x14713=((1.0)*cj3);
IkReal x14714=(cj3*gconst38);
IkReal x14715=(gconst37*r11);
IkReal x14716=(gconst38*sj3);
IkReal x14717=((1.0)*r00);
IkReal x14718=(r01*x14709);
CheckValue<IkReal> x14719=IKPowWithIntegerCheck(IKsign((((r01*x14711*x14714))+((r00*x14714*x14715))+(((-1.0)*r11*x14713*x14718))+(((-1.0)*r00*r10*x14710*x14713))+(((-1.0)*r02*r12*x14713)))),-1);
if(!x14719.valid){
continue;
}
CheckValue<IkReal> x14720 = IKatan2WithCheck(IkReal((((gconst38*r11*x14712))+((x14711*x14712)))),IkReal(((((-1.0)*r11*sj3*x14710*x14717))+((r01*x14715*x14716))+((r10*sj3*x14718))+(((-1.0)*x14711*x14716*x14717)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14720.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14719.value)))+(x14720.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14721=IKsin(j4);
IkReal x14722=IKcos(j4);
IkReal x14723=(sj1*sj2);
IkReal x14724=(gconst38*r21);
IkReal x14725=(cj3*r20);
IkReal x14726=(gconst38*r10);
IkReal x14727=(cj3*gconst37);
IkReal x14728=((1.0)*cj1);
IkReal x14729=(gconst38*r00);
IkReal x14730=(gconst37*sj3);
IkReal x14731=(cj2*sj1);
IkReal x14732=(gconst38*r20);
IkReal x14733=(gconst38*r01);
IkReal x14734=(gconst38*r11);
IkReal x14735=(cj2*x14728);
IkReal x14736=((1.0)*x14722);
IkReal x14737=((1.0)*x14721);
IkReal x14738=(cj3*x14721);
IkReal x14739=(sj3*x14722);
IkReal x14740=(gconst37*x14721);
evalcond[0]=((((-1.0)*x14732*x14737))+((r21*x14740))+(((-1.0)*r22*x14736)));
evalcond[1]=((((-1.0)*x14729*x14737))+((r01*x14740))+(((-1.0)*r02*x14736)));
evalcond[2]=((1.0)+(((-1.0)*r12*x14736))+((r11*x14740))+(((-1.0)*x14726*x14737)));
evalcond[3]=(((r10*x14730))+((sj3*x14734))+((r11*x14722*x14727))+(((-1.0)*cj3*x14726*x14736))+((r12*x14738)));
evalcond[4]=(((x14726*x14739))+(((-1.0)*r12*sj3*x14737))+((cj3*x14734))+(((-1.0)*r11*x14730*x14736))+((r10*x14727)));
evalcond[5]=((((-1.0)*gconst38*x14725*x14736))+((r20*x14730))+((cj1*sj2))+((sj3*x14724))+((r21*x14722*x14727))+((r22*x14738))+x14731);
evalcond[6]=(((r00*x14730))+((r02*x14738))+((sj3*x14733))+(((-1.0)*cj3*x14729*x14736))+((r01*x14722*x14727))+(((-1.0)*x14735))+x14723);
evalcond[7]=((((-1.0)*r21*x14730*x14736))+(((-1.0)*r22*sj3*x14737))+((x14732*x14739))+((gconst37*x14725))+((cj3*x14724))+(((-1.0)*x14735))+x14723);
evalcond[8]=(((r00*x14727))+(((-1.0)*x14731))+(((-1.0)*sj2*x14728))+((cj3*x14733))+(((-1.0)*r02*sj3*x14737))+(((-1.0)*r01*x14730*x14736))+((x14729*x14739)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14741=gconst37*gconst37;
IkReal x14742=gconst38*gconst38;
IkReal x14743=(r01*r10);
IkReal x14744=(r00*sj3);
IkReal x14745=(r01*r11);
IkReal x14746=(cj3*gconst37);
IkReal x14747=(cj3*r11);
IkReal x14748=((1.0)*gconst37*gconst38);
CheckValue<IkReal> x14749=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj3*x14743*x14748))+((r02*r12*sj3))+((sj3*x14741*x14745))+((r10*x14742*x14744))+(((-1.0)*r11*x14744*x14748)))),-1);
if(!x14749.valid){
continue;
}
CheckValue<IkReal> x14750 = IKatan2WithCheck(IkReal((((gconst38*r02*x14747))+((r02*r10*x14746)))),IkReal(((((-1.0)*gconst38*r00*r10*x14746))+((gconst38*x14745*x14746))+(((-1.0)*r00*x14742*x14747))+((cj3*x14741*x14743)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14750.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14749.value)))+(x14750.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14751=IKsin(j4);
IkReal x14752=IKcos(j4);
IkReal x14753=(sj1*sj2);
IkReal x14754=(gconst38*r21);
IkReal x14755=(cj3*r20);
IkReal x14756=(gconst38*r10);
IkReal x14757=(cj3*gconst37);
IkReal x14758=((1.0)*cj1);
IkReal x14759=(gconst38*r00);
IkReal x14760=(gconst37*sj3);
IkReal x14761=(cj2*sj1);
IkReal x14762=(gconst38*r20);
IkReal x14763=(gconst38*r01);
IkReal x14764=(gconst38*r11);
IkReal x14765=(cj2*x14758);
IkReal x14766=((1.0)*x14752);
IkReal x14767=((1.0)*x14751);
IkReal x14768=(cj3*x14751);
IkReal x14769=(sj3*x14752);
IkReal x14770=(gconst37*x14751);
evalcond[0]=(((r21*x14770))+(((-1.0)*r22*x14766))+(((-1.0)*x14762*x14767)));
evalcond[1]=((((-1.0)*r02*x14766))+(((-1.0)*x14759*x14767))+((r01*x14770)));
evalcond[2]=((1.0)+((r11*x14770))+(((-1.0)*x14756*x14767))+(((-1.0)*r12*x14766)));
evalcond[3]=(((r10*x14760))+(((-1.0)*cj3*x14756*x14766))+((r12*x14768))+((sj3*x14764))+((r11*x14752*x14757)));
evalcond[4]=(((cj3*x14764))+(((-1.0)*r12*sj3*x14767))+(((-1.0)*r11*x14760*x14766))+((r10*x14757))+((x14756*x14769)));
evalcond[5]=(((r21*x14752*x14757))+((r20*x14760))+((cj1*sj2))+((sj3*x14754))+x14761+((r22*x14768))+(((-1.0)*gconst38*x14755*x14766)));
evalcond[6]=(((r01*x14752*x14757))+((r00*x14760))+(((-1.0)*cj3*x14759*x14766))+((r02*x14768))+x14753+((sj3*x14763))+(((-1.0)*x14765)));
evalcond[7]=(((x14762*x14769))+((gconst37*x14755))+(((-1.0)*r21*x14760*x14766))+(((-1.0)*r22*sj3*x14767))+x14753+((cj3*x14754))+(((-1.0)*x14765)));
evalcond[8]=((((-1.0)*sj2*x14758))+(((-1.0)*x14761))+((cj3*x14763))+(((-1.0)*r02*sj3*x14767))+(((-1.0)*r01*x14760*x14766))+((x14759*x14769))+((r00*x14757)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14771=((1.0)*gconst38);
CheckValue<IkReal> x14772=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x14771))+(((-1.0)*gconst37*r00)))),-1);
if(!x14772.valid){
continue;
}
CheckValue<IkReal> x14773 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst37*r21))+(((-1.0)*r20*x14771)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14773.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14772.value)))+(x14773.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14774=IKsin(j4);
IkReal x14775=IKcos(j4);
IkReal x14776=(sj1*sj2);
IkReal x14777=(gconst38*r21);
IkReal x14778=(cj3*r20);
IkReal x14779=(gconst38*r10);
IkReal x14780=(cj3*gconst37);
IkReal x14781=((1.0)*cj1);
IkReal x14782=(gconst38*r00);
IkReal x14783=(gconst37*sj3);
IkReal x14784=(cj2*sj1);
IkReal x14785=(gconst38*r20);
IkReal x14786=(gconst38*r01);
IkReal x14787=(gconst38*r11);
IkReal x14788=(cj2*x14781);
IkReal x14789=((1.0)*x14775);
IkReal x14790=((1.0)*x14774);
IkReal x14791=(cj3*x14774);
IkReal x14792=(sj3*x14775);
IkReal x14793=(gconst37*x14774);
evalcond[0]=(((r21*x14793))+(((-1.0)*r22*x14789))+(((-1.0)*x14785*x14790)));
evalcond[1]=((((-1.0)*x14782*x14790))+((r01*x14793))+(((-1.0)*r02*x14789)));
evalcond[2]=((1.0)+(((-1.0)*x14779*x14790))+((r11*x14793))+(((-1.0)*r12*x14789)));
evalcond[3]=(((r10*x14783))+((r11*x14775*x14780))+((r12*x14791))+(((-1.0)*cj3*x14779*x14789))+((sj3*x14787)));
evalcond[4]=(((r10*x14780))+(((-1.0)*r11*x14783*x14789))+(((-1.0)*r12*sj3*x14790))+((x14779*x14792))+((cj3*x14787)));
evalcond[5]=(((sj3*x14777))+(((-1.0)*gconst38*x14778*x14789))+((r21*x14775*x14780))+((cj1*sj2))+((r20*x14783))+x14784+((r22*x14791)));
evalcond[6]=(((r00*x14783))+(((-1.0)*cj3*x14782*x14789))+((r02*x14791))+((r01*x14775*x14780))+x14776+((sj3*x14786))+(((-1.0)*x14788)));
evalcond[7]=(((x14785*x14792))+((cj3*x14777))+(((-1.0)*r21*x14783*x14789))+(((-1.0)*r22*sj3*x14790))+x14776+((gconst37*x14778))+(((-1.0)*x14788)));
evalcond[8]=(((r00*x14780))+((x14782*x14792))+(((-1.0)*x14784))+(((-1.0)*r02*sj3*x14790))+(((-1.0)*sj2*x14781))+(((-1.0)*r01*x14783*x14789))+((cj3*x14786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14795 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14795)==0){
continue;
}
IkReal x14794=pow(x14795,-0.5);
CheckValue<IkReal> x14796 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14796.valid){
continue;
}
IkReal gconst39=((3.14159265358979)+(((-1.0)*(x14796.value))));
IkReal gconst40=((1.0)*r21*x14794);
IkReal gconst41=((-1.0)*r20*x14794);
CheckValue<IkReal> x14797 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14797.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14797.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14800 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14800.valid){
continue;
}
IkReal x14798=((1.0)*(x14800.value));
IkReal x14799=x14794;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x14798)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x14798)));
IkReal gconst40=((1.0)*r21*x14799);
IkReal gconst41=((-1.0)*r20*x14799);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14803 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14803.valid){
continue;
}
IkReal x14801=((1.0)*(x14803.value));
IkReal x14802=x14794;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x14801)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x14801)));
IkReal gconst40=((1.0)*r21*x14802);
IkReal gconst41=((-1.0)*r20*x14802);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x14806 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14806.valid){
continue;
}
IkReal x14804=((1.0)*(x14806.value));
IkReal x14805=x14794;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x14804)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x14804)));
IkReal gconst40=((1.0)*r21*x14805);
IkReal gconst41=((-1.0)*r20*x14805);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14807=gconst41*gconst41;
IkReal x14808=gconst40*gconst40;
IkReal x14809=(gconst40*r10);
IkReal x14810=(r22*sj3);
IkReal x14811=(r11*sj3);
IkReal x14812=((1.0)*cj3);
IkReal x14813=(gconst41*r21);
IkReal x14814=(gconst41*r20);
IkReal x14815=(r21*x14808);
IkReal x14816=((1.0)*r20*x14807);
CheckValue<IkReal> x14817 = IKatan2WithCheck(IkReal((((x14809*x14810))+((gconst41*r11*x14810)))),IkReal((((r10*sj3*x14815))+(((-1.0)*x14811*x14816))+(((-1.0)*sj3*x14809*x14814))+((gconst40*x14811*x14813)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14817.valid){
continue;
}
CheckValue<IkReal> x14818=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*r20*x14807*x14812))+(((-1.0)*r12*r22*x14812))+((cj3*gconst40*r11*x14814))+(((-1.0)*r11*x14812*x14815))+((cj3*x14809*x14813)))),-1);
if(!x14818.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14817.value)+(((1.5707963267949)*(x14818.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14819=IKsin(j4);
IkReal x14820=IKcos(j4);
IkReal x14821=(sj1*sj2);
IkReal x14822=(gconst40*sj3);
IkReal x14823=(gconst41*sj3);
IkReal x14824=(gconst41*r20);
IkReal x14825=(cj3*gconst41);
IkReal x14826=((1.0)*cj2);
IkReal x14827=(cj1*sj2);
IkReal x14828=(cj3*gconst40);
IkReal x14829=(cj1*x14826);
IkReal x14830=((1.0)*x14820);
IkReal x14831=((1.0)*x14819);
IkReal x14832=(cj3*x14819);
IkReal x14833=(gconst40*x14819);
IkReal x14834=(x14820*x14828);
evalcond[0]=(((r21*x14833))+(((-1.0)*x14824*x14831))+(((-1.0)*r22*x14830)));
evalcond[1]=((((-1.0)*gconst41*r00*x14831))+(((-1.0)*r02*x14830))+((r01*x14833)));
evalcond[2]=((1.0)+(((-1.0)*r12*x14830))+((r11*x14833))+(((-1.0)*gconst41*r10*x14831)));
evalcond[3]=(((r12*x14832))+((r10*x14822))+((r11*x14834))+(((-1.0)*r10*x14825*x14830))+((r11*x14823)));
evalcond[4]=(((r10*x14820*x14823))+((r10*x14828))+(((-1.0)*r11*x14822*x14830))+(((-1.0)*r12*sj3*x14831))+((r11*x14825)));
evalcond[5]=(((cj2*sj1))+((r21*x14823))+((r22*x14832))+(((-1.0)*cj3*x14824*x14830))+x14827+((r21*x14834))+((r20*x14822)));
evalcond[6]=(x14821+((r01*x14823))+((r00*x14822))+(((-1.0)*x14829))+((r02*x14832))+((r01*x14834))+(((-1.0)*r00*x14825*x14830)));
evalcond[7]=((((-1.0)*r21*x14822*x14830))+((r21*x14825))+(((-1.0)*r22*sj3*x14831))+((r20*x14820*x14823))+x14821+(((-1.0)*x14829))+((r20*x14828)));
evalcond[8]=((((-1.0)*sj1*x14826))+((r00*x14820*x14823))+(((-1.0)*r01*x14822*x14830))+((r01*x14825))+((r00*x14828))+(((-1.0)*x14827))+(((-1.0)*r02*sj3*x14831)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14835=((1.0)*gconst41);
CheckValue<IkReal> x14836 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst40*r21))+(((-1.0)*r20*x14835)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14836.valid){
continue;
}
CheckValue<IkReal> x14837=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst40*r00))+(((-1.0)*r01*x14835)))),-1);
if(!x14837.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14836.value)+(((1.5707963267949)*(x14837.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14838=IKsin(j4);
IkReal x14839=IKcos(j4);
IkReal x14840=(sj1*sj2);
IkReal x14841=(gconst40*sj3);
IkReal x14842=(gconst41*sj3);
IkReal x14843=(gconst41*r20);
IkReal x14844=(cj3*gconst41);
IkReal x14845=((1.0)*cj2);
IkReal x14846=(cj1*sj2);
IkReal x14847=(cj3*gconst40);
IkReal x14848=(cj1*x14845);
IkReal x14849=((1.0)*x14839);
IkReal x14850=((1.0)*x14838);
IkReal x14851=(cj3*x14838);
IkReal x14852=(gconst40*x14838);
IkReal x14853=(x14839*x14847);
evalcond[0]=(((r21*x14852))+(((-1.0)*x14843*x14850))+(((-1.0)*r22*x14849)));
evalcond[1]=((((-1.0)*gconst41*r00*x14850))+(((-1.0)*r02*x14849))+((r01*x14852)));
evalcond[2]=((1.0)+(((-1.0)*gconst41*r10*x14850))+((r11*x14852))+(((-1.0)*r12*x14849)));
evalcond[3]=(((r11*x14853))+((r11*x14842))+((r10*x14841))+(((-1.0)*r10*x14844*x14849))+((r12*x14851)));
evalcond[4]=((((-1.0)*r11*x14841*x14849))+((r10*x14839*x14842))+((r11*x14844))+((r10*x14847))+(((-1.0)*r12*sj3*x14850)));
evalcond[5]=(((r21*x14853))+((r20*x14841))+((cj2*sj1))+(((-1.0)*cj3*x14843*x14849))+x14846+((r22*x14851))+((r21*x14842)));
evalcond[6]=(((r02*x14851))+(((-1.0)*r00*x14844*x14849))+x14840+(((-1.0)*x14848))+((r01*x14842))+((r01*x14853))+((r00*x14841)));
evalcond[7]=(((r20*x14847))+(((-1.0)*r22*sj3*x14850))+(((-1.0)*r21*x14841*x14849))+x14840+((r20*x14839*x14842))+(((-1.0)*x14848))+((r21*x14844)));
evalcond[8]=((((-1.0)*x14846))+(((-1.0)*r02*sj3*x14850))+(((-1.0)*sj1*x14845))+(((-1.0)*r01*x14841*x14849))+((r00*x14839*x14842))+((r01*x14844))+((r00*x14847)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14854=IKPowWithIntegerCheck(IKsign((((gconst41*r21))+((gconst40*r20)))),-1);
if(!x14854.valid){
continue;
}
CheckValue<IkReal> x14855 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst41*r00))+((gconst40*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14855.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14854.value)))+(x14855.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14856=IKsin(j4);
IkReal x14857=IKcos(j4);
IkReal x14858=(sj1*sj2);
IkReal x14859=(gconst40*sj3);
IkReal x14860=(gconst41*sj3);
IkReal x14861=(gconst41*r20);
IkReal x14862=(cj3*gconst41);
IkReal x14863=((1.0)*cj2);
IkReal x14864=(cj1*sj2);
IkReal x14865=(cj3*gconst40);
IkReal x14866=(cj1*x14863);
IkReal x14867=((1.0)*x14857);
IkReal x14868=((1.0)*x14856);
IkReal x14869=(cj3*x14856);
IkReal x14870=(gconst40*x14856);
IkReal x14871=(x14857*x14865);
evalcond[0]=((((-1.0)*x14861*x14868))+((r21*x14870))+(((-1.0)*r22*x14867)));
evalcond[1]=((((-1.0)*r02*x14867))+(((-1.0)*gconst41*r00*x14868))+((r01*x14870)));
evalcond[2]=((1.0)+((r11*x14870))+(((-1.0)*gconst41*r10*x14868))+(((-1.0)*r12*x14867)));
evalcond[3]=(((r11*x14871))+(((-1.0)*r10*x14862*x14867))+((r12*x14869))+((r10*x14859))+((r11*x14860)));
evalcond[4]=(((r10*x14857*x14860))+((r10*x14865))+((r11*x14862))+(((-1.0)*r11*x14859*x14867))+(((-1.0)*r12*sj3*x14868)));
evalcond[5]=(((cj2*sj1))+((r20*x14859))+x14864+(((-1.0)*cj3*x14861*x14867))+((r21*x14871))+((r22*x14869))+((r21*x14860)));
evalcond[6]=((((-1.0)*r00*x14862*x14867))+((r02*x14869))+x14858+((r01*x14871))+((r01*x14860))+((r00*x14859))+(((-1.0)*x14866)));
evalcond[7]=(((r20*x14865))+x14858+(((-1.0)*r21*x14859*x14867))+((r20*x14857*x14860))+(((-1.0)*x14866))+(((-1.0)*r22*sj3*x14868))+((r21*x14862)));
evalcond[8]=((((-1.0)*r02*sj3*x14868))+(((-1.0)*sj1*x14863))+((r00*x14857*x14860))+(((-1.0)*r01*x14859*x14867))+((r01*x14862))+((r00*x14865))+(((-1.0)*x14864)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14872=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14872);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14872);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14873=(r11*sj5);
IkReal x14874=((1.0)*cj5*r10);
j4eval[0]=(x14873+(((-1.0)*x14874)));
j4eval[1]=((((-1.0)*cj3*x14874))+((cj3*x14873)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14875=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14875);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14875);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14876=(cj5*r10);
IkReal x14877=(r11*sj5);
j4eval[0]=(x14877+(((-1.0)*x14876)));
j4eval[1]=((((-1.0)*sj3*x14877))+((sj3*x14876)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14878=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14878);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14878);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14879=((1.0)*r10);
CheckValue<IkReal> x14880=IKPowWithIntegerCheck(cj3,-1);
if(!x14880.valid){
continue;
}
CheckValue<IkReal> x14881=IKPowWithIntegerCheck(r22,-1);
if(!x14881.valid){
continue;
}
CheckValue<IkReal> x14882=IKPowWithIntegerCheck((((cj3*r11*sj5))+(((-1.0)*cj3*cj5*x14879))),-1);
if(!x14882.valid){
continue;
}
if( IKabs(((x14880.value)*(x14881.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14882.value)*(((((-1.0)*sj3*sj5*x14879))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14880.value)*(x14881.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x14882.value)*(((((-1.0)*sj3*sj5*x14879))+(((-1.0)*cj5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14880.value)*(x14881.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x14882.value)*(((((-1.0)*sj3*sj5*x14879))+(((-1.0)*cj5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14883=IKsin(j4);
IkReal x14884=IKcos(j4);
IkReal x14885=(sj1*sj2);
IkReal x14886=(r11*sj5);
IkReal x14887=(r00*sj3);
IkReal x14888=(cj5*r01);
IkReal x14889=((1.0)*cj1);
IkReal x14890=(cj3*sj5);
IkReal x14891=(cj5*r11);
IkReal x14892=(r10*sj3);
IkReal x14893=(cj2*sj1);
IkReal x14894=((1.0)*cj5);
IkReal x14895=((1.0)*sj3);
IkReal x14896=(r01*sj5);
IkReal x14897=(cj2*x14889);
IkReal x14898=(cj3*x14884);
IkReal x14899=(r22*x14883);
IkReal x14900=(cj5*x14884);
IkReal x14901=(x14883*x14894);
evalcond[0]=((-1.0)*r22*x14884);
evalcond[1]=(x14893+((cj1*sj2))+((cj3*x14899)));
evalcond[2]=(((x14883*x14896))+(((-1.0)*r00*x14901)));
evalcond[3]=((1.0)+(((-1.0)*r10*x14901))+((x14883*x14886)));
evalcond[4]=(x14885+(((-1.0)*x14895*x14899))+(((-1.0)*x14897)));
evalcond[5]=(((x14886*x14898))+((sj5*x14892))+(((-1.0)*r10*x14894*x14898))+((sj3*x14891)));
evalcond[6]=(((r10*x14890))+((x14892*x14900))+(((-1.0)*x14884*x14886*x14895))+((cj3*x14891)));
evalcond[7]=((((-1.0)*r00*x14894*x14898))+x14885+((sj3*x14888))+(((-1.0)*x14897))+((sj5*x14887))+((r01*x14884*x14890)));
evalcond[8]=(((x14887*x14900))+(((-1.0)*x14884*x14895*x14896))+((r00*x14890))+((cj3*x14888))+(((-1.0)*x14893))+(((-1.0)*sj2*x14889)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14902=(cj5*r10);
IkReal x14903=((1.0)*r11);
CheckValue<IkReal> x14904=IKPowWithIntegerCheck(((((-1.0)*x14902))+((r11*sj5))),-1);
if(!x14904.valid){
continue;
}
CheckValue<IkReal> x14905=IKPowWithIntegerCheck(((((-1.0)*sj3*sj5*x14903))+((sj3*x14902))),-1);
if(!x14905.valid){
continue;
}
if( IKabs(((-1.0)*(x14904.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14905.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14903)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x14904.value)))+IKsqr(((x14905.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14903))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x14904.value)), ((x14905.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14903))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14906=IKsin(j4);
IkReal x14907=IKcos(j4);
IkReal x14908=(sj1*sj2);
IkReal x14909=(r11*sj5);
IkReal x14910=(r00*sj3);
IkReal x14911=(cj5*r01);
IkReal x14912=((1.0)*cj1);
IkReal x14913=(cj3*sj5);
IkReal x14914=(cj5*r11);
IkReal x14915=(r10*sj3);
IkReal x14916=(cj2*sj1);
IkReal x14917=((1.0)*cj5);
IkReal x14918=((1.0)*sj3);
IkReal x14919=(r01*sj5);
IkReal x14920=(cj2*x14912);
IkReal x14921=(cj3*x14907);
IkReal x14922=(r22*x14906);
IkReal x14923=(cj5*x14907);
IkReal x14924=(x14906*x14917);
evalcond[0]=((-1.0)*r22*x14907);
evalcond[1]=(x14916+((cj1*sj2))+((cj3*x14922)));
evalcond[2]=(((x14906*x14919))+(((-1.0)*r00*x14924)));
evalcond[3]=((1.0)+((x14906*x14909))+(((-1.0)*r10*x14924)));
evalcond[4]=((((-1.0)*x14918*x14922))+x14908+(((-1.0)*x14920)));
evalcond[5]=(((sj3*x14914))+((x14909*x14921))+(((-1.0)*r10*x14917*x14921))+((sj5*x14915)));
evalcond[6]=((((-1.0)*x14907*x14909*x14918))+((r10*x14913))+((cj3*x14914))+((x14915*x14923)));
evalcond[7]=(((r01*x14907*x14913))+x14908+((sj3*x14911))+((sj5*x14910))+(((-1.0)*r00*x14917*x14921))+(((-1.0)*x14920)));
evalcond[8]=((((-1.0)*sj2*x14912))+((cj3*x14911))+(((-1.0)*x14907*x14918*x14919))+((r00*x14913))+(((-1.0)*x14916))+((x14910*x14923)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14925=((1.0)*sj3);
IkReal x14926=(r11*sj5);
IkReal x14927=((1.0)*cj5*r10);
CheckValue<IkReal> x14928=IKPowWithIntegerCheck((x14926+(((-1.0)*x14927))),-1);
if(!x14928.valid){
continue;
}
CheckValue<IkReal> x14929=IKPowWithIntegerCheck(((((-1.0)*cj3*x14927))+((cj3*x14926))),-1);
if(!x14929.valid){
continue;
}
if( IKabs(((-1.0)*(x14928.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14929.value)*(((((-1.0)*cj5*r11*x14925))+(((-1.0)*r10*sj5*x14925)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x14928.value)))+IKsqr(((x14929.value)*(((((-1.0)*cj5*r11*x14925))+(((-1.0)*r10*sj5*x14925))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x14928.value)), ((x14929.value)*(((((-1.0)*cj5*r11*x14925))+(((-1.0)*r10*sj5*x14925))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14930=IKsin(j4);
IkReal x14931=IKcos(j4);
IkReal x14932=(sj1*sj2);
IkReal x14933=(r11*sj5);
IkReal x14934=(r00*sj3);
IkReal x14935=(cj5*r01);
IkReal x14936=((1.0)*cj1);
IkReal x14937=(cj3*sj5);
IkReal x14938=(cj5*r11);
IkReal x14939=(r10*sj3);
IkReal x14940=(cj2*sj1);
IkReal x14941=((1.0)*cj5);
IkReal x14942=((1.0)*sj3);
IkReal x14943=(r01*sj5);
IkReal x14944=(cj2*x14936);
IkReal x14945=(cj3*x14931);
IkReal x14946=(r22*x14930);
IkReal x14947=(cj5*x14931);
IkReal x14948=(x14930*x14941);
evalcond[0]=((-1.0)*r22*x14931);
evalcond[1]=(x14940+((cj1*sj2))+((cj3*x14946)));
evalcond[2]=((((-1.0)*r00*x14948))+((x14930*x14943)));
evalcond[3]=((1.0)+((x14930*x14933))+(((-1.0)*r10*x14948)));
evalcond[4]=((((-1.0)*x14942*x14946))+x14932+(((-1.0)*x14944)));
evalcond[5]=((((-1.0)*r10*x14941*x14945))+((x14933*x14945))+((sj3*x14938))+((sj5*x14939)));
evalcond[6]=(((r10*x14937))+((cj3*x14938))+(((-1.0)*x14931*x14933*x14942))+((x14939*x14947)));
evalcond[7]=((((-1.0)*r00*x14941*x14945))+x14932+(((-1.0)*x14944))+((r01*x14931*x14937))+((sj3*x14935))+((sj5*x14934)));
evalcond[8]=(((x14934*x14947))+((cj3*x14935))+((r00*x14937))+(((-1.0)*x14940))+(((-1.0)*sj2*x14936))+(((-1.0)*x14931*x14942*x14943)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14949=cj5*cj5;
IkReal x14950=((1.0)*cj3);
IkReal x14951=(r10*r21);
IkReal x14952=(cj5*sj5);
IkReal x14953=(r11*r21);
IkReal x14954=(r11*r20);
IkReal x14955=(r22*sj3);
IkReal x14956=(r10*r20);
IkReal x14957=((1.0)*sj3*x14949);
CheckValue<IkReal> x14958 = IKatan2WithCheck(IkReal((((cj5*r11*x14955))+((r10*sj5*x14955)))),IkReal(((((-1.0)*sj3*x14952*x14956))+(((-1.0)*x14954*x14957))+(((-1.0)*x14951*x14957))+((sj3*x14951))+((sj3*x14952*x14953)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14958.valid){
continue;
}
CheckValue<IkReal> x14959=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x14950))+(((-1.0)*x14949*x14950*x14956))+(((-1.0)*x14950*x14953))+((cj3*x14949*x14953))+((cj3*x14952*x14954))+((cj3*x14951*x14952)))),-1);
if(!x14959.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14958.value)+(((1.5707963267949)*(x14959.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14960=IKsin(j4);
IkReal x14961=IKcos(j4);
IkReal x14962=(sj1*sj2);
IkReal x14963=(cj5*sj3);
IkReal x14964=(cj5*r10);
IkReal x14965=(r00*sj5);
IkReal x14966=(r11*sj5);
IkReal x14967=(cj3*cj5);
IkReal x14968=((1.0)*cj1);
IkReal x14969=(cj3*sj5);
IkReal x14970=(r21*sj5);
IkReal x14971=(cj2*sj1);
IkReal x14972=(sj3*sj5);
IkReal x14973=(r01*sj5);
IkReal x14974=(cj2*x14968);
IkReal x14975=((1.0)*x14961);
IkReal x14976=((1.0)*x14960);
IkReal x14977=(cj3*x14960);
IkReal x14978=(cj3*x14961);
evalcond[0]=(((x14960*x14970))+(((-1.0)*cj5*r20*x14976))+(((-1.0)*r22*x14975)));
evalcond[1]=(((x14960*x14973))+(((-1.0)*cj5*r00*x14976))+(((-1.0)*r02*x14975)));
evalcond[2]=((1.0)+(((-1.0)*r12*x14975))+(((-1.0)*x14964*x14976))+((x14960*x14966)));
evalcond[3]=((((-1.0)*cj3*x14964*x14975))+((r12*x14977))+((x14966*x14978))+((r11*x14963))+((r10*x14972)));
evalcond[4]=((((-1.0)*sj3*x14966*x14975))+((r11*x14967))+((r10*x14969))+((r10*x14961*x14963))+(((-1.0)*r12*sj3*x14976)));
evalcond[5]=(((r22*x14977))+x14971+((cj1*sj2))+((r21*x14961*x14969))+((r20*x14972))+(((-1.0)*r20*x14967*x14975))+((r21*x14963)));
evalcond[6]=(((r01*x14963))+x14962+((r01*x14961*x14969))+(((-1.0)*x14974))+((sj3*x14965))+((r02*x14977))+(((-1.0)*r00*x14967*x14975)));
evalcond[7]=((((-1.0)*r22*sj3*x14976))+x14962+(((-1.0)*x14974))+(((-1.0)*sj3*x14970*x14975))+((r20*x14961*x14963))+((r20*x14969))+((r21*x14967)));
evalcond[8]=(((r01*x14967))+(((-1.0)*sj2*x14968))+(((-1.0)*x14971))+((cj3*x14965))+(((-1.0)*r01*x14972*x14975))+(((-1.0)*r02*sj3*x14976))+((r00*x14961*x14963)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14979=((1.0)*cj5);
CheckValue<IkReal> x14980 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x14979)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14980.valid){
continue;
}
CheckValue<IkReal> x14981=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x14979)))),-1);
if(!x14981.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14980.value)+(((1.5707963267949)*(x14981.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14982=IKsin(j4);
IkReal x14983=IKcos(j4);
IkReal x14984=(sj1*sj2);
IkReal x14985=(cj5*sj3);
IkReal x14986=(cj5*r10);
IkReal x14987=(r00*sj5);
IkReal x14988=(r11*sj5);
IkReal x14989=(cj3*cj5);
IkReal x14990=((1.0)*cj1);
IkReal x14991=(cj3*sj5);
IkReal x14992=(r21*sj5);
IkReal x14993=(cj2*sj1);
IkReal x14994=(sj3*sj5);
IkReal x14995=(r01*sj5);
IkReal x14996=(cj2*x14990);
IkReal x14997=((1.0)*x14983);
IkReal x14998=((1.0)*x14982);
IkReal x14999=(cj3*x14982);
IkReal x15000=(cj3*x14983);
evalcond[0]=((((-1.0)*r22*x14997))+(((-1.0)*cj5*r20*x14998))+((x14982*x14992)));
evalcond[1]=((((-1.0)*cj5*r00*x14998))+(((-1.0)*r02*x14997))+((x14982*x14995)));
evalcond[2]=((1.0)+(((-1.0)*r12*x14997))+((x14982*x14988))+(((-1.0)*x14986*x14998)));
evalcond[3]=(((x14988*x15000))+((r12*x14999))+((r10*x14994))+(((-1.0)*cj3*x14986*x14997))+((r11*x14985)));
evalcond[4]=(((r10*x14983*x14985))+(((-1.0)*r12*sj3*x14998))+((r10*x14991))+((r11*x14989))+(((-1.0)*sj3*x14988*x14997)));
evalcond[5]=(x14993+((cj1*sj2))+((r20*x14994))+((r21*x14985))+(((-1.0)*r20*x14989*x14997))+((r21*x14983*x14991))+((r22*x14999)));
evalcond[6]=((((-1.0)*x14996))+x14984+((r02*x14999))+((r01*x14985))+(((-1.0)*r00*x14989*x14997))+((r01*x14983*x14991))+((sj3*x14987)));
evalcond[7]=(((r20*x14983*x14985))+(((-1.0)*sj3*x14992*x14997))+(((-1.0)*x14996))+(((-1.0)*r22*sj3*x14998))+x14984+((r20*x14991))+((r21*x14989)));
evalcond[8]=((((-1.0)*r02*sj3*x14998))+((cj3*x14987))+((r01*x14989))+(((-1.0)*r01*x14994*x14997))+((r00*x14983*x14985))+(((-1.0)*sj2*x14990))+(((-1.0)*x14993)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15001=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x15001.valid){
continue;
}
CheckValue<IkReal> x15002 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15002.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15001.value)))+(x15002.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15003=IKsin(j4);
IkReal x15004=IKcos(j4);
IkReal x15005=(sj1*sj2);
IkReal x15006=(cj5*sj3);
IkReal x15007=(cj5*r10);
IkReal x15008=(r00*sj5);
IkReal x15009=(r11*sj5);
IkReal x15010=(cj3*cj5);
IkReal x15011=((1.0)*cj1);
IkReal x15012=(cj3*sj5);
IkReal x15013=(r21*sj5);
IkReal x15014=(cj2*sj1);
IkReal x15015=(sj3*sj5);
IkReal x15016=(r01*sj5);
IkReal x15017=(cj2*x15011);
IkReal x15018=((1.0)*x15004);
IkReal x15019=((1.0)*x15003);
IkReal x15020=(cj3*x15003);
IkReal x15021=(cj3*x15004);
evalcond[0]=((((-1.0)*cj5*r20*x15019))+(((-1.0)*r22*x15018))+((x15003*x15013)));
evalcond[1]=((((-1.0)*r02*x15018))+((x15003*x15016))+(((-1.0)*cj5*r00*x15019)));
evalcond[2]=((1.0)+(((-1.0)*r12*x15018))+((x15003*x15009))+(((-1.0)*x15007*x15019)));
evalcond[3]=(((r10*x15015))+((r11*x15006))+((x15009*x15021))+((r12*x15020))+(((-1.0)*cj3*x15007*x15018)));
evalcond[4]=(((r10*x15012))+(((-1.0)*r12*sj3*x15019))+(((-1.0)*sj3*x15009*x15018))+((r10*x15004*x15006))+((r11*x15010)));
evalcond[5]=(((r21*x15004*x15012))+((cj1*sj2))+x15014+((r22*x15020))+((r20*x15015))+(((-1.0)*r20*x15010*x15018))+((r21*x15006)));
evalcond[6]=(((r01*x15006))+(((-1.0)*x15017))+((sj3*x15008))+((r02*x15020))+x15005+(((-1.0)*r00*x15010*x15018))+((r01*x15004*x15012)));
evalcond[7]=((((-1.0)*sj3*x15013*x15018))+(((-1.0)*x15017))+x15005+((r21*x15010))+((r20*x15004*x15006))+((r20*x15012))+(((-1.0)*r22*sj3*x15019)));
evalcond[8]=((((-1.0)*x15014))+((r00*x15004*x15006))+((r01*x15010))+((cj3*x15008))+(((-1.0)*r02*sj3*x15019))+(((-1.0)*r01*x15015*x15018))+(((-1.0)*sj2*x15011)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15023 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x15023)==0){
continue;
}
IkReal x15022=pow(x15023,-0.5);
CheckValue<IkReal> x15024 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x15024.valid){
continue;
}
IkReal gconst12=((-1.0)*(x15024.value));
IkReal gconst13=((-1.0)*r01*x15022);
IkReal gconst14=(r00*x15022);
CheckValue<IkReal> x15025 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x15025.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15025.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x15028 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x15028.valid){
continue;
}
IkReal x15026=((-1.0)*(x15028.value));
IkReal x15027=x15022;
sj5=gconst13;
cj5=gconst14;
j5=x15026;
IkReal gconst12=x15026;
IkReal gconst13=((-1.0)*r01*x15027);
IkReal gconst14=(r00*x15027);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x15031 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x15031.valid){
continue;
}
IkReal x15029=((-1.0)*(x15031.value));
IkReal x15030=x15022;
sj5=gconst13;
cj5=gconst14;
j5=x15029;
IkReal gconst12=x15029;
IkReal gconst13=((-1.0)*r01*x15030);
IkReal gconst14=(r00*x15030);
IkReal x15032=r02*r02;
IkReal x15033=(cj0*r12);
IkReal x15034=((1.0)*x15032);
CheckValue<IkReal> x15038=IKPowWithIntegerCheck(((-1.0)+x15032),-1);
if(!x15038.valid){
continue;
}
IkReal x15035=x15038.value;
if((((1.0)+(((-1.0)*x15034)))) < -0.00001)
continue;
IkReal x15036=IKsqrt(((1.0)+(((-1.0)*x15034))));
IkReal x15037=(x15035*x15036);
j4eval[0]=((IKabs((((r02*x15033*x15037))+(((-1.0)*sj0*x15034*x15037))+((sj0*x15037)))))+(IKabs(((((-1.0)*x15033))+((r02*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x15041 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x15041.valid){
continue;
}
IkReal x15039=((-1.0)*(x15041.value));
IkReal x15040=x15022;
sj5=gconst13;
cj5=gconst14;
j5=x15039;
IkReal gconst12=x15039;
IkReal gconst13=((-1.0)*r01*x15040);
IkReal gconst14=(r00*x15040);
CheckValue<IkReal> x15045=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x15045.valid){
continue;
}
IkReal x15042=x15045.value;
IkReal x15043=(sj3*x15042);
IkReal x15044=(((sj3*(r22*r22)))+(((2.0)*r00*r01*r20*r21*x15043))+((x15043*(r00*r00)*(r20*r20)))+((x15043*(r01*r01)*(r21*r21))));
j4eval[0]=x15044;
j4eval[1]=IKsign(x15044);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x15048 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x15048.valid){
continue;
}
IkReal x15046=((-1.0)*(x15048.value));
IkReal x15047=x15022;
sj5=gconst13;
cj5=gconst14;
j5=x15046;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst12=x15046;
IkReal gconst13=((-1.0)*r01*x15047);
IkReal gconst14=(r00*x15047);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x15051 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x15051.valid){
continue;
}
IkReal x15049=((-1.0)*(x15051.value));
IkReal x15050=x15022;
sj5=gconst13;
cj5=gconst14;
j5=x15049;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst12=x15049;
IkReal gconst13=((-1.0)*r01*x15050);
IkReal gconst14=(r00*x15050);
IkReal x15052=r02*r02;
IkReal x15053=(cj0*r12);
IkReal x15054=((1.0)*x15052);
CheckValue<IkReal> x15058=IKPowWithIntegerCheck(((-1.0)+x15052),-1);
if(!x15058.valid){
continue;
}
IkReal x15055=x15058.value;
if((((1.0)+(((-1.0)*x15054)))) < -0.00001)
continue;
IkReal x15056=IKsqrt(((1.0)+(((-1.0)*x15054))));
IkReal x15057=(x15055*x15056);
j4eval[0]=((IKabs(((((-1.0)*x15053))+((r02*sj0)))))+(IKabs(((((-1.0)*sj0*x15054*x15057))+((sj0*x15057))+((r02*x15053*x15057))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x15061 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x15061.valid){
continue;
}
IkReal x15059=((-1.0)*(x15061.value));
IkReal x15060=x15022;
sj5=gconst13;
cj5=gconst14;
j5=x15059;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst12=x15059;
IkReal gconst13=((-1.0)*r01*x15060);
IkReal gconst14=(r00*x15060);
IkReal x15062=r02*r02;
IkReal x15063=((1.0)+(((-1.0)*x15062)));
IkReal x15064=(cj2*r22*sj1);
IkReal x15065=(cj1*r22*sj2);
CheckValue<IkReal> x15072=IKPowWithIntegerCheck(x15063,-1);
if(!x15072.valid){
continue;
}
IkReal x15066=x15072.value;
CheckValue<IkReal> x15073=IKPowWithIntegerCheck(((-1.0)+x15062),-1);
if(!x15073.valid){
continue;
}
IkReal x15067=x15073.value;
IkReal x15068=((1.0)*x15066);
if((x15063) < -0.00001)
continue;
IkReal x15069=IKsqrt(x15063);
IkReal x15070=((1.0)*r02*x15067*x15069);
IkReal x15071=((((-2.0)*r00*r01*r20*r21*x15066))+(((-1.0)*x15068*(r01*r01)*(r21*r21)))+(((-1.0)*(r22*r22)))+(((-1.0)*x15068*(r00*r00)*(r20*r20))));
j4eval[0]=x15071;
j4eval[1]=IKsign(x15071);
j4eval[2]=((IKabs(((((-1.0)*x15065*x15070))+(((-1.0)*x15064*x15070)))))+(IKabs((x15065+x15064))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15074=(gconst14*r20);
IkReal x15075=(gconst13*r21);
IkReal x15076=(cj2*sj1);
IkReal x15077=(cj1*sj2);
CheckValue<IkReal> x15078 = IKatan2WithCheck(IkReal((((r22*x15076))+((r22*x15077)))),IkReal(((((-1.0)*x15074*x15077))+(((-1.0)*x15074*x15076))+((x15075*x15077))+((x15075*x15076)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15078.valid){
continue;
}
CheckValue<IkReal> x15079=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x15074*x15074)))+(((-1.0)*(r22*r22)))+(((2.0)*x15074*x15075))+(((-1.0)*(x15075*x15075))))),-1);
if(!x15079.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15078.value)+(((1.5707963267949)*(x15079.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15080=IKsin(j4);
IkReal x15081=IKcos(j4);
IkReal x15082=(cj1*cj2);
IkReal x15083=(gconst13*r01);
IkReal x15084=(sj1*sj2);
IkReal x15085=(gconst13*r11);
IkReal x15086=(gconst13*r21);
IkReal x15087=(gconst14*r00);
IkReal x15088=((1.0)*cj0);
IkReal x15089=((1.0)*sj0);
IkReal x15090=(gconst14*r20);
IkReal x15091=(gconst14*r10);
IkReal x15092=((1.0)*x15081);
IkReal x15093=((1.0)*x15080);
evalcond[0]=((((-1.0)*r22*x15092))+((x15080*x15086))+(((-1.0)*x15090*x15093)));
evalcond[1]=((((-1.0)*x15088))+(((-1.0)*r02*x15092))+(((-1.0)*x15087*x15093))+((x15080*x15083)));
evalcond[2]=((((-1.0)*x15089))+(((-1.0)*r12*x15092))+((x15080*x15085))+(((-1.0)*x15091*x15093)));
evalcond[3]=(((x15081*x15086))+((cj2*sj1))+((cj1*sj2))+((r22*x15080))+(((-1.0)*x15090*x15092)));
evalcond[4]=(((x15081*x15083))+((r02*x15080))+(((-1.0)*x15084*x15089))+((sj0*x15082))+(((-1.0)*x15087*x15092)));
evalcond[5]=(((x15081*x15085))+((r12*x15080))+((cj0*x15084))+(((-1.0)*x15082*x15088))+(((-1.0)*x15091*x15092)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15094=((1.0)*cj0);
IkReal x15095=((1.0)*gconst14);
CheckValue<IkReal> x15096 = IKatan2WithCheck(IkReal((((r02*sj0))+(((-1.0)*r12*x15094)))),IkReal((((cj0*gconst14*r10))+(((-1.0)*gconst13*r11*x15094))+((gconst13*r01*sj0))+(((-1.0)*r00*sj0*x15095)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15096.valid){
continue;
}
CheckValue<IkReal> x15097=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r20))+(((-1.0)*r21*x15095)))),-1);
if(!x15097.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15096.value)+(((1.5707963267949)*(x15097.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15098=IKsin(j4);
IkReal x15099=IKcos(j4);
IkReal x15100=(cj1*cj2);
IkReal x15101=(gconst13*r01);
IkReal x15102=(sj1*sj2);
IkReal x15103=(gconst13*r11);
IkReal x15104=(gconst13*r21);
IkReal x15105=(gconst14*r00);
IkReal x15106=((1.0)*cj0);
IkReal x15107=((1.0)*sj0);
IkReal x15108=(gconst14*r20);
IkReal x15109=(gconst14*r10);
IkReal x15110=((1.0)*x15099);
IkReal x15111=((1.0)*x15098);
evalcond[0]=(((x15098*x15104))+(((-1.0)*x15108*x15111))+(((-1.0)*r22*x15110)));
evalcond[1]=(((x15098*x15101))+(((-1.0)*r02*x15110))+(((-1.0)*x15106))+(((-1.0)*x15105*x15111)));
evalcond[2]=(((x15098*x15103))+(((-1.0)*x15107))+(((-1.0)*x15109*x15111))+(((-1.0)*r12*x15110)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x15099*x15104))+(((-1.0)*x15108*x15110))+((r22*x15098)));
evalcond[4]=((((-1.0)*x15102*x15107))+((x15099*x15101))+((r02*x15098))+((sj0*x15100))+(((-1.0)*x15105*x15110)));
evalcond[5]=(((cj0*x15102))+((x15099*x15103))+(((-1.0)*x15100*x15106))+(((-1.0)*x15109*x15110))+((r12*x15098)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15112=((1.0)*gconst14);
CheckValue<IkReal> x15113 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst13*r21))+(((-1.0)*cj0*r20*x15112)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15113.valid){
continue;
}
CheckValue<IkReal> x15114=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r10))+(((-1.0)*r11*x15112)))),-1);
if(!x15114.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15113.value)+(((1.5707963267949)*(x15114.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15115=IKsin(j4);
IkReal x15116=IKcos(j4);
IkReal x15117=(cj1*cj2);
IkReal x15118=(gconst13*r01);
IkReal x15119=(sj1*sj2);
IkReal x15120=(gconst13*r11);
IkReal x15121=(gconst13*r21);
IkReal x15122=(gconst14*r00);
IkReal x15123=((1.0)*cj0);
IkReal x15124=((1.0)*sj0);
IkReal x15125=(gconst14*r20);
IkReal x15126=(gconst14*r10);
IkReal x15127=((1.0)*x15116);
IkReal x15128=((1.0)*x15115);
evalcond[0]=(((x15115*x15121))+(((-1.0)*r22*x15127))+(((-1.0)*x15125*x15128)));
evalcond[1]=((((-1.0)*r02*x15127))+(((-1.0)*x15123))+(((-1.0)*x15122*x15128))+((x15115*x15118)));
evalcond[2]=(((x15115*x15120))+(((-1.0)*x15124))+(((-1.0)*r12*x15127))+(((-1.0)*x15126*x15128)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x15125*x15127))+((r22*x15115))+((x15116*x15121)));
evalcond[4]=(((sj0*x15117))+(((-1.0)*x15119*x15124))+((x15116*x15118))+(((-1.0)*x15122*x15127))+((r02*x15115)));
evalcond[5]=(((r12*x15115))+(((-1.0)*x15117*x15123))+((x15116*x15120))+(((-1.0)*x15126*x15127))+((cj0*x15119)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x15131 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x15131.valid){
continue;
}
IkReal x15129=((-1.0)*(x15131.value));
IkReal x15130=x15022;
sj5=gconst13;
cj5=gconst14;
j5=x15129;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst12=x15129;
IkReal gconst13=((-1.0)*r01*x15130);
IkReal gconst14=(r00*x15130);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x15134 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x15134.valid){
continue;
}
IkReal x15132=((-1.0)*(x15134.value));
IkReal x15133=x15022;
sj5=gconst13;
cj5=gconst14;
j5=x15132;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst12=x15132;
IkReal gconst13=((-1.0)*r01*x15133);
IkReal gconst14=(r00*x15133);
IkReal x15135=r02*r02;
IkReal x15136=(cj0*r12);
IkReal x15137=((1.0)*x15135);
CheckValue<IkReal> x15141=IKPowWithIntegerCheck(((-1.0)+x15135),-1);
if(!x15141.valid){
continue;
}
IkReal x15138=x15141.value;
if((((1.0)+(((-1.0)*x15137)))) < -0.00001)
continue;
IkReal x15139=IKsqrt(((1.0)+(((-1.0)*x15137))));
IkReal x15140=(x15138*x15139);
j4eval[0]=((IKabs((((r02*sj0))+(((-1.0)*x15136)))))+(IKabs(((((-1.0)*sj0*x15137*x15140))+((r02*x15136*x15140))+((sj0*x15140))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x15144 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x15144.valid){
continue;
}
IkReal x15142=((-1.0)*(x15144.value));
IkReal x15143=x15022;
sj5=gconst13;
cj5=gconst14;
j5=x15142;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst12=x15142;
IkReal gconst13=((-1.0)*r01*x15143);
IkReal gconst14=(r00*x15143);
IkReal x15145=r02*r02;
IkReal x15146=(cj1*r22*sj2);
IkReal x15147=(cj2*r22*sj1);
CheckValue<IkReal> x15151=IKPowWithIntegerCheck(((-1.0)+x15145),-1);
if(!x15151.valid){
continue;
}
IkReal x15148=x15151.value;
if((((1.0)+(((-1.0)*x15145)))) < -0.00001)
continue;
IkReal x15149=IKsqrt(((1.0)+(((-1.0)*x15145))));
IkReal x15150=((1.0)*r02*x15148*x15149);
j4eval[0]=((IKabs((x15146+x15147)))+(IKabs(((((-1.0)*x15147*x15150))+(((-1.0)*x15146*x15150))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15152=(gconst14*r20);
IkReal x15153=(gconst13*r21);
IkReal x15154=(cj2*sj1);
IkReal x15155=(cj1*sj2);
CheckValue<IkReal> x15156=IKPowWithIntegerCheck(IKsign(((x15152*x15152)+(r22*r22)+(((-2.0)*x15152*x15153))+(x15153*x15153))),-1);
if(!x15156.valid){
continue;
}
CheckValue<IkReal> x15157 = IKatan2WithCheck(IkReal((((r22*x15155))+((r22*x15154)))),IkReal((((x15153*x15154))+((x15153*x15155))+(((-1.0)*x15152*x15154))+(((-1.0)*x15152*x15155)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15157.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15156.value)))+(x15157.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15158=IKsin(j4);
IkReal x15159=IKcos(j4);
IkReal x15160=(gconst13*r01);
IkReal x15161=(cj1*cj2);
IkReal x15162=((1.0)*cj0);
IkReal x15163=((1.0)*sj0);
IkReal x15164=(sj1*sj2);
IkReal x15165=((1.0)*x15159);
IkReal x15166=(gconst14*x15159);
IkReal x15167=(gconst13*x15158);
IkReal x15168=((1.0)*x15158);
evalcond[0]=((((-1.0)*gconst14*r20*x15168))+((r21*x15167))+(((-1.0)*r22*x15165)));
evalcond[1]=(((x15158*x15160))+(((-1.0)*gconst14*r00*x15168))+(((-1.0)*x15162))+(((-1.0)*r02*x15165)));
evalcond[2]=(((r11*x15167))+(((-1.0)*x15163))+(((-1.0)*gconst14*r10*x15168))+(((-1.0)*r12*x15165)));
evalcond[3]=(((cj2*sj1))+((r20*x15166))+(((-1.0)*gconst13*r21*x15165))+((cj1*sj2))+(((-1.0)*r22*x15168)));
evalcond[4]=(((sj0*x15161))+(((-1.0)*x15160*x15165))+(((-1.0)*x15163*x15164))+(((-1.0)*r02*x15168))+((r00*x15166)));
evalcond[5]=(((r10*x15166))+(((-1.0)*gconst13*r11*x15165))+(((-1.0)*x15161*x15162))+(((-1.0)*r12*x15168))+((cj0*x15164)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15169=((1.0)*cj0);
IkReal x15170=((1.0)*gconst14);
CheckValue<IkReal> x15171=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r20))+(((-1.0)*r21*x15170)))),-1);
if(!x15171.valid){
continue;
}
CheckValue<IkReal> x15172 = IKatan2WithCheck(IkReal((((r02*sj0))+(((-1.0)*r12*x15169)))),IkReal((((cj0*gconst14*r10))+(((-1.0)*r00*sj0*x15170))+(((-1.0)*gconst13*r11*x15169))+((gconst13*r01*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15172.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15171.value)))+(x15172.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15173=IKsin(j4);
IkReal x15174=IKcos(j4);
IkReal x15175=(gconst13*r01);
IkReal x15176=(cj1*cj2);
IkReal x15177=((1.0)*cj0);
IkReal x15178=((1.0)*sj0);
IkReal x15179=(sj1*sj2);
IkReal x15180=((1.0)*x15174);
IkReal x15181=(gconst14*x15174);
IkReal x15182=(gconst13*x15173);
IkReal x15183=((1.0)*x15173);
evalcond[0]=(((r21*x15182))+(((-1.0)*r22*x15180))+(((-1.0)*gconst14*r20*x15183)));
evalcond[1]=(((x15173*x15175))+(((-1.0)*r02*x15180))+(((-1.0)*x15177))+(((-1.0)*gconst14*r00*x15183)));
evalcond[2]=((((-1.0)*gconst14*r10*x15183))+(((-1.0)*x15178))+((r11*x15182))+(((-1.0)*r12*x15180)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst13*r21*x15180))+((r20*x15181))+((cj1*sj2))+(((-1.0)*r22*x15183)));
evalcond[4]=((((-1.0)*x15178*x15179))+((sj0*x15176))+(((-1.0)*x15175*x15180))+(((-1.0)*r02*x15183))+((r00*x15181)));
evalcond[5]=(((cj0*x15179))+(((-1.0)*x15176*x15177))+(((-1.0)*gconst13*r11*x15180))+(((-1.0)*r12*x15183))+((r10*x15181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15184=((1.0)*gconst14);
CheckValue<IkReal> x15185 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst13*r21))+(((-1.0)*cj0*r20*x15184)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15185.valid){
continue;
}
CheckValue<IkReal> x15186=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r10))+(((-1.0)*r11*x15184)))),-1);
if(!x15186.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15185.value)+(((1.5707963267949)*(x15186.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15187=IKsin(j4);
IkReal x15188=IKcos(j4);
IkReal x15189=(gconst13*r01);
IkReal x15190=(cj1*cj2);
IkReal x15191=((1.0)*cj0);
IkReal x15192=((1.0)*sj0);
IkReal x15193=(sj1*sj2);
IkReal x15194=((1.0)*x15188);
IkReal x15195=(gconst14*x15188);
IkReal x15196=(gconst13*x15187);
IkReal x15197=((1.0)*x15187);
evalcond[0]=(((r21*x15196))+(((-1.0)*gconst14*r20*x15197))+(((-1.0)*r22*x15194)));
evalcond[1]=(((x15187*x15189))+(((-1.0)*gconst14*r00*x15197))+(((-1.0)*r02*x15194))+(((-1.0)*x15191)));
evalcond[2]=((((-1.0)*gconst14*r10*x15197))+((r11*x15196))+(((-1.0)*r12*x15194))+(((-1.0)*x15192)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x15197))+((r20*x15195))+(((-1.0)*gconst13*r21*x15194)));
evalcond[4]=(((r00*x15195))+((sj0*x15190))+(((-1.0)*x15192*x15193))+(((-1.0)*r02*x15197))+(((-1.0)*x15189*x15194)));
evalcond[5]=((((-1.0)*x15190*x15191))+((cj0*x15193))+(((-1.0)*r12*x15197))+((r10*x15195))+(((-1.0)*gconst13*r11*x15194)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x15200 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x15200.valid){
continue;
}
IkReal x15198=((-1.0)*(x15200.value));
IkReal x15199=x15022;
sj5=gconst13;
cj5=gconst14;
j5=x15198;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst12=x15198;
IkReal gconst13=((-1.0)*r01*x15199);
IkReal gconst14=(r00*x15199);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x15203 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x15203.valid){
continue;
}
IkReal x15201=((-1.0)*(x15203.value));
IkReal x15202=x15022;
sj5=gconst13;
cj5=gconst14;
j5=x15201;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst12=x15201;
IkReal gconst13=((-1.0)*r01*x15202);
IkReal gconst14=(r00*x15202);
CheckValue<IkReal> x15211=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x15211.valid){
continue;
}
IkReal x15204=x15211.value;
IkReal x15205=(sj3*x15204);
IkReal x15206=(r11*x15205);
IkReal x15207=(r21*x15205);
IkReal x15208=(r20*x15205);
IkReal x15209=(r10*x15205);
IkReal x15210=(r00*r01*x15205);
j4eval[0]=IKsign((((r00*r01*r20*x15206))+((r21*x15206*(r01*r01)))+((r12*r22*sj3))+((r00*r01*r10*x15207))+((r10*x15208*(r00*r00)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15212=gconst14*gconst14;
IkReal x15213=gconst13*gconst13;
IkReal x15214=((1.0)*cj3);
IkReal x15215=(r11*sj3);
IkReal x15216=(gconst13*gconst14);
IkReal x15217=(r10*sj3);
IkReal x15218=(r20*x15212);
IkReal x15219=(r10*x15216);
IkReal x15220=(r21*x15213);
CheckValue<IkReal> x15221 = IKatan2WithCheck(IkReal((((gconst14*r22*x15215))+((gconst13*r22*x15217)))),IkReal((((r21*x15215*x15216))+(((-1.0)*x15215*x15218))+(((-1.0)*r20*x15216*x15217))+((x15217*x15220)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15221.valid){
continue;
}
CheckValue<IkReal> x15222=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x15214*x15218))+((cj3*r21*x15219))+(((-1.0)*r12*r22*x15214))+((cj3*r11*r20*x15216))+(((-1.0)*r11*x15214*x15220)))),-1);
if(!x15222.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15221.value)+(((1.5707963267949)*(x15222.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15223=IKsin(j4);
IkReal x15224=IKcos(j4);
IkReal x15225=(sj1*sj2);
IkReal x15226=((1.0)*cj1);
IkReal x15227=(gconst13*sj3);
IkReal x15228=(gconst13*r01);
IkReal x15229=(gconst14*sj3);
IkReal x15230=(cj3*gconst14);
IkReal x15231=(cj2*sj1);
IkReal x15232=(cj3*gconst13);
IkReal x15233=(cj2*x15226);
IkReal x15234=((1.0)*x15224);
IkReal x15235=((1.0)*x15223);
IkReal x15236=(cj3*x15223);
IkReal x15237=(cj3*x15224);
IkReal x15238=(gconst13*x15223);
evalcond[0]=((((-1.0)*gconst14*r20*x15235))+((r21*x15238))+(((-1.0)*r22*x15234)));
evalcond[1]=(((x15223*x15228))+(((-1.0)*gconst14*r00*x15235))+(((-1.0)*r02*x15234)));
evalcond[2]=((1.0)+(((-1.0)*r12*x15234))+((r11*x15238))+(((-1.0)*gconst14*r10*x15235)));
evalcond[3]=(((r11*x15224*x15232))+(((-1.0)*r10*x15230*x15234))+((r10*x15227))+((r12*x15236))+((r11*x15229)));
evalcond[4]=((((-1.0)*r12*sj3*x15235))+((r10*x15232))+(((-1.0)*r11*x15227*x15234))+((r10*x15224*x15229))+((r11*x15230)));
evalcond[5]=(((cj1*sj2))+x15231+((r20*x15227))+((r22*x15236))+((r21*x15229))+(((-1.0)*r20*x15230*x15234))+((r21*x15224*x15232)));
evalcond[6]=(((r02*x15236))+((r00*x15227))+(((-1.0)*r00*x15230*x15234))+(((-1.0)*x15233))+((x15228*x15237))+x15225+((r01*x15229)));
evalcond[7]=((((-1.0)*r21*x15227*x15234))+(((-1.0)*x15233))+x15225+((r21*x15230))+((r20*x15224*x15229))+(((-1.0)*r22*sj3*x15235))+((r20*x15232)));
evalcond[8]=((((-1.0)*x15231))+((r00*x15232))+((r01*x15230))+(((-1.0)*r02*sj3*x15235))+(((-1.0)*r01*x15227*x15234))+(((-1.0)*sj2*x15226))+((r00*x15224*x15229)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15239=gconst13*gconst13;
IkReal x15240=gconst14*gconst14;
IkReal x15241=((1.0)*r20);
IkReal x15242=(r11*r21);
IkReal x15243=(cj3*r11);
IkReal x15244=(cj3*r10);
IkReal x15245=(r10*sj3);
IkReal x15246=(gconst13*gconst14);
IkReal x15247=(cj3*x15246);
CheckValue<IkReal> x15248=IKPowWithIntegerCheck(IKsign((((sj3*x15239*x15242))+(((-1.0)*r21*x15245*x15246))+((r12*r22*sj3))+(((-1.0)*r11*sj3*x15241*x15246))+((r20*x15240*x15245)))),-1);
if(!x15248.valid){
continue;
}
CheckValue<IkReal> x15249 = IKatan2WithCheck(IkReal((((gconst14*r22*x15243))+((gconst13*r22*x15244)))),IkReal(((((-1.0)*x15240*x15241*x15243))+((x15242*x15247))+(((-1.0)*x15241*x15244*x15246))+((r21*x15239*x15244)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15249.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15248.value)))+(x15249.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15250=IKsin(j4);
IkReal x15251=IKcos(j4);
IkReal x15252=(sj1*sj2);
IkReal x15253=((1.0)*cj1);
IkReal x15254=(gconst13*sj3);
IkReal x15255=(gconst13*r01);
IkReal x15256=(gconst14*sj3);
IkReal x15257=(cj3*gconst14);
IkReal x15258=(cj2*sj1);
IkReal x15259=(cj3*gconst13);
IkReal x15260=(cj2*x15253);
IkReal x15261=((1.0)*x15251);
IkReal x15262=((1.0)*x15250);
IkReal x15263=(cj3*x15250);
IkReal x15264=(cj3*x15251);
IkReal x15265=(gconst13*x15250);
evalcond[0]=((((-1.0)*r22*x15261))+(((-1.0)*gconst14*r20*x15262))+((r21*x15265)));
evalcond[1]=((((-1.0)*r02*x15261))+(((-1.0)*gconst14*r00*x15262))+((x15250*x15255)));
evalcond[2]=((1.0)+(((-1.0)*gconst14*r10*x15262))+(((-1.0)*r12*x15261))+((r11*x15265)));
evalcond[3]=((((-1.0)*r10*x15257*x15261))+((r12*x15263))+((r11*x15256))+((r10*x15254))+((r11*x15251*x15259)));
evalcond[4]=((((-1.0)*r12*sj3*x15262))+((r10*x15251*x15256))+(((-1.0)*r11*x15254*x15261))+((r11*x15257))+((r10*x15259)));
evalcond[5]=(((r21*x15251*x15259))+((cj1*sj2))+x15258+((r22*x15263))+((r21*x15256))+(((-1.0)*r20*x15257*x15261))+((r20*x15254)));
evalcond[6]=(((r00*x15254))+((r01*x15256))+x15252+(((-1.0)*x15260))+(((-1.0)*r00*x15257*x15261))+((x15255*x15264))+((r02*x15263)));
evalcond[7]=(((r20*x15251*x15256))+x15252+(((-1.0)*x15260))+((r21*x15257))+((r20*x15259))+(((-1.0)*r22*sj3*x15262))+(((-1.0)*r21*x15254*x15261)));
evalcond[8]=((((-1.0)*x15258))+((r00*x15259))+(((-1.0)*r01*x15254*x15261))+((r01*x15257))+((r00*x15251*x15256))+(((-1.0)*sj2*x15253))+(((-1.0)*r02*sj3*x15262)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15266=IKPowWithIntegerCheck(IKsign((((gconst14*r21))+((gconst13*r20)))),-1);
if(!x15266.valid){
continue;
}
CheckValue<IkReal> x15267 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst13*r01))+(((-1.0)*gconst14*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15267.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15266.value)))+(x15267.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15268=IKsin(j4);
IkReal x15269=IKcos(j4);
IkReal x15270=(sj1*sj2);
IkReal x15271=((1.0)*cj1);
IkReal x15272=(gconst13*sj3);
IkReal x15273=(gconst13*r01);
IkReal x15274=(gconst14*sj3);
IkReal x15275=(cj3*gconst14);
IkReal x15276=(cj2*sj1);
IkReal x15277=(cj3*gconst13);
IkReal x15278=(cj2*x15271);
IkReal x15279=((1.0)*x15269);
IkReal x15280=((1.0)*x15268);
IkReal x15281=(cj3*x15268);
IkReal x15282=(cj3*x15269);
IkReal x15283=(gconst13*x15268);
evalcond[0]=((((-1.0)*gconst14*r20*x15280))+(((-1.0)*r22*x15279))+((r21*x15283)));
evalcond[1]=((((-1.0)*r02*x15279))+((x15268*x15273))+(((-1.0)*gconst14*r00*x15280)));
evalcond[2]=((1.0)+(((-1.0)*r12*x15279))+(((-1.0)*gconst14*r10*x15280))+((r11*x15283)));
evalcond[3]=(((r11*x15274))+((r11*x15269*x15277))+((r10*x15272))+(((-1.0)*r10*x15275*x15279))+((r12*x15281)));
evalcond[4]=(((r11*x15275))+(((-1.0)*r12*sj3*x15280))+((r10*x15269*x15274))+((r10*x15277))+(((-1.0)*r11*x15272*x15279)));
evalcond[5]=(((r22*x15281))+(((-1.0)*r20*x15275*x15279))+((cj1*sj2))+x15276+((r21*x15269*x15277))+((r20*x15272))+((r21*x15274)));
evalcond[6]=(x15270+((r02*x15281))+((x15273*x15282))+(((-1.0)*r00*x15275*x15279))+((r01*x15274))+(((-1.0)*x15278))+((r00*x15272)));
evalcond[7]=((((-1.0)*r22*sj3*x15280))+((r20*x15269*x15274))+x15270+(((-1.0)*r21*x15272*x15279))+((r20*x15277))+((r21*x15275))+(((-1.0)*x15278)));
evalcond[8]=((((-1.0)*r01*x15272*x15279))+(((-1.0)*sj2*x15271))+((r00*x15269*x15274))+(((-1.0)*r02*sj3*x15280))+(((-1.0)*x15276))+((r01*x15275))+((r00*x15277)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15284=((-1.0)*py);
CheckValue<IkReal> x15286 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x15286.valid){
continue;
}
IkReal x15285=((-1.0)*(x15286.value));
sj5=gconst13;
cj5=gconst14;
j5=x15285;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15284);
rxp0_2=(py*r00);
rxp1_0=(r21*x15284);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst12=x15285;
IkReal gconst13=((-1.0)*r01);
IkReal gconst14=r00;
j4eval[0]=-1.0;
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15287=((-1.0)*py);
CheckValue<IkReal> x15289 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x15289.valid){
continue;
}
IkReal x15288=((-1.0)*(x15289.value));
sj5=gconst13;
cj5=gconst14;
j5=x15288;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15287);
rxp0_2=(py*r00);
rxp1_0=(r21*x15287);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst12=x15288;
IkReal gconst13=((-1.0)*r01);
IkReal gconst14=r00;
IkReal x15290=((1.0)*cj3);
j4eval[0]=-1.0;
j4eval[1]=((((-1.0)*r01*r21*x15290))+(((-1.0)*r00*r20*x15290)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15291=((-1.0)*py);
CheckValue<IkReal> x15293 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x15293.valid){
continue;
}
IkReal x15292=((-1.0)*(x15293.value));
sj5=gconst13;
cj5=gconst14;
j5=x15292;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15291);
rxp0_2=(py*r00);
rxp1_0=(r21*x15291);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst12=x15292;
IkReal gconst13=((-1.0)*r01);
IkReal gconst14=r00;
j4eval[0]=cj3;
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15295=IKPowWithIntegerCheck(r12,-1);
if(!x15295.valid){
continue;
}
IkReal x15294=x15295.value;
CheckValue<IkReal> x15296=IKPowWithIntegerCheck(cj3,-1);
if(!x15296.valid){
continue;
}
if( IKabs((x15294*(x15296.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15294)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15294*(x15296.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15294))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15294*(x15296.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15294));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15297=IKsin(j4);
IkReal x15298=IKcos(j4);
IkReal x15299=(gconst13*r00);
IkReal x15300=(gconst13*r01);
IkReal x15301=(cj2*sj0);
IkReal x15302=(sj1*sj2);
IkReal x15303=(gconst14*r21);
IkReal x15304=(gconst14*r00);
IkReal x15305=(gconst13*r21);
IkReal x15306=(gconst13*r20);
IkReal x15307=(cj2*sj1);
IkReal x15308=(gconst14*r01);
IkReal x15309=((1.0)*cj0);
IkReal x15310=((1.0)*sj0);
IkReal x15311=(gconst14*r20);
IkReal x15312=(cj1*sj2);
IkReal x15313=((1.0)*x15297);
IkReal x15314=((1.0)*cj1*cj2);
IkReal x15315=(cj3*x15298);
IkReal x15316=((1.0)*x15298);
IkReal x15317=(sj3*x15298);
evalcond[0]=((((-1.0)*x15310))+(((-1.0)*r12*x15316)));
evalcond[1]=(((x15297*x15305))+(((-1.0)*x15311*x15313)));
evalcond[2]=(((cj3*r12*x15297))+((cj0*x15302))+(((-1.0)*cj1*cj2*x15309)));
evalcond[3]=(((x15297*x15300))+(((-1.0)*x15309))+(((-1.0)*x15304*x15313)));
evalcond[4]=((((-1.0)*r12*sj3*x15313))+(((-1.0)*x15307*x15309))+(((-1.0)*x15309*x15312)));
evalcond[5]=(((sj3*x15306))+((sj3*x15303))+x15312+x15307+(((-1.0)*x15311*x15315))+((x15305*x15315)));
evalcond[6]=((((-1.0)*x15314))+x15302+(((-1.0)*sj3*x15305*x15316))+((cj3*x15303))+((cj3*x15306))+((x15311*x15317)));
evalcond[7]=(((sj1*x15301))+((cj3*x15308))+((sj0*x15312))+(((-1.0)*sj3*x15300*x15316))+((x15304*x15317))+((cj3*x15299)));
evalcond[8]=(((x15300*x15315))+((sj3*x15308))+((sj3*x15299))+(((-1.0)*x15302*x15310))+(((-1.0)*x15304*x15315))+((cj1*x15301)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15318=((1.0)*gconst14);
CheckValue<IkReal> x15319=IKPowWithIntegerCheck((((gconst13*r01))+(((-1.0)*r00*x15318))),-1);
if(!x15319.valid){
continue;
}
CheckValue<IkReal> x15320=IKPowWithIntegerCheck((((cj3*gconst13*r21))+(((-1.0)*cj3*r20*x15318))),-1);
if(!x15320.valid){
continue;
}
if( IKabs((cj0*(x15319.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15320.value)*(((((-1.0)*r21*sj3*x15318))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst13*r20*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj0*(x15319.value)))+IKsqr(((x15320.value)*(((((-1.0)*r21*sj3*x15318))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst13*r20*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((cj0*(x15319.value)), ((x15320.value)*(((((-1.0)*r21*sj3*x15318))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst13*r20*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15321=IKsin(j4);
IkReal x15322=IKcos(j4);
IkReal x15323=(gconst13*r00);
IkReal x15324=(gconst13*r01);
IkReal x15325=(cj2*sj0);
IkReal x15326=(sj1*sj2);
IkReal x15327=(gconst14*r21);
IkReal x15328=(gconst14*r00);
IkReal x15329=(gconst13*r21);
IkReal x15330=(gconst13*r20);
IkReal x15331=(cj2*sj1);
IkReal x15332=(gconst14*r01);
IkReal x15333=((1.0)*cj0);
IkReal x15334=((1.0)*sj0);
IkReal x15335=(gconst14*r20);
IkReal x15336=(cj1*sj2);
IkReal x15337=((1.0)*x15321);
IkReal x15338=((1.0)*cj1*cj2);
IkReal x15339=(cj3*x15322);
IkReal x15340=((1.0)*x15322);
IkReal x15341=(sj3*x15322);
evalcond[0]=((((-1.0)*r12*x15340))+(((-1.0)*x15334)));
evalcond[1]=((((-1.0)*x15335*x15337))+((x15321*x15329)));
evalcond[2]=(((cj0*x15326))+(((-1.0)*cj1*cj2*x15333))+((cj3*r12*x15321)));
evalcond[3]=((((-1.0)*x15333))+((x15321*x15324))+(((-1.0)*x15328*x15337)));
evalcond[4]=((((-1.0)*r12*sj3*x15337))+(((-1.0)*x15331*x15333))+(((-1.0)*x15333*x15336)));
evalcond[5]=(((sj3*x15330))+((x15329*x15339))+(((-1.0)*x15335*x15339))+x15336+x15331+((sj3*x15327)));
evalcond[6]=(((cj3*x15330))+((x15335*x15341))+(((-1.0)*sj3*x15329*x15340))+x15326+(((-1.0)*x15338))+((cj3*x15327)));
evalcond[7]=(((cj3*x15332))+(((-1.0)*sj3*x15324*x15340))+((sj0*x15336))+((sj1*x15325))+((cj3*x15323))+((x15328*x15341)));
evalcond[8]=((((-1.0)*x15328*x15339))+((sj3*x15332))+((x15324*x15339))+(((-1.0)*x15326*x15334))+((cj1*x15325))+((sj3*x15323)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15342=IKPowWithIntegerCheck((((gconst13*r01))+(((-1.0)*gconst14*r00))),-1);
if(!x15342.valid){
continue;
}
CheckValue<IkReal> x15343=IKPowWithIntegerCheck(r12,-1);
if(!x15343.valid){
continue;
}
if( IKabs((cj0*(x15342.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x15343.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj0*(x15342.value)))+IKsqr(((-1.0)*sj0*(x15343.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((cj0*(x15342.value)), ((-1.0)*sj0*(x15343.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15344=IKsin(j4);
IkReal x15345=IKcos(j4);
IkReal x15346=(gconst13*r00);
IkReal x15347=(gconst13*r01);
IkReal x15348=(cj2*sj0);
IkReal x15349=(sj1*sj2);
IkReal x15350=(gconst14*r21);
IkReal x15351=(gconst14*r00);
IkReal x15352=(gconst13*r21);
IkReal x15353=(gconst13*r20);
IkReal x15354=(cj2*sj1);
IkReal x15355=(gconst14*r01);
IkReal x15356=((1.0)*cj0);
IkReal x15357=((1.0)*sj0);
IkReal x15358=(gconst14*r20);
IkReal x15359=(cj1*sj2);
IkReal x15360=((1.0)*x15344);
IkReal x15361=((1.0)*cj1*cj2);
IkReal x15362=(cj3*x15345);
IkReal x15363=((1.0)*x15345);
IkReal x15364=(sj3*x15345);
evalcond[0]=((((-1.0)*x15357))+(((-1.0)*r12*x15363)));
evalcond[1]=(((x15344*x15352))+(((-1.0)*x15358*x15360)));
evalcond[2]=((((-1.0)*cj1*cj2*x15356))+((cj0*x15349))+((cj3*r12*x15344)));
evalcond[3]=((((-1.0)*x15356))+((x15344*x15347))+(((-1.0)*x15351*x15360)));
evalcond[4]=((((-1.0)*r12*sj3*x15360))+(((-1.0)*x15354*x15356))+(((-1.0)*x15356*x15359)));
evalcond[5]=(((x15352*x15362))+x15354+x15359+(((-1.0)*x15358*x15362))+((sj3*x15353))+((sj3*x15350)));
evalcond[6]=(((cj3*x15353))+((cj3*x15350))+(((-1.0)*x15361))+x15349+((x15358*x15364))+(((-1.0)*sj3*x15352*x15363)));
evalcond[7]=(((sj1*x15348))+(((-1.0)*sj3*x15347*x15363))+((cj3*x15346))+((cj3*x15355))+((x15351*x15364))+((sj0*x15359)));
evalcond[8]=((((-1.0)*x15349*x15357))+((x15347*x15362))+(((-1.0)*x15351*x15362))+((cj1*x15348))+((sj3*x15346))+((sj3*x15355)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x15367 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x15367.valid){
continue;
}
IkReal x15365=((-1.0)*(x15367.value));
IkReal x15366=x15022;
sj5=gconst13;
cj5=gconst14;
j5=x15365;
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst12=x15365;
IkReal gconst13=((-1.0)*r01*x15366);
IkReal gconst14=(r00*x15366);
IkReal x15368=r02*r02;
IkReal x15369=(cj0*r12);
IkReal x15370=((1.0)*x15368);
CheckValue<IkReal> x15374=IKPowWithIntegerCheck(((-1.0)+x15368),-1);
if(!x15374.valid){
continue;
}
IkReal x15371=x15374.value;
if((((1.0)+(((-1.0)*x15370)))) < -0.00001)
continue;
IkReal x15372=IKsqrt(((1.0)+(((-1.0)*x15370))));
IkReal x15373=(x15371*x15372);
j4eval[0]=((IKabs((((r02*x15369*x15373))+((sj0*x15373))+(((-1.0)*sj0*x15370*x15373)))))+(IKabs((((r02*sj0))+(((-1.0)*x15369))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15375=((1.0)*r02);
IkReal x15376=(sj1*sj2);
IkReal x15377=(gconst14*r21);
IkReal x15378=((1.0)*gconst13);
IkReal x15379=(cj3*r20);
IkReal x15380=(r21*sj3);
IkReal x15381=(r00*sj3);
IkReal x15382=(cj1*cj2);
IkReal x15383=(gconst14*r20*sj3);
CheckValue<IkReal> x15384=IKPowWithIntegerCheck(((((-1.0)*r20*x15381*(gconst14*gconst14)))+((gconst13*r01*x15383))+((gconst13*x15377*x15381))+(((-1.0)*gconst13*r01*x15378*x15380))),-1);
if(!x15384.valid){
continue;
}
CheckValue<IkReal> x15385=IKPowWithIntegerCheck((x15383+(((-1.0)*x15378*x15380))),-1);
if(!x15385.valid){
continue;
}
if( IKabs(((x15384.value)*((((cj0*x15383))+(((-1.0)*cj0*x15378*x15380))+(((-1.0)*cj3*x15375*x15377))+(((-1.0)*gconst13*x15375*x15379))+((r02*x15382))+(((-1.0)*x15375*x15376)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15385.value)*(((((-1.0)*x15376))+(((-1.0)*x15378*x15379))+x15382+(((-1.0)*cj3*x15377)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15384.value)*((((cj0*x15383))+(((-1.0)*cj0*x15378*x15380))+(((-1.0)*cj3*x15375*x15377))+(((-1.0)*gconst13*x15375*x15379))+((r02*x15382))+(((-1.0)*x15375*x15376))))))+IKsqr(((x15385.value)*(((((-1.0)*x15376))+(((-1.0)*x15378*x15379))+x15382+(((-1.0)*cj3*x15377))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15384.value)*((((cj0*x15383))+(((-1.0)*cj0*x15378*x15380))+(((-1.0)*cj3*x15375*x15377))+(((-1.0)*gconst13*x15375*x15379))+((r02*x15382))+(((-1.0)*x15375*x15376))))), ((x15385.value)*(((((-1.0)*x15376))+(((-1.0)*x15378*x15379))+x15382+(((-1.0)*cj3*x15377))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15386=IKsin(j4);
IkReal x15387=IKcos(j4);
IkReal x15388=(cj3*gconst14);
IkReal x15389=(cj2*sj0);
IkReal x15390=(gconst13*sj3);
IkReal x15391=(gconst13*r01);
IkReal x15392=(sj1*sj2);
IkReal x15393=(gconst14*sj3);
IkReal x15394=(cj3*gconst13);
IkReal x15395=(cj2*sj1);
IkReal x15396=((1.0)*cj0);
IkReal x15397=((1.0)*sj0);
IkReal x15398=(cj1*sj2);
IkReal x15399=((1.0)*x15386);
IkReal x15400=(r10*x15387);
IkReal x15401=((1.0)*cj1*cj2);
IkReal x15402=(cj3*x15387);
IkReal x15403=(gconst13*x15386);
IkReal x15404=((1.0)*x15387);
IkReal x15405=(cj3*x15386);
evalcond[0]=((((-1.0)*gconst14*r20*x15399))+((r21*x15403)));
evalcond[1]=(((x15386*x15391))+(((-1.0)*gconst14*r00*x15399))+(((-1.0)*r02*x15404))+(((-1.0)*x15396)));
evalcond[2]=((((-1.0)*gconst14*r10*x15399))+(((-1.0)*r12*x15404))+(((-1.0)*x15397))+((r11*x15403)));
evalcond[3]=(((r21*x15393))+((r20*x15390))+(((-1.0)*r20*x15388*x15404))+x15398+x15395+((r21*x15387*x15394)));
evalcond[4]=((((-1.0)*x15401))+((r21*x15388))+((r20*x15394))+(((-1.0)*r21*x15390*x15404))+x15392+((r20*x15387*x15393)));
evalcond[5]=(((r01*x15388))+((sj1*x15389))+(((-1.0)*r02*sj3*x15399))+((r00*x15387*x15393))+((sj0*x15398))+(((-1.0)*r01*x15390*x15404))+((r00*x15394)));
evalcond[6]=((((-1.0)*r00*x15388*x15404))+((cj1*x15389))+(((-1.0)*x15392*x15397))+((r02*x15405))+((r01*x15393))+((r00*x15390))+((x15391*x15402)));
evalcond[7]=(((r12*x15405))+((r10*x15390))+((r11*x15387*x15394))+((r11*x15393))+(((-1.0)*x15388*x15400))+((cj0*x15392))+(((-1.0)*cj1*cj2*x15396)));
evalcond[8]=((((-1.0)*x15395*x15396))+((r10*x15394))+(((-1.0)*r11*x15390*x15404))+((r11*x15388))+((x15393*x15400))+(((-1.0)*x15396*x15398))+(((-1.0)*r12*sj3*x15399)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15406=((1.0)*cj0);
IkReal x15407=((1.0)*gconst14);
CheckValue<IkReal> x15408 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x15406))+((r02*sj0)))),IkReal((((cj0*gconst14*r10))+(((-1.0)*r00*sj0*x15407))+((gconst13*r01*sj0))+(((-1.0)*gconst13*r11*x15406)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15408.valid){
continue;
}
CheckValue<IkReal> x15409=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15407))+(((-1.0)*gconst13*r20)))),-1);
if(!x15409.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15408.value)+(((1.5707963267949)*(x15409.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15410=IKsin(j4);
IkReal x15411=IKcos(j4);
IkReal x15412=(cj3*gconst14);
IkReal x15413=(cj2*sj0);
IkReal x15414=(gconst13*sj3);
IkReal x15415=(gconst13*r01);
IkReal x15416=(sj1*sj2);
IkReal x15417=(gconst14*sj3);
IkReal x15418=(cj3*gconst13);
IkReal x15419=(cj2*sj1);
IkReal x15420=((1.0)*cj0);
IkReal x15421=((1.0)*sj0);
IkReal x15422=(cj1*sj2);
IkReal x15423=((1.0)*x15410);
IkReal x15424=(r10*x15411);
IkReal x15425=((1.0)*cj1*cj2);
IkReal x15426=(cj3*x15411);
IkReal x15427=(gconst13*x15410);
IkReal x15428=((1.0)*x15411);
IkReal x15429=(cj3*x15410);
evalcond[0]=(((r21*x15427))+(((-1.0)*gconst14*r20*x15423)));
evalcond[1]=((((-1.0)*r02*x15428))+((x15410*x15415))+(((-1.0)*x15420))+(((-1.0)*gconst14*r00*x15423)));
evalcond[2]=((((-1.0)*r12*x15428))+(((-1.0)*gconst14*r10*x15423))+((r11*x15427))+(((-1.0)*x15421)));
evalcond[3]=((((-1.0)*r20*x15412*x15428))+((r20*x15414))+((r21*x15411*x15418))+x15419+x15422+((r21*x15417)));
evalcond[4]=(((r20*x15418))+(((-1.0)*x15425))+x15416+(((-1.0)*r21*x15414*x15428))+((r21*x15412))+((r20*x15411*x15417)));
evalcond[5]=(((r00*x15411*x15417))+(((-1.0)*r01*x15414*x15428))+((sj0*x15422))+((r01*x15412))+((r00*x15418))+(((-1.0)*r02*sj3*x15423))+((sj1*x15413)));
evalcond[6]=((((-1.0)*x15416*x15421))+((cj1*x15413))+((x15415*x15426))+((r02*x15429))+((r01*x15417))+((r00*x15414))+(((-1.0)*r00*x15412*x15428)));
evalcond[7]=((((-1.0)*x15412*x15424))+((r11*x15417))+(((-1.0)*cj1*cj2*x15420))+((r12*x15429))+((r11*x15411*x15418))+((cj0*x15416))+((r10*x15414)));
evalcond[8]=((((-1.0)*x15419*x15420))+((r11*x15412))+(((-1.0)*r12*sj3*x15423))+((x15417*x15424))+(((-1.0)*x15420*x15422))+((r10*x15418))+(((-1.0)*r11*x15414*x15428)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15430=gconst13*gconst13;
IkReal x15431=r21*r21;
IkReal x15432=gconst14*gconst14;
IkReal x15433=r20*r20;
IkReal x15434=(gconst14*r21);
IkReal x15435=(cj3*r22);
IkReal x15436=(gconst13*r20);
IkReal x15437=(cj1*cj2);
IkReal x15438=((1.0)*r21);
IkReal x15439=(sj1*sj2);
IkReal x15440=(gconst14*r20);
IkReal x15441=(cj3*r20);
IkReal x15442=(cj3*gconst13*gconst14);
CheckValue<IkReal> x15443 = IKatan2WithCheck(IkReal((((x15434*x15435))+(((-1.0)*r22*x15437))+((r22*x15439))+((x15435*x15436)))),IkReal(((((-1.0)*gconst13*x15437*x15438))+(((-1.0)*x15439*x15440))+((x15431*x15442))+((x15437*x15440))+((r21*x15430*x15441))+(((-1.0)*x15433*x15442))+((gconst13*r21*x15439))+(((-1.0)*x15432*x15438*x15441)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15443.valid){
continue;
}
CheckValue<IkReal> x15444=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+(((-2.0)*sj3*x15434*x15436))+((sj3*x15430*x15431))+((sj3*x15432*x15433)))),-1);
if(!x15444.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15443.value)+(((1.5707963267949)*(x15444.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15445=IKsin(j4);
IkReal x15446=IKcos(j4);
IkReal x15447=((1.0)*r22);
IkReal x15448=((1.0)*r12);
IkReal x15449=(cj3*gconst14);
IkReal x15450=(cj2*sj0);
IkReal x15451=(gconst13*sj3);
IkReal x15452=(gconst13*r01);
IkReal x15453=(sj1*sj2);
IkReal x15454=(gconst14*sj3);
IkReal x15455=(cj3*gconst13);
IkReal x15456=(cj2*sj1);
IkReal x15457=((1.0)*cj0);
IkReal x15458=((1.0)*sj0);
IkReal x15459=(cj1*sj2);
IkReal x15460=(sj3*x15445);
IkReal x15461=(cj3*x15446);
IkReal x15462=(cj3*x15445);
IkReal x15463=(r10*x15446);
IkReal x15464=((1.0)*cj1*cj2);
IkReal x15465=(gconst13*x15445);
IkReal x15466=((1.0)*x15446);
IkReal x15467=((1.0)*gconst14*x15445);
evalcond[0]=((((-1.0)*x15446*x15447))+(((-1.0)*r20*x15467))+((r21*x15465)));
evalcond[1]=((((-1.0)*x15457))+(((-1.0)*r00*x15467))+((x15445*x15452))+(((-1.0)*r02*x15466)));
evalcond[2]=((((-1.0)*x15446*x15448))+(((-1.0)*r10*x15467))+(((-1.0)*x15458))+((r11*x15465)));
evalcond[3]=(((r20*x15451))+((r22*x15462))+((r21*x15446*x15455))+(((-1.0)*r20*x15449*x15466))+x15456+x15459+((r21*x15454)));
evalcond[4]=(((r20*x15455))+(((-1.0)*x15447*x15460))+(((-1.0)*r21*x15451*x15466))+((r20*x15446*x15454))+(((-1.0)*x15464))+x15453+((r21*x15449)));
evalcond[5]=(((r00*x15455))+((r00*x15446*x15454))+((r01*x15449))+(((-1.0)*r02*x15460))+((sj0*x15459))+(((-1.0)*r01*x15451*x15466))+((sj1*x15450)));
evalcond[6]=(((cj1*x15450))+((r02*x15462))+((r01*x15454))+((r00*x15451))+((x15452*x15461))+(((-1.0)*r00*x15449*x15466))+(((-1.0)*x15453*x15458)));
evalcond[7]=(((r11*x15446*x15455))+((r11*x15454))+((r10*x15451))+((cj0*x15453))+((r12*x15462))+(((-1.0)*x15449*x15463))+(((-1.0)*cj1*cj2*x15457)));
evalcond[8]=((((-1.0)*x15457*x15459))+((r11*x15449))+((x15454*x15463))+((r10*x15455))+(((-1.0)*x15448*x15460))+(((-1.0)*x15456*x15457))+(((-1.0)*r11*x15451*x15466)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15468=((1.0)*cj0);
IkReal x15469=((1.0)*gconst14);
CheckValue<IkReal> x15470 = IKatan2WithCheck(IkReal((((r02*sj0))+(((-1.0)*r12*x15468)))),IkReal((((cj0*gconst14*r10))+(((-1.0)*r00*sj0*x15469))+((gconst13*r01*sj0))+(((-1.0)*gconst13*r11*x15468)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15470.valid){
continue;
}
CheckValue<IkReal> x15471=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15469))+(((-1.0)*gconst13*r20)))),-1);
if(!x15471.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15470.value)+(((1.5707963267949)*(x15471.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15472=IKsin(j4);
IkReal x15473=IKcos(j4);
IkReal x15474=((1.0)*r22);
IkReal x15475=((1.0)*r12);
IkReal x15476=(cj3*gconst14);
IkReal x15477=(cj2*sj0);
IkReal x15478=(gconst13*sj3);
IkReal x15479=(gconst13*r01);
IkReal x15480=(sj1*sj2);
IkReal x15481=(gconst14*sj3);
IkReal x15482=(cj3*gconst13);
IkReal x15483=(cj2*sj1);
IkReal x15484=((1.0)*cj0);
IkReal x15485=((1.0)*sj0);
IkReal x15486=(cj1*sj2);
IkReal x15487=(sj3*x15472);
IkReal x15488=(cj3*x15473);
IkReal x15489=(cj3*x15472);
IkReal x15490=(r10*x15473);
IkReal x15491=((1.0)*cj1*cj2);
IkReal x15492=(gconst13*x15472);
IkReal x15493=((1.0)*x15473);
IkReal x15494=((1.0)*gconst14*x15472);
evalcond[0]=((((-1.0)*r20*x15494))+(((-1.0)*x15473*x15474))+((r21*x15492)));
evalcond[1]=((((-1.0)*r02*x15493))+(((-1.0)*r00*x15494))+(((-1.0)*x15484))+((x15472*x15479)));
evalcond[2]=(((r11*x15492))+(((-1.0)*r10*x15494))+(((-1.0)*x15485))+(((-1.0)*x15473*x15475)));
evalcond[3]=((((-1.0)*r20*x15476*x15493))+((r21*x15481))+((r22*x15489))+((r21*x15473*x15482))+x15483+x15486+((r20*x15478)));
evalcond[4]=((((-1.0)*r21*x15478*x15493))+((r21*x15476))+(((-1.0)*x15474*x15487))+((r20*x15473*x15481))+x15480+(((-1.0)*x15491))+((r20*x15482)));
evalcond[5]=(((sj0*x15486))+((r00*x15473*x15481))+((sj1*x15477))+((r01*x15476))+(((-1.0)*r01*x15478*x15493))+(((-1.0)*r02*x15487))+((r00*x15482)));
evalcond[6]=(((r02*x15489))+((cj1*x15477))+(((-1.0)*r00*x15476*x15493))+(((-1.0)*x15480*x15485))+((x15479*x15488))+((r00*x15478))+((r01*x15481)));
evalcond[7]=((((-1.0)*x15476*x15490))+((cj0*x15480))+(((-1.0)*cj1*cj2*x15484))+((r11*x15481))+((r12*x15489))+((r11*x15473*x15482))+((r10*x15478)));
evalcond[8]=((((-1.0)*r11*x15478*x15493))+((r10*x15482))+(((-1.0)*x15475*x15487))+(((-1.0)*x15484*x15486))+((x15481*x15490))+(((-1.0)*x15483*x15484))+((r11*x15476)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15495=((1.0)*gconst14);
CheckValue<IkReal> x15496=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r10))+(((-1.0)*r11*x15495)))),-1);
if(!x15496.valid){
continue;
}
CheckValue<IkReal> x15497 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst13*r21))+(((-1.0)*cj0*r20*x15495)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15497.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15496.value)))+(x15497.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15498=IKsin(j4);
IkReal x15499=IKcos(j4);
IkReal x15500=((1.0)*r22);
IkReal x15501=((1.0)*r12);
IkReal x15502=(cj3*gconst14);
IkReal x15503=(cj2*sj0);
IkReal x15504=(gconst13*sj3);
IkReal x15505=(gconst13*r01);
IkReal x15506=(sj1*sj2);
IkReal x15507=(gconst14*sj3);
IkReal x15508=(cj3*gconst13);
IkReal x15509=(cj2*sj1);
IkReal x15510=((1.0)*cj0);
IkReal x15511=((1.0)*sj0);
IkReal x15512=(cj1*sj2);
IkReal x15513=(sj3*x15498);
IkReal x15514=(cj3*x15499);
IkReal x15515=(cj3*x15498);
IkReal x15516=(r10*x15499);
IkReal x15517=((1.0)*cj1*cj2);
IkReal x15518=(gconst13*x15498);
IkReal x15519=((1.0)*x15499);
IkReal x15520=((1.0)*gconst14*x15498);
evalcond[0]=((((-1.0)*r20*x15520))+((r21*x15518))+(((-1.0)*x15499*x15500)));
evalcond[1]=((((-1.0)*r02*x15519))+(((-1.0)*r00*x15520))+((x15498*x15505))+(((-1.0)*x15510)));
evalcond[2]=(((r11*x15518))+(((-1.0)*x15499*x15501))+(((-1.0)*x15511))+(((-1.0)*r10*x15520)));
evalcond[3]=(((r21*x15499*x15508))+((r21*x15507))+x15509+x15512+((r20*x15504))+(((-1.0)*r20*x15502*x15519))+((r22*x15515)));
evalcond[4]=((((-1.0)*r21*x15504*x15519))+((r21*x15502))+((r20*x15499*x15507))+(((-1.0)*x15517))+x15506+((r20*x15508))+(((-1.0)*x15500*x15513)));
evalcond[5]=((((-1.0)*r02*x15513))+((r00*x15508))+((sj0*x15512))+((r01*x15502))+((sj1*x15503))+(((-1.0)*r01*x15504*x15519))+((r00*x15499*x15507)));
evalcond[6]=(((x15505*x15514))+((r00*x15504))+((r01*x15507))+(((-1.0)*x15506*x15511))+((r02*x15515))+((cj1*x15503))+(((-1.0)*r00*x15502*x15519)));
evalcond[7]=(((cj0*x15506))+(((-1.0)*x15502*x15516))+((r10*x15504))+((r11*x15507))+(((-1.0)*cj1*cj2*x15510))+((r12*x15515))+((r11*x15499*x15508)));
evalcond[8]=((((-1.0)*x15501*x15513))+((r10*x15508))+(((-1.0)*x15509*x15510))+((x15507*x15516))+((r11*x15502))+(((-1.0)*r11*x15504*x15519))+(((-1.0)*x15510*x15512)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15522 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x15522)==0){
continue;
}
IkReal x15521=pow(x15522,-0.5);
CheckValue<IkReal> x15523 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x15523.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x15523.value))));
IkReal gconst16=((1.0)*r01*x15521);
IkReal gconst17=((-1.0)*r00*x15521);
CheckValue<IkReal> x15524 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x15524.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15524.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x15527 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x15527.valid){
continue;
}
IkReal x15525=((1.0)*(x15527.value));
IkReal x15526=x15521;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x15525)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x15525)));
IkReal gconst16=((1.0)*r01*x15526);
IkReal gconst17=((-1.0)*r00*x15526);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=sj0;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x15530 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x15530.valid){
continue;
}
IkReal x15528=((1.0)*(x15530.value));
IkReal x15529=x15521;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x15528)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x15528)));
IkReal gconst16=((1.0)*r01*x15529);
IkReal gconst17=((-1.0)*r00*x15529);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15531=((1.0)*cj0);
IkReal x15532=((1.0)*gconst17);
CheckValue<IkReal> x15533=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*r21*x15532)))),-1);
if(!x15533.valid){
continue;
}
CheckValue<IkReal> x15534 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x15531))+((r02*sj0)))),IkReal((((gconst16*r01*sj0))+(((-1.0)*gconst16*r11*x15531))+((cj0*gconst17*r10))+(((-1.0)*r00*sj0*x15532)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15534.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15533.value)))+(x15534.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15535=IKsin(j4);
IkReal x15536=IKcos(j4);
IkReal x15537=(cj3*gconst17);
IkReal x15538=(gconst16*sj3);
IkReal x15539=(cj1*cj2);
IkReal x15540=(cj3*gconst16);
IkReal x15541=(sj1*sj2);
IkReal x15542=(gconst17*sj3);
IkReal x15543=(cj2*sj1);
IkReal x15544=((1.0)*cj0);
IkReal x15545=((1.0)*sj0);
IkReal x15546=(cj1*sj2);
IkReal x15547=((1.0)*x15536);
IkReal x15548=(gconst16*x15535);
IkReal x15549=(cj3*x15535);
IkReal x15550=((1.0)*gconst17*x15535);
IkReal x15551=((1.0)*sj3*x15535);
evalcond[0]=((((-1.0)*r22*x15547))+((r21*x15548))+(((-1.0)*r20*x15550)));
evalcond[1]=((((-1.0)*r00*x15550))+(((-1.0)*x15544))+((r01*x15548))+(((-1.0)*r02*x15547)));
evalcond[2]=((((-1.0)*r10*x15550))+(((-1.0)*x15545))+((r11*x15548))+(((-1.0)*r12*x15547)));
evalcond[3]=(((r20*x15538))+((r21*x15542))+(((-1.0)*r20*x15537*x15547))+x15546+x15543+((r22*x15549))+((r21*x15536*x15540)));
evalcond[4]=(((r20*x15536*x15542))+((r20*x15540))+(((-1.0)*r21*x15538*x15547))+((r21*x15537))+(((-1.0)*x15539))+x15541+(((-1.0)*r22*x15551)));
evalcond[5]=(((sj0*x15546))+((sj0*x15543))+((r01*x15537))+(((-1.0)*r02*x15551))+((r00*x15536*x15542))+(((-1.0)*r01*x15538*x15547))+((r00*x15540)));
evalcond[6]=(((r02*x15549))+(((-1.0)*r00*x15537*x15547))+((sj0*x15539))+((r00*x15538))+((r01*x15542))+((r01*x15536*x15540))+(((-1.0)*x15541*x15545)));
evalcond[7]=(((r10*x15538))+(((-1.0)*r10*x15537*x15547))+((r11*x15542))+(((-1.0)*x15539*x15544))+((r12*x15549))+((r11*x15536*x15540))+((cj0*x15541)));
evalcond[8]=(((r10*x15540))+((r10*x15536*x15542))+(((-1.0)*x15544*x15546))+(((-1.0)*r12*x15551))+(((-1.0)*x15543*x15544))+((r11*x15537))+(((-1.0)*r11*x15538*x15547)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15552=((1.0)*gconst17);
CheckValue<IkReal> x15553 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x15552))+((cj0*gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15553.valid){
continue;
}
CheckValue<IkReal> x15554=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r10))+(((-1.0)*r11*x15552)))),-1);
if(!x15554.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15553.value)+(((1.5707963267949)*(x15554.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15555=IKsin(j4);
IkReal x15556=IKcos(j4);
IkReal x15557=(cj3*gconst17);
IkReal x15558=(gconst16*sj3);
IkReal x15559=(cj1*cj2);
IkReal x15560=(cj3*gconst16);
IkReal x15561=(sj1*sj2);
IkReal x15562=(gconst17*sj3);
IkReal x15563=(cj2*sj1);
IkReal x15564=((1.0)*cj0);
IkReal x15565=((1.0)*sj0);
IkReal x15566=(cj1*sj2);
IkReal x15567=((1.0)*x15556);
IkReal x15568=(gconst16*x15555);
IkReal x15569=(cj3*x15555);
IkReal x15570=((1.0)*gconst17*x15555);
IkReal x15571=((1.0)*sj3*x15555);
evalcond[0]=(((r21*x15568))+(((-1.0)*r22*x15567))+(((-1.0)*r20*x15570)));
evalcond[1]=((((-1.0)*r02*x15567))+(((-1.0)*r00*x15570))+((r01*x15568))+(((-1.0)*x15564)));
evalcond[2]=((((-1.0)*r12*x15567))+(((-1.0)*r10*x15570))+((r11*x15568))+(((-1.0)*x15565)));
evalcond[3]=(((r21*x15562))+((r22*x15569))+(((-1.0)*r20*x15557*x15567))+((r21*x15556*x15560))+((r20*x15558))+x15566+x15563);
evalcond[4]=(((r21*x15557))+(((-1.0)*x15559))+(((-1.0)*r22*x15571))+((r20*x15556*x15562))+(((-1.0)*r21*x15558*x15567))+((r20*x15560))+x15561);
evalcond[5]=(((sj0*x15563))+((sj0*x15566))+((r01*x15557))+(((-1.0)*r02*x15571))+((r00*x15556*x15562))+(((-1.0)*r01*x15558*x15567))+((r00*x15560)));
evalcond[6]=(((r00*x15558))+((sj0*x15559))+((r01*x15556*x15560))+((r02*x15569))+(((-1.0)*r00*x15557*x15567))+((r01*x15562))+(((-1.0)*x15561*x15565)));
evalcond[7]=(((cj0*x15561))+(((-1.0)*r10*x15557*x15567))+((r11*x15556*x15560))+((r12*x15569))+((r11*x15562))+((r10*x15558))+(((-1.0)*x15559*x15564)));
evalcond[8]=(((r11*x15557))+(((-1.0)*r11*x15558*x15567))+(((-1.0)*r12*x15571))+((r10*x15560))+(((-1.0)*x15564*x15566))+((r10*x15556*x15562))+(((-1.0)*x15563*x15564)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15572=IKPowWithIntegerCheck(IKsign((((gconst17*r01))+((gconst16*r00)))),-1);
if(!x15572.valid){
continue;
}
CheckValue<IkReal> x15573 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst17*r20*sj0))+((gconst16*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15573.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15572.value)))+(x15573.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15574=IKsin(j4);
IkReal x15575=IKcos(j4);
IkReal x15576=(cj3*gconst17);
IkReal x15577=(gconst16*sj3);
IkReal x15578=(cj1*cj2);
IkReal x15579=(cj3*gconst16);
IkReal x15580=(sj1*sj2);
IkReal x15581=(gconst17*sj3);
IkReal x15582=(cj2*sj1);
IkReal x15583=((1.0)*cj0);
IkReal x15584=((1.0)*sj0);
IkReal x15585=(cj1*sj2);
IkReal x15586=((1.0)*x15575);
IkReal x15587=(gconst16*x15574);
IkReal x15588=(cj3*x15574);
IkReal x15589=((1.0)*gconst17*x15574);
IkReal x15590=((1.0)*sj3*x15574);
evalcond[0]=((((-1.0)*r22*x15586))+(((-1.0)*r20*x15589))+((r21*x15587)));
evalcond[1]=(((r01*x15587))+(((-1.0)*x15583))+(((-1.0)*r00*x15589))+(((-1.0)*r02*x15586)));
evalcond[2]=((((-1.0)*x15584))+((r11*x15587))+(((-1.0)*r10*x15589))+(((-1.0)*r12*x15586)));
evalcond[3]=(((r21*x15575*x15579))+((r22*x15588))+((r20*x15577))+x15582+x15585+(((-1.0)*r20*x15576*x15586))+((r21*x15581)));
evalcond[4]=(((r20*x15575*x15581))+(((-1.0)*r22*x15590))+((r21*x15576))+(((-1.0)*r21*x15577*x15586))+((r20*x15579))+x15580+(((-1.0)*x15578)));
evalcond[5]=(((r00*x15575*x15581))+(((-1.0)*r02*x15590))+(((-1.0)*r01*x15577*x15586))+((r00*x15579))+((r01*x15576))+((sj0*x15582))+((sj0*x15585)));
evalcond[6]=(((r01*x15581))+((sj0*x15578))+((r01*x15575*x15579))+(((-1.0)*x15580*x15584))+(((-1.0)*r00*x15576*x15586))+((r00*x15577))+((r02*x15588)));
evalcond[7]=(((r12*x15588))+((r11*x15581))+((r10*x15577))+((cj0*x15580))+(((-1.0)*r10*x15576*x15586))+((r11*x15575*x15579))+(((-1.0)*x15578*x15583)));
evalcond[8]=((((-1.0)*r11*x15577*x15586))+((r10*x15575*x15581))+(((-1.0)*r12*x15590))+((r10*x15579))+((r11*x15576))+(((-1.0)*x15582*x15583))+(((-1.0)*x15583*x15585)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x15591=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x15591;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x15591);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x15592=((1.0)*cj5);
IkReal x15593=((((-1.0)*r10*sj5))+(((-1.0)*r11*x15592)));
j4eval[0]=x15593;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x15592))))));
j4eval[2]=IKsign(x15593);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=1.0;
j0=0;
IkReal x15594=cj5*cj5;
IkReal x15595=(cj3*r01);
IkReal x15596=(cj5*sj5);
IkReal x15597=((1.0)*cj3);
IkReal x15598=((((-1.0)*r02*r22*x15597))+((r21*x15594*x15595))+(((-1.0)*r00*r20*x15594*x15597))+((cj3*r00*r21*x15596))+(((-1.0)*r21*x15595))+((r20*x15595*x15596)));
j4eval[0]=x15598;
j4eval[1]=IKsign(x15598);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15599=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x15599;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x15599);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15600=((1.0)*cj5);
IkReal x15601=((((-1.0)*r11*x15600))+(((-1.0)*r10*sj5)));
j4eval[0]=x15601;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x15600))))));
j4eval[2]=IKsign(x15601);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15602=cj5*cj5;
IkReal x15603=r01*r01;
IkReal x15604=(r01*sj5);
IkReal x15605=(cj5*r00);
IkReal x15606=((((2.0)*x15604*x15605))+(((-1.0)*(r02*r02)))+(((-1.0)*x15603))+(((-1.0)*x15602*(r00*r00)))+((x15602*x15603)));
j4eval[0]=x15606;
j4eval[1]=IKsign(x15606);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x15604))+x15605))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15607=cj5*cj5;
IkReal x15608=r01*r01;
IkReal x15609=(r01*sj5);
IkReal x15610=(cj5*r00);
CheckValue<IkReal> x15611 = IKatan2WithCheck(IkReal(((((-1.0)*x15609))+x15610)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x15611.valid){
continue;
}
CheckValue<IkReal> x15612=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15607*(r00*r00)))+(((-1.0)*(r02*r02)))+(((-1.0)*x15608))+((x15607*x15608))+(((2.0)*x15609*x15610)))),-1);
if(!x15612.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15611.value)+(((1.5707963267949)*(x15612.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15613=IKsin(j4);
IkReal x15614=IKcos(j4);
IkReal x15615=(cj5*r10);
IkReal x15616=(r01*sj5);
IkReal x15617=((1.0)*cj2);
IkReal x15618=(cj5*r00);
IkReal x15619=(cj5*r20);
IkReal x15620=((1.0)*x15614);
IkReal x15621=((1.0)*x15613);
IkReal x15622=(sj5*x15613);
evalcond[0]=(((r21*x15622))+(((-1.0)*x15619*x15621))+(((-1.0)*r22*x15620)));
evalcond[1]=((((-1.0)*r12*x15620))+(((-1.0)*x15615*x15621))+((r11*x15622)));
evalcond[2]=((((-1.0)*x15616*x15620))+((x15614*x15618))+(((-1.0)*r02*x15621)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x15620))+(((-1.0)*x15618*x15621))+((x15613*x15616)));
evalcond[4]=((((-1.0)*r21*sj5*x15620))+((x15614*x15619))+(((-1.0)*cj1*x15617))+((sj1*sj2))+(((-1.0)*r22*x15621)));
evalcond[5]=((((-1.0)*r11*sj5*x15620))+(((-1.0)*r12*x15621))+((x15614*x15615))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x15617)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15623=((1.0)*cj5);
CheckValue<IkReal> x15624 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x15623)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15624.valid){
continue;
}
CheckValue<IkReal> x15625=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x15623)))),-1);
if(!x15625.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15624.value)+(((1.5707963267949)*(x15625.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15626=IKsin(j4);
IkReal x15627=IKcos(j4);
IkReal x15628=(cj5*r10);
IkReal x15629=(r01*sj5);
IkReal x15630=((1.0)*cj2);
IkReal x15631=(cj5*r00);
IkReal x15632=(cj5*r20);
IkReal x15633=((1.0)*x15627);
IkReal x15634=((1.0)*x15626);
IkReal x15635=(sj5*x15626);
evalcond[0]=((((-1.0)*x15632*x15634))+((r21*x15635))+(((-1.0)*r22*x15633)));
evalcond[1]=((((-1.0)*r12*x15633))+(((-1.0)*x15628*x15634))+((r11*x15635)));
evalcond[2]=(((x15627*x15631))+(((-1.0)*x15629*x15633))+(((-1.0)*r02*x15634)));
evalcond[3]=((-1.0)+((x15626*x15629))+(((-1.0)*x15631*x15634))+(((-1.0)*r02*x15633)));
evalcond[4]=(((x15627*x15632))+(((-1.0)*cj1*x15630))+((sj1*sj2))+(((-1.0)*r21*sj5*x15633))+(((-1.0)*r22*x15634)));
evalcond[5]=((((-1.0)*sj1*x15630))+((x15627*x15628))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x15634))+(((-1.0)*r11*sj5*x15633)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15636=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x15636.valid){
continue;
}
CheckValue<IkReal> x15637 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15637.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15636.value)))+(x15637.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15638=IKsin(j4);
IkReal x15639=IKcos(j4);
IkReal x15640=(cj5*r10);
IkReal x15641=(r01*sj5);
IkReal x15642=((1.0)*cj2);
IkReal x15643=(cj5*r00);
IkReal x15644=(cj5*r20);
IkReal x15645=((1.0)*x15639);
IkReal x15646=((1.0)*x15638);
IkReal x15647=(sj5*x15638);
evalcond[0]=((((-1.0)*x15644*x15646))+((r21*x15647))+(((-1.0)*r22*x15645)));
evalcond[1]=((((-1.0)*r12*x15645))+((r11*x15647))+(((-1.0)*x15640*x15646)));
evalcond[2]=((((-1.0)*x15641*x15645))+((x15639*x15643))+(((-1.0)*r02*x15646)));
evalcond[3]=((-1.0)+(((-1.0)*x15643*x15646))+(((-1.0)*r02*x15645))+((x15638*x15641)));
evalcond[4]=(((x15639*x15644))+(((-1.0)*cj1*x15642))+((sj1*sj2))+(((-1.0)*r21*sj5*x15645))+(((-1.0)*r22*x15646)));
evalcond[5]=((((-1.0)*sj1*x15642))+((x15639*x15640))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x15646))+(((-1.0)*r11*sj5*x15645)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15648=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x15648;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x15648);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15649=((1.0)*cj5);
IkReal x15650=((((-1.0)*r10*sj5))+(((-1.0)*r11*x15649)));
j4eval[0]=x15650;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x15649))+((r21*sj5))))));
j4eval[2]=IKsign(x15650);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15651=cj5*cj5;
IkReal x15652=r01*r01;
IkReal x15653=(cj5*r00);
IkReal x15654=(r01*sj5);
IkReal x15655=(((x15651*(r00*r00)))+x15652+(((-1.0)*x15651*x15652))+(((-2.0)*x15653*x15654))+(r02*r02));
j4eval[0]=x15655;
j4eval[1]=IKsign(x15655);
j4eval[2]=((IKabs(r02))+(IKabs((x15654+(((-1.0)*x15653))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15656=cj5*cj5;
IkReal x15657=r01*r01;
IkReal x15658=(r01*sj5);
IkReal x15659=(cj5*r00);
CheckValue<IkReal> x15660 = IKatan2WithCheck(IkReal((x15658+(((-1.0)*x15659)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x15660.valid){
continue;
}
CheckValue<IkReal> x15661=IKPowWithIntegerCheck(IKsign((((x15656*(r00*r00)))+x15657+(((-1.0)*x15656*x15657))+(((-2.0)*x15658*x15659))+(r02*r02))),-1);
if(!x15661.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15660.value)+(((1.5707963267949)*(x15661.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15662=IKcos(j4);
IkReal x15663=IKsin(j4);
IkReal x15664=(cj5*r00);
IkReal x15665=(cj5*r10);
IkReal x15666=(r21*sj5);
IkReal x15667=((1.0)*cj2);
IkReal x15668=(cj5*r20);
IkReal x15669=((1.0)*x15662);
IkReal x15670=((1.0)*x15663);
IkReal x15671=(sj5*x15663);
IkReal x15672=(sj5*x15662);
evalcond[0]=(((r02*x15663))+(((-1.0)*x15664*x15669))+((r01*x15672)));
evalcond[1]=(((x15663*x15666))+(((-1.0)*r22*x15669))+(((-1.0)*x15668*x15670)));
evalcond[2]=((((-1.0)*x15665*x15670))+((r11*x15671))+(((-1.0)*r12*x15669)));
evalcond[3]=((-1.0)+(((-1.0)*x15664*x15670))+((r01*x15671))+(((-1.0)*r02*x15669)));
evalcond[4]=(((sj1*sj2))+((x15662*x15666))+((r22*x15663))+(((-1.0)*x15668*x15669))+(((-1.0)*cj1*x15667)));
evalcond[5]=((((-1.0)*x15665*x15669))+((r12*x15663))+(((-1.0)*sj1*x15667))+((r11*x15672))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15673=((1.0)*cj5);
CheckValue<IkReal> x15674 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x15673)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15674.valid){
continue;
}
CheckValue<IkReal> x15675=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x15673)))),-1);
if(!x15675.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15674.value)+(((1.5707963267949)*(x15675.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15676=IKcos(j4);
IkReal x15677=IKsin(j4);
IkReal x15678=(cj5*r00);
IkReal x15679=(cj5*r10);
IkReal x15680=(r21*sj5);
IkReal x15681=((1.0)*cj2);
IkReal x15682=(cj5*r20);
IkReal x15683=((1.0)*x15676);
IkReal x15684=((1.0)*x15677);
IkReal x15685=(sj5*x15677);
IkReal x15686=(sj5*x15676);
evalcond[0]=(((r02*x15677))+((r01*x15686))+(((-1.0)*x15678*x15683)));
evalcond[1]=(((x15677*x15680))+(((-1.0)*x15682*x15684))+(((-1.0)*r22*x15683)));
evalcond[2]=(((r11*x15685))+(((-1.0)*x15679*x15684))+(((-1.0)*r12*x15683)));
evalcond[3]=((-1.0)+((r01*x15685))+(((-1.0)*r02*x15683))+(((-1.0)*x15678*x15684)));
evalcond[4]=((((-1.0)*cj1*x15681))+((sj1*sj2))+(((-1.0)*x15682*x15683))+((x15676*x15680))+((r22*x15677)));
evalcond[5]=(((r12*x15677))+(((-1.0)*cj1*sj2))+((r11*x15686))+(((-1.0)*x15679*x15683))+(((-1.0)*sj1*x15681)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15687=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x15687.valid){
continue;
}
CheckValue<IkReal> x15688 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15688.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15687.value)))+(x15688.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15689=IKcos(j4);
IkReal x15690=IKsin(j4);
IkReal x15691=(cj5*r00);
IkReal x15692=(cj5*r10);
IkReal x15693=(r21*sj5);
IkReal x15694=((1.0)*cj2);
IkReal x15695=(cj5*r20);
IkReal x15696=((1.0)*x15689);
IkReal x15697=((1.0)*x15690);
IkReal x15698=(sj5*x15690);
IkReal x15699=(sj5*x15689);
evalcond[0]=(((r02*x15690))+((r01*x15699))+(((-1.0)*x15691*x15696)));
evalcond[1]=(((x15690*x15693))+(((-1.0)*x15695*x15697))+(((-1.0)*r22*x15696)));
evalcond[2]=((((-1.0)*r12*x15696))+((r11*x15698))+(((-1.0)*x15692*x15697)));
evalcond[3]=((-1.0)+((r01*x15698))+(((-1.0)*r02*x15696))+(((-1.0)*x15691*x15697)));
evalcond[4]=(((x15689*x15693))+(((-1.0)*cj1*x15694))+((sj1*sj2))+(((-1.0)*x15695*x15696))+((r22*x15690)));
evalcond[5]=((((-1.0)*sj1*x15694))+(((-1.0)*cj1*sj2))+((r12*x15690))+((r11*x15699))+(((-1.0)*x15692*x15696)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15701 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x15701)==0){
continue;
}
IkReal x15700=pow(x15701,-0.5);
CheckValue<IkReal> x15702 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x15702.valid){
continue;
}
IkReal gconst48=((-1.0)*(x15702.value));
IkReal gconst49=((-1.0)*r21*x15700);
IkReal gconst50=(r20*x15700);
CheckValue<IkReal> x15703 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x15703.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15703.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x15706 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x15706.valid){
continue;
}
IkReal x15704=((-1.0)*(x15706.value));
IkReal x15705=x15700;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst49;
cj5=gconst50;
j5=x15704;
IkReal gconst48=x15704;
IkReal gconst49=((-1.0)*r21*x15705);
IkReal gconst50=(r20*x15705);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x15709 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x15709.valid){
continue;
}
IkReal x15707=((-1.0)*(x15709.value));
IkReal x15708=x15700;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst49;
cj5=gconst50;
j5=x15707;
IkReal gconst48=x15707;
IkReal gconst49=((-1.0)*r21*x15708);
IkReal gconst50=(r20*x15708);
CheckValue<IkReal> x15717=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x15717.valid){
continue;
}
IkReal x15710=x15717.value;
IkReal x15711=(sj3*x15710);
IkReal x15712=(r11*x15711);
IkReal x15713=(r00*x15711);
IkReal x15714=(r01*x15711);
IkReal x15715=(r10*x15711);
IkReal x15716=(r20*r21*x15711);
j4eval[0]=IKsign((((r10*x15713*(r20*r20)))+((r02*r12*sj3))+((r01*x15712*(r21*r21)))+((r10*r20*r21*x15714))+((r00*r20*r21*x15712))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15718=gconst49*gconst49;
IkReal x15719=gconst50*gconst50;
IkReal x15720=((1.0)*cj3);
IkReal x15721=(gconst50*r01);
IkReal x15722=(gconst49*r10);
IkReal x15723=(r12*sj3);
IkReal x15724=(gconst49*r00);
IkReal x15725=(r00*sj3);
IkReal x15726=(r11*x15718);
IkReal x15727=(r10*x15719);
CheckValue<IkReal> x15728 = IKatan2WithCheck(IkReal((((x15723*x15724))+((x15721*x15723)))),IkReal(((((-1.0)*r01*sj3*x15727))+(((-1.0)*gconst50*x15722*x15725))+((gconst49*r11*sj3*x15721))+((x15725*x15726)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15728.valid){
continue;
}
CheckValue<IkReal> x15729=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x15720*x15727))+(((-1.0)*r01*x15720*x15726))+((cj3*x15721*x15722))+(((-1.0)*r02*r12*x15720))+((cj3*gconst50*r11*x15724)))),-1);
if(!x15729.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15728.value)+(((1.5707963267949)*(x15729.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15730=IKsin(j4);
IkReal x15731=IKcos(j4);
IkReal x15732=(sj1*sj2);
IkReal x15733=(gconst50*r20);
IkReal x15734=(gconst50*sj3);
IkReal x15735=(cj3*r01);
IkReal x15736=(gconst50*r10);
IkReal x15737=(gconst49*sj3);
IkReal x15738=((1.0)*cj2);
IkReal x15739=(cj1*sj2);
IkReal x15740=(cj3*r11);
IkReal x15741=(gconst50*r00);
IkReal x15742=(cj3*r21);
IkReal x15743=(cj3*gconst49);
IkReal x15744=(cj1*x15738);
IkReal x15745=((1.0)*x15731);
IkReal x15746=((1.0)*x15730);
IkReal x15747=(gconst49*x15730);
IkReal x15748=(gconst49*x15731);
IkReal x15749=(cj3*x15730);
evalcond[0]=((((-1.0)*x15733*x15746))+((r21*x15747))+(((-1.0)*r22*x15745)));
evalcond[1]=((((-1.0)*x15736*x15746))+(((-1.0)*r12*x15745))+((r11*x15747)));
evalcond[2]=((-1.0)+(((-1.0)*x15741*x15746))+(((-1.0)*r02*x15745))+((r01*x15747)));
evalcond[3]=(((r00*x15737))+((r02*x15749))+((r01*x15734))+((x15735*x15748))+(((-1.0)*cj3*x15741*x15745)));
evalcond[4]=(((r00*x15743))+(((-1.0)*r02*sj3*x15746))+((r00*x15731*x15734))+((gconst50*x15735))+(((-1.0)*r01*x15737*x15745)));
evalcond[5]=(((cj2*sj1))+((r22*x15749))+(((-1.0)*cj3*x15733*x15745))+((x15742*x15748))+((r20*x15737))+((r21*x15734))+x15739);
evalcond[6]=(((r11*x15734))+((x15740*x15748))+(((-1.0)*x15744))+x15732+((r10*x15737))+((r12*x15749))+(((-1.0)*cj3*x15736*x15745)));
evalcond[7]=((((-1.0)*r21*x15737*x15745))+((sj3*x15731*x15733))+(((-1.0)*x15744))+x15732+((r20*x15743))+(((-1.0)*r22*sj3*x15746))+((gconst50*x15742)));
evalcond[8]=((((-1.0)*x15739))+((r10*x15731*x15734))+(((-1.0)*r11*x15737*x15745))+(((-1.0)*sj1*x15738))+(((-1.0)*r12*sj3*x15746))+((gconst50*x15740))+((r10*x15743)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15750=gconst49*gconst49;
IkReal x15751=gconst50*gconst50;
IkReal x15752=(cj3*r12);
IkReal x15753=(gconst49*r00);
IkReal x15754=(r01*r11);
IkReal x15755=(r00*r11);
IkReal x15756=(cj3*gconst50);
IkReal x15757=((1.0)*r01*r10);
IkReal x15758=(gconst49*gconst50*sj3);
CheckValue<IkReal> x15759=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((sj3*x15750*x15754))+(((-1.0)*x15757*x15758))+(((-1.0)*gconst50*r11*sj3*x15753))+((r00*r10*sj3*x15751)))),-1);
if(!x15759.valid){
continue;
}
CheckValue<IkReal> x15760 = IKatan2WithCheck(IkReal((((x15752*x15753))+((gconst50*r01*x15752)))),IkReal((((gconst49*x15754*x15756))+(((-1.0)*r10*x15753*x15756))+(((-1.0)*cj3*x15751*x15757))+((cj3*x15750*x15755)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15760.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15759.value)))+(x15760.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15761=IKsin(j4);
IkReal x15762=IKcos(j4);
IkReal x15763=(sj1*sj2);
IkReal x15764=(gconst50*r20);
IkReal x15765=(gconst50*sj3);
IkReal x15766=(cj3*r01);
IkReal x15767=(gconst50*r10);
IkReal x15768=(gconst49*sj3);
IkReal x15769=((1.0)*cj2);
IkReal x15770=(cj1*sj2);
IkReal x15771=(cj3*r11);
IkReal x15772=(gconst50*r00);
IkReal x15773=(cj3*r21);
IkReal x15774=(cj3*gconst49);
IkReal x15775=(cj1*x15769);
IkReal x15776=((1.0)*x15762);
IkReal x15777=((1.0)*x15761);
IkReal x15778=(gconst49*x15761);
IkReal x15779=(gconst49*x15762);
IkReal x15780=(cj3*x15761);
evalcond[0]=(((r21*x15778))+(((-1.0)*r22*x15776))+(((-1.0)*x15764*x15777)));
evalcond[1]=(((r11*x15778))+(((-1.0)*r12*x15776))+(((-1.0)*x15767*x15777)));
evalcond[2]=((-1.0)+(((-1.0)*x15772*x15777))+((r01*x15778))+(((-1.0)*r02*x15776)));
evalcond[3]=(((x15766*x15779))+(((-1.0)*cj3*x15772*x15776))+((r01*x15765))+((r00*x15768))+((r02*x15780)));
evalcond[4]=(((gconst50*x15766))+(((-1.0)*r02*sj3*x15777))+((r00*x15762*x15765))+((r00*x15774))+(((-1.0)*r01*x15768*x15776)));
evalcond[5]=(((cj2*sj1))+((r21*x15765))+((r22*x15780))+((r20*x15768))+x15770+((x15773*x15779))+(((-1.0)*cj3*x15764*x15776)));
evalcond[6]=((((-1.0)*cj3*x15767*x15776))+((r10*x15768))+((x15771*x15779))+(((-1.0)*x15775))+((r12*x15780))+x15763+((r11*x15765)));
evalcond[7]=(((gconst50*x15773))+(((-1.0)*r21*x15768*x15776))+(((-1.0)*x15775))+((r20*x15774))+x15763+(((-1.0)*r22*sj3*x15777))+((sj3*x15762*x15764)));
evalcond[8]=(((r10*x15774))+((gconst50*x15771))+(((-1.0)*r11*x15768*x15776))+(((-1.0)*x15770))+(((-1.0)*r12*sj3*x15777))+((r10*x15762*x15765))+(((-1.0)*sj1*x15769)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15781=((1.0)*gconst50);
CheckValue<IkReal> x15782=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst49*r10))+(((-1.0)*r11*x15781)))),-1);
if(!x15782.valid){
continue;
}
CheckValue<IkReal> x15783 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst49*r21))+(((-1.0)*r20*x15781)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15783.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15782.value)))+(x15783.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15784=IKsin(j4);
IkReal x15785=IKcos(j4);
IkReal x15786=(sj1*sj2);
IkReal x15787=(gconst50*r20);
IkReal x15788=(gconst50*sj3);
IkReal x15789=(cj3*r01);
IkReal x15790=(gconst50*r10);
IkReal x15791=(gconst49*sj3);
IkReal x15792=((1.0)*cj2);
IkReal x15793=(cj1*sj2);
IkReal x15794=(cj3*r11);
IkReal x15795=(gconst50*r00);
IkReal x15796=(cj3*r21);
IkReal x15797=(cj3*gconst49);
IkReal x15798=(cj1*x15792);
IkReal x15799=((1.0)*x15785);
IkReal x15800=((1.0)*x15784);
IkReal x15801=(gconst49*x15784);
IkReal x15802=(gconst49*x15785);
IkReal x15803=(cj3*x15784);
evalcond[0]=((((-1.0)*r22*x15799))+((r21*x15801))+(((-1.0)*x15787*x15800)));
evalcond[1]=(((r11*x15801))+(((-1.0)*r12*x15799))+(((-1.0)*x15790*x15800)));
evalcond[2]=((-1.0)+(((-1.0)*x15795*x15800))+(((-1.0)*r02*x15799))+((r01*x15801)));
evalcond[3]=(((r01*x15788))+((x15789*x15802))+(((-1.0)*cj3*x15795*x15799))+((r02*x15803))+((r00*x15791)));
evalcond[4]=((((-1.0)*r01*x15791*x15799))+((gconst50*x15789))+(((-1.0)*r02*sj3*x15800))+((r00*x15797))+((r00*x15785*x15788)));
evalcond[5]=(((cj2*sj1))+((r21*x15788))+((x15796*x15802))+((r20*x15791))+x15793+(((-1.0)*cj3*x15787*x15799))+((r22*x15803)));
evalcond[6]=(((r12*x15803))+((x15794*x15802))+(((-1.0)*x15798))+((r10*x15791))+x15786+((r11*x15788))+(((-1.0)*cj3*x15790*x15799)));
evalcond[7]=((((-1.0)*r21*x15791*x15799))+((sj3*x15785*x15787))+(((-1.0)*x15798))+((r20*x15797))+x15786+(((-1.0)*r22*sj3*x15800))+((gconst50*x15796)));
evalcond[8]=((((-1.0)*r11*x15791*x15799))+((r10*x15797))+(((-1.0)*x15793))+(((-1.0)*sj1*x15792))+(((-1.0)*r12*sj3*x15800))+((gconst50*x15794))+((r10*x15785*x15788)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15805 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x15805)==0){
continue;
}
IkReal x15804=pow(x15805,-0.5);
CheckValue<IkReal> x15806 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x15806.valid){
continue;
}
IkReal gconst51=((3.14159265358979)+(((-1.0)*(x15806.value))));
IkReal gconst52=((1.0)*r21*x15804);
IkReal gconst53=((-1.0)*r20*x15804);
CheckValue<IkReal> x15807 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x15807.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15807.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x15810 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x15810.valid){
continue;
}
IkReal x15808=((1.0)*(x15810.value));
IkReal x15809=x15804;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x15808)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x15808)));
IkReal gconst52=((1.0)*r21*x15809);
IkReal gconst53=((-1.0)*r20*x15809);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x15813 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x15813.valid){
continue;
}
IkReal x15811=((1.0)*(x15813.value));
IkReal x15812=x15804;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x15811)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x15811)));
IkReal gconst52=((1.0)*r21*x15812);
IkReal gconst53=((-1.0)*r20*x15812);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x15816 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x15816.valid){
continue;
}
IkReal x15814=((1.0)*(x15816.value));
IkReal x15815=x15804;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x15814)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x15814)));
IkReal gconst52=((1.0)*r21*x15815);
IkReal gconst53=((-1.0)*r20*x15815);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15817=gconst52*gconst52;
IkReal x15818=gconst53*gconst53;
IkReal x15819=(gconst53*r01);
IkReal x15820=(cj3*r20);
IkReal x15821=(r22*sj3);
IkReal x15822=((1.0)*cj3);
IkReal x15823=(gconst52*sj3);
IkReal x15824=((1.0)*r00);
IkReal x15825=(gconst52*r00);
IkReal x15826=(r21*x15817);
CheckValue<IkReal> x15827 = IKatan2WithCheck(IkReal((((x15819*x15821))+((x15821*x15825)))),IkReal((((r21*x15819*x15823))+(((-1.0)*r01*r20*sj3*x15818))+(((-1.0)*gconst53*r20*x15823*x15824))+((r00*sj3*x15826)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15827.valid){
continue;
}
CheckValue<IkReal> x15828=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15818*x15820*x15824))+(((-1.0)*r02*r22*x15822))+((gconst52*x15819*x15820))+((cj3*gconst53*r21*x15825))+(((-1.0)*r01*x15822*x15826)))),-1);
if(!x15828.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15827.value)+(((1.5707963267949)*(x15828.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15829=IKsin(j4);
IkReal x15830=IKcos(j4);
IkReal x15831=(sj1*sj2);
IkReal x15832=((1.0)*cj1);
IkReal x15833=(cj3*gconst52);
IkReal x15834=(gconst53*sj3);
IkReal x15835=(cj3*gconst53);
IkReal x15836=(cj2*sj1);
IkReal x15837=(gconst52*sj3);
IkReal x15838=(cj2*x15832);
IkReal x15839=((1.0)*x15830);
IkReal x15840=((1.0)*x15829);
IkReal x15841=(gconst52*x15829);
IkReal x15842=(cj3*x15829);
evalcond[0]=((((-1.0)*gconst53*r20*x15840))+((r21*x15841))+(((-1.0)*r22*x15839)));
evalcond[1]=(((r11*x15841))+(((-1.0)*gconst53*r10*x15840))+(((-1.0)*r12*x15839)));
evalcond[2]=((-1.0)+((r01*x15841))+(((-1.0)*r02*x15839))+(((-1.0)*gconst53*r00*x15840)));
evalcond[3]=((((-1.0)*r00*x15835*x15839))+((r01*x15834))+((r02*x15842))+((r01*x15830*x15833))+((r00*x15837)));
evalcond[4]=((((-1.0)*r01*x15837*x15839))+(((-1.0)*r02*sj3*x15840))+((r00*x15830*x15834))+((r01*x15835))+((r00*x15833)));
evalcond[5]=(((r21*x15830*x15833))+(((-1.0)*r20*x15835*x15839))+((cj1*sj2))+((r20*x15837))+((r22*x15842))+x15836+((r21*x15834)));
evalcond[6]=(((r10*x15837))+((r11*x15830*x15833))+((r11*x15834))+((r12*x15842))+(((-1.0)*x15838))+x15831+(((-1.0)*r10*x15835*x15839)));
evalcond[7]=((((-1.0)*r21*x15837*x15839))+((r20*x15833))+(((-1.0)*r22*sj3*x15840))+(((-1.0)*x15838))+x15831+((r20*x15830*x15834))+((r21*x15835)));
evalcond[8]=(((r10*x15833))+((r10*x15830*x15834))+(((-1.0)*r11*x15837*x15839))+(((-1.0)*sj2*x15832))+((r11*x15835))+(((-1.0)*r12*sj3*x15840))+(((-1.0)*x15836)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15843=((1.0)*gconst53);
CheckValue<IkReal> x15844 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x15843))+((gconst52*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15844.valid){
continue;
}
CheckValue<IkReal> x15845=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x15843))+(((-1.0)*gconst52*r10)))),-1);
if(!x15845.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15844.value)+(((1.5707963267949)*(x15845.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15846=IKsin(j4);
IkReal x15847=IKcos(j4);
IkReal x15848=(sj1*sj2);
IkReal x15849=((1.0)*cj1);
IkReal x15850=(cj3*gconst52);
IkReal x15851=(gconst53*sj3);
IkReal x15852=(cj3*gconst53);
IkReal x15853=(cj2*sj1);
IkReal x15854=(gconst52*sj3);
IkReal x15855=(cj2*x15849);
IkReal x15856=((1.0)*x15847);
IkReal x15857=((1.0)*x15846);
IkReal x15858=(gconst52*x15846);
IkReal x15859=(cj3*x15846);
evalcond[0]=((((-1.0)*gconst53*r20*x15857))+(((-1.0)*r22*x15856))+((r21*x15858)));
evalcond[1]=((((-1.0)*r12*x15856))+((r11*x15858))+(((-1.0)*gconst53*r10*x15857)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x15856))+(((-1.0)*gconst53*r00*x15857))+((r01*x15858)));
evalcond[3]=((((-1.0)*r00*x15852*x15856))+((r01*x15847*x15850))+((r00*x15854))+((r01*x15851))+((r02*x15859)));
evalcond[4]=(((r00*x15850))+(((-1.0)*r02*sj3*x15857))+((r01*x15852))+(((-1.0)*r01*x15854*x15856))+((r00*x15847*x15851)));
evalcond[5]=(((r20*x15854))+((cj1*sj2))+((r21*x15847*x15850))+((r22*x15859))+(((-1.0)*r20*x15852*x15856))+((r21*x15851))+x15853);
evalcond[6]=(((r12*x15859))+(((-1.0)*r10*x15852*x15856))+((r11*x15847*x15850))+(((-1.0)*x15855))+((r10*x15854))+((r11*x15851))+x15848);
evalcond[7]=(((r20*x15850))+((r20*x15847*x15851))+(((-1.0)*x15855))+(((-1.0)*r21*x15854*x15856))+((r21*x15852))+(((-1.0)*r22*sj3*x15857))+x15848);
evalcond[8]=(((r10*x15847*x15851))+((r10*x15850))+(((-1.0)*r12*sj3*x15857))+((r11*x15852))+(((-1.0)*r11*x15854*x15856))+(((-1.0)*x15853))+(((-1.0)*sj2*x15849)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15860 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst53*r10))+((gconst52*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15860.valid){
continue;
}
CheckValue<IkReal> x15861=IKPowWithIntegerCheck(IKsign((((gconst53*r21))+((gconst52*r20)))),-1);
if(!x15861.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15860.value)+(((1.5707963267949)*(x15861.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15862=IKsin(j4);
IkReal x15863=IKcos(j4);
IkReal x15864=(sj1*sj2);
IkReal x15865=((1.0)*cj1);
IkReal x15866=(cj3*gconst52);
IkReal x15867=(gconst53*sj3);
IkReal x15868=(cj3*gconst53);
IkReal x15869=(cj2*sj1);
IkReal x15870=(gconst52*sj3);
IkReal x15871=(cj2*x15865);
IkReal x15872=((1.0)*x15863);
IkReal x15873=((1.0)*x15862);
IkReal x15874=(gconst52*x15862);
IkReal x15875=(cj3*x15862);
evalcond[0]=((((-1.0)*gconst53*r20*x15873))+((r21*x15874))+(((-1.0)*r22*x15872)));
evalcond[1]=(((r11*x15874))+(((-1.0)*gconst53*r10*x15873))+(((-1.0)*r12*x15872)));
evalcond[2]=((-1.0)+((r01*x15874))+(((-1.0)*gconst53*r00*x15873))+(((-1.0)*r02*x15872)));
evalcond[3]=(((r00*x15870))+((r01*x15863*x15866))+(((-1.0)*r00*x15868*x15872))+((r02*x15875))+((r01*x15867)));
evalcond[4]=((((-1.0)*r02*sj3*x15873))+(((-1.0)*r01*x15870*x15872))+((r00*x15866))+((r01*x15868))+((r00*x15863*x15867)));
evalcond[5]=(((r21*x15867))+(((-1.0)*r20*x15868*x15872))+((r21*x15863*x15866))+((cj1*sj2))+((r20*x15870))+((r22*x15875))+x15869);
evalcond[6]=(((r11*x15867))+((r10*x15870))+(((-1.0)*x15871))+(((-1.0)*r10*x15868*x15872))+((r12*x15875))+x15864+((r11*x15863*x15866)));
evalcond[7]=(((r21*x15868))+(((-1.0)*r22*sj3*x15873))+(((-1.0)*x15871))+((r20*x15863*x15867))+((r20*x15866))+(((-1.0)*r21*x15870*x15872))+x15864);
evalcond[8]=((((-1.0)*sj2*x15865))+(((-1.0)*x15869))+((r11*x15868))+((r10*x15863*x15867))+(((-1.0)*r12*sj3*x15873))+(((-1.0)*r11*x15870*x15872))+((r10*x15866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15876=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x15876);
rxp1_0=(pz*r11);
rxp1_1=(r01*x15876);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x15877=(cj5*r00);
IkReal x15878=(r01*sj5);
j4eval[0]=((((-1.0)*x15877))+x15878);
j4eval[1]=((((-1.0)*sj3*x15878))+((sj3*x15877)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15879=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x15879);
rxp1_0=(pz*r11);
rxp1_1=(r01*x15879);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x15880=(r01*sj5);
IkReal x15881=((1.0)*cj5*r00);
j4eval[0]=((((-1.0)*x15881))+x15880);
j4eval[1]=(((cj3*x15880))+(((-1.0)*cj3*x15881)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15882=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x15882);
rxp1_0=(pz*r11);
rxp1_1=(r01*x15882);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=(((cj5*r00*sj3))+(((-1.0)*r01*sj3*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15883=((1.0)*cj3);
CheckValue<IkReal> x15884=IKPowWithIntegerCheck(cj3,-1);
if(!x15884.valid){
continue;
}
CheckValue<IkReal> x15885=IKPowWithIntegerCheck(r22,-1);
if(!x15885.valid){
continue;
}
CheckValue<IkReal> x15886=IKPowWithIntegerCheck((((cj5*r00*sj3))+(((-1.0)*r01*sj3*sj5))),-1);
if(!x15886.valid){
continue;
}
if( IKabs(((x15884.value)*(x15885.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15886.value)*(((((-1.0)*r00*sj5*x15883))+(((-1.0)*cj5*r01*x15883)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15884.value)*(x15885.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x15886.value)*(((((-1.0)*r00*sj5*x15883))+(((-1.0)*cj5*r01*x15883))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15884.value)*(x15885.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x15886.value)*(((((-1.0)*r00*sj5*x15883))+(((-1.0)*cj5*r01*x15883))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15887=IKsin(j4);
IkReal x15888=IKcos(j4);
IkReal x15889=(sj1*sj2);
IkReal x15890=(cj5*sj3);
IkReal x15891=(r11*sj5);
IkReal x15892=(cj3*cj5);
IkReal x15893=((1.0)*cj1);
IkReal x15894=(cj3*sj5);
IkReal x15895=(sj3*sj5);
IkReal x15896=(cj2*sj1);
IkReal x15897=(r01*sj5);
IkReal x15898=((1.0)*sj3);
IkReal x15899=(cj2*x15893);
IkReal x15900=(r10*x15888);
IkReal x15901=(r22*x15887);
IkReal x15902=(cj3*x15888);
IkReal x15903=((1.0)*cj5*x15887);
evalcond[0]=((-1.0)*r22*x15888);
evalcond[1]=(((cj1*sj2))+((cj3*x15901))+x15896);
evalcond[2]=((((-1.0)*r10*x15903))+((x15887*x15891)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x15903))+((x15887*x15897)));
evalcond[4]=((((-1.0)*x15898*x15901))+(((-1.0)*x15899))+x15889);
evalcond[5]=(((r00*x15888*x15890))+((r01*x15892))+((r00*x15894))+(((-1.0)*r01*x15888*x15895)));
evalcond[6]=(((r01*x15890))+((r01*x15888*x15894))+((r00*x15895))+(((-1.0)*r00*x15888*x15892)));
evalcond[7]=(((r10*x15895))+(((-1.0)*x15899))+((r11*x15890))+(((-1.0)*x15892*x15900))+x15889+((x15891*x15902)));
evalcond[8]=((((-1.0)*sj2*x15893))+((x15890*x15900))+((r10*x15894))+(((-1.0)*x15896))+((r11*x15892))+(((-1.0)*x15888*x15891*x15898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15904=((1.0)*sj3);
IkReal x15905=(r01*sj5);
IkReal x15906=((1.0)*cj5*r00);
CheckValue<IkReal> x15907=IKPowWithIntegerCheck(((((-1.0)*x15906))+x15905),-1);
if(!x15907.valid){
continue;
}
CheckValue<IkReal> x15908=IKPowWithIntegerCheck(((((-1.0)*cj3*x15906))+((cj3*x15905))),-1);
if(!x15908.valid){
continue;
}
if( IKabs(x15907.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15908.value)*(((((-1.0)*cj5*r01*x15904))+(((-1.0)*r00*sj5*x15904)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x15907.value)+IKsqr(((x15908.value)*(((((-1.0)*cj5*r01*x15904))+(((-1.0)*r00*sj5*x15904))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x15907.value, ((x15908.value)*(((((-1.0)*cj5*r01*x15904))+(((-1.0)*r00*sj5*x15904))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15909=IKsin(j4);
IkReal x15910=IKcos(j4);
IkReal x15911=(sj1*sj2);
IkReal x15912=(cj5*sj3);
IkReal x15913=(r11*sj5);
IkReal x15914=(cj3*cj5);
IkReal x15915=((1.0)*cj1);
IkReal x15916=(cj3*sj5);
IkReal x15917=(sj3*sj5);
IkReal x15918=(cj2*sj1);
IkReal x15919=(r01*sj5);
IkReal x15920=((1.0)*sj3);
IkReal x15921=(cj2*x15915);
IkReal x15922=(r10*x15910);
IkReal x15923=(r22*x15909);
IkReal x15924=(cj3*x15910);
IkReal x15925=((1.0)*cj5*x15909);
evalcond[0]=((-1.0)*r22*x15910);
evalcond[1]=(((cj1*sj2))+((cj3*x15923))+x15918);
evalcond[2]=((((-1.0)*r10*x15925))+((x15909*x15913)));
evalcond[3]=((-1.0)+((x15909*x15919))+(((-1.0)*r00*x15925)));
evalcond[4]=((((-1.0)*x15920*x15923))+(((-1.0)*x15921))+x15911);
evalcond[5]=(((r00*x15910*x15912))+((r00*x15916))+((r01*x15914))+(((-1.0)*r01*x15910*x15917)));
evalcond[6]=((((-1.0)*r00*x15910*x15914))+((r00*x15917))+((r01*x15912))+((r01*x15910*x15916)));
evalcond[7]=(((x15913*x15924))+((r11*x15912))+((r10*x15917))+(((-1.0)*x15914*x15922))+(((-1.0)*x15921))+x15911);
evalcond[8]=((((-1.0)*x15918))+((r11*x15914))+(((-1.0)*x15910*x15913*x15920))+((x15912*x15922))+(((-1.0)*sj2*x15915))+((r10*x15916)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15926=((1.0)*cj3);
IkReal x15927=(cj5*r00);
IkReal x15928=(r01*sj5);
CheckValue<IkReal> x15929=IKPowWithIntegerCheck(((((-1.0)*x15927))+x15928),-1);
if(!x15929.valid){
continue;
}
CheckValue<IkReal> x15930=IKPowWithIntegerCheck((((sj3*x15927))+(((-1.0)*sj3*x15928))),-1);
if(!x15930.valid){
continue;
}
if( IKabs(x15929.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15930.value)*(((((-1.0)*cj5*r01*x15926))+(((-1.0)*r00*sj5*x15926)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x15929.value)+IKsqr(((x15930.value)*(((((-1.0)*cj5*r01*x15926))+(((-1.0)*r00*sj5*x15926))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x15929.value, ((x15930.value)*(((((-1.0)*cj5*r01*x15926))+(((-1.0)*r00*sj5*x15926))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15931=IKsin(j4);
IkReal x15932=IKcos(j4);
IkReal x15933=(sj1*sj2);
IkReal x15934=(cj5*sj3);
IkReal x15935=(r11*sj5);
IkReal x15936=(cj3*cj5);
IkReal x15937=((1.0)*cj1);
IkReal x15938=(cj3*sj5);
IkReal x15939=(sj3*sj5);
IkReal x15940=(cj2*sj1);
IkReal x15941=(r01*sj5);
IkReal x15942=((1.0)*sj3);
IkReal x15943=(cj2*x15937);
IkReal x15944=(r10*x15932);
IkReal x15945=(r22*x15931);
IkReal x15946=(cj3*x15932);
IkReal x15947=((1.0)*cj5*x15931);
evalcond[0]=((-1.0)*r22*x15932);
evalcond[1]=(((cj3*x15945))+((cj1*sj2))+x15940);
evalcond[2]=(((x15931*x15935))+(((-1.0)*r10*x15947)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x15947))+((x15931*x15941)));
evalcond[4]=((((-1.0)*x15943))+(((-1.0)*x15942*x15945))+x15933);
evalcond[5]=(((r00*x15932*x15934))+((r00*x15938))+((r01*x15936))+(((-1.0)*r01*x15932*x15939)));
evalcond[6]=(((r00*x15939))+((r01*x15934))+(((-1.0)*r00*x15932*x15936))+((r01*x15932*x15938)));
evalcond[7]=(((r11*x15934))+((x15935*x15946))+(((-1.0)*x15943))+(((-1.0)*x15936*x15944))+x15933+((r10*x15939)));
evalcond[8]=(((x15934*x15944))+(((-1.0)*x15940))+((r11*x15936))+(((-1.0)*x15932*x15935*x15942))+(((-1.0)*sj2*x15937))+((r10*x15938)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15948=cj5*cj5;
IkReal x15949=(cj3*r20);
IkReal x15950=(r21*sj3);
IkReal x15951=((1.0)*cj3);
IkReal x15952=(r01*r21);
IkReal x15953=(r01*sj3);
IkReal x15954=(r00*sj5);
IkReal x15955=(cj5*r01*sj5);
IkReal x15956=((1.0)*x15948);
CheckValue<IkReal> x15957=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x15949*x15956))+((cj3*cj5*r21*x15954))+(((-1.0)*x15951*x15952))+((x15949*x15955))+((cj3*x15948*x15952))+(((-1.0)*r02*r22*x15951)))),-1);
if(!x15957.valid){
continue;
}
CheckValue<IkReal> x15958 = IKatan2WithCheck(IkReal((((r22*sj3*x15954))+((cj5*r22*x15953)))),IkReal((((r00*x15950))+((x15950*x15955))+(((-1.0)*cj5*r20*sj3*x15954))+(((-1.0)*r20*x15953*x15956))+(((-1.0)*r00*x15950*x15956)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15958.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15957.value)))+(x15958.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15959=IKsin(j4);
IkReal x15960=IKcos(j4);
IkReal x15961=(sj1*sj2);
IkReal x15962=(r11*sj5);
IkReal x15963=(cj5*r10);
IkReal x15964=(cj5*r01);
IkReal x15965=(cj5*r00);
IkReal x15966=((1.0)*cj1);
IkReal x15967=(cj3*sj5);
IkReal x15968=(r21*sj5);
IkReal x15969=(cj5*sj3);
IkReal x15970=(sj3*sj5);
IkReal x15971=(cj2*sj1);
IkReal x15972=(r01*sj5);
IkReal x15973=(cj3*cj5);
IkReal x15974=(cj5*r20);
IkReal x15975=(cj2*x15966);
IkReal x15976=((1.0)*x15960);
IkReal x15977=((1.0)*x15959);
IkReal x15978=(cj3*x15960);
IkReal x15979=(sj3*x15960);
IkReal x15980=(cj3*x15959);
evalcond[0]=(((x15959*x15968))+(((-1.0)*x15974*x15977))+(((-1.0)*r22*x15976)));
evalcond[1]=(((x15959*x15962))+(((-1.0)*x15963*x15977))+(((-1.0)*r12*x15976)));
evalcond[2]=((-1.0)+(((-1.0)*x15965*x15977))+(((-1.0)*r02*x15976))+((x15959*x15972)));
evalcond[3]=(((r02*x15980))+((r00*x15970))+(((-1.0)*cj3*x15965*x15976))+((r01*x15960*x15967))+((sj3*x15964)));
evalcond[4]=(((r00*x15967))+((x15965*x15979))+(((-1.0)*r02*sj3*x15977))+((cj3*x15964))+(((-1.0)*r01*x15970*x15976)));
evalcond[5]=(((r21*x15960*x15967))+((cj1*sj2))+(((-1.0)*r20*x15973*x15976))+((r20*x15970))+((r22*x15980))+((r21*x15969))+x15971);
evalcond[6]=((((-1.0)*cj3*x15963*x15976))+(((-1.0)*x15975))+((r11*x15969))+((x15962*x15978))+((r10*x15970))+((r12*x15980))+x15961);
evalcond[7]=((((-1.0)*r22*sj3*x15977))+((r20*x15967))+(((-1.0)*x15975))+(((-1.0)*sj3*x15968*x15976))+((r20*x15960*x15969))+((r21*x15973))+x15961);
evalcond[8]=((((-1.0)*sj3*x15962*x15976))+(((-1.0)*x15971))+(((-1.0)*sj2*x15966))+(((-1.0)*r12*sj3*x15977))+((r11*x15973))+((r10*x15967))+((x15963*x15979)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15981=((1.0)*cj5);
CheckValue<IkReal> x15982=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x15981)))),-1);
if(!x15982.valid){
continue;
}
CheckValue<IkReal> x15983 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x15981)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15983.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15982.value)))+(x15983.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15984=IKsin(j4);
IkReal x15985=IKcos(j4);
IkReal x15986=(sj1*sj2);
IkReal x15987=(r11*sj5);
IkReal x15988=(cj5*r10);
IkReal x15989=(cj5*r01);
IkReal x15990=(cj5*r00);
IkReal x15991=((1.0)*cj1);
IkReal x15992=(cj3*sj5);
IkReal x15993=(r21*sj5);
IkReal x15994=(cj5*sj3);
IkReal x15995=(sj3*sj5);
IkReal x15996=(cj2*sj1);
IkReal x15997=(r01*sj5);
IkReal x15998=(cj3*cj5);
IkReal x15999=(cj5*r20);
IkReal x16000=(cj2*x15991);
IkReal x16001=((1.0)*x15985);
IkReal x16002=((1.0)*x15984);
IkReal x16003=(cj3*x15985);
IkReal x16004=(sj3*x15985);
IkReal x16005=(cj3*x15984);
evalcond[0]=(((x15984*x15993))+(((-1.0)*r22*x16001))+(((-1.0)*x15999*x16002)));
evalcond[1]=(((x15984*x15987))+(((-1.0)*x15988*x16002))+(((-1.0)*r12*x16001)));
evalcond[2]=((-1.0)+(((-1.0)*x15990*x16002))+((x15984*x15997))+(((-1.0)*r02*x16001)));
evalcond[3]=(((r02*x16005))+(((-1.0)*cj3*x15990*x16001))+((sj3*x15989))+((r00*x15995))+((r01*x15985*x15992)));
evalcond[4]=(((cj3*x15989))+(((-1.0)*r01*x15995*x16001))+(((-1.0)*r02*sj3*x16002))+((x15990*x16004))+((r00*x15992)));
evalcond[5]=(((r21*x15994))+((r21*x15985*x15992))+((r20*x15995))+((cj1*sj2))+(((-1.0)*r20*x15998*x16001))+((r22*x16005))+x15996);
evalcond[6]=((((-1.0)*x16000))+((r12*x16005))+(((-1.0)*cj3*x15988*x16001))+((r10*x15995))+((x15987*x16003))+((r11*x15994))+x15986);
evalcond[7]=(((r21*x15998))+(((-1.0)*x16000))+(((-1.0)*sj3*x15993*x16001))+((r20*x15992))+(((-1.0)*r22*sj3*x16002))+((r20*x15985*x15994))+x15986);
evalcond[8]=((((-1.0)*r12*sj3*x16002))+(((-1.0)*sj3*x15987*x16001))+((r10*x15992))+((x15988*x16004))+((r11*x15998))+(((-1.0)*sj2*x15991))+(((-1.0)*x15996)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16006=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x16006.valid){
continue;
}
CheckValue<IkReal> x16007 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16007.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16006.value)))+(x16007.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16008=IKsin(j4);
IkReal x16009=IKcos(j4);
IkReal x16010=(sj1*sj2);
IkReal x16011=(r11*sj5);
IkReal x16012=(cj5*r10);
IkReal x16013=(cj5*r01);
IkReal x16014=(cj5*r00);
IkReal x16015=((1.0)*cj1);
IkReal x16016=(cj3*sj5);
IkReal x16017=(r21*sj5);
IkReal x16018=(cj5*sj3);
IkReal x16019=(sj3*sj5);
IkReal x16020=(cj2*sj1);
IkReal x16021=(r01*sj5);
IkReal x16022=(cj3*cj5);
IkReal x16023=(cj5*r20);
IkReal x16024=(cj2*x16015);
IkReal x16025=((1.0)*x16009);
IkReal x16026=((1.0)*x16008);
IkReal x16027=(cj3*x16009);
IkReal x16028=(sj3*x16009);
IkReal x16029=(cj3*x16008);
evalcond[0]=(((x16008*x16017))+(((-1.0)*r22*x16025))+(((-1.0)*x16023*x16026)));
evalcond[1]=(((x16008*x16011))+(((-1.0)*r12*x16025))+(((-1.0)*x16012*x16026)));
evalcond[2]=((-1.0)+(((-1.0)*x16014*x16026))+((x16008*x16021))+(((-1.0)*r02*x16025)));
evalcond[3]=(((r02*x16029))+((sj3*x16013))+((r00*x16019))+(((-1.0)*cj3*x16014*x16025))+((r01*x16009*x16016)));
evalcond[4]=(((x16014*x16028))+(((-1.0)*r01*x16019*x16025))+((cj3*x16013))+((r00*x16016))+(((-1.0)*r02*sj3*x16026)));
evalcond[5]=(((cj1*sj2))+((r20*x16019))+((r21*x16018))+((r21*x16009*x16016))+x16020+(((-1.0)*r20*x16022*x16025))+((r22*x16029)));
evalcond[6]=((((-1.0)*cj3*x16012*x16025))+(((-1.0)*x16024))+((r11*x16018))+((r12*x16029))+x16010+((x16011*x16027))+((r10*x16019)));
evalcond[7]=((((-1.0)*x16024))+((r20*x16016))+x16010+(((-1.0)*sj3*x16017*x16025))+(((-1.0)*r22*sj3*x16026))+((r20*x16009*x16018))+((r21*x16022)));
evalcond[8]=((((-1.0)*sj2*x16015))+((r11*x16022))+(((-1.0)*r12*sj3*x16026))+(((-1.0)*x16020))+((x16012*x16028))+(((-1.0)*sj3*x16011*x16025))+((r10*x16016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x16030=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x16030;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x16030);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x16031=((1.0)*cj5);
IkReal x16032=((((-1.0)*r21*x16031))+(((-1.0)*r20*sj5)));
j4eval[0]=x16032;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x16031))))));
j4eval[2]=IKsign(x16032);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x16033=cj5*cj5;
IkReal x16034=(cj3*r01);
IkReal x16035=(cj5*sj5);
IkReal x16036=((1.0)*cj3);
IkReal x16037=(((r20*x16034*x16035))+(((-1.0)*r21*x16034))+((r21*x16033*x16034))+((cj3*r00*r21*x16035))+(((-1.0)*r02*r22*x16036))+(((-1.0)*r00*r20*x16033*x16036)));
j4eval[0]=x16037;
j4eval[1]=IKsign(x16037);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x16038=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x16038;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x16038);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x16039=((1.0)*cj5);
IkReal x16040=((((-1.0)*r21*x16039))+(((-1.0)*r20*sj5)));
j4eval[0]=x16040;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x16039))))));
j4eval[2]=IKsign(x16040);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x16041=cj5*cj5;
IkReal x16042=r01*r01;
IkReal x16043=(cj5*r00);
IkReal x16044=(r01*sj5);
IkReal x16045=((((-2.0)*x16043*x16044))+x16042+((x16041*(r00*r00)))+(r02*r02)+(((-1.0)*x16041*x16042)));
j4eval[0]=x16045;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x16044))+x16043))));
j4eval[2]=IKsign(x16045);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16046=cj5*cj5;
IkReal x16047=r01*r01;
IkReal x16048=(r01*sj5);
IkReal x16049=(cj5*r00);
CheckValue<IkReal> x16050=IKPowWithIntegerCheck(IKsign(((((-1.0)*x16046*x16047))+(((-2.0)*x16048*x16049))+x16047+(r02*r02)+((x16046*(r00*r00))))),-1);
if(!x16050.valid){
continue;
}
CheckValue<IkReal> x16051 = IKatan2WithCheck(IkReal(((((-1.0)*x16048))+x16049)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x16051.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16050.value)))+(x16051.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x16052=IKsin(j4);
IkReal x16053=IKcos(j4);
IkReal x16054=(cj5*r10);
IkReal x16055=(r01*sj5);
IkReal x16056=(cj5*r00);
IkReal x16057=(cj5*r20);
IkReal x16058=((1.0)*x16053);
IkReal x16059=((1.0)*x16052);
IkReal x16060=(sj5*x16052);
evalcond[0]=((((-1.0)*r22*x16058))+(((-1.0)*x16057*x16059))+((r21*x16060)));
evalcond[1]=(((r11*x16060))+(((-1.0)*x16054*x16059))+(((-1.0)*r12*x16058)));
evalcond[2]=(((x16053*x16056))+(((-1.0)*r02*x16059))+(((-1.0)*x16055*x16058)));
evalcond[3]=((1.0)+((x16052*x16055))+(((-1.0)*x16056*x16059))+(((-1.0)*r02*x16058)));
evalcond[4]=(((x16053*x16054))+((cj2*sj1))+(((-1.0)*r11*sj5*x16058))+((cj1*sj2))+(((-1.0)*r12*x16059)));
evalcond[5]=(((x16053*x16057))+(((-1.0)*r21*sj5*x16058))+(((-1.0)*r22*x16059))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16061=((1.0)*cj5);
CheckValue<IkReal> x16062 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x16061))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16062.valid){
continue;
}
CheckValue<IkReal> x16063=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x16061))+(((-1.0)*r20*sj5)))),-1);
if(!x16063.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x16062.value)+(((1.5707963267949)*(x16063.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x16064=IKsin(j4);
IkReal x16065=IKcos(j4);
IkReal x16066=(cj5*r10);
IkReal x16067=(r01*sj5);
IkReal x16068=(cj5*r00);
IkReal x16069=(cj5*r20);
IkReal x16070=((1.0)*x16065);
IkReal x16071=((1.0)*x16064);
IkReal x16072=(sj5*x16064);
evalcond[0]=((((-1.0)*x16069*x16071))+(((-1.0)*r22*x16070))+((r21*x16072)));
evalcond[1]=((((-1.0)*x16066*x16071))+((r11*x16072))+(((-1.0)*r12*x16070)));
evalcond[2]=((((-1.0)*x16067*x16070))+((x16065*x16068))+(((-1.0)*r02*x16071)));
evalcond[3]=((1.0)+((x16064*x16067))+(((-1.0)*x16068*x16071))+(((-1.0)*r02*x16070)));
evalcond[4]=((((-1.0)*r11*sj5*x16070))+((cj2*sj1))+((cj1*sj2))+((x16065*x16066))+(((-1.0)*r12*x16071)));
evalcond[5]=((((-1.0)*r22*x16071))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x16065*x16069))+(((-1.0)*r21*sj5*x16070)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16073 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16073.valid){
continue;
}
CheckValue<IkReal> x16074=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x16074.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x16073.value)+(((1.5707963267949)*(x16074.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x16075=IKsin(j4);
IkReal x16076=IKcos(j4);
IkReal x16077=(cj5*r10);
IkReal x16078=(r01*sj5);
IkReal x16079=(cj5*r00);
IkReal x16080=(cj5*r20);
IkReal x16081=((1.0)*x16076);
IkReal x16082=((1.0)*x16075);
IkReal x16083=(sj5*x16075);
evalcond[0]=((((-1.0)*x16080*x16082))+((r21*x16083))+(((-1.0)*r22*x16081)));
evalcond[1]=((((-1.0)*r12*x16081))+((r11*x16083))+(((-1.0)*x16077*x16082)));
evalcond[2]=((((-1.0)*x16078*x16081))+(((-1.0)*r02*x16082))+((x16076*x16079)));
evalcond[3]=((1.0)+(((-1.0)*r02*x16081))+(((-1.0)*x16079*x16082))+((x16075*x16078)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x16082))+((cj1*sj2))+((x16076*x16077))+(((-1.0)*r11*sj5*x16081)));
evalcond[5]=(((x16076*x16080))+(((-1.0)*r22*x16082))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x16081)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x16084=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x16084;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x16084);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x16085=((1.0)*cj5);
IkReal x16086=((((-1.0)*r21*x16085))+(((-1.0)*r20*sj5)));
j4eval[0]=x16086;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x16085))))));
j4eval[2]=IKsign(x16086);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x16087=cj5*cj5;
IkReal x16088=r01*r01;
IkReal x16089=(r01*sj5);
IkReal x16090=(cj5*r00);
IkReal x16091=((((-1.0)*x16087*(r00*r00)))+(((-1.0)*(r02*r02)))+(((-1.0)*x16088))+((x16087*x16088))+(((2.0)*x16089*x16090)));
j4eval[0]=x16091;
j4eval[1]=IKsign(x16091);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x16090))+x16089))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16092=cj5*cj5;
IkReal x16093=r01*r01;
IkReal x16094=(r01*sj5);
IkReal x16095=(cj5*r00);
CheckValue<IkReal> x16096=IKPowWithIntegerCheck(IKsign(((((-1.0)*x16093))+(((-1.0)*(r02*r02)))+(((2.0)*x16094*x16095))+((x16092*x16093))+(((-1.0)*x16092*(r00*r00))))),-1);
if(!x16096.valid){
continue;
}
CheckValue<IkReal> x16097 = IKatan2WithCheck(IkReal(((((-1.0)*x16095))+x16094)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x16097.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16096.value)))+(x16097.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x16098=IKcos(j4);
IkReal x16099=IKsin(j4);
IkReal x16100=(cj5*r00);
IkReal x16101=(cj5*r10);
IkReal x16102=(r21*sj5);
IkReal x16103=(cj5*r20);
IkReal x16104=((1.0)*x16098);
IkReal x16105=((1.0)*x16099);
IkReal x16106=(sj5*x16099);
IkReal x16107=(sj5*x16098);
evalcond[0]=(((r02*x16099))+((r01*x16107))+(((-1.0)*x16100*x16104)));
evalcond[1]=((((-1.0)*r22*x16104))+((x16099*x16102))+(((-1.0)*x16103*x16105)));
evalcond[2]=((((-1.0)*x16101*x16105))+(((-1.0)*r12*x16104))+((r11*x16106)));
evalcond[3]=((1.0)+((r01*x16106))+(((-1.0)*r02*x16104))+(((-1.0)*x16100*x16105)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x16101*x16104))+((r12*x16099))+((r11*x16107)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x16099))+((x16098*x16102))+(((-1.0)*x16103*x16104)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16108=((1.0)*cj5);
CheckValue<IkReal> x16109=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x16108))+(((-1.0)*r20*sj5)))),-1);
if(!x16109.valid){
continue;
}
CheckValue<IkReal> x16110 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x16108)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16110.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16109.value)))+(x16110.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x16111=IKcos(j4);
IkReal x16112=IKsin(j4);
IkReal x16113=(cj5*r00);
IkReal x16114=(cj5*r10);
IkReal x16115=(r21*sj5);
IkReal x16116=(cj5*r20);
IkReal x16117=((1.0)*x16111);
IkReal x16118=((1.0)*x16112);
IkReal x16119=(sj5*x16112);
IkReal x16120=(sj5*x16111);
evalcond[0]=(((r02*x16112))+((r01*x16120))+(((-1.0)*x16113*x16117)));
evalcond[1]=(((x16112*x16115))+(((-1.0)*x16116*x16118))+(((-1.0)*r22*x16117)));
evalcond[2]=((((-1.0)*x16114*x16118))+(((-1.0)*r12*x16117))+((r11*x16119)));
evalcond[3]=((1.0)+(((-1.0)*r02*x16117))+(((-1.0)*x16113*x16118))+((r01*x16119)));
evalcond[4]=(((r11*x16120))+((cj2*sj1))+(((-1.0)*x16114*x16117))+((cj1*sj2))+((r12*x16112)));
evalcond[5]=(((r22*x16112))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x16116*x16117))+((x16111*x16115)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16121 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16121.valid){
continue;
}
CheckValue<IkReal> x16122=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x16122.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x16121.value)+(((1.5707963267949)*(x16122.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x16123=IKcos(j4);
IkReal x16124=IKsin(j4);
IkReal x16125=(cj5*r00);
IkReal x16126=(cj5*r10);
IkReal x16127=(r21*sj5);
IkReal x16128=(cj5*r20);
IkReal x16129=((1.0)*x16123);
IkReal x16130=((1.0)*x16124);
IkReal x16131=(sj5*x16124);
IkReal x16132=(sj5*x16123);
evalcond[0]=(((r02*x16124))+(((-1.0)*x16125*x16129))+((r01*x16132)));
evalcond[1]=((((-1.0)*r22*x16129))+((x16124*x16127))+(((-1.0)*x16128*x16130)));
evalcond[2]=((((-1.0)*r12*x16129))+(((-1.0)*x16126*x16130))+((r11*x16131)));
evalcond[3]=((1.0)+(((-1.0)*x16125*x16130))+((r01*x16131))+(((-1.0)*r02*x16129)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x16126*x16129))+((r12*x16124))+((r11*x16132)));
evalcond[5]=(((r22*x16124))+(((-1.0)*x16128*x16129))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x16123*x16127)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x16134 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x16134)==0){
continue;
}
IkReal x16133=pow(x16134,-0.5);
CheckValue<IkReal> x16135 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x16135.valid){
continue;
}
IkReal gconst60=((-1.0)*(x16135.value));
IkReal gconst61=((-1.0)*r11*x16133);
IkReal gconst62=(r10*x16133);
CheckValue<IkReal> x16136 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x16136.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x16136.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x16139 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x16139.valid){
continue;
}
IkReal x16137=((-1.0)*(x16139.value));
IkReal x16138=x16133;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst61;
cj5=gconst62;
j5=x16137;
IkReal gconst60=x16137;
IkReal gconst61=((-1.0)*r11*x16138);
IkReal gconst62=(r10*x16138);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x16142 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x16142.valid){
continue;
}
IkReal x16140=((-1.0)*(x16142.value));
IkReal x16141=x16133;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst61;
cj5=gconst62;
j5=x16140;
IkReal gconst60=x16140;
IkReal gconst61=((-1.0)*r11*x16141);
IkReal gconst62=(r10*x16141);
CheckValue<IkReal> x16150=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x16150.valid){
continue;
}
IkReal x16143=x16150.value;
IkReal x16144=(sj3*x16143);
IkReal x16145=(r20*x16144);
IkReal x16146=(r00*x16144);
IkReal x16147=(r01*x16144);
IkReal x16148=(r21*x16144);
IkReal x16149=(r10*r11*x16144);
j4eval[0]=IKsign((((r00*x16145*(r10*r10)))+((r10*r11*r21*x16146))+((r01*r10*r11*x16145))+((r21*x16147*(r11*r11)))+((r02*r22*sj3))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16151=gconst61*gconst61;
IkReal x16152=gconst62*gconst62;
IkReal x16153=(cj3*r01);
IkReal x16154=(r22*sj3);
IkReal x16155=(gconst61*r00);
IkReal x16156=((1.0)*cj3);
IkReal x16157=(gconst62*r01);
IkReal x16158=((1.0)*sj3);
IkReal x16159=(gconst61*gconst62*r20);
IkReal x16160=(r21*x16151);
IkReal x16161=(r20*x16152);
CheckValue<IkReal> x16162=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x16156*x16161))+(((-1.0)*x16153*x16160))+(((-1.0)*r02*r22*x16156))+((cj3*gconst62*r21*x16155))+((x16153*x16159)))),-1);
if(!x16162.valid){
continue;
}
CheckValue<IkReal> x16163 = IKatan2WithCheck(IkReal((((x16154*x16155))+((x16154*x16157)))),IkReal(((((-1.0)*gconst62*r20*x16155*x16158))+((gconst61*r21*sj3*x16157))+(((-1.0)*r01*x16158*x16161))+((r00*sj3*x16160)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16163.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16162.value)))+(x16163.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16164=IKsin(j4);
IkReal x16165=IKcos(j4);
IkReal x16166=(cj2*sj1);
IkReal x16167=(cj1*sj2);
IkReal x16168=(gconst61*sj3);
IkReal x16169=(cj3*gconst61);
IkReal x16170=(cj3*gconst62);
IkReal x16171=(sj1*sj2);
IkReal x16172=(gconst62*sj3);
IkReal x16173=(cj1*cj2);
IkReal x16174=((1.0)*x16165);
IkReal x16175=((1.0)*x16164);
IkReal x16176=(gconst61*x16164);
IkReal x16177=(cj3*x16164);
IkReal x16178=(x16167+x16166);
evalcond[0]=((((-1.0)*r22*x16174))+(((-1.0)*gconst62*r20*x16175))+((r21*x16176)));
evalcond[1]=(((r11*x16176))+(((-1.0)*gconst62*r10*x16175))+(((-1.0)*r12*x16174)));
evalcond[2]=((1.0)+(((-1.0)*gconst62*r00*x16175))+((r01*x16176))+(((-1.0)*r02*x16174)));
evalcond[3]=(((r02*x16177))+((r01*x16172))+((r00*x16168))+(((-1.0)*r00*x16170*x16174))+((r01*x16165*x16169)));
evalcond[4]=((((-1.0)*r01*x16168*x16174))+((r01*x16170))+((r00*x16165*x16172))+((r00*x16169))+(((-1.0)*r02*sj3*x16175)));
evalcond[5]=(((r20*x16168))+x16178+(((-1.0)*r20*x16170*x16174))+((r22*x16177))+((r21*x16165*x16169))+((r21*x16172)));
evalcond[6]=(((r12*x16177))+((r10*x16168))+((r11*x16172))+x16173+(((-1.0)*r10*x16170*x16174))+((r11*x16165*x16169))+(((-1.0)*x16171)));
evalcond[7]=((((-1.0)*r11*x16168*x16174))+((r10*x16169))+((r11*x16170))+x16178+((r10*x16165*x16172))+(((-1.0)*r12*sj3*x16175)));
evalcond[8]=(((r20*x16169))+x16171+(((-1.0)*r21*x16168*x16174))+((r20*x16165*x16172))+(((-1.0)*r22*sj3*x16175))+(((-1.0)*x16173))+((r21*x16170)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16179=gconst61*gconst61;
IkReal x16180=gconst62*gconst62;
IkReal x16181=(cj3*r22);
IkReal x16182=(gconst62*r01);
IkReal x16183=(gconst61*r00);
IkReal x16184=((1.0)*r20);
IkReal x16185=(cj3*r21);
IkReal x16186=(r21*sj3);
CheckValue<IkReal> x16187 = IKatan2WithCheck(IkReal((((x16181*x16183))+((x16181*x16182)))),IkReal(((((-1.0)*cj3*r01*x16180*x16184))+((gconst61*x16182*x16185))+((r00*x16179*x16185))+(((-1.0)*cj3*gconst62*x16183*x16184)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16187.valid){
continue;
}
CheckValue<IkReal> x16188=IKPowWithIntegerCheck(IKsign((((r00*r20*sj3*x16180))+((r01*x16179*x16186))+(((-1.0)*gconst62*x16183*x16186))+(((-1.0)*gconst61*sj3*x16182*x16184))+((r02*r22*sj3)))),-1);
if(!x16188.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x16187.value)+(((1.5707963267949)*(x16188.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16189=IKsin(j4);
IkReal x16190=IKcos(j4);
IkReal x16191=(cj2*sj1);
IkReal x16192=(cj1*sj2);
IkReal x16193=(gconst61*sj3);
IkReal x16194=(cj3*gconst61);
IkReal x16195=(cj3*gconst62);
IkReal x16196=(sj1*sj2);
IkReal x16197=(gconst62*sj3);
IkReal x16198=(cj1*cj2);
IkReal x16199=((1.0)*x16190);
IkReal x16200=((1.0)*x16189);
IkReal x16201=(gconst61*x16189);
IkReal x16202=(cj3*x16189);
IkReal x16203=(x16192+x16191);
evalcond[0]=((((-1.0)*gconst62*r20*x16200))+((r21*x16201))+(((-1.0)*r22*x16199)));
evalcond[1]=((((-1.0)*r12*x16199))+((r11*x16201))+(((-1.0)*gconst62*r10*x16200)));
evalcond[2]=((1.0)+(((-1.0)*gconst62*r00*x16200))+(((-1.0)*r02*x16199))+((r01*x16201)));
evalcond[3]=(((r02*x16202))+((r00*x16193))+((r01*x16197))+(((-1.0)*r00*x16195*x16199))+((r01*x16190*x16194)));
evalcond[4]=((((-1.0)*r02*sj3*x16200))+((r00*x16194))+((r01*x16195))+((r00*x16190*x16197))+(((-1.0)*r01*x16193*x16199)));
evalcond[5]=(x16203+((r21*x16197))+((r22*x16202))+(((-1.0)*r20*x16195*x16199))+((r21*x16190*x16194))+((r20*x16193)));
evalcond[6]=(((r10*x16193))+((r11*x16197))+x16198+((r12*x16202))+(((-1.0)*x16196))+((r11*x16190*x16194))+(((-1.0)*r10*x16195*x16199)));
evalcond[7]=(((r10*x16194))+(((-1.0)*r11*x16193*x16199))+((r11*x16195))+x16203+(((-1.0)*r12*sj3*x16200))+((r10*x16190*x16197)));
evalcond[8]=((((-1.0)*r22*sj3*x16200))+((r21*x16195))+x16196+(((-1.0)*r21*x16193*x16199))+(((-1.0)*x16198))+((r20*x16194))+((r20*x16190*x16197)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16204=((1.0)*gconst62);
CheckValue<IkReal> x16205 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst61*r11))+(((-1.0)*r10*x16204)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16205.valid){
continue;
}
CheckValue<IkReal> x16206=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst61*r20))+(((-1.0)*r21*x16204)))),-1);
if(!x16206.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x16205.value)+(((1.5707963267949)*(x16206.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16207=IKsin(j4);
IkReal x16208=IKcos(j4);
IkReal x16209=(cj2*sj1);
IkReal x16210=(cj1*sj2);
IkReal x16211=(gconst61*sj3);
IkReal x16212=(cj3*gconst61);
IkReal x16213=(cj3*gconst62);
IkReal x16214=(sj1*sj2);
IkReal x16215=(gconst62*sj3);
IkReal x16216=(cj1*cj2);
IkReal x16217=((1.0)*x16208);
IkReal x16218=((1.0)*x16207);
IkReal x16219=(gconst61*x16207);
IkReal x16220=(cj3*x16207);
IkReal x16221=(x16209+x16210);
evalcond[0]=((((-1.0)*r22*x16217))+((r21*x16219))+(((-1.0)*gconst62*r20*x16218)));
evalcond[1]=((((-1.0)*gconst62*r10*x16218))+(((-1.0)*r12*x16217))+((r11*x16219)));
evalcond[2]=((1.0)+((r01*x16219))+(((-1.0)*r02*x16217))+(((-1.0)*gconst62*r00*x16218)));
evalcond[3]=(((r01*x16215))+((r01*x16208*x16212))+((r00*x16211))+(((-1.0)*r00*x16213*x16217))+((r02*x16220)));
evalcond[4]=((((-1.0)*r01*x16211*x16217))+((r01*x16213))+((r00*x16212))+(((-1.0)*r02*sj3*x16218))+((r00*x16208*x16215)));
evalcond[5]=(((r22*x16220))+x16221+((r20*x16211))+((r21*x16215))+((r21*x16208*x16212))+(((-1.0)*r20*x16213*x16217)));
evalcond[6]=(((r12*x16220))+(((-1.0)*x16214))+x16216+((r11*x16215))+((r10*x16211))+((r11*x16208*x16212))+(((-1.0)*r10*x16213*x16217)));
evalcond[7]=((((-1.0)*r11*x16211*x16217))+x16221+((r10*x16208*x16215))+(((-1.0)*r12*sj3*x16218))+((r11*x16213))+((r10*x16212)));
evalcond[8]=((((-1.0)*r22*sj3*x16218))+(((-1.0)*x16216))+(((-1.0)*r21*x16211*x16217))+x16214+((r20*x16212))+((r20*x16208*x16215))+((r21*x16213)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x16223 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x16223)==0){
continue;
}
IkReal x16222=pow(x16223,-0.5);
CheckValue<IkReal> x16224 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x16224.valid){
continue;
}
IkReal gconst63=((3.14159265358979)+(((-1.0)*(x16224.value))));
IkReal gconst64=((1.0)*r11*x16222);
IkReal gconst65=((-1.0)*r10*x16222);
CheckValue<IkReal> x16225 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x16225.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x16225.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x16228 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x16228.valid){
continue;
}
IkReal x16226=((1.0)*(x16228.value));
IkReal x16227=x16222;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x16226)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x16226)));
IkReal gconst64=((1.0)*r11*x16227);
IkReal gconst65=((-1.0)*r10*x16227);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x16231 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x16231.valid){
continue;
}
IkReal x16229=((1.0)*(x16231.value));
IkReal x16230=x16222;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x16229)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x16229)));
IkReal gconst64=((1.0)*r11*x16230);
IkReal gconst65=((-1.0)*r10*x16230);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16232=gconst65*gconst65;
IkReal x16233=gconst64*gconst64;
IkReal x16234=(r21*sj3);
IkReal x16235=(cj3*r20);
IkReal x16236=((1.0)*r20);
IkReal x16237=((1.0)*cj3);
IkReal x16238=(r01*sj3);
IkReal x16239=(gconst64*gconst65*r01);
IkReal x16240=(gconst64*r00*sj3);
CheckValue<IkReal> x16241 = IKatan2WithCheck(IkReal((((gconst65*r22*x16238))+((r22*x16240)))),IkReal((((r00*x16233*x16234))+(((-1.0)*x16232*x16236*x16238))+(((-1.0)*gconst65*x16236*x16240))+((x16234*x16239)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16241.valid){
continue;
}
CheckValue<IkReal> x16242=IKPowWithIntegerCheck(IKsign((((cj3*gconst64*gconst65*r00*r21))+(((-1.0)*r00*x16232*x16235))+(((-1.0)*r02*r22*x16237))+((x16235*x16239))+(((-1.0)*r01*r21*x16233*x16237)))),-1);
if(!x16242.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x16241.value)+(((1.5707963267949)*(x16242.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16243=IKsin(j4);
IkReal x16244=IKcos(j4);
IkReal x16245=(cj2*sj1);
IkReal x16246=(cj1*sj2);
IkReal x16247=(cj3*gconst64);
IkReal x16248=(gconst65*r21);
IkReal x16249=(sj1*sj2);
IkReal x16250=(gconst65*sj3);
IkReal x16251=(gconst64*sj3);
IkReal x16252=(cj3*gconst65);
IkReal x16253=(cj1*cj2);
IkReal x16254=((1.0)*x16244);
IkReal x16255=((1.0)*x16243);
IkReal x16256=(cj3*x16243);
IkReal x16257=(gconst64*x16243);
IkReal x16258=(x16246+x16245);
evalcond[0]=((((-1.0)*r22*x16254))+((r21*x16257))+(((-1.0)*gconst65*r20*x16255)));
evalcond[1]=(((r11*x16257))+(((-1.0)*gconst65*r10*x16255))+(((-1.0)*r12*x16254)));
evalcond[2]=((1.0)+((r01*x16257))+(((-1.0)*gconst65*r00*x16255))+(((-1.0)*r02*x16254)));
evalcond[3]=(((r01*x16244*x16247))+((r01*x16250))+((r00*x16251))+(((-1.0)*r00*x16252*x16254))+((r02*x16256)));
evalcond[4]=(((r00*x16247))+((r00*x16244*x16250))+(((-1.0)*r02*sj3*x16255))+((r01*x16252))+(((-1.0)*r01*x16251*x16254)));
evalcond[5]=(((sj3*x16248))+x16258+((r22*x16256))+((r21*x16244*x16247))+((r20*x16251))+(((-1.0)*r20*x16252*x16254)));
evalcond[6]=(((r10*x16251))+((r11*x16244*x16247))+(((-1.0)*r10*x16252*x16254))+x16253+((r11*x16250))+((r12*x16256))+(((-1.0)*x16249)));
evalcond[7]=((((-1.0)*r12*sj3*x16255))+((r10*x16244*x16250))+x16258+((r11*x16252))+(((-1.0)*r11*x16251*x16254))+((r10*x16247)));
evalcond[8]=(((r20*x16244*x16250))+(((-1.0)*r21*x16251*x16254))+((r20*x16247))+(((-1.0)*r22*sj3*x16255))+x16249+(((-1.0)*x16253))+((cj3*x16248)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16259=((1.0)*gconst65);
CheckValue<IkReal> x16260 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x16259))+((gconst64*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16260.valid){
continue;
}
CheckValue<IkReal> x16261=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst64*r20))+(((-1.0)*r21*x16259)))),-1);
if(!x16261.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x16260.value)+(((1.5707963267949)*(x16261.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16262=IKsin(j4);
IkReal x16263=IKcos(j4);
IkReal x16264=(cj2*sj1);
IkReal x16265=(cj1*sj2);
IkReal x16266=(cj3*gconst64);
IkReal x16267=(gconst65*r21);
IkReal x16268=(sj1*sj2);
IkReal x16269=(gconst65*sj3);
IkReal x16270=(gconst64*sj3);
IkReal x16271=(cj3*gconst65);
IkReal x16272=(cj1*cj2);
IkReal x16273=((1.0)*x16263);
IkReal x16274=((1.0)*x16262);
IkReal x16275=(cj3*x16262);
IkReal x16276=(gconst64*x16262);
IkReal x16277=(x16264+x16265);
evalcond[0]=(((r21*x16276))+(((-1.0)*r22*x16273))+(((-1.0)*gconst65*r20*x16274)));
evalcond[1]=((((-1.0)*r12*x16273))+((r11*x16276))+(((-1.0)*gconst65*r10*x16274)));
evalcond[2]=((1.0)+((r01*x16276))+(((-1.0)*gconst65*r00*x16274))+(((-1.0)*r02*x16273)));
evalcond[3]=(((r02*x16275))+((r01*x16263*x16266))+((r00*x16270))+(((-1.0)*r00*x16271*x16273))+((r01*x16269)));
evalcond[4]=((((-1.0)*r02*sj3*x16274))+((r01*x16271))+((r00*x16266))+(((-1.0)*r01*x16270*x16273))+((r00*x16263*x16269)));
evalcond[5]=(x16277+(((-1.0)*r20*x16271*x16273))+((r22*x16275))+((sj3*x16267))+((r21*x16263*x16266))+((r20*x16270)));
evalcond[6]=(((r10*x16270))+(((-1.0)*r10*x16271*x16273))+x16272+(((-1.0)*x16268))+((r12*x16275))+((r11*x16263*x16266))+((r11*x16269)));
evalcond[7]=(((r10*x16266))+x16277+(((-1.0)*r11*x16270*x16273))+((r11*x16271))+((r10*x16263*x16269))+(((-1.0)*r12*sj3*x16274)));
evalcond[8]=(((r20*x16263*x16269))+(((-1.0)*r22*sj3*x16274))+(((-1.0)*r21*x16270*x16273))+((cj3*x16267))+x16268+(((-1.0)*x16272))+((r20*x16266)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16278=IKPowWithIntegerCheck(IKsign((((gconst64*r10))+((gconst65*r11)))),-1);
if(!x16278.valid){
continue;
}
CheckValue<IkReal> x16279 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst65*r20))+((gconst64*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16279.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16278.value)))+(x16279.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16280=IKsin(j4);
IkReal x16281=IKcos(j4);
IkReal x16282=(cj2*sj1);
IkReal x16283=(cj1*sj2);
IkReal x16284=(cj3*gconst64);
IkReal x16285=(gconst65*r21);
IkReal x16286=(sj1*sj2);
IkReal x16287=(gconst65*sj3);
IkReal x16288=(gconst64*sj3);
IkReal x16289=(cj3*gconst65);
IkReal x16290=(cj1*cj2);
IkReal x16291=((1.0)*x16281);
IkReal x16292=((1.0)*x16280);
IkReal x16293=(cj3*x16280);
IkReal x16294=(gconst64*x16280);
IkReal x16295=(x16282+x16283);
evalcond[0]=((((-1.0)*gconst65*r20*x16292))+(((-1.0)*r22*x16291))+((r21*x16294)));
evalcond[1]=((((-1.0)*gconst65*r10*x16292))+(((-1.0)*r12*x16291))+((r11*x16294)));
evalcond[2]=((1.0)+((r01*x16294))+(((-1.0)*gconst65*r00*x16292))+(((-1.0)*r02*x16291)));
evalcond[3]=(((r01*x16287))+((r00*x16288))+(((-1.0)*r00*x16289*x16291))+((r01*x16281*x16284))+((r02*x16293)));
evalcond[4]=(((r01*x16289))+((r00*x16284))+(((-1.0)*r02*sj3*x16292))+(((-1.0)*r01*x16288*x16291))+((r00*x16281*x16287)));
evalcond[5]=(((r21*x16281*x16284))+((r22*x16293))+(((-1.0)*r20*x16289*x16291))+x16295+((r20*x16288))+((sj3*x16285)));
evalcond[6]=((((-1.0)*x16286))+((r11*x16281*x16284))+x16290+(((-1.0)*r10*x16289*x16291))+((r11*x16287))+((r12*x16293))+((r10*x16288)));
evalcond[7]=((((-1.0)*r11*x16288*x16291))+x16295+((r10*x16281*x16287))+((r11*x16289))+(((-1.0)*r12*sj3*x16292))+((r10*x16284)));
evalcond[8]=((((-1.0)*r22*sj3*x16292))+(((-1.0)*x16290))+((r20*x16281*x16287))+x16286+(((-1.0)*r21*x16288*x16291))+((cj3*x16285))+((r20*x16284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x16296=((-1.0)*py);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x16296);
rxp0_2=(py*r00);
rxp1_0=(r21*x16296);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x16297=(cj5*r00);
IkReal x16298=(r01*sj5);
j4eval[0]=((((-1.0)*x16297))+x16298);
j4eval[1]=(((sj3*x16297))+(((-1.0)*sj3*x16298)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x16299=((-1.0)*py);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x16299);
rxp0_2=(py*r00);
rxp1_0=(r21*x16299);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x16300=(r01*sj5);
IkReal x16301=((1.0)*cj5*r00);
j4eval[0]=(x16300+(((-1.0)*x16301)));
j4eval[1]=(((cj3*x16300))+(((-1.0)*cj3*x16301)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x16302=((-1.0)*py);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x16302);
rxp0_2=(py*r00);
rxp1_0=(r21*x16302);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=(((cj5*r00*sj3))+(((-1.0)*r01*sj3*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16303=((1.0)*cj3);
CheckValue<IkReal> x16304=IKPowWithIntegerCheck(cj3,-1);
if(!x16304.valid){
continue;
}
CheckValue<IkReal> x16305=IKPowWithIntegerCheck(r12,-1);
if(!x16305.valid){
continue;
}
CheckValue<IkReal> x16306=IKPowWithIntegerCheck((((cj5*r00*sj3))+(((-1.0)*r01*sj3*sj5))),-1);
if(!x16306.valid){
continue;
}
if( IKabs(((x16304.value)*(x16305.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x16306.value)*(((((-1.0)*cj5*r01*x16303))+(((-1.0)*r00*sj5*x16303)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x16304.value)*(x16305.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x16306.value)*(((((-1.0)*cj5*r01*x16303))+(((-1.0)*r00*sj5*x16303))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x16304.value)*(x16305.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x16306.value)*(((((-1.0)*cj5*r01*x16303))+(((-1.0)*r00*sj5*x16303))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16307=IKsin(j4);
IkReal x16308=IKcos(j4);
IkReal x16309=(cj2*sj1);
IkReal x16310=(cj1*sj2);
IkReal x16311=(sj1*sj2);
IkReal x16312=(cj5*sj3);
IkReal x16313=(cj3*cj5);
IkReal x16314=(r21*sj5);
IkReal x16315=(cj1*cj2);
IkReal x16316=(r00*sj5);
IkReal x16317=(r01*sj5);
IkReal x16318=(r20*sj5);
IkReal x16319=((1.0)*x16307);
IkReal x16320=(r20*x16308);
IkReal x16321=(r00*x16308);
IkReal x16322=(cj3*x16308);
IkReal x16323=(x16309+x16310);
IkReal x16324=((1.0)*sj3*x16308);
evalcond[0]=((-1.0)*r12*x16308);
evalcond[1]=((((-1.0)*cj5*r20*x16319))+((x16307*x16314)));
evalcond[2]=(x16315+(((-1.0)*x16311))+((cj3*r12*x16307)));
evalcond[3]=((((-1.0)*r12*sj3*x16319))+x16323);
evalcond[4]=((1.0)+(((-1.0)*cj5*r00*x16319))+((x16307*x16317)));
evalcond[5]=((((-1.0)*x16317*x16324))+((cj3*x16316))+((r01*x16313))+((x16312*x16321)));
evalcond[6]=(((x16317*x16322))+((r01*x16312))+(((-1.0)*x16313*x16321))+((sj3*x16316)));
evalcond[7]=(x16323+((x16314*x16322))+((r21*x16312))+(((-1.0)*x16313*x16320))+((sj3*x16318)));
evalcond[8]=((((-1.0)*x16314*x16324))+x16311+((cj3*x16318))+((x16312*x16320))+((r21*x16313))+(((-1.0)*x16315)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16325=((1.0)*r00);
IkReal x16326=(r01*sj5);
CheckValue<IkReal> x16327=IKPowWithIntegerCheck(((((-1.0)*cj5*x16325))+x16326),-1);
if(!x16327.valid){
continue;
}
CheckValue<IkReal> x16328=IKPowWithIntegerCheck((((cj3*x16326))+(((-1.0)*cj3*cj5*x16325))),-1);
if(!x16328.valid){
continue;
}
if( IKabs(((-1.0)*(x16327.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x16328.value)*(((((-1.0)*sj3*sj5*x16325))+(((-1.0)*cj5*r01*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x16327.value)))+IKsqr(((x16328.value)*(((((-1.0)*sj3*sj5*x16325))+(((-1.0)*cj5*r01*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x16327.value)), ((x16328.value)*(((((-1.0)*sj3*sj5*x16325))+(((-1.0)*cj5*r01*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16329=IKsin(j4);
IkReal x16330=IKcos(j4);
IkReal x16331=(cj2*sj1);
IkReal x16332=(cj1*sj2);
IkReal x16333=(sj1*sj2);
IkReal x16334=(cj5*sj3);
IkReal x16335=(cj3*cj5);
IkReal x16336=(r21*sj5);
IkReal x16337=(cj1*cj2);
IkReal x16338=(r00*sj5);
IkReal x16339=(r01*sj5);
IkReal x16340=(r20*sj5);
IkReal x16341=((1.0)*x16329);
IkReal x16342=(r20*x16330);
IkReal x16343=(r00*x16330);
IkReal x16344=(cj3*x16330);
IkReal x16345=(x16332+x16331);
IkReal x16346=((1.0)*sj3*x16330);
evalcond[0]=((-1.0)*r12*x16330);
evalcond[1]=(((x16329*x16336))+(((-1.0)*cj5*r20*x16341)));
evalcond[2]=((((-1.0)*x16333))+x16337+((cj3*r12*x16329)));
evalcond[3]=(x16345+(((-1.0)*r12*sj3*x16341)));
evalcond[4]=((1.0)+(((-1.0)*cj5*r00*x16341))+((x16329*x16339)));
evalcond[5]=(((cj3*x16338))+((x16334*x16343))+(((-1.0)*x16339*x16346))+((r01*x16335)));
evalcond[6]=(((x16339*x16344))+(((-1.0)*x16335*x16343))+((r01*x16334))+((sj3*x16338)));
evalcond[7]=(((sj3*x16340))+(((-1.0)*x16335*x16342))+x16345+((x16336*x16344))+((r21*x16334)));
evalcond[8]=((((-1.0)*x16337))+(((-1.0)*x16336*x16346))+((cj3*x16340))+x16333+((x16334*x16342))+((r21*x16335)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16347=((1.0)*r01);
IkReal x16348=(cj5*r00);
CheckValue<IkReal> x16349=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*x16348))),-1);
if(!x16349.valid){
continue;
}
CheckValue<IkReal> x16350=IKPowWithIntegerCheck((((sj3*x16348))+(((-1.0)*sj3*sj5*x16347))),-1);
if(!x16350.valid){
continue;
}
if( IKabs(((-1.0)*(x16349.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x16350.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x16347)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x16349.value)))+IKsqr(((x16350.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x16347))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x16349.value)), ((x16350.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x16347))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16351=IKsin(j4);
IkReal x16352=IKcos(j4);
IkReal x16353=(cj2*sj1);
IkReal x16354=(cj1*sj2);
IkReal x16355=(sj1*sj2);
IkReal x16356=(cj5*sj3);
IkReal x16357=(cj3*cj5);
IkReal x16358=(r21*sj5);
IkReal x16359=(cj1*cj2);
IkReal x16360=(r00*sj5);
IkReal x16361=(r01*sj5);
IkReal x16362=(r20*sj5);
IkReal x16363=((1.0)*x16351);
IkReal x16364=(r20*x16352);
IkReal x16365=(r00*x16352);
IkReal x16366=(cj3*x16352);
IkReal x16367=(x16354+x16353);
IkReal x16368=((1.0)*sj3*x16352);
evalcond[0]=((-1.0)*r12*x16352);
evalcond[1]=(((x16351*x16358))+(((-1.0)*cj5*r20*x16363)));
evalcond[2]=((((-1.0)*x16355))+x16359+((cj3*r12*x16351)));
evalcond[3]=(x16367+(((-1.0)*r12*sj3*x16363)));
evalcond[4]=((1.0)+((x16351*x16361))+(((-1.0)*cj5*r00*x16363)));
evalcond[5]=(((x16356*x16365))+(((-1.0)*x16361*x16368))+((cj3*x16360))+((r01*x16357)));
evalcond[6]=(((sj3*x16360))+(((-1.0)*x16357*x16365))+((x16361*x16366))+((r01*x16356)));
evalcond[7]=(((sj3*x16362))+x16367+(((-1.0)*x16357*x16364))+((r21*x16356))+((x16358*x16366)));
evalcond[8]=((((-1.0)*x16359))+((x16356*x16364))+((cj3*x16362))+x16355+((r21*x16357))+(((-1.0)*x16358*x16368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16369=cj5*cj5;
IkReal x16370=(cj3*r20);
IkReal x16371=(r21*sj3);
IkReal x16372=((1.0)*cj3);
IkReal x16373=(r01*r21);
IkReal x16374=(r01*sj3);
IkReal x16375=(r00*sj5);
IkReal x16376=(cj5*r01*sj5);
IkReal x16377=((1.0)*x16369);
CheckValue<IkReal> x16378=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x16370*x16377))+(((-1.0)*x16372*x16373))+((cj3*cj5*r21*x16375))+((x16370*x16376))+((cj3*x16369*x16373))+(((-1.0)*r02*r22*x16372)))),-1);
if(!x16378.valid){
continue;
}
CheckValue<IkReal> x16379 = IKatan2WithCheck(IkReal((((cj5*r22*x16374))+((r22*sj3*x16375)))),IkReal((((r00*x16371))+(((-1.0)*r20*x16374*x16377))+(((-1.0)*r00*x16371*x16377))+(((-1.0)*cj5*r20*sj3*x16375))+((x16371*x16376)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16379.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16378.value)))+(x16379.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16380=IKsin(j4);
IkReal x16381=IKcos(j4);
IkReal x16382=(cj2*sj1);
IkReal x16383=(cj1*sj2);
IkReal x16384=(r11*sj5);
IkReal x16385=(cj5*r10);
IkReal x16386=(sj1*sj2);
IkReal x16387=(cj5*r01);
IkReal x16388=(cj5*r00);
IkReal x16389=(cj3*sj5);
IkReal x16390=(r21*sj5);
IkReal x16391=(cj1*cj2);
IkReal x16392=(cj5*sj3);
IkReal x16393=(sj3*sj5);
IkReal x16394=(r01*sj5);
IkReal x16395=(cj3*cj5);
IkReal x16396=(cj5*r20);
IkReal x16397=((1.0)*x16381);
IkReal x16398=((1.0)*x16380);
IkReal x16399=(cj3*x16381);
IkReal x16400=(sj3*x16381);
IkReal x16401=(cj3*x16380);
IkReal x16402=(x16383+x16382);
evalcond[0]=(((x16380*x16390))+(((-1.0)*x16396*x16398))+(((-1.0)*r22*x16397)));
evalcond[1]=((((-1.0)*x16385*x16398))+((x16380*x16384))+(((-1.0)*r12*x16397)));
evalcond[2]=((1.0)+(((-1.0)*r02*x16397))+((x16380*x16394))+(((-1.0)*x16388*x16398)));
evalcond[3]=(((r01*x16381*x16389))+((r00*x16393))+((sj3*x16387))+((r02*x16401))+(((-1.0)*cj3*x16388*x16397)));
evalcond[4]=(((cj3*x16387))+((r00*x16389))+(((-1.0)*r01*x16393*x16397))+(((-1.0)*r02*sj3*x16398))+((x16388*x16400)));
evalcond[5]=(x16402+((r21*x16381*x16389))+((r22*x16401))+((r21*x16392))+((r20*x16393))+(((-1.0)*r20*x16395*x16397)));
evalcond[6]=((((-1.0)*cj3*x16385*x16397))+(((-1.0)*x16386))+x16391+((r12*x16401))+((r11*x16392))+((x16384*x16399))+((r10*x16393)));
evalcond[7]=((((-1.0)*r12*sj3*x16398))+(((-1.0)*sj3*x16384*x16397))+x16402+((r11*x16395))+((x16385*x16400))+((r10*x16389)));
evalcond[8]=((((-1.0)*r22*sj3*x16398))+(((-1.0)*sj3*x16390*x16397))+x16386+(((-1.0)*x16391))+((r20*x16381*x16392))+((r21*x16395))+((r20*x16389)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16403=((1.0)*cj5);
CheckValue<IkReal> x16404=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x16403))+(((-1.0)*r20*sj5)))),-1);
if(!x16404.valid){
continue;
}
CheckValue<IkReal> x16405 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x16403))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16405.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16404.value)))+(x16405.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16406=IKsin(j4);
IkReal x16407=IKcos(j4);
IkReal x16408=(cj2*sj1);
IkReal x16409=(cj1*sj2);
IkReal x16410=(r11*sj5);
IkReal x16411=(cj5*r10);
IkReal x16412=(sj1*sj2);
IkReal x16413=(cj5*r01);
IkReal x16414=(cj5*r00);
IkReal x16415=(cj3*sj5);
IkReal x16416=(r21*sj5);
IkReal x16417=(cj1*cj2);
IkReal x16418=(cj5*sj3);
IkReal x16419=(sj3*sj5);
IkReal x16420=(r01*sj5);
IkReal x16421=(cj3*cj5);
IkReal x16422=(cj5*r20);
IkReal x16423=((1.0)*x16407);
IkReal x16424=((1.0)*x16406);
IkReal x16425=(cj3*x16407);
IkReal x16426=(sj3*x16407);
IkReal x16427=(cj3*x16406);
IkReal x16428=(x16408+x16409);
evalcond[0]=((((-1.0)*x16422*x16424))+((x16406*x16416))+(((-1.0)*r22*x16423)));
evalcond[1]=((((-1.0)*r12*x16423))+((x16406*x16410))+(((-1.0)*x16411*x16424)));
evalcond[2]=((1.0)+(((-1.0)*x16414*x16424))+((x16406*x16420))+(((-1.0)*r02*x16423)));
evalcond[3]=(((sj3*x16413))+((r02*x16427))+((r00*x16419))+(((-1.0)*cj3*x16414*x16423))+((r01*x16407*x16415)));
evalcond[4]=(((x16414*x16426))+((cj3*x16413))+((r00*x16415))+(((-1.0)*r01*x16419*x16423))+(((-1.0)*r02*sj3*x16424)));
evalcond[5]=((((-1.0)*r20*x16421*x16423))+x16428+((r22*x16427))+((r21*x16418))+((r20*x16419))+((r21*x16407*x16415)));
evalcond[6]=(((x16410*x16425))+((r11*x16418))+x16417+(((-1.0)*cj3*x16411*x16423))+((r10*x16419))+((r12*x16427))+(((-1.0)*x16412)));
evalcond[7]=((((-1.0)*sj3*x16410*x16423))+x16428+((r11*x16421))+((x16411*x16426))+((r10*x16415))+(((-1.0)*r12*sj3*x16424)));
evalcond[8]=(x16412+(((-1.0)*r22*sj3*x16424))+(((-1.0)*sj3*x16416*x16423))+(((-1.0)*x16417))+((r21*x16421))+((r20*x16415))+((r20*x16407*x16418)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16429 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16429.valid){
continue;
}
CheckValue<IkReal> x16430=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x16430.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x16429.value)+(((1.5707963267949)*(x16430.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16431=IKsin(j4);
IkReal x16432=IKcos(j4);
IkReal x16433=(cj2*sj1);
IkReal x16434=(cj1*sj2);
IkReal x16435=(r11*sj5);
IkReal x16436=(cj5*r10);
IkReal x16437=(sj1*sj2);
IkReal x16438=(cj5*r01);
IkReal x16439=(cj5*r00);
IkReal x16440=(cj3*sj5);
IkReal x16441=(r21*sj5);
IkReal x16442=(cj1*cj2);
IkReal x16443=(cj5*sj3);
IkReal x16444=(sj3*sj5);
IkReal x16445=(r01*sj5);
IkReal x16446=(cj3*cj5);
IkReal x16447=(cj5*r20);
IkReal x16448=((1.0)*x16432);
IkReal x16449=((1.0)*x16431);
IkReal x16450=(cj3*x16432);
IkReal x16451=(sj3*x16432);
IkReal x16452=(cj3*x16431);
IkReal x16453=(x16433+x16434);
evalcond[0]=((((-1.0)*r22*x16448))+((x16431*x16441))+(((-1.0)*x16447*x16449)));
evalcond[1]=((((-1.0)*x16436*x16449))+(((-1.0)*r12*x16448))+((x16431*x16435)));
evalcond[2]=((1.0)+((x16431*x16445))+(((-1.0)*x16439*x16449))+(((-1.0)*r02*x16448)));
evalcond[3]=(((r01*x16432*x16440))+((r02*x16452))+((sj3*x16438))+((r00*x16444))+(((-1.0)*cj3*x16439*x16448)));
evalcond[4]=(((x16439*x16451))+((cj3*x16438))+(((-1.0)*r01*x16444*x16448))+((r00*x16440))+(((-1.0)*r02*sj3*x16449)));
evalcond[5]=(((r21*x16432*x16440))+x16453+(((-1.0)*r20*x16446*x16448))+((r21*x16443))+((r22*x16452))+((r20*x16444)));
evalcond[6]=(((r10*x16444))+x16442+((r12*x16452))+((x16435*x16450))+(((-1.0)*cj3*x16436*x16448))+(((-1.0)*x16437))+((r11*x16443)));
evalcond[7]=(((x16436*x16451))+((r10*x16440))+x16453+(((-1.0)*r12*sj3*x16449))+(((-1.0)*sj3*x16435*x16448))+((r11*x16446)));
evalcond[8]=(x16437+((r21*x16446))+((r20*x16432*x16443))+(((-1.0)*x16442))+((r20*x16440))+(((-1.0)*r22*sj3*x16449))+(((-1.0)*sj3*x16441*x16448)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x16454=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x16454);
rxp1_1=(px*r21);
rxp1_2=(r11*x16454);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x16455=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x16455);
rxp1_1=(px*r21);
rxp1_2=(r11*x16455);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x16456=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x16456)));
j4eval[1]=(((cj3*r21*sj5))+(((-1.0)*cj3*r20*x16456)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x16457=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x16457);
rxp1_1=(px*r21);
rxp1_2=(r11*x16457);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x16458=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x16458);
rxp1_1=(px*r21);
rxp1_2=(r11*x16458);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x16459=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x16459);
rxp1_1=(px*r21);
rxp1_2=(r11*x16459);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x16460=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x16460);
rxp1_1=(px*r21);
rxp1_2=(r11*x16460);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x16463=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x16463.valid){
continue;
}
IkReal x16461=x16463.value;
IkReal x16462=(cj0*x16461);
cj4array[0]=(((cj1*cj2*x16462))+(((-1.0)*sj1*sj2*x16462)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x16464=IKsin(j4);
IkReal x16465=IKcos(j4);
IkReal x16466=(r21*sj5);
IkReal x16467=((1.0)*cj5*r20);
evalcond[0]=(r02*x16464);
evalcond[1]=((((-1.0)*r02*x16465))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*x16464*x16467))+((x16464*x16466)));
evalcond[3]=(((r11*sj5*x16464))+(((-1.0)*cj5*r10*x16464)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x16465*x16467))+((x16465*x16466)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x16470=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x16470.valid){
continue;
}
IkReal x16468=x16470.value;
IkReal x16469=((1.0)*x16468);
cj4array[0]=((((-1.0)*cj1*sj2*x16469))+(((-1.0)*cj2*sj1*x16469)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x16471=IKsin(j4);
IkReal x16472=IKcos(j4);
IkReal x16473=((1.0)*cj0);
IkReal x16474=((1.0)*cj5);
IkReal x16475=(sj5*x16471);
evalcond[0]=(r02*x16471);
evalcond[1]=((((-1.0)*x16473))+(((-1.0)*r02*x16472)));
evalcond[2]=((((-1.0)*r20*x16471*x16474))+((r21*x16475)));
evalcond[3]=(((r11*x16475))+(((-1.0)*r10*x16471*x16474)));
evalcond[4]=((((-1.0)*cj1*cj2*x16473))+((r11*sj5*x16472))+(((-1.0)*r10*x16472*x16474))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x16476=IKPowWithIntegerCheck(r02,-1);
if(!x16476.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x16476.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x16477=IKsin(j4);
IkReal x16478=IKcos(j4);
IkReal x16479=(r21*sj5);
IkReal x16480=((1.0)*cj5);
IkReal x16481=(r11*sj5);
evalcond[0]=(r02*x16477);
evalcond[1]=((((-1.0)*r20*x16477*x16480))+((x16477*x16479)));
evalcond[2]=(((x16477*x16481))+(((-1.0)*r10*x16477*x16480)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r20*x16478*x16480))+((x16478*x16479)));
evalcond[4]=((((-1.0)*cj0*cj1*cj2))+((x16478*x16481))+(((-1.0)*r10*x16478*x16480))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x16482=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x16482);
rxp1_1=(px*r21);
rxp1_2=(r11*x16482);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x16483=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x16483);
rxp1_1=(px*r21);
rxp1_2=(r11*x16483);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x16484=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x16484);
rxp1_1=(px*r21);
rxp1_2=(r11*x16484);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x16487=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x16487.valid){
continue;
}
IkReal x16485=x16487.value;
IkReal x16486=(cj0*x16485);
cj4array[0]=(((cj1*cj2*x16486))+(((-1.0)*sj1*sj2*x16486)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x16488=IKsin(j4);
IkReal x16489=IKcos(j4);
IkReal x16490=(r21*sj5);
IkReal x16491=(cj5*r20);
IkReal x16492=((1.0)*x16488);
IkReal x16493=((1.0)*x16489);
evalcond[0]=((-1.0)*r02*x16488);
evalcond[1]=((((-1.0)*r02*x16493))+(((-1.0)*cj0)));
evalcond[2]=(((x16488*x16490))+(((-1.0)*x16491*x16492)));
evalcond[3]=(((r11*sj5*x16488))+(((-1.0)*cj5*r10*x16492)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x16490*x16493))+((x16489*x16491)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x16496=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x16496.valid){
continue;
}
IkReal x16494=x16496.value;
IkReal x16495=((1.0)*x16494);
cj4array[0]=((((-1.0)*cj1*sj2*x16495))+(((-1.0)*cj2*sj1*x16495)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x16497=IKsin(j4);
IkReal x16498=IKcos(j4);
IkReal x16499=(r11*sj5);
IkReal x16500=((1.0)*cj0);
IkReal x16501=((1.0)*x16498);
IkReal x16502=((1.0)*cj5*x16497);
evalcond[0]=((-1.0)*r02*x16497);
evalcond[1]=((((-1.0)*r02*x16501))+(((-1.0)*x16500)));
evalcond[2]=((((-1.0)*r20*x16502))+((r21*sj5*x16497)));
evalcond[3]=((((-1.0)*r10*x16502))+((x16497*x16499)));
evalcond[4]=((((-1.0)*cj1*cj2*x16500))+((cj5*r10*x16498))+(((-1.0)*x16499*x16501))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x16503=IKPowWithIntegerCheck(r02,-1);
if(!x16503.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x16503.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x16504=IKsin(j4);
IkReal x16505=IKcos(j4);
IkReal x16506=(r21*sj5);
IkReal x16507=(r11*sj5);
IkReal x16508=(cj5*x16505);
IkReal x16509=((1.0)*x16505);
IkReal x16510=((1.0)*cj5*x16504);
evalcond[0]=((-1.0)*r02*x16504);
evalcond[1]=(((x16504*x16506))+(((-1.0)*r20*x16510)));
evalcond[2]=(((x16504*x16507))+(((-1.0)*r10*x16510)));
evalcond[3]=(((cj2*sj1))+((r20*x16508))+((cj1*sj2))+(((-1.0)*x16506*x16509)));
evalcond[4]=((((-1.0)*cj0*cj1*cj2))+(((-1.0)*x16507*x16509))+((cj0*sj1*sj2))+((r10*x16508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x16511 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x16511.valid){
continue;
}
IkReal gconst66=((-1.0)*(x16511.value));
IkReal gconst67=r10;
IkReal gconst68=r11;
CheckValue<IkReal> x16512 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x16512.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x16512.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x16513=((-1.0)*r10);
CheckValue<IkReal> x16515 = IKatan2WithCheck(IkReal(x16513),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x16515.valid){
continue;
}
IkReal x16514=((-1.0)*(x16515.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x16513);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x16514;
IkReal gconst66=x16514;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x16516=((-1.0)*r10);
CheckValue<IkReal> x16518 = IKatan2WithCheck(IkReal(x16516),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x16518.valid){
continue;
}
IkReal x16517=((-1.0)*(x16518.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x16516);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x16517;
IkReal gconst66=x16517;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x16519=((-1.0)*r10);
CheckValue<IkReal> x16521 = IKatan2WithCheck(IkReal(x16519),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x16521.valid){
continue;
}
IkReal x16520=((-1.0)*(x16521.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x16519);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x16520;
IkReal gconst66=x16520;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=(((cj3*r10*r21))+(((-1.0)*cj3*r11*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16522=(cj2*sj1);
IkReal x16523=((1.0)*gconst68);
IkReal x16524=(cj1*sj2);
CheckValue<IkReal> x16525=IKPowWithIntegerCheck(r02,-1);
if(!x16525.valid){
continue;
}
CheckValue<IkReal> x16526=IKPowWithIntegerCheck(sj3,-1);
if(!x16526.valid){
continue;
}
CheckValue<IkReal> x16527=IKPowWithIntegerCheck((((cj3*gconst67*r21))+(((-1.0)*cj3*r20*x16523))),-1);
if(!x16527.valid){
continue;
}
if( IKabs(((x16525.value)*(x16526.value)*((((sj0*x16524))+((sj0*x16522)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x16527.value)*(((((-1.0)*x16524))+(((-1.0)*x16522))+(((-1.0)*gconst67*r20*sj3))+(((-1.0)*r21*sj3*x16523)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x16525.value)*(x16526.value)*((((sj0*x16524))+((sj0*x16522))))))+IKsqr(((x16527.value)*(((((-1.0)*x16524))+(((-1.0)*x16522))+(((-1.0)*gconst67*r20*sj3))+(((-1.0)*r21*sj3*x16523))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x16525.value)*(x16526.value)*((((sj0*x16524))+((sj0*x16522))))), ((x16527.value)*(((((-1.0)*x16524))+(((-1.0)*x16522))+(((-1.0)*gconst67*r20*sj3))+(((-1.0)*r21*sj3*x16523))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16528=IKsin(j4);
IkReal x16529=IKcos(j4);
IkReal x16530=(cj2*sj0);
IkReal x16531=(sj1*sj2);
IkReal x16532=(gconst68*sj3);
IkReal x16533=(gconst67*r11);
IkReal x16534=(gconst67*sj3);
IkReal x16535=((1.0)*gconst68);
IkReal x16536=(cj2*sj1);
IkReal x16537=((1.0)*cj0);
IkReal x16538=((1.0)*sj0);
IkReal x16539=(cj3*gconst67);
IkReal x16540=(cj1*sj2);
IkReal x16541=(cj3*gconst68);
IkReal x16542=(gconst67*r21);
IkReal x16543=(cj3*x16529);
IkReal x16544=((1.0)*cj1*cj2);
IkReal x16545=((1.0)*x16529);
IkReal x16546=(r02*x16528);
evalcond[0]=((((-1.0)*x16537))+(((-1.0)*r02*x16545)));
evalcond[1]=((((-1.0)*r20*x16528*x16535))+((x16528*x16542)));
evalcond[2]=(((sj1*x16530))+((sj0*x16540))+(((-1.0)*sj3*x16546)));
evalcond[3]=((((-1.0)*x16531*x16538))+((cj3*x16546))+((cj1*x16530)));
evalcond[4]=(((x16528*x16533))+(((-1.0)*x16538))+(((-1.0)*r10*x16528*x16535)));
evalcond[5]=(x16540+x16536+((r21*x16529*x16539))+(((-1.0)*r20*x16535*x16543))+((r20*x16534))+((r21*x16532)));
evalcond[6]=(((r20*x16529*x16532))+(((-1.0)*x16544))+(((-1.0)*r21*x16534*x16545))+x16531+((r21*x16541))+((r20*x16539)));
evalcond[7]=(((x16533*x16543))+(((-1.0)*r10*x16535*x16543))+((r10*x16534))+((r11*x16532))+(((-1.0)*cj1*cj2*x16537))+((cj0*x16531)));
evalcond[8]=(((r10*x16539))+(((-1.0)*x16537*x16540))+(((-1.0)*sj3*x16533*x16545))+(((-1.0)*x16536*x16537))+((r11*x16541))+((r10*x16529*x16532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16548=IKPowWithIntegerCheck(r02,-1);
if(!x16548.valid){
continue;
}
IkReal x16547=x16548.value;
CheckValue<IkReal> x16549=IKPowWithIntegerCheck(cj3,-1);
if(!x16549.valid){
continue;
}
if( IKabs((x16547*(x16549.value)*(((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x16547)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x16547*(x16549.value)*(((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))))))+IKsqr(((-1.0)*cj0*x16547))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x16547*(x16549.value)*(((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))))), ((-1.0)*cj0*x16547));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16550=IKsin(j4);
IkReal x16551=IKcos(j4);
IkReal x16552=(cj2*sj0);
IkReal x16553=(sj1*sj2);
IkReal x16554=(gconst68*sj3);
IkReal x16555=(gconst67*r11);
IkReal x16556=(gconst67*sj3);
IkReal x16557=((1.0)*gconst68);
IkReal x16558=(cj2*sj1);
IkReal x16559=((1.0)*cj0);
IkReal x16560=((1.0)*sj0);
IkReal x16561=(cj3*gconst67);
IkReal x16562=(cj1*sj2);
IkReal x16563=(cj3*gconst68);
IkReal x16564=(gconst67*r21);
IkReal x16565=(cj3*x16551);
IkReal x16566=((1.0)*cj1*cj2);
IkReal x16567=((1.0)*x16551);
IkReal x16568=(r02*x16550);
evalcond[0]=((((-1.0)*r02*x16567))+(((-1.0)*x16559)));
evalcond[1]=((((-1.0)*r20*x16550*x16557))+((x16550*x16564)));
evalcond[2]=((((-1.0)*sj3*x16568))+((sj0*x16562))+((sj1*x16552)));
evalcond[3]=(((cj1*x16552))+((cj3*x16568))+(((-1.0)*x16553*x16560)));
evalcond[4]=((((-1.0)*x16560))+(((-1.0)*r10*x16550*x16557))+((x16550*x16555)));
evalcond[5]=((((-1.0)*r20*x16557*x16565))+x16558+x16562+((r21*x16551*x16561))+((r20*x16556))+((r21*x16554)));
evalcond[6]=(x16553+(((-1.0)*r21*x16556*x16567))+((r20*x16551*x16554))+(((-1.0)*x16566))+((r21*x16563))+((r20*x16561)));
evalcond[7]=(((r10*x16556))+((x16555*x16565))+((r11*x16554))+(((-1.0)*cj1*cj2*x16559))+((cj0*x16553))+(((-1.0)*r10*x16557*x16565)));
evalcond[8]=(((r11*x16563))+(((-1.0)*x16558*x16559))+(((-1.0)*x16559*x16562))+((r10*x16551*x16554))+((r10*x16561))+(((-1.0)*sj3*x16555*x16567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16570=IKPowWithIntegerCheck(r02,-1);
if(!x16570.valid){
continue;
}
IkReal x16569=x16570.value;
CheckValue<IkReal> x16571=IKPowWithIntegerCheck(sj3,-1);
if(!x16571.valid){
continue;
}
if( IKabs((x16569*(x16571.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x16569)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x16569*(x16571.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((-1.0)*cj0*x16569))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x16569*(x16571.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((-1.0)*cj0*x16569));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16572=IKsin(j4);
IkReal x16573=IKcos(j4);
IkReal x16574=(cj2*sj0);
IkReal x16575=(sj1*sj2);
IkReal x16576=(gconst68*sj3);
IkReal x16577=(gconst67*r11);
IkReal x16578=(gconst67*sj3);
IkReal x16579=((1.0)*gconst68);
IkReal x16580=(cj2*sj1);
IkReal x16581=((1.0)*cj0);
IkReal x16582=((1.0)*sj0);
IkReal x16583=(cj3*gconst67);
IkReal x16584=(cj1*sj2);
IkReal x16585=(cj3*gconst68);
IkReal x16586=(gconst67*r21);
IkReal x16587=(cj3*x16573);
IkReal x16588=((1.0)*cj1*cj2);
IkReal x16589=((1.0)*x16573);
IkReal x16590=(r02*x16572);
evalcond[0]=((((-1.0)*x16581))+(((-1.0)*r02*x16589)));
evalcond[1]=(((x16572*x16586))+(((-1.0)*r20*x16572*x16579)));
evalcond[2]=((((-1.0)*sj3*x16590))+((sj0*x16584))+((sj1*x16574)));
evalcond[3]=(((cj3*x16590))+(((-1.0)*x16575*x16582))+((cj1*x16574)));
evalcond[4]=((((-1.0)*x16582))+((x16572*x16577))+(((-1.0)*r10*x16572*x16579)));
evalcond[5]=(x16584+x16580+(((-1.0)*r20*x16579*x16587))+((r21*x16573*x16583))+((r21*x16576))+((r20*x16578)));
evalcond[6]=((((-1.0)*x16588))+x16575+((r20*x16573*x16576))+(((-1.0)*r21*x16578*x16589))+((r20*x16583))+((r21*x16585)));
evalcond[7]=((((-1.0)*cj1*cj2*x16581))+((r11*x16576))+((cj0*x16575))+(((-1.0)*r10*x16579*x16587))+((x16577*x16587))+((r10*x16578)));
evalcond[8]=(((r11*x16585))+(((-1.0)*sj3*x16577*x16589))+(((-1.0)*x16580*x16581))+((r10*x16573*x16576))+((r10*x16583))+(((-1.0)*x16581*x16584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x16591=((-1.0)*r10);
CheckValue<IkReal> x16592 = IKatan2WithCheck(IkReal(x16591),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x16592.valid){
continue;
}
IkReal gconst69=((3.14159265358979)+(((-1.0)*(x16592.value))));
IkReal gconst70=x16591;
IkReal gconst71=((-1.0)*r11);
CheckValue<IkReal> x16593 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x16593.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x16593.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x16594=((-1.0)*r10);
IkReal x16595=((-1.0)*r11);
CheckValue<IkReal> x16597 = IKatan2WithCheck(IkReal(x16594),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x16597.valid){
continue;
}
IkReal x16596=((1.0)*(x16597.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x16594);
rxp1_1=(px*r21);
rxp1_2=(px*x16595);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x16596)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x16596)));
IkReal gconst70=x16594;
IkReal gconst71=x16595;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x16598=((-1.0)*r10);
IkReal x16599=((-1.0)*r11);
CheckValue<IkReal> x16601 = IKatan2WithCheck(IkReal(x16598),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x16601.valid){
continue;
}
IkReal x16600=((1.0)*(x16601.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x16598);
rxp1_1=(px*r21);
rxp1_2=(px*x16599);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x16600)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x16600)));
IkReal gconst70=x16598;
IkReal gconst71=x16599;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x16602=((-1.0)*r10);
IkReal x16603=((-1.0)*r11);
CheckValue<IkReal> x16605 = IKatan2WithCheck(IkReal(x16602),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x16605.valid){
continue;
}
IkReal x16604=((1.0)*(x16605.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x16602);
rxp1_1=(px*r21);
rxp1_2=(px*x16603);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x16604)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x16604)));
IkReal gconst70=x16602;
IkReal gconst71=x16603;
IkReal x16606=((1.0)*cj3);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((((-1.0)*r10*r21*x16606))+((r11*r20*x16606)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16607=(cj2*sj1);
IkReal x16608=(cj1*sj2);
IkReal x16609=((1.0)*gconst71);
CheckValue<IkReal> x16610=IKPowWithIntegerCheck(r02,-1);
if(!x16610.valid){
continue;
}
CheckValue<IkReal> x16611=IKPowWithIntegerCheck(sj3,-1);
if(!x16611.valid){
continue;
}
CheckValue<IkReal> x16612=IKPowWithIntegerCheck((((cj3*gconst70*r21))+(((-1.0)*cj3*r20*x16609))),-1);
if(!x16612.valid){
continue;
}
if( IKabs(((x16610.value)*(x16611.value)*((((sj0*x16607))+((sj0*x16608)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x16612.value)*(((((-1.0)*r21*sj3*x16609))+(((-1.0)*gconst70*r20*sj3))+(((-1.0)*x16607))+(((-1.0)*x16608)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x16610.value)*(x16611.value)*((((sj0*x16607))+((sj0*x16608))))))+IKsqr(((x16612.value)*(((((-1.0)*r21*sj3*x16609))+(((-1.0)*gconst70*r20*sj3))+(((-1.0)*x16607))+(((-1.0)*x16608))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x16610.value)*(x16611.value)*((((sj0*x16607))+((sj0*x16608))))), ((x16612.value)*(((((-1.0)*r21*sj3*x16609))+(((-1.0)*gconst70*r20*sj3))+(((-1.0)*x16607))+(((-1.0)*x16608))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16613=IKsin(j4);
IkReal x16614=IKcos(j4);
IkReal x16615=(cj2*sj0);
IkReal x16616=(cj3*gconst70);
IkReal x16617=(sj1*sj2);
IkReal x16618=((1.0)*gconst71);
IkReal x16619=(cj1*sj2);
IkReal x16620=(gconst71*sj3);
IkReal x16621=(gconst70*r11);
IkReal x16622=(gconst70*sj3);
IkReal x16623=(cj2*sj1);
IkReal x16624=((1.0)*cj0);
IkReal x16625=(cj3*gconst71);
IkReal x16626=((1.0)*sj0);
IkReal x16627=(r21*x16614);
IkReal x16628=((1.0)*cj1*cj2);
IkReal x16629=(r10*x16614);
IkReal x16630=((1.0)*x16614);
IkReal x16631=(r02*x16613);
IkReal x16632=(r20*x16614);
evalcond[0]=((((-1.0)*r02*x16630))+(((-1.0)*x16624)));
evalcond[1]=(((gconst70*r21*x16613))+(((-1.0)*r20*x16613*x16618)));
evalcond[2]=(((sj0*x16619))+(((-1.0)*sj3*x16631))+((sj1*x16615)));
evalcond[3]=(((cj3*x16631))+(((-1.0)*x16617*x16626))+((cj1*x16615)));
evalcond[4]=((((-1.0)*r10*x16613*x16618))+(((-1.0)*x16626))+((x16613*x16621)));
evalcond[5]=(x16623+x16619+((r21*x16620))+((x16616*x16627))+((r20*x16622))+(((-1.0)*cj3*x16618*x16632)));
evalcond[6]=((((-1.0)*x16622*x16627))+x16617+((x16620*x16632))+((r21*x16625))+((r20*x16616))+(((-1.0)*x16628)));
evalcond[7]=(((r11*x16620))+(((-1.0)*cj3*x16618*x16629))+((r11*x16614*x16616))+((cj0*x16617))+(((-1.0)*cj1*cj2*x16624))+((r10*x16622)));
evalcond[8]=(((r11*x16625))+(((-1.0)*x16623*x16624))+(((-1.0)*sj3*x16621*x16630))+(((-1.0)*x16619*x16624))+((x16620*x16629))+((r10*x16616)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16634=IKPowWithIntegerCheck(r02,-1);
if(!x16634.valid){
continue;
}
IkReal x16633=x16634.value;
CheckValue<IkReal> x16635=IKPowWithIntegerCheck(cj3,-1);
if(!x16635.valid){
continue;
}
if( IKabs((x16633*(x16635.value)*(((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x16633)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x16633*(x16635.value)*(((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))))))+IKsqr(((-1.0)*cj0*x16633))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x16633*(x16635.value)*(((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))))), ((-1.0)*cj0*x16633));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16636=IKsin(j4);
IkReal x16637=IKcos(j4);
IkReal x16638=(cj2*sj0);
IkReal x16639=(cj3*gconst70);
IkReal x16640=(sj1*sj2);
IkReal x16641=((1.0)*gconst71);
IkReal x16642=(cj1*sj2);
IkReal x16643=(gconst71*sj3);
IkReal x16644=(gconst70*r11);
IkReal x16645=(gconst70*sj3);
IkReal x16646=(cj2*sj1);
IkReal x16647=((1.0)*cj0);
IkReal x16648=(cj3*gconst71);
IkReal x16649=((1.0)*sj0);
IkReal x16650=(r21*x16637);
IkReal x16651=((1.0)*cj1*cj2);
IkReal x16652=(r10*x16637);
IkReal x16653=((1.0)*x16637);
IkReal x16654=(r02*x16636);
IkReal x16655=(r20*x16637);
evalcond[0]=((((-1.0)*r02*x16653))+(((-1.0)*x16647)));
evalcond[1]=(((gconst70*r21*x16636))+(((-1.0)*r20*x16636*x16641)));
evalcond[2]=(((sj0*x16642))+(((-1.0)*sj3*x16654))+((sj1*x16638)));
evalcond[3]=(((cj3*x16654))+((cj1*x16638))+(((-1.0)*x16640*x16649)));
evalcond[4]=((((-1.0)*r10*x16636*x16641))+(((-1.0)*x16649))+((x16636*x16644)));
evalcond[5]=((((-1.0)*cj3*x16641*x16655))+x16642+x16646+((x16639*x16650))+((r20*x16645))+((r21*x16643)));
evalcond[6]=(x16640+((r20*x16639))+(((-1.0)*x16645*x16650))+(((-1.0)*x16651))+((x16643*x16655))+((r21*x16648)));
evalcond[7]=((((-1.0)*cj3*x16641*x16652))+((r11*x16637*x16639))+(((-1.0)*cj1*cj2*x16647))+((r10*x16645))+((r11*x16643))+((cj0*x16640)));
evalcond[8]=((((-1.0)*sj3*x16644*x16653))+(((-1.0)*x16646*x16647))+((r11*x16648))+(((-1.0)*x16642*x16647))+((x16643*x16652))+((r10*x16639)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16657=IKPowWithIntegerCheck(r02,-1);
if(!x16657.valid){
continue;
}
IkReal x16656=x16657.value;
CheckValue<IkReal> x16658=IKPowWithIntegerCheck(sj3,-1);
if(!x16658.valid){
continue;
}
if( IKabs((x16656*(x16658.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x16656)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x16656*(x16658.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((-1.0)*cj0*x16656))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x16656*(x16658.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((-1.0)*cj0*x16656));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16659=IKsin(j4);
IkReal x16660=IKcos(j4);
IkReal x16661=(cj2*sj0);
IkReal x16662=(cj3*gconst70);
IkReal x16663=(sj1*sj2);
IkReal x16664=((1.0)*gconst71);
IkReal x16665=(cj1*sj2);
IkReal x16666=(gconst71*sj3);
IkReal x16667=(gconst70*r11);
IkReal x16668=(gconst70*sj3);
IkReal x16669=(cj2*sj1);
IkReal x16670=((1.0)*cj0);
IkReal x16671=(cj3*gconst71);
IkReal x16672=((1.0)*sj0);
IkReal x16673=(r21*x16660);
IkReal x16674=((1.0)*cj1*cj2);
IkReal x16675=(r10*x16660);
IkReal x16676=((1.0)*x16660);
IkReal x16677=(r02*x16659);
IkReal x16678=(r20*x16660);
evalcond[0]=((((-1.0)*r02*x16676))+(((-1.0)*x16670)));
evalcond[1]=((((-1.0)*r20*x16659*x16664))+((gconst70*r21*x16659)));
evalcond[2]=(((sj0*x16665))+((sj1*x16661))+(((-1.0)*sj3*x16677)));
evalcond[3]=((((-1.0)*x16663*x16672))+((cj1*x16661))+((cj3*x16677)));
evalcond[4]=(((x16659*x16667))+(((-1.0)*r10*x16659*x16664))+(((-1.0)*x16672)));
evalcond[5]=(((x16662*x16673))+x16665+x16669+(((-1.0)*cj3*x16664*x16678))+((r21*x16666))+((r20*x16668)));
evalcond[6]=(x16663+((x16666*x16678))+((r21*x16671))+((r20*x16662))+(((-1.0)*x16668*x16673))+(((-1.0)*x16674)));
evalcond[7]=(((r11*x16666))+(((-1.0)*cj3*x16664*x16675))+((r11*x16660*x16662))+((cj0*x16663))+(((-1.0)*cj1*cj2*x16670))+((r10*x16668)));
evalcond[8]=(((r11*x16671))+((x16666*x16675))+(((-1.0)*x16665*x16670))+(((-1.0)*x16669*x16670))+(((-1.0)*sj3*x16667*x16676))+((r10*x16662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x16679=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x16679);
rxp1_1=(px*r21);
rxp1_2=(r11*x16679);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x16680=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x16680);
rxp1_1=(px*r21);
rxp1_2=(r11*x16680);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x16681=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x16681);
rxp1_1=(px*r21);
rxp1_2=(r11*x16681);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x16684=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x16684.valid){
continue;
}
IkReal x16682=x16684.value;
IkReal x16683=(cj0*x16682);
cj4array[0]=(((cj2*sj1*x16683))+((cj1*sj2*x16683)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x16685=IKsin(j4);
IkReal x16686=IKcos(j4);
IkReal x16687=(cj5*r20);
IkReal x16688=(r21*sj5);
IkReal x16689=((1.0)*x16685);
IkReal x16690=((1.0)*x16686);
evalcond[0]=((-1.0)*r02*x16685);
evalcond[1]=((((-1.0)*r02*x16690))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*x16687*x16689))+((x16685*x16688)));
evalcond[3]=((((-1.0)*cj5*r10*x16689))+((r11*sj5*x16685)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x16686*x16687))+(((-1.0)*x16688*x16690)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x16692=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x16692.valid){
continue;
}
IkReal x16691=x16692.value;
cj4array[0]=(((cj1*cj2*x16691))+(((-1.0)*sj1*sj2*x16691)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x16693=IKsin(j4);
IkReal x16694=IKcos(j4);
IkReal x16695=(r11*sj5);
IkReal x16696=((1.0)*cj0);
IkReal x16697=((1.0)*x16694);
IkReal x16698=((1.0)*cj5*x16693);
evalcond[0]=((-1.0)*r02*x16693);
evalcond[1]=((((-1.0)*x16696))+(((-1.0)*r02*x16697)));
evalcond[2]=(((r21*sj5*x16693))+(((-1.0)*r20*x16698)));
evalcond[3]=((((-1.0)*r10*x16698))+((x16693*x16695)));
evalcond[4]=((((-1.0)*cj2*sj1*x16696))+((cj5*r10*x16694))+(((-1.0)*x16695*x16697))+(((-1.0)*cj1*sj2*x16696)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x16699=IKPowWithIntegerCheck(r02,-1);
if(!x16699.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x16699.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x16700=IKsin(j4);
IkReal x16701=IKcos(j4);
IkReal x16702=((1.0)*cj0);
IkReal x16703=(cj5*x16701);
IkReal x16704=(sj5*x16700);
IkReal x16705=((1.0)*sj5*x16701);
IkReal x16706=((1.0)*cj5*x16700);
evalcond[0]=((-1.0)*r02*x16700);
evalcond[1]=((((-1.0)*r20*x16706))+((r21*x16704)));
evalcond[2]=((((-1.0)*r10*x16706))+((r11*x16704)));
evalcond[3]=(((r20*x16703))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x16705)));
evalcond[4]=((((-1.0)*cj2*sj1*x16702))+(((-1.0)*cj1*sj2*x16702))+(((-1.0)*r11*x16705))+((r10*x16703)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x16707=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x16707);
rxp1_1=(px*r21);
rxp1_2=(r11*x16707);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x16708=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x16708);
rxp1_1=(px*r21);
rxp1_2=(r11*x16708);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x16709=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x16709);
rxp1_1=(px*r21);
rxp1_2=(r11*x16709);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x16712=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x16712.valid){
continue;
}
IkReal x16710=x16712.value;
IkReal x16711=(cj0*x16710);
cj4array[0]=(((cj2*sj1*x16711))+((cj1*sj2*x16711)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x16713=IKsin(j4);
IkReal x16714=IKcos(j4);
IkReal x16715=(r21*sj5);
IkReal x16716=((1.0)*cj5*r20);
evalcond[0]=(r02*x16713);
evalcond[1]=((((-1.0)*r02*x16714))+(((-1.0)*cj0)));
evalcond[2]=(((x16713*x16715))+(((-1.0)*x16713*x16716)));
evalcond[3]=(((r11*sj5*x16713))+(((-1.0)*cj5*r10*x16713)));
evalcond[4]=((((-1.0)*x16714*x16716))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x16714*x16715)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x16718=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x16718.valid){
continue;
}
IkReal x16717=x16718.value;
cj4array[0]=(((cj1*cj2*x16717))+(((-1.0)*sj1*sj2*x16717)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x16719=IKsin(j4);
IkReal x16720=IKcos(j4);
IkReal x16721=((1.0)*cj0);
IkReal x16722=((1.0)*cj5);
IkReal x16723=(sj5*x16719);
evalcond[0]=(r02*x16719);
evalcond[1]=((((-1.0)*x16721))+(((-1.0)*r02*x16720)));
evalcond[2]=((((-1.0)*r20*x16719*x16722))+((r21*x16723)));
evalcond[3]=(((r11*x16723))+(((-1.0)*r10*x16719*x16722)));
evalcond[4]=((((-1.0)*cj2*sj1*x16721))+(((-1.0)*cj1*sj2*x16721))+(((-1.0)*r10*x16720*x16722))+((r11*sj5*x16720)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x16724=IKPowWithIntegerCheck(r02,-1);
if(!x16724.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x16724.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x16725=IKsin(j4);
IkReal x16726=IKcos(j4);
IkReal x16727=((1.0)*cj1);
IkReal x16728=(r21*sj5);
IkReal x16729=((1.0)*cj5);
IkReal x16730=(r11*sj5);
evalcond[0]=(r02*x16725);
evalcond[1]=((((-1.0)*r20*x16725*x16729))+((x16725*x16728)));
evalcond[2]=((((-1.0)*r10*x16725*x16729))+((x16725*x16730)));
evalcond[3]=(((x16726*x16728))+(((-1.0)*r20*x16726*x16729))+((sj1*sj2))+(((-1.0)*cj2*x16727)));
evalcond[4]=(((x16726*x16730))+(((-1.0)*cj0*cj2*sj1))+(((-1.0)*r10*x16726*x16729))+(((-1.0)*cj0*sj2*x16727)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16732=IKPowWithIntegerCheck(r02,-1);
if(!x16732.valid){
continue;
}
IkReal x16731=x16732.value;
CheckValue<IkReal> x16733=IKPowWithIntegerCheck(sj3,-1);
if(!x16733.valid){
continue;
}
if( IKabs((x16731*(x16733.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x16731)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x16731*(x16733.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((-1.0)*cj0*x16731))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x16731*(x16733.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((-1.0)*cj0*x16731));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16734=IKsin(j4);
IkReal x16735=IKcos(j4);
IkReal x16736=(cj2*sj0);
IkReal x16737=(cj5*r10);
IkReal x16738=(sj1*sj2);
IkReal x16739=(cj5*sj3);
IkReal x16740=(r11*sj5);
IkReal x16741=(cj3*cj5);
IkReal x16742=(cj3*sj5);
IkReal x16743=(r21*sj5);
IkReal x16744=(cj2*sj1);
IkReal x16745=((1.0)*cj0);
IkReal x16746=((1.0)*sj0);
IkReal x16747=(sj3*sj5);
IkReal x16748=(cj1*sj2);
IkReal x16749=((1.0)*x16734);
IkReal x16750=(r20*x16735);
IkReal x16751=(cj3*x16735);
IkReal x16752=((1.0)*cj1*cj2);
IkReal x16753=(sj3*x16735);
evalcond[0]=((((-1.0)*x16745))+(((-1.0)*r02*x16735)));
evalcond[1]=((((-1.0)*cj5*r20*x16749))+((x16734*x16743)));
evalcond[2]=(((sj1*x16736))+(((-1.0)*r02*sj3*x16749))+((sj0*x16748)));
evalcond[3]=(((cj3*r02*x16734))+(((-1.0)*x16738*x16746))+((cj1*x16736)));
evalcond[4]=((((-1.0)*x16737*x16749))+((x16734*x16740))+(((-1.0)*x16746)));
evalcond[5]=(x16744+x16748+((r21*x16735*x16742))+((r21*x16739))+(((-1.0)*x16741*x16750))+((r20*x16747)));
evalcond[6]=(x16738+(((-1.0)*x16743*x16753))+(((-1.0)*x16752))+((r20*x16742))+((x16739*x16750))+((r21*x16741)));
evalcond[7]=(((cj0*x16738))+(((-1.0)*x16737*x16751))+((r10*x16747))+(((-1.0)*cj1*cj2*x16745))+((r11*x16739))+((x16740*x16751)));
evalcond[8]=(((r11*x16741))+((r10*x16742))+((x16737*x16753))+(((-1.0)*x16744*x16745))+(((-1.0)*x16740*x16753))+(((-1.0)*x16745*x16748)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16754=((1.0)*sj3);
IkReal x16755=((1.0)*cj5);
CheckValue<IkReal> x16756=IKPowWithIntegerCheck(((((-1.0)*r10*x16755))+((r11*sj5))),-1);
if(!x16756.valid){
continue;
}
CheckValue<IkReal> x16757=IKPowWithIntegerCheck((((cj3*r21*sj5))+(((-1.0)*cj3*r20*x16755))),-1);
if(!x16757.valid){
continue;
}
if( IKabs((sj0*(x16756.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x16757.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj5*r21*x16754))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*sj5*x16754)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*(x16756.value)))+IKsqr(((x16757.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj5*r21*x16754))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*sj5*x16754))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*(x16756.value)), ((x16757.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj5*r21*x16754))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*sj5*x16754))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16758=IKsin(j4);
IkReal x16759=IKcos(j4);
IkReal x16760=(cj2*sj0);
IkReal x16761=(cj5*r10);
IkReal x16762=(sj1*sj2);
IkReal x16763=(cj5*sj3);
IkReal x16764=(r11*sj5);
IkReal x16765=(cj3*cj5);
IkReal x16766=(cj3*sj5);
IkReal x16767=(r21*sj5);
IkReal x16768=(cj2*sj1);
IkReal x16769=((1.0)*cj0);
IkReal x16770=((1.0)*sj0);
IkReal x16771=(sj3*sj5);
IkReal x16772=(cj1*sj2);
IkReal x16773=((1.0)*x16758);
IkReal x16774=(r20*x16759);
IkReal x16775=(cj3*x16759);
IkReal x16776=((1.0)*cj1*cj2);
IkReal x16777=(sj3*x16759);
evalcond[0]=((((-1.0)*r02*x16759))+(((-1.0)*x16769)));
evalcond[1]=(((x16758*x16767))+(((-1.0)*cj5*r20*x16773)));
evalcond[2]=(((sj1*x16760))+((sj0*x16772))+(((-1.0)*r02*sj3*x16773)));
evalcond[3]=(((cj3*r02*x16758))+((cj1*x16760))+(((-1.0)*x16762*x16770)));
evalcond[4]=((((-1.0)*x16761*x16773))+(((-1.0)*x16770))+((x16758*x16764)));
evalcond[5]=(x16768+x16772+(((-1.0)*x16765*x16774))+((r21*x16763))+((r20*x16771))+((r21*x16759*x16766)));
evalcond[6]=(x16762+(((-1.0)*x16776))+((r21*x16765))+((r20*x16766))+((x16763*x16774))+(((-1.0)*x16767*x16777)));
evalcond[7]=(((r10*x16771))+(((-1.0)*cj1*cj2*x16769))+((cj0*x16762))+(((-1.0)*x16761*x16775))+((r11*x16763))+((x16764*x16775)));
evalcond[8]=((((-1.0)*x16768*x16769))+(((-1.0)*x16769*x16772))+((r10*x16766))+((x16761*x16777))+(((-1.0)*x16764*x16777))+((r11*x16765)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16778=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x16778.valid){
continue;
}
CheckValue<IkReal> x16779=IKPowWithIntegerCheck(r02,-1);
if(!x16779.valid){
continue;
}
if( IKabs((sj0*(x16778.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x16779.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*(x16778.value)))+IKsqr(((-1.0)*cj0*(x16779.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*(x16778.value)), ((-1.0)*cj0*(x16779.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16780=IKsin(j4);
IkReal x16781=IKcos(j4);
IkReal x16782=(cj2*sj0);
IkReal x16783=(cj5*r10);
IkReal x16784=(sj1*sj2);
IkReal x16785=(cj5*sj3);
IkReal x16786=(r11*sj5);
IkReal x16787=(cj3*cj5);
IkReal x16788=(cj3*sj5);
IkReal x16789=(r21*sj5);
IkReal x16790=(cj2*sj1);
IkReal x16791=((1.0)*cj0);
IkReal x16792=((1.0)*sj0);
IkReal x16793=(sj3*sj5);
IkReal x16794=(cj1*sj2);
IkReal x16795=((1.0)*x16780);
IkReal x16796=(r20*x16781);
IkReal x16797=(cj3*x16781);
IkReal x16798=((1.0)*cj1*cj2);
IkReal x16799=(sj3*x16781);
evalcond[0]=((((-1.0)*r02*x16781))+(((-1.0)*x16791)));
evalcond[1]=(((x16780*x16789))+(((-1.0)*cj5*r20*x16795)));
evalcond[2]=(((sj1*x16782))+((sj0*x16794))+(((-1.0)*r02*sj3*x16795)));
evalcond[3]=(((cj1*x16782))+(((-1.0)*x16784*x16792))+((cj3*r02*x16780)));
evalcond[4]=(((x16780*x16786))+(((-1.0)*x16792))+(((-1.0)*x16783*x16795)));
evalcond[5]=((((-1.0)*x16787*x16796))+x16794+x16790+((r21*x16781*x16788))+((r21*x16785))+((r20*x16793)));
evalcond[6]=(((x16785*x16796))+x16784+((r21*x16787))+(((-1.0)*x16798))+(((-1.0)*x16789*x16799))+((r20*x16788)));
evalcond[7]=(((x16786*x16797))+((r10*x16793))+((r11*x16785))+((cj0*x16784))+(((-1.0)*cj1*cj2*x16791))+(((-1.0)*x16783*x16797)));
evalcond[8]=((((-1.0)*x16791*x16794))+((x16783*x16799))+((r10*x16788))+((r11*x16787))+(((-1.0)*x16790*x16791))+(((-1.0)*x16786*x16799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16800=((1.0)*cj0);
IkReal x16801=((1.0)*cj5);
CheckValue<IkReal> x16802 = IKatan2WithCheck(IkReal((((r02*sj0))+(((-1.0)*r12*x16800)))),IkReal(((((-1.0)*r11*sj5*x16800))+(((-1.0)*r00*sj0*x16801))+((cj0*cj5*r10))+((r01*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16802.valid){
continue;
}
CheckValue<IkReal> x16803=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x16801))+(((-1.0)*r20*sj5)))),-1);
if(!x16803.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x16802.value)+(((1.5707963267949)*(x16803.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16804=IKsin(j4);
IkReal x16805=IKcos(j4);
IkReal x16806=(r11*sj5);
IkReal x16807=(cj2*sj0);
IkReal x16808=(cj5*r10);
IkReal x16809=(sj1*sj2);
IkReal x16810=(cj5*sj3);
IkReal x16811=((1.0)*sj0);
IkReal x16812=(cj3*cj5);
IkReal x16813=(cj3*sj5);
IkReal x16814=(r21*sj5);
IkReal x16815=(sj3*sj5);
IkReal x16816=(cj2*sj1);
IkReal x16817=((1.0)*cj0);
IkReal x16818=(cj1*sj2);
IkReal x16819=(r01*sj5);
IkReal x16820=((1.0)*x16805);
IkReal x16821=((1.0)*x16804);
IkReal x16822=(cj3*x16805);
IkReal x16823=(cj3*x16804);
IkReal x16824=((1.0)*cj1*cj2);
evalcond[0]=(((x16804*x16814))+(((-1.0)*r22*x16820))+(((-1.0)*cj5*r20*x16821)));
evalcond[1]=((((-1.0)*cj5*r00*x16821))+((x16804*x16819))+(((-1.0)*r02*x16820))+(((-1.0)*x16817)));
evalcond[2]=((((-1.0)*r12*x16820))+(((-1.0)*x16808*x16821))+(((-1.0)*x16811))+((x16804*x16806)));
evalcond[3]=(x16818+x16816+((r21*x16805*x16813))+((r20*x16815))+((r22*x16823))+((r21*x16810))+(((-1.0)*r20*x16812*x16820)));
evalcond[4]=(x16809+(((-1.0)*sj3*x16814*x16820))+((r20*x16813))+(((-1.0)*x16824))+((r21*x16812))+(((-1.0)*r22*sj3*x16821))+((r20*x16805*x16810)));
evalcond[5]=(((sj1*x16807))+((r00*x16805*x16810))+(((-1.0)*r01*x16815*x16820))+(((-1.0)*r02*sj3*x16821))+((sj0*x16818))+((r01*x16812))+((r00*x16813)));
evalcond[6]=((((-1.0)*r00*x16812*x16820))+(((-1.0)*x16809*x16811))+((cj1*x16807))+((r01*x16805*x16813))+((r01*x16810))+((r00*x16815))+((r02*x16823)));
evalcond[7]=(((r12*x16823))+(((-1.0)*cj3*x16808*x16820))+((r10*x16815))+((x16806*x16822))+((r11*x16810))+((cj0*x16809))+(((-1.0)*cj1*cj2*x16817)));
evalcond[8]=((((-1.0)*r12*sj3*x16821))+((r10*x16813))+(((-1.0)*sj3*x16806*x16820))+(((-1.0)*x16816*x16817))+(((-1.0)*x16817*x16818))+((r11*x16812))+((sj3*x16805*x16808)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16825=((1.0)*cj5);
CheckValue<IkReal> x16826=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x16825)))),-1);
if(!x16826.valid){
continue;
}
CheckValue<IkReal> x16827 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x16825)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16827.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16826.value)))+(x16827.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16828=IKsin(j4);
IkReal x16829=IKcos(j4);
IkReal x16830=(r11*sj5);
IkReal x16831=(cj2*sj0);
IkReal x16832=(cj5*r10);
IkReal x16833=(sj1*sj2);
IkReal x16834=(cj5*sj3);
IkReal x16835=((1.0)*sj0);
IkReal x16836=(cj3*cj5);
IkReal x16837=(cj3*sj5);
IkReal x16838=(r21*sj5);
IkReal x16839=(sj3*sj5);
IkReal x16840=(cj2*sj1);
IkReal x16841=((1.0)*cj0);
IkReal x16842=(cj1*sj2);
IkReal x16843=(r01*sj5);
IkReal x16844=((1.0)*x16829);
IkReal x16845=((1.0)*x16828);
IkReal x16846=(cj3*x16829);
IkReal x16847=(cj3*x16828);
IkReal x16848=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x16844))+((x16828*x16838))+(((-1.0)*cj5*r20*x16845)));
evalcond[1]=(((x16828*x16843))+(((-1.0)*x16841))+(((-1.0)*cj5*r00*x16845))+(((-1.0)*r02*x16844)));
evalcond[2]=((((-1.0)*x16832*x16845))+((x16828*x16830))+(((-1.0)*x16835))+(((-1.0)*r12*x16844)));
evalcond[3]=(((r21*x16834))+x16840+x16842+((r22*x16847))+((r20*x16839))+((r21*x16829*x16837))+(((-1.0)*r20*x16836*x16844)));
evalcond[4]=(((r21*x16836))+x16833+(((-1.0)*r22*sj3*x16845))+(((-1.0)*sj3*x16838*x16844))+((r20*x16829*x16834))+(((-1.0)*x16848))+((r20*x16837)));
evalcond[5]=(((sj0*x16842))+((r00*x16829*x16834))+((sj1*x16831))+(((-1.0)*r02*sj3*x16845))+((r00*x16837))+(((-1.0)*r01*x16839*x16844))+((r01*x16836)));
evalcond[6]=(((r02*x16847))+((r01*x16829*x16837))+((r00*x16839))+((r01*x16834))+(((-1.0)*r00*x16836*x16844))+((cj1*x16831))+(((-1.0)*x16833*x16835)));
evalcond[7]=(((r12*x16847))+((r10*x16839))+((cj0*x16833))+((r11*x16834))+(((-1.0)*cj1*cj2*x16841))+(((-1.0)*cj3*x16832*x16844))+((x16830*x16846)));
evalcond[8]=(((r10*x16837))+(((-1.0)*x16840*x16841))+((r11*x16836))+(((-1.0)*sj3*x16830*x16844))+((sj3*x16829*x16832))+(((-1.0)*r12*sj3*x16845))+(((-1.0)*x16841*x16842)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16849=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x16849.valid){
continue;
}
CheckValue<IkReal> x16850 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16850.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16849.value)))+(x16850.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16851=IKsin(j4);
IkReal x16852=IKcos(j4);
IkReal x16853=(r11*sj5);
IkReal x16854=(cj2*sj0);
IkReal x16855=(cj5*r10);
IkReal x16856=(sj1*sj2);
IkReal x16857=(cj5*sj3);
IkReal x16858=((1.0)*sj0);
IkReal x16859=(cj3*cj5);
IkReal x16860=(cj3*sj5);
IkReal x16861=(r21*sj5);
IkReal x16862=(sj3*sj5);
IkReal x16863=(cj2*sj1);
IkReal x16864=((1.0)*cj0);
IkReal x16865=(cj1*sj2);
IkReal x16866=(r01*sj5);
IkReal x16867=((1.0)*x16852);
IkReal x16868=((1.0)*x16851);
IkReal x16869=(cj3*x16852);
IkReal x16870=(cj3*x16851);
IkReal x16871=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x16867))+((x16851*x16861))+(((-1.0)*cj5*r20*x16868)));
evalcond[1]=((((-1.0)*cj5*r00*x16868))+((x16851*x16866))+(((-1.0)*x16864))+(((-1.0)*r02*x16867)));
evalcond[2]=((((-1.0)*x16858))+(((-1.0)*x16855*x16868))+((x16851*x16853))+(((-1.0)*r12*x16867)));
evalcond[3]=(((r21*x16857))+x16865+x16863+((r20*x16862))+((r22*x16870))+((r21*x16852*x16860))+(((-1.0)*r20*x16859*x16867)));
evalcond[4]=(((r21*x16859))+x16856+((r20*x16860))+(((-1.0)*r22*sj3*x16868))+((r20*x16852*x16857))+(((-1.0)*x16871))+(((-1.0)*sj3*x16861*x16867)));
evalcond[5]=((((-1.0)*r01*x16862*x16867))+((sj1*x16854))+((r00*x16852*x16857))+((r00*x16860))+((sj0*x16865))+(((-1.0)*r02*sj3*x16868))+((r01*x16859)));
evalcond[6]=(((r01*x16852*x16860))+((r02*x16870))+(((-1.0)*x16856*x16858))+((cj1*x16854))+(((-1.0)*r00*x16859*x16867))+((r00*x16862))+((r01*x16857)));
evalcond[7]=((((-1.0)*cj1*cj2*x16864))+(((-1.0)*cj3*x16855*x16867))+((r10*x16862))+((r11*x16857))+((cj0*x16856))+((x16853*x16869))+((r12*x16870)));
evalcond[8]=(((r10*x16860))+((r11*x16859))+(((-1.0)*r12*sj3*x16868))+((sj3*x16852*x16855))+(((-1.0)*x16863*x16864))+(((-1.0)*x16864*x16865))+(((-1.0)*sj3*x16853*x16867)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16872=cj5*cj5;
IkReal x16873=r21*r21;
IkReal x16874=r20*r20;
IkReal x16875=(r20*r21);
IkReal x16876=((1.0)*cj3);
IkReal x16877=((1.0)*cj5);
IkReal x16878=(cj1*sj2);
IkReal x16879=(cj5*sj5);
IkReal x16880=(sj3*sj5);
IkReal x16881=(cj2*sj1);
IkReal x16882=(r21*sj5);
CheckValue<IkReal> x16883 = IKatan2WithCheck(IkReal((((cj5*r21*r22*sj3))+((r22*x16878))+((r20*r22*x16880))+((r22*x16881)))),IkReal((((x16878*x16882))+(((-1.0)*r20*x16877*x16878))+((sj3*x16875))+(((-1.0)*r20*x16877*x16881))+((sj3*x16873*x16879))+(((-2.0)*sj3*x16872*x16875))+((x16881*x16882))+(((-1.0)*x16874*x16877*x16880)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16883.valid){
continue;
}
CheckValue<IkReal> x16884=IKPowWithIntegerCheck(IKsign(((((-1.0)*x16873*x16876))+(((2.0)*cj3*x16875*x16879))+(((-1.0)*x16872*x16874*x16876))+((cj3*x16872*x16873))+(((-1.0)*x16876*(r22*r22))))),-1);
if(!x16884.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x16883.value)+(((1.5707963267949)*(x16884.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x16885=IKsin(j4);
IkReal x16886=IKcos(j4);
IkReal x16887=(cj3*r21);
IkReal x16888=(r21*sj5);
IkReal x16889=(r20*sj5);
IkReal x16890=(cj5*r20);
IkReal x16891=((1.0)*x16886);
IkReal x16892=((1.0)*x16885);
evalcond[0]=((((-1.0)*x16890*x16892))+((x16885*x16888))+(((-1.0)*r22*x16891)));
evalcond[1]=(((cj2*sj1))+((cj5*r21*sj3))+((cj1*sj2))+(((-1.0)*cj3*x16890*x16891))+((sj3*x16889))+((sj5*x16886*x16887))+((cj3*r22*x16885)));
evalcond[2]=(((cj5*x16887))+(((-1.0)*sj3*x16888*x16891))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*x16892))+((cj3*x16889))+((sj3*x16886*x16890)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x16893=(sj4*sj5);
IkReal x16894=((1.0)*cj4);
IkReal x16895=((1.0)*cj5*sj4);
if( IKabs((((r11*x16893))+(((-1.0)*r12*x16894))+(((-1.0)*r10*x16895)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x16893))+(((-1.0)*r02*x16894))+(((-1.0)*r00*x16895)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x16893))+(((-1.0)*r12*x16894))+(((-1.0)*r10*x16895))))+IKsqr((((r01*x16893))+(((-1.0)*r02*x16894))+(((-1.0)*r00*x16895))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r11*x16893))+(((-1.0)*r12*x16894))+(((-1.0)*r10*x16895))), (((r01*x16893))+(((-1.0)*r02*x16894))+(((-1.0)*r00*x16895))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x16896=IKsin(j0);
IkReal x16897=IKcos(j0);
IkReal x16898=(r02*sj4);
IkReal x16899=(cj3*r10);
IkReal x16900=((1.0)*sj3);
IkReal x16901=(r12*sj4);
IkReal x16902=(cj3*r00);
IkReal x16903=((1.0)*sj2);
IkReal x16904=((0.39225)*sj2);
IkReal x16905=(r11*sj5);
IkReal x16906=(cj5*r01);
IkReal x16907=(cj5*r10);
IkReal x16908=(cj4*sj3);
IkReal x16909=((0.39225)*cj2);
IkReal x16910=(cj3*cj4);
IkReal x16911=(r01*sj5);
IkReal x16912=(r00*sj5);
IkReal x16913=((1.0)*cj2);
IkReal x16914=(cj5*r11);
IkReal x16915=((1.0)*sj4);
IkReal x16916=(cj5*r00);
IkReal x16917=(r10*sj5);
IkReal x16918=((1.0)*cj4);
IkReal x16919=(cj5*x16918);
IkReal x16920=(sj1*x16896);
IkReal x16921=(cj1*x16897);
IkReal x16922=(cj1*x16896);
IkReal x16923=(sj1*x16897);
evalcond[0]=((((-1.0)*r02*x16918))+((sj4*x16911))+(((-1.0)*x16915*x16916))+(((-1.0)*x16897)));
evalcond[1]=(((sj4*x16905))+(((-1.0)*r12*x16918))+(((-1.0)*x16907*x16915))+(((-1.0)*x16896)));
evalcond[2]=((((-0.10915)*x16897))+(((-1.0)*x16909*x16922))+((x16904*x16920))+(((-1.0)*px))+(((-0.425)*x16922))+(((-0.09465)*x16912))+(((-0.09465)*x16906)));
evalcond[3]=((((-1.0)*x16904*x16923))+(((-0.10915)*x16896))+((x16909*x16921))+(((-1.0)*py))+(((0.425)*x16921))+(((-0.09465)*x16917))+(((-0.09465)*x16914)));
evalcond[4]=((((-1.0)*cj4*x16900*x16911))+((x16908*x16916))+((cj3*x16906))+((cj2*x16920))+(((-1.0)*x16898*x16900))+((sj2*x16922))+((sj5*x16902)));
evalcond[5]=(((sj3*x16906))+((cj3*x16898))+((cj2*x16922))+(((-1.0)*x16902*x16919))+((sj3*x16912))+((x16910*x16911))+(((-1.0)*x16903*x16920)));
evalcond[6]=(((x16905*x16910))+((cj3*x16901))+(((-1.0)*x16913*x16921))+((sj2*x16923))+(((-1.0)*x16899*x16919))+((sj3*x16914))+((sj3*x16917)));
evalcond[7]=(((cj3*x16914))+((sj5*x16899))+(((-1.0)*x16913*x16923))+(((-1.0)*x16900*x16901))+(((-1.0)*cj4*x16900*x16905))+((x16907*x16908))+(((-1.0)*x16903*x16921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16924=cj5*cj5;
IkReal x16925=r21*r21;
IkReal x16926=r20*r20;
IkReal x16927=(r20*r21);
IkReal x16928=(sj1*sj2);
IkReal x16929=(r21*sj5);
IkReal x16930=(cj1*cj2);
IkReal x16931=(cj5*r20);
IkReal x16932=(cj5*sj5);
IkReal x16933=(cj3*r22);
IkReal x16934=(sj3*x16925);
CheckValue<IkReal> x16935 = IKatan2WithCheck(IkReal((((r22*x16928))+((r20*sj5*x16933))+((cj5*r21*x16933))+(((-1.0)*r22*x16930)))),IkReal((((x16930*x16931))+(((-1.0)*cj3*x16926*x16932))+((x16928*x16929))+((cj3*x16925*x16932))+((cj3*x16927))+(((-1.0)*x16928*x16931))+(((-1.0)*x16929*x16930))+(((-2.0)*cj3*x16924*x16927)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16935.valid){
continue;
}
CheckValue<IkReal> x16936=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+(((-2.0)*sj3*x16927*x16932))+(((-1.0)*x16924*x16934))+((sj3*x16924*x16926))+x16934)),-1);
if(!x16936.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x16935.value)+(((1.5707963267949)*(x16936.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x16937=IKsin(j4);
IkReal x16938=IKcos(j4);
IkReal x16939=(cj3*r21);
IkReal x16940=(r21*sj5);
IkReal x16941=(r20*sj5);
IkReal x16942=(cj5*r20);
IkReal x16943=((1.0)*x16938);
IkReal x16944=((1.0)*x16937);
evalcond[0]=((((-1.0)*r22*x16943))+((x16937*x16940))+(((-1.0)*x16942*x16944)));
evalcond[1]=(((cj2*sj1))+((sj3*x16941))+((cj3*r22*x16937))+((cj5*r21*sj3))+((cj1*sj2))+((sj5*x16938*x16939))+(((-1.0)*cj3*x16942*x16943)));
evalcond[2]=((((-1.0)*r22*sj3*x16944))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*sj3*x16940*x16943))+((sj3*x16938*x16942))+((cj3*x16941))+((cj5*x16939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x16945=(sj4*sj5);
IkReal x16946=((1.0)*cj4);
IkReal x16947=((1.0)*cj5*sj4);
if( IKabs(((((-1.0)*r10*x16947))+(((-1.0)*r12*x16946))+((r11*x16945)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x16947))+(((-1.0)*r02*x16946))+((r01*x16945)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x16947))+(((-1.0)*r12*x16946))+((r11*x16945))))+IKsqr(((((-1.0)*r00*x16947))+(((-1.0)*r02*x16946))+((r01*x16945))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x16947))+(((-1.0)*r12*x16946))+((r11*x16945))), ((((-1.0)*r00*x16947))+(((-1.0)*r02*x16946))+((r01*x16945))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x16948=IKsin(j0);
IkReal x16949=IKcos(j0);
IkReal x16950=(r02*sj4);
IkReal x16951=(cj3*r10);
IkReal x16952=((1.0)*sj3);
IkReal x16953=(r12*sj4);
IkReal x16954=(cj3*r00);
IkReal x16955=((1.0)*sj2);
IkReal x16956=((0.39225)*sj2);
IkReal x16957=(r11*sj5);
IkReal x16958=(cj5*r01);
IkReal x16959=(cj5*r10);
IkReal x16960=(cj4*sj3);
IkReal x16961=((0.39225)*cj2);
IkReal x16962=(cj3*cj4);
IkReal x16963=(r01*sj5);
IkReal x16964=(r00*sj5);
IkReal x16965=((1.0)*cj2);
IkReal x16966=(cj5*r11);
IkReal x16967=((1.0)*sj4);
IkReal x16968=(cj5*r00);
IkReal x16969=(r10*sj5);
IkReal x16970=((1.0)*cj4);
IkReal x16971=(cj5*x16970);
IkReal x16972=(sj1*x16948);
IkReal x16973=(cj1*x16949);
IkReal x16974=(cj1*x16948);
IkReal x16975=(sj1*x16949);
evalcond[0]=((((-1.0)*r02*x16970))+(((-1.0)*x16949))+((sj4*x16963))+(((-1.0)*x16967*x16968)));
evalcond[1]=((((-1.0)*x16959*x16967))+(((-1.0)*r12*x16970))+(((-1.0)*x16948))+((sj4*x16957)));
evalcond[2]=((((-0.09465)*x16958))+(((-1.0)*x16961*x16974))+(((-0.425)*x16974))+(((-0.10915)*x16949))+(((-1.0)*px))+((x16956*x16972))+(((-0.09465)*x16964)));
evalcond[3]=((((0.425)*x16973))+(((-0.10915)*x16948))+(((-1.0)*py))+((x16961*x16973))+(((-1.0)*x16956*x16975))+(((-0.09465)*x16966))+(((-0.09465)*x16969)));
evalcond[4]=(((sj2*x16974))+(((-1.0)*cj4*x16952*x16963))+((x16960*x16968))+((cj3*x16958))+((sj5*x16954))+(((-1.0)*x16950*x16952))+((cj2*x16972)));
evalcond[5]=(((x16962*x16963))+((sj3*x16964))+((sj3*x16958))+((cj3*x16950))+(((-1.0)*x16954*x16971))+((cj2*x16974))+(((-1.0)*x16955*x16972)));
evalcond[6]=(((x16957*x16962))+(((-1.0)*x16951*x16971))+((sj3*x16966))+((sj3*x16969))+((sj2*x16975))+(((-1.0)*x16965*x16973))+((cj3*x16953)));
evalcond[7]=((((-1.0)*cj4*x16952*x16957))+((x16959*x16960))+(((-1.0)*x16965*x16975))+(((-1.0)*x16952*x16953))+((sj5*x16951))+(((-1.0)*x16955*x16973))+((cj3*x16966)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - ur5 (ccb4e4e466028233936b72ac8cd6b8de)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
